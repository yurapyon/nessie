pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub extern fn epoxy_extension_in_string(extension_list: [*c]const u8, ext: [*c]const u8) bool;
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
pub const __fsid_t = extern struct {
    __val: [2]c_int,
};
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*anyopaque;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const __gwchar_t = c_int;
pub const imaxdiv_t = extern struct {
    quot: c_long,
    rem: c_long,
};
pub extern fn imaxabs(__n: intmax_t) intmax_t;
pub extern fn imaxdiv(__numer: intmax_t, __denom: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) intmax_t;
pub extern fn strtoumax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) uintmax_t;
pub extern fn wcstoimax(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c][*c]__gwchar_t, __base: c_int) intmax_t;
pub extern fn wcstoumax(noalias __nptr: [*c]const __gwchar_t, noalias __endptr: [*c][*c]__gwchar_t, __base: c_int) uintmax_t;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = extern struct {
    __clang_max_align_nonce1: c_longlong align(8),
    __clang_max_align_nonce2: c_longdouble align(16),
};
pub const khronos_int8_t = i8;
pub const khronos_int16_t = i16;
pub const khronos_int32_t = i32;
pub const khronos_int64_t = i64;
pub const khronos_uint8_t = u8;
pub const khronos_uint16_t = u16;
pub const khronos_uint32_t = u32;
pub const khronos_uint64_t = u64;
pub const khronos_float_t = f32;
pub const khronos_intptr_t = c_long;
pub const khronos_uintptr_t = c_ulong;
pub const khronos_ssize_t = c_long;
pub const khronos_usize_t = c_ulong;
pub const khronos_utime_nanoseconds_t = u64;
pub const khronos_stime_nanoseconds_t = i64;
pub const KHRONOS_FALSE: c_int = 0;
pub const KHRONOS_TRUE: c_int = 1;
pub const KHRONOS_BOOLEAN_ENUM_FORCE_SIZE: c_int = 2147483647;
pub const khronos_boolean_enum_t = c_uint;
pub const GLenum = c_uint;
pub const GLboolean = u8;
pub const GLbitfield = c_uint;
pub const GLvoid = anyopaque;
pub const GLbyte = khronos_int8_t;
pub const GLubyte = khronos_uint8_t;
pub const GLshort = khronos_int16_t;
pub const GLushort = khronos_uint16_t;
pub const GLint = c_int;
pub const GLuint = c_uint;
pub const GLclampx = khronos_int32_t;
pub const GLsizei = c_int;
pub const GLfloat = khronos_float_t;
pub const GLclampf = khronos_float_t;
pub const GLdouble = f64;
pub const GLclampd = f64;
pub const GLeglClientBufferEXT = ?*anyopaque;
pub const GLeglImageOES = ?*anyopaque;
pub const GLchar = u8;
pub const GLcharARB = u8;
pub const GLhandleARB = c_uint;
pub const GLhalf = khronos_uint16_t;
pub const GLhalfARB = khronos_uint16_t;
pub const GLfixed = khronos_int32_t;
pub const GLintptr = khronos_intptr_t;
pub const GLintptrARB = khronos_intptr_t;
pub const GLsizeiptr = khronos_ssize_t;
pub const GLsizeiptrARB = khronos_ssize_t;
pub const GLint64 = khronos_int64_t;
pub const GLint64EXT = khronos_int64_t;
pub const GLuint64 = khronos_uint64_t;
pub const GLuint64EXT = khronos_uint64_t;
pub const struct___GLsync = opaque {};
pub const GLsync = ?*struct___GLsync;
pub const struct__cl_context = opaque {};
pub const struct__cl_event = opaque {};
pub const GLDEBUGPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.C) void;
pub const GLDEBUGPROCARB = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.C) void;
pub const GLDEBUGPROCKHR = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.C) void;
pub const GLDEBUGPROCAMD = ?fn (GLuint, GLenum, GLenum, GLsizei, [*c]const GLchar, ?*anyopaque) callconv(.C) void;
pub const GLhalfNV = c_ushort;
pub const GLvdpauSurfaceNV = GLintptr;
pub const GLVULKANPROCNV = ?fn () callconv(.C) void;
pub const PFNGLACCUMPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLACCUMXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ?fn (GLuint, GLuint64, GLuint) callconv(.C) GLboolean;
pub const PFNGLACTIVEPROGRAMEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLACTIVESHADERPROGRAMPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLACTIVESHADERPROGRAMEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLACTIVESTENCILFACEEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLACTIVETEXTUREPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLACTIVETEXTUREARBPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLACTIVEVARYINGNVPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP1ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP2ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP3ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFUNCPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLALPHAFUNCQCOMPROC = ?fn (GLenum, GLclampf) callconv(.C) void;
pub const PFNGLALPHAFUNCXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLALPHAFUNCXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = ?fn () callconv(.C) void;
pub const PFNGLAPPLYTEXTUREEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLAREPROGRAMSRESIDENTNVPROC = ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLARETEXTURESRESIDENTPROC = ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLARETEXTURESRESIDENTEXTPROC = ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLARRAYELEMENTPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLARRAYELEMENTEXTPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLARRAYOBJECTATIPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLASYNCCOPYBUFFERSUBDATANVXPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLASYNCCOPYIMAGESUBDATANVXPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLASYNCMARKERSGIXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLATTACHOBJECTARBPROC = ?fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLATTACHSHADERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBEGINPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINFRAGMENTSHADERATIPROC = ?fn () callconv(.C) void;
pub const PFNGLBEGINOCCLUSIONQUERYNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINPERFMONITORAMDPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINPERFQUERYINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYARBPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYINDEXEDPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINVERTEXSHADEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLBEGINVIDEOCAPTURENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONPROC = ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONARBPROC = ?fn (GLhandleARB, GLuint, [*c]const GLcharARB) callconv(.C) void;
pub const PFNGLBINDBUFFERPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERARBPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEEXTPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERBASENVPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETEXTPROC = ?fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETNVPROC = ?fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEPROC = ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEEXTPROC = ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGENVPROC = ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERSBASEPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERSRANGEPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONPROC = ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONEXTPROC = ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ?fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC = ?fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGMENTSHADERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDFRAMEBUFFERPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDFRAMEBUFFEREXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDFRAMEBUFFEROESPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREPROC = ?fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREEXTPROC = ?fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTURESPROC = ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDLIGHTPARAMETEREXTPROC = ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDMATERIALPARAMETEREXTPROC = ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDMULTITEXTUREEXTPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDPARAMETEREXTPROC = ?fn (GLenum) callconv(.C) GLuint;
pub const PFNGLBINDPROGRAMARBPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDPROGRAMNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDPROGRAMPIPELINEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDPROGRAMPIPELINEEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFERPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFEREXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFEROESPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDSAMPLERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDSAMPLERSPROC = ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDSHADINGRATEIMAGENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDTEXGENPARAMETEREXTPROC = ?fn (GLenum, GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXTUREPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREUNITPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXTURESPROC = ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYAPPLEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYOESPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERPROC = ?fn (GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERSPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLBINDVERTEXSHADEREXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = ?fn (GLuint, GLuint, GLenum, GLintptrARB) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = ?fn (GLuint, GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINORMAL3BEXTPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLBINORMAL3BVEXTPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLBINORMAL3DEXTPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLBINORMAL3DVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLBINORMAL3FEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBINORMAL3FVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLBINORMAL3IEXTPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLBINORMAL3IVEXTPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLBINORMAL3SEXTPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLBINORMAL3SVEXTPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBINORMALPOINTEREXTPROC = ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBITMAPPROC = ?fn (GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLBITMAPXOESPROC = ?fn (GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLBLENDBARRIERPROC = ?fn () callconv(.C) void;
pub const PFNGLBLENDBARRIERKHRPROC = ?fn () callconv(.C) void;
pub const PFNGLBLENDBARRIERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLBLENDCOLORPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBLENDCOLOREXTPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBLENDCOLORXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLBLENDEQUATIONPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONINDEXEDAMDPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONOESPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEOESPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIARBPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIEXTPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIOESPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIARBPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIOESPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCINDEXEDAMDPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEEXTPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINGRPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEOESPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIARBPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIEXTPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIOESPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIARBPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIEXTPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIOESPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERPROC = ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERANGLEPROC = ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFEREXTPROC = ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERNVPROC = ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBLITNAMEDFRAMEBUFFERPROC = ?fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBUFFERADDRESSRANGENVPROC = ?fn (GLenum, GLuint, GLuint64EXT, GLsizeiptr) callconv(.C) void;
pub const PFNGLBUFFERATTACHMEMORYNVPROC = ?fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERDATAPROC = ?fn (GLenum, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLBUFFERDATAARBPROC = ?fn (GLenum, GLsizeiptrARB, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLBUFFERPAGECOMMITMENTARBPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLBUFFERPARAMETERIAPPLEPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEPROC = ?fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEEXTPROC = ?fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEMEMEXTPROC = ?fn (GLenum, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAPROC = ?fn (GLenum, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAARBPROC = ?fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCALLCOMMANDLISTNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCALLLISTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCALLLISTSPROC = ?fn (GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSPROC = ?fn (GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = ?fn (GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKFRAMEBUFFERSTATUSOESPROC = ?fn (GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = ?fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = ?fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLCLAMPCOLORPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLAMPCOLORARBPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLEARPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLCLEARACCUMPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCLEARACCUMXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARBUFFERDATAPROC = ?fn (GLenum, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARBUFFERSUBDATAPROC = ?fn (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARBUFFERFIPROC = ?fn (GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLCLEARBUFFERFVPROC = ?fn (GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARBUFFERIVPROC = ?fn (GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARBUFFERUIVPROC = ?fn (GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARCOLORPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCLEARCOLORIIEXTPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLCLEARCOLORIUIEXTPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCLEARCOLORXPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARCOLORXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARDEPTHPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLCLEARDEPTHDNVPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLCLEARDEPTHFPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLCLEARDEPTHFOESPROC = ?fn (GLclampf) callconv(.C) void;
pub const PFNGLCLEARDEPTHXPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLCLEARDEPTHXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLCLEARINDEXPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAPROC = ?fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAEXTPROC = ?fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = ?fn (GLuint, GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = ?fn (GLuint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = ?fn (GLuint, GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = ?fn (GLuint, GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC = ?fn (GLsizei, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARSTENCILPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLCLEARTEXIMAGEPROC = ?fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARTEXIMAGEEXTPROC = ?fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARTEXSUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLEARTEXSUBIMAGEEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCLIENTACTIVETEXTUREPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTACTIVETEXTUREARBPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTATTRIBDEFAULTEXTPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLCLIENTWAITSYNCPROC = ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub const PFNGLCLIENTWAITSYNCAPPLEPROC = ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub const PFNGLCLIPCONTROLPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLIPCONTROLEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLIPPLANEPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLCLIPPLANEFPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLIPPLANEFIMGPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLIPPLANEFOESPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLIPPLANEXPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCLIPPLANEXIMGPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCLIPPLANEXOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLOR3BPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLCOLOR3BVPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLCOLOR3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLCOLOR3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLCOLOR3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLCOLOR3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLCOLOR3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLCOLOR3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLCOLOR3UBPROC = ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLCOLOR3UBVPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLCOLOR3UIPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLOR3UIVPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLOR3USPROC = ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLCOLOR3USVPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLCOLOR3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4BPROC = ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLCOLOR4BVPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLCOLOR4DPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLCOLOR4DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLCOLOR4FPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR4HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR4IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLCOLOR4IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLCOLOR4SPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLCOLOR4SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLCOLOR4UBPROC = ?fn (GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FSUNPROC = ?fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FVSUNPROC = ?fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FSUNPROC = ?fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FVSUNPROC = ?fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLCOLOR4UIPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLOR4UIVPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLOR4USPROC = ?fn (GLushort, GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLCOLOR4USVPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLCOLOR4XPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLORFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP1ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP2ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP3ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORMASKPROC = ?fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMASKINDEXEDEXTPROC = ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMASKIPROC = ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMASKIEXTPROC = ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMASKIOESPROC = ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMATERIALPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOLORP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOLORP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLORP4UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOLORP4UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLORPOINTERPROC = ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLCOLORPOINTERVINTELPROC = ?fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORSUBTABLEPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORSUBTABLEEXTPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORTABLEPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORTABLEEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERFVSGIPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERIVSGIPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOLORTABLESGIPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMBINERINPUTNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOMBINEROUTPUTNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFNVPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFVNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERIVNVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOMMANDLISTSEGMENTSNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOMPILECOMMANDLISTNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCOMPILESHADERPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCOMPILESHADERARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLCOMPILESHADERINCLUDEARBPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DOESPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = ?fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER1DPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER1DEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER2DPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER2DEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFEXTPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIEXTPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOPYBUFFERSUBDATAPROC = ?fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYBUFFERSUBDATANVPROC = ?fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYCOLORSUBTABLEPROC = ?fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCOLORSUBTABLEEXTPROC = ?fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCOLORTABLEPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCOLORTABLESGIPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATANVPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAOESPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYPATHNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOPYPIXELSPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE1DPROC = ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE1DEXTPROC = ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE2DPROC = ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE2DEXTPROC = ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE1DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE2DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DOESPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTURELEVELSAPPLEPROC = ?fn (GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOVERFILLPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERFILLPATHNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERAGEMASKNVPROC = ?fn (GLboolean) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONTABLENVPROC = ?fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERAGEOPERATIONNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCREATEBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATECOMMANDLISTSNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEFRAMEBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEMEMORYOBJECTSEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPERFQUERYINTELPROC = ?fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRAMPROC = ?fn () callconv(.C) GLuint;
pub const PFNGLCREATEPROGRAMOBJECTARBPROC = ?fn () callconv(.C) GLhandleARB;
pub const PFNGLCREATEPROGRAMPIPELINESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRESSFENCENVXPROC = ?fn () callconv(.C) GLuint;
pub const PFNGLCREATEQUERIESPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATERENDERBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESAMPLERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESHADERPROC = ?fn (GLenum) callconv(.C) GLuint;
pub const PFNGLCREATESHADEROBJECTARBPROC = ?fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLCREATESHADERPROGRAMEXTPROC = ?fn (GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLCREATESHADERPROGRAMVPROC = ?fn (GLenum, GLsizei, [*c]const [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLCREATESHADERPROGRAMVEXTPROC = ?fn (GLenum, GLsizei, [*c][*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLCREATESTATESNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESYNCFROMCLEVENTARBPROC = ?fn (?*struct__cl_context, ?*struct__cl_event, GLbitfield) callconv(.C) GLsync;
pub const PFNGLCREATETEXTURESPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATETRANSFORMFEEDBACKSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEVERTEXARRAYSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCULLFACEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCULLPARAMETERDVEXTPROC = ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLCULLPARAMETERFVEXTPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLCURRENTPALETTEMATRIXARBPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLCURRENTPALETTEMATRIXOESPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKPROC = ?fn (GLDEBUGPROC, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKAMDPROC = ?fn (GLDEBUGPROCAMD, ?*anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKARBPROC = ?fn (GLDEBUGPROCARB, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKKHRPROC = ?fn (GLDEBUGPROCKHR, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLKHRPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEENABLEAMDPROC = ?fn (GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTAMDPROC = ?fn (GLenum, GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTARBPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTKHRPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEFORMSGIXPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLDEFORMATIONMAP3DSGIXPROC = ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEFORMATIONMAP3FSGIXPROC = ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDELETEASYNCMARKERSSGIXPROC = ?fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDELETEBUFFERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEBUFFERSARBPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETECOMMANDLISTSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESAPPLEPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAGMENTSHADERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSOESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETELISTSPROC = ?fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDELETEMEMORYOBJECTSEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETENAMEDSTRINGARBPROC = ?fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDELETENAMESAMDPROC = ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEOBJECTARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLDELETEOCCLUSIONQUERIESNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPATHSNVPROC = ?fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDELETEPERFMONITORSAMDPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEPERFQUERYINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMPIPELINESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMPIPELINESEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSARBPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESARBPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERYRESOURCETAGNVPROC = ?fn (GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSOESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESAMPLERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESEMAPHORESEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESHADERPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETESTATESNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESYNCPROC = ?fn (GLsync) callconv(.C) void;
pub const PFNGLDELETESYNCAPPLEPROC = ?fn (GLsync) callconv(.C) void;
pub const PFNGLDELETETEXTURESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETETEXTURESEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSAPPLEPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSOESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXSHADEREXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDEPTHBOUNDSEXTPROC = ?fn (GLclampd, GLclampd) callconv(.C) void;
pub const PFNGLDEPTHBOUNDSDNVPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHFUNCPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLDEPTHMASKPROC = ?fn (GLboolean) callconv(.C) void;
pub const PFNGLDEPTHRANGEPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYFVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYFVOESPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDFNVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDFOESPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEDNVPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEFPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEFOESPROC = ?fn (GLclampf, GLclampf) callconv(.C) void;
pub const PFNGLDEPTHRANGEXPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLDEPTHRANGEXOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLDETACHOBJECTARBPROC = ?fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLDETACHSHADERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDETAILTEXFUNCSGISPROC = ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDISABLEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEDRIVERCONTROLQCOMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBAPPLEPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEINVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEIOESPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISCARDFRAMEBUFFEREXTPROC = ?fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEINDIRECTPROC = ?fn (GLintptr) callconv(.C) void;
pub const PFNGLDRAWARRAYSPROC = ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSEXTPROC = ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINDIRECTPROC = ?fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDANGLEPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDARBPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = ?fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC = ?fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDEXTPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDNVPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWBUFFERPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSARBPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSATIPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSEXTPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSINDEXEDEXTPROC = ?fn (GLint, [*c]const GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLDRAWBUFFERSNVPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSADDRESSNVPROC = ?fn (GLenum, [*c]const GLuint64, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSNVPROC = ?fn (GLenum, GLuint, [*c]const GLintptr, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = ?fn ([*c]const GLuint64, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESNVPROC = ?fn (GLuint, [*c]const GLintptr, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYAPPLEPROC = ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYATIPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWELEMENTSBASEVERTEXPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSBASEVERTEXEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSBASEVERTEXOESPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINDIRECTPROC = ?fn (GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDANGLEPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDARBPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDNVPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLDRAWMESHARRAYSSUNPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSINDIRECTNVPROC = ?fn (GLintptr) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWPIXELSPROC = ?fn (GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = ?fn (GLenum, GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYATIPROC = ?fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSEXTPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLDRAWTEXFOESPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDRAWTEXFVOESPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLDRAWTEXIOESPROC = ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLDRAWTEXIVOESPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLDRAWTEXSOESPROC = ?fn (GLshort, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLDRAWTEXSVOESPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLDRAWTEXTURENVPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDRAWTEXXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLDRAWTEXXVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = ?fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC = ?fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = ?fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWVKIMAGENVPROC = ?fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = ?fn (GLenum, GLeglImageOES) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ?fn (GLenum, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = ?fn (GLenum, GLeglImageOES) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ?fn (GLuint, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLEDGEFLAGPROC = ?fn (GLboolean) callconv(.C) void;
pub const PFNGLEDGEFLAGFORMATNVPROC = ?fn (GLsizei) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTERPROC = ?fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTEREXTPROC = ?fn (GLsizei, GLsizei, [*c]const GLboolean) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTERLISTIBMPROC = ?fn (GLint, [*c][*c]const GLboolean, GLint) callconv(.C) void;
pub const PFNGLEDGEFLAGVPROC = ?fn ([*c]const GLboolean) callconv(.C) void;
pub const PFNGLELEMENTPOINTERAPPLEPROC = ?fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLELEMENTPOINTERATIPROC = ?fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLENABLEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEDRIVERCONTROLQCOMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBAPPLEPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYARBPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEINVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEIOESPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDPROC = ?fn () callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERPROC = ?fn () callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVXPROC = ?fn () callconv(.C) void;
pub const PFNGLENDFRAGMENTSHADERATIPROC = ?fn () callconv(.C) void;
pub const PFNGLENDLISTPROC = ?fn () callconv(.C) void;
pub const PFNGLENDOCCLUSIONQUERYNVPROC = ?fn () callconv(.C) void;
pub const PFNGLENDPERFMONITORAMDPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENDPERFQUERYINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENDQUERYPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENDQUERYARBPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENDQUERYEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENDQUERYINDEXEDPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDTILINGQCOMPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKPROC = ?fn () callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKEXTPROC = ?fn () callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKNVPROC = ?fn () callconv(.C) void;
pub const PFNGLENDVERTEXSHADEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLENDVIDEOCAPTURENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLEVALCOORD1DPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLEVALCOORD1DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLEVALCOORD1FPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLEVALCOORD1FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLEVALCOORD1XOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD1XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLEVALCOORD2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLEVALCOORD2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLEVALCOORD2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLEVALCOORD2XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLEVALMAPSNVPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLEVALMESH1PROC = ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLEVALMESH2PROC = ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLEVALPOINT1PROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLEVALPOINT2PROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLEVALUATEDEPTHVALUESARBPROC = ?fn () callconv(.C) void;
pub const PFNGLEXECUTEPROGRAMNVPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLEXTGETBUFFERPOINTERVQCOMPROC = ?fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLEXTGETBUFFERSQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETFRAMEBUFFERSQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC = ?fn (GLuint, GLenum, [*c]GLchar, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETPROGRAMSQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETRENDERBUFFERSQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETSHADERSQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC = ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETTEXSUBIMAGEQCOMPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLEXTGETTEXTURESQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTISPROGRAMBINARYQCOMPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLEXTRACTCOMPONENTEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLFEEDBACKBUFFERPROC = ?fn (GLsizei, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFEEDBACKBUFFERXOESPROC = ?fn (GLsizei, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFENCESYNCPROC = ?fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub const PFNGLFENCESYNCAPPLEPROC = ?fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub const PFNGLFINALCOMBINERINPUTNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLFINISHPROC = ?fn () callconv(.C) void;
pub const PFNGLFINISHASYNCSGIXPROC = ?fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLFINISHFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLFINISHFENCENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLFINISHOBJECTAPPLEPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFINISHTEXTURESUNXPROC = ?fn () callconv(.C) void;
pub const PFNGLFLUSHPROC = ?fn () callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC = ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHPIXELDATARANGENVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLFLUSHRASTERSGIXPROC = ?fn () callconv(.C) void;
pub const PFNGLFLUSHSTATICDATAIBMPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = ?fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLFLUSHVERTEXARRAYRANGENVPROC = ?fn () callconv(.C) void;
pub const PFNGLFOGCOORDFORMATNVPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERPROC = ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTEREXTPROC = ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERLISTIBMPROC = ?fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLFOGCOORDDPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDEXTPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDFPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFEXTPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDHNVPROC = ?fn (GLhalfNV) callconv(.C) void;
pub const PFNGLFOGCOORDHVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLFOGFUNCSGISPROC = ?fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFOGFVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFOGIVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFOGXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLFOGXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLFOGXVPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFOGXVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFRAGMENTCOLORMATERIALSGIXPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAGMENTCOVERAGECOLORNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFSGIXPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELISGIXPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFSGIXPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTISGIXPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTIVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFSGIXPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALISGIXPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALIVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAMETERMINATORGREMEDYPROC = ?fn () callconv(.C) void;
pub const PFNGLFRAMEZOOMSGIXPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC = ?fn () callconv(.C) void;
pub const PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC = ?fn (GLuint, GLuint, GLuint, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC = ?fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIMESAPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERREADBUFFEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFERPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEROESPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?fn (GLenum, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE1DPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DOESPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DOESPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREARBPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREEXTPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREOESPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFREEOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLFRONTFACEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLFRUSTUMPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLFRUSTUMFPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLFRUSTUMFOESPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLFRUSTUMXPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLFRUSTUMXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLGENASYNCMARKERSSGIXPROC = ?fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLGENBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENBUFFERSARBPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFENCESAPPLEPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFENCESNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFRAGMENTSHADERSATIPROC = ?fn (GLuint) callconv(.C) GLuint;
pub const PFNGLGENFRAMEBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSOESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENLISTSPROC = ?fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLGENNAMESAMDPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENOCCLUSIONQUERIESNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPATHSNVPROC = ?fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLGENPERFMONITORSAMDPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMPIPELINESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMPIPELINESEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMSARBPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMSNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERIESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERIESARBPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERIESEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERYRESOURCETAGNVPROC = ?fn (GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSOESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENSAMPLERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENSEMAPHORESEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENSYMBOLSEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLGENTEXTURESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENTEXTURESEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSAPPLEPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSOESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXSHADERSEXTPROC = ?fn (GLuint) callconv(.C) GLuint;
pub const PFNGLGENERATEMIPMAPPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPOESPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLGENERATEMULTITEXMIPMAPEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBARBPROC = ?fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINENAMEPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ?fn (GLuint, GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMARBPROC = ?fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMNAMEPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMSIVPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEVARYINGNVPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTFVATIPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTIVATIPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETATTACHEDOBJECTSARBPROC = ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLhandleARB) callconv(.C) void;
pub const PFNGLGETATTACHEDSHADERSPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETATTRIBLOCATIONPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETATTRIBLOCATIONARBPROC = ?fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLGETBOOLEANINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETBOOLEANI_VPROC = ?fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETBOOLEANVPROC = ?fn (GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERI64VPROC = ?fn (GLenum, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERIVARBPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERUI64VNVPROC = ?fn (GLenum, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVPROC = ?fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVARBPROC = ?fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVOESPROC = ?fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAPROC = ?fn (GLenum, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAARBPROC = ?fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCLIPPLANEPROC = ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETCLIPPLANEFPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCLIPPLANEFOESPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCLIPPLANEXPROC = ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETCLIPPLANEXOESPROC = ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPROC = ?fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOLORTABLEEXTPROC = ?fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLESGIPROC = ?fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMMANDHEADERNVPROC = ?fn (GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = ?fn (GLenum, GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEPROC = ?fn (GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = ?fn (GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = ?fn (GLuint, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = ?fn (GLuint, GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONFILTERPROC = ?fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONFILTEREXTPROC = ?fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETCOVERAGEMODULATIONTABLENVPROC = ?fn (GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDEBUGMESSAGELOGAMDPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLuint, [*c]GLuint, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDEBUGMESSAGELOGARBPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDEBUGMESSAGELOGKHRPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDETAILTEXFUNCSGISPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDOUBLEINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDOUBLEVPROC = ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDRIVERCONTROLSTRINGQCOMPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETDRIVERCONTROLSQCOMPROC = ?fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETERRORPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETFENCEIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFIRSTPERFQUERYIDINTELPROC = ?fn ([*c]GLuint) callconv(.C) void;
pub const PFNGLGETFIXEDVPROC = ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETFIXEDVOESPROC = ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETFLOATINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VNVPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VOESPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATVPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFOGFUNCSGISPROC = ?fn ([*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGDATAINDEXPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGDATAINDEXEXTPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGDATALOCATIONPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGDATALOCATIONEXTPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGMENTLIGHTFVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTIVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALFVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALIVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC = ?fn (GLenum, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?fn (GLuint) callconv(.C) GLsizei;
pub const PFNGLGETGRAPHICSRESETSTATUSPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETGRAPHICSRESETSTATUSARBPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETGRAPHICSRESETSTATUSEXTPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETGRAPHICSRESETSTATUSKHRPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETHANDLEARBPROC = ?fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLGETHISTOGRAMPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETHISTOGRAMEXTPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETIMAGEHANDLEARBPROC = ?fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLGETIMAGEHANDLENVPROC = ?fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINFOLOGARBPROC = ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETINSTRUMENTSSGIXPROC = ?fn () callconv(.C) GLint;
pub const PFNGLGETINTEGER64I_VPROC = ?fn (GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTEGER64VPROC = ?fn (GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTEGER64VAPPLEPROC = ?fn (GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTEGERINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGERI_VPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGERI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGERUI64I_VNVPROC = ?fn (GLenum, GLuint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETINTEGERUI64VNVPROC = ?fn (GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETINTEGERVPROC = ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATI64VPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATIVPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINVARIANTBOOLEANVEXTPROC = ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETINVARIANTFLOATVEXTPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETINVARIANTINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLIGHTFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLIGHTIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLIGHTXOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETLIGHTXVPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETLIGHTXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETLISTPARAMETERFVSGIXPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLISTPARAMETERIVSGIXPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTFLOATVEXTPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERFVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERIVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPCONTROLPOINTSNVPROC = ?fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPDVPROC = ?fn (GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETMAPFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMATERIALFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMATERIALIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMATERIALXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLGETMATERIALXVPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMATERIALXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = ?fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMINMAXPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMINMAXEXTPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXENVFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXENVIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXGENDVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETMULTITEXGENFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXGENIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXIMAGEEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVNVPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVPROC = ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC = ?fn (GLuint, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = ?fn (GLuint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDSTRINGARBPROC = ?fn (GLint, [*c]const GLchar, GLsizei, [*c]GLint, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETNAMEDSTRINGIVARBPROC = ?fn (GLint, [*c]const GLchar, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNEXTPERFQUERYIDINTELPROC = ?fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERFVATIPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERIVATIPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOBJECTLABELPROC = ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTLABELEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTLABELKHRPROC = ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERFVARBPROC = ?fn (GLhandleARB, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERIVAPPLEPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERIVARBPROC = ?fn (GLhandleARB, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOBJECTPTRLABELPROC = ?fn (?*const anyopaque, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTPTRLABELKHRPROC = ?fn (?*const anyopaque, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYUIVNVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPATHCOLORGENFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHCOLORGENIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHCOMMANDSNVPROC = ?fn (GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPATHCOORDSNVPROC = ?fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHDASHARRAYNVPROC = ?fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHLENGTHNVPROC = ?fn (GLuint, GLsizei, GLsizei) callconv(.C) GLfloat;
pub const PFNGLGETPATHMETRICRANGENVPROC = ?fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHMETRICSNVPROC = ?fn (GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERFVNVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHSPACINGNVPROC = ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHTEXGENFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHTEXGENIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPERFCOUNTERINFOINTELPROC = ?fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ?fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ?fn (GLuint, GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSAMDPROC = ?fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSAMDPROC = ?fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYDATAINTELPROC = ?fn (GLuint, GLuint, GLsizei, ?*anyopaque, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYIDBYNAMEINTELPROC = ?fn ([*c]GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYINFOINTELPROC = ?fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPIXELMAPFVPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELMAPUIVPROC = ?fn (GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPIXELMAPUSVPROC = ?fn (GLenum, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETPIXELMAPXVPROC = ?fn (GLenum, GLint, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC = ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPOINTERINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETPOINTERI_VEXTPROC = ?fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETPOINTERVPROC = ?fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETPOINTERVEXTPROC = ?fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETPOINTERVKHRPROC = ?fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETPOLYGONSTIPPLEPROC = ?fn ([*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPROGRAMBINARYPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETPROGRAMBINARYOESPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERIIVNVPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERDVARBPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERFVARBPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMINFOLOGPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMINTERFACEIVPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERDVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERFVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEINDEXPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCENAMEPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEFVNVPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEIVPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTAGEIVPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGARBPROC = ?fn (GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGNVPROC = ?fn (GLuint, GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMIVARBPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTI64VPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTIVPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUI64VPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUIVPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYINDEXEDIVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VPROC = ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VEXTPROC = ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVARBPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VPROC = ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVARBPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYIVARBPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVOESPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVOESPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVOESPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETSEPARABLEFILTERPROC = ?fn (GLenum, GLenum, GLenum, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETSEPARABLEFILTEREXTPROC = ?fn (GLenum, GLenum, GLenum, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETSHADERINFOLOGPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERPRECISIONFORMATPROC = ?fn (GLenum, GLenum, [*c]GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEARBPROC = ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETSHADERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = ?fn (GLuint, GLuint, [*c]GLenum) callconv(.C) void;
pub const PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = ?fn (GLenum, GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHARPENTEXFUNCSGISPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETSTAGEINDEXNVPROC = ?fn (GLenum) callconv(.C) GLushort;
pub const PFNGLGETSTRINGPROC = ?fn (GLenum) callconv(.C) [*c]const GLubyte;
pub const PFNGLGETSTRINGIPROC = ?fn (GLenum, GLuint) callconv(.C) [*c]const GLubyte;
pub const PFNGLGETSUBROUTINEINDEXPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETSYNCIVPROC = ?fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSYNCIVAPPLEPROC = ?fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERFVATIPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERIVATIPROC = ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXENVFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXENVIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXENVXVPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXENVXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXFILTERFUNCSGISPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXGENDVPROC = ?fn (GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETTEXGENFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXGENFVOESPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXGENIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXGENIVOESPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXGENXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXIMAGEPROC = ?fn (GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERFVPROC = ?fn (GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERIVPROC = ?fn (GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERXVOESPROC = ?fn (GLenum, GLint, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVOESPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVPROC = ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVOESPROC = ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = ?fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERXVPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXTUREHANDLEARBPROC = ?fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTUREHANDLEIMGPROC = ?fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTUREHANDLENVPROC = ?fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTUREIMAGEPROC = ?fn (GLuint, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXTUREIMAGEEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVPROC = ?fn (GLuint, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVPROC = ?fn (GLuint, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTURESAMPLERHANDLEARBPROC = ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLEIMGPROC = ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLENVPROC = ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETTRACKMATRIXIVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = ?fn (GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI64_VPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI_VPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETUNIFORMBLOCKINDEXPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETUNIFORMBUFFERSIZEEXTPROC = ?fn (GLuint, GLint) callconv(.C) GLint;
pub const PFNGLGETUNIFORMINDICESPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMLOCATIONPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETUNIFORMLOCATIONARBPROC = ?fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLGETUNIFORMOFFSETEXTPROC = ?fn (GLuint, GLint) callconv(.C) GLintptr;
pub const PFNGLGETUNIFORMSUBROUTINEUIVPROC = ?fn (GLenum, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMDVPROC = ?fn (GLuint, GLint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETUNIFORMFVPROC = ?fn (GLuint, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMFVARBPROC = ?fn (GLhandleARB, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VARBPROC = ?fn (GLuint, GLint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VNVPROC = ?fn (GLuint, GLint, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMIVPROC = ?fn (GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETUNIFORMIVARBPROC = ?fn (GLhandleARB, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VARBPROC = ?fn (GLuint, GLint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VNVPROC = ?fn (GLuint, GLint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVPROC = ?fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVEXTPROC = ?fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEVEXTPROC = ?fn (GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTFVATIPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTIVATIPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTBOOLEANVEXTPROC = ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETVARIANTFLOATVEXTPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTPOINTERVEXTPROC = ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVARYINGLOCATIONNVPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETVERTEXARRAYINDEXED64IVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINDEXEDIVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = ?fn (GLuint, GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERVEXTPROC = ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVEXTPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VARBPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVPROC = ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVARBPROC = ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVNVPROC = ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVARBPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVNVPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVARBPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVNVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVARBPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTUREIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVIDEOIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOUI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVIDEOUIVNVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVKPROCADDRNVPROC = ?fn ([*c]const GLchar) callconv(.C) GLVULKANPROCNV;
pub const PFNGLGETNCOLORTABLEPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCOLORTABLEARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEPROC = ?fn (GLenum, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = ?fn (GLenum, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCONVOLUTIONFILTERPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNCONVOLUTIONFILTERARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNHISTOGRAMPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNHISTOGRAMARBPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNMAPDVPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPDVARBPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPFVPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNMAPFVARBPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNMAPIVPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNMAPIVARBPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNMINMAXPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNMINMAXARBPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNPIXELMAPFVPROC = ?fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNPIXELMAPFVARBPROC = ?fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUIVPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUIVARBPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUSVPROC = ?fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUSVARBPROC = ?fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETNPOLYGONSTIPPLEPROC = ?fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETNPOLYGONSTIPPLEARBPROC = ?fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETNSEPARABLEFILTERPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque, GLsizei, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNSEPARABLEFILTERARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque, GLsizei, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNTEXIMAGEPROC = ?fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNTEXIMAGEARBPROC = ?fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVKHRPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVKHRPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVKHRPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORBSUNPROC = ?fn (GLbyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORDSUNPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORFSUNPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORISUNPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORSSUNPROC = ?fn (GLshort) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUBSUNPROC = ?fn (GLubyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUISUNPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUSSUNPROC = ?fn (GLushort) callconv(.C) void;
pub const PFNGLHINTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLHINTPGIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLHISTOGRAMPROC = ?fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLHISTOGRAMEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLIGLOOINTERFACESGIXPROC = ?fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFHPPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIHPPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLIMPORTMEMORYFDEXTPROC = ?fn (GLuint, GLuint64, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ?fn (GLuint, GLuint64, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ?fn (GLuint, GLuint64, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREFDEXTPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ?fn (GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ?fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLIMPORTSYNCEXTPROC = ?fn (GLenum, GLintptr, GLbitfield) callconv(.C) GLsync;
pub const PFNGLINDEXFORMATNVPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLINDEXFUNCEXTPROC = ?fn (GLenum, GLclampf) callconv(.C) void;
pub const PFNGLINDEXMASKPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLINDEXMATERIALEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLINDEXPOINTERPROC = ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLINDEXPOINTEREXTPROC = ?fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLINDEXPOINTERLISTIBMPROC = ?fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLINDEXDPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLINDEXDVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLINDEXFPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLINDEXFVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLINDEXIPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLINDEXIVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLINDEXSPROC = ?fn (GLshort) callconv(.C) void;
pub const PFNGLINDEXSVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLINDEXUBPROC = ?fn (GLubyte) callconv(.C) void;
pub const PFNGLINDEXUBVPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLINDEXXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLINDEXXVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLINITNAMESPROC = ?fn () callconv(.C) void;
pub const PFNGLINSERTCOMPONENTEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLINSERTEVENTMARKEREXTPROC = ?fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLINSTRUMENTSBUFFERSGIXPROC = ?fn (GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLINTERLEAVEDARRAYSPROC = ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLINTERPOLATEPATHSNVPROC = ?fn (GLuint, GLuint, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERDATAPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERSUBDATAPROC = ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLINVALIDATEFRAMEBUFFERPROC = ?fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = ?fn (GLuint, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLINVALIDATESUBFRAMEBUFFERPROC = ?fn (GLenum, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLINVALIDATETEXIMAGEPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLINVALIDATETEXSUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLISASYNCMARKERSGIXPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISBUFFERARBPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISBUFFERRESIDENTNVPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLISCOMMANDLISTNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLISENABLEDINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDIPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDINVPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDIOESPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFENCENVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFRAMEBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFRAMEBUFFEREXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFRAMEBUFFEROESPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTARBPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTNVPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISLISTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISMEMORYOBJECTEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISNAMEAMDPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISNAMEDBUFFERRESIDENTNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISNAMEDSTRINGARBPROC = ?fn (GLint, [*c]const GLchar) callconv(.C) GLboolean;
pub const PFNGLISOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISOCCLUSIONQUERYNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPATHNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPOINTINFILLPATHNVPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLISPOINTINSTROKEPATHNVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMARBPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMPIPELINEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMPIPELINEEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISQUERYPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISQUERYARBPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISQUERYEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFEREXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFEROESPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSAMPLERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSEMAPHOREEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSHADERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSTATENVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSYNCPROC = ?fn (GLsync) callconv(.C) GLboolean;
pub const PFNGLISSYNCAPPLEPROC = ?fn (GLsync) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREHANDLERESIDENTARBPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREHANDLERESIDENTNVPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISTRANSFORMFEEDBACKPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISTRANSFORMFEEDBACKNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVARIANTENABLEDEXTPROC = ?fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLISVERTEXARRAYPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVERTEXARRAYAPPLEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVERTEXARRAYOESPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVERTEXATTRIBENABLEDAPPLEPROC = ?fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLLGPUCOPYIMAGESUBDATANVXPROC = ?fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLLGPUINTERLOCKNVXPROC = ?fn () callconv(.C) void;
pub const PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC = ?fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLLABELOBJECTEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLLIGHTENVISGIXPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLLIGHTMODELFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLLIGHTMODELFVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLLIGHTMODELIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLLIGHTMODELIVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLLIGHTMODELXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXVPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLIGHTFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLLIGHTFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLLIGHTIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLLIGHTIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLLIGHTXPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXVPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLINESTIPPLEPROC = ?fn (GLint, GLushort) callconv(.C) void;
pub const PFNGLLINEWIDTHPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLLINEWIDTHXPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLLINEWIDTHXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLLINKPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLLINKPROGRAMARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLLISTBASEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = ?fn (GLuint, GLuint, [*c]?*const anyopaque, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLLISTPARAMETERFSGIXPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLLISTPARAMETERFVSGIXPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLLISTPARAMETERISGIXPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLLISTPARAMETERIVSGIXPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLLOADIDENTITYPROC = ?fn () callconv(.C) void;
pub const PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLLOADMATRIXDPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLLOADMATRIXFPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLLOADMATRIXXPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLLOADMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLLOADNAMEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC = ?fn () callconv(.C) void;
pub const PFNGLLOADPROGRAMNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXDPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXDARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXFPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXFARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLLOCKARRAYSEXTPROC = ?fn (GLint, GLsizei) callconv(.C) void;
pub const PFNGLLOGICOPPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMAKEBUFFERNONRESIDENTNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMAKEBUFFERRESIDENTNVPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = ?fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = ?fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAP1DPROC = ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAP1FPROC = ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAP1XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub const PFNGLMAP2DPROC = ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAP2FPROC = ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAP2XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub const PFNGLMAPBUFFERPROC = ?fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPBUFFERARBPROC = ?fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPBUFFEROESPROC = ?fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPBUFFERRANGEPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLMAPBUFFERRANGEEXTPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLMAPCONTROLPOINTSNVPROC = ?fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMAPGRID1DPROC = ?fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMAPGRID1FPROC = ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMAPGRID1XOESPROC = ?fn (GLint, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMAPGRID2DPROC = ?fn (GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMAPGRID2FPROC = ?fn (GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMAPGRID2XOESPROC = ?fn (GLint, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFERPROC = ?fn (GLuint, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFERRANGEPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLMAPNAMEDBUFFERRANGEEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub const PFNGLMAPOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) ?*anyopaque;
pub const PFNGLMAPPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPPARAMETERIVNVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMAPTEXTURE2DINTELPROC = ?fn (GLuint, GLint, GLbitfield, [*c]GLint, [*c]GLenum) callconv(.C) ?*anyopaque;
pub const PFNGLMAPVERTEXATTRIB1DAPPLEPROC = ?fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB1FAPPLEPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2DAPPLEPROC = ?fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2FAPPLEPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATERIALFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMATERIALFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATERIALIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMATERIALIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMATERIALXPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXVPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMATRIXFRUSTUMEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXINDEXPOINTERARBPROC = ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMATRIXINDEXPOINTEROESPROC = ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMATRIXINDEXUBVARBPROC = ?fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLMATRIXINDEXUIVARBPROC = ?fn (GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMATRIXINDEXUSVARBPROC = ?fn (GLint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLMATRIXLOAD3X2FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOAD3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADIDENTITYEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMODEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXMULT3X2FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULT3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXORTHOEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXPOPEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXPUSHEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXROTATEDEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXROTATEFEXTPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXSCALEDEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXSCALEFEXTPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEDEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEFEXTPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSARBPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLMEMORYBARRIERPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLMEMORYBARRIERBYREGIONPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLMEMORYBARRIEREXTPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGARBPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGOESPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLMINMAXPROC = ?fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLMINMAXEXTPROC = ?fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLMULTMATRIXDPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTMATRIXFPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTMATRIXXPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXDPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXDARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXFPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXFARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSPROC = ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSEXTPROC = ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTPROC = ?fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = ?fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = ?fn (GLenum, ?*const anyopaque, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = ?fn (GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = ?fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = ?fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC = ?fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSEXTPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTPROC = ?fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = ?fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = ?fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = ?fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = ?fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = ?fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC = ?fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = ?fn (GLintptr, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = ?fn (GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = ?fn (GLenum, GLuint, GLuint, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWARRAYSIBMPROC = ?fn ([*c]const GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWELEMENTSIBMPROC = ?fn ([*c]const GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTITEXBUFFEREXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1BOESPROC = ?fn (GLenum, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DPROC = ?fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DARBPROC = ?fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DVPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FARBPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HNVPROC = ?fn (GLenum, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IARBPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SPROC = ?fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SARBPROC = ?fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SVPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1XOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2BOESPROC = ?fn (GLenum, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DPROC = ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DARBPROC = ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DVPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FPROC = ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FARBPROC = ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HNVPROC = ?fn (GLenum, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IPROC = ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IARBPROC = ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SPROC = ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SARBPROC = ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SVPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2XOESPROC = ?fn (GLenum, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3BOESPROC = ?fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DARBPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DVPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FARBPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HNVPROC = ?fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IARBPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SARBPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SVPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4BOESPROC = ?fn (GLenum, GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DARBPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DVPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FARBPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HNVPROC = ?fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IPROC = ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SPROC = ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SARBPROC = ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SVPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XPROC = ?fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP1UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP1UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP2UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP2UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP3UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP3UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP4UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP4UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDPOINTEREXTPROC = ?fn (GLenum, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXENVFEXTPROC = ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVIEXTPROC = ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXENVIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENDEXTPROC = ?fn (GLenum, GLenum, GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENDVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENFEXTPROC = ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENIEXTPROC = ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFEXTPROC = ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIEXTPROC = ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXRENDERBUFFEREXTPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTICASTBARRIERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLMULTICASTBLITFRAMEBUFFERNVPROC = ?fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLMULTICASTBUFFERSUBDATANVPROC = ?fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC = ?fn (GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLMULTICASTCOPYIMAGESUBDATANVPROC = ?fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?fn (GLuint, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLMULTICASTSCISSORARRAYVNVXPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTARRAYVNVXPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTWAITSYNCNVPROC = ?fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = ?fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAPROC = ?fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAEXTPROC = ?fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEPROC = ?fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTPROC = ?fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ?fn (GLuint, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?fn (GLuint, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = ?fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = ?fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = ?fn (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = ?fn (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = ?fn (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMSTRINGEXTPROC = ?fn (GLuint, GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = ?fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDSTRINGARBPROC = ?fn (GLenum, GLint, [*c]const GLchar, GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLNEWLISTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNEWOBJECTBUFFERATIPROC = ?fn (GLsizei, ?*const anyopaque, GLenum) callconv(.C) GLuint;
pub const PFNGLNORMAL3BPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLNORMAL3BVPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLNORMAL3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNORMAL3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLNORMAL3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLNORMAL3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLNORMAL3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNORMAL3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLNORMAL3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLNORMAL3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLNORMAL3XPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLNORMAL3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLNORMAL3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLNORMALFORMATNVPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLNORMALP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLNORMALP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNORMALPOINTERPROC = ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNORMALPOINTEREXTPROC = ?fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLNORMALPOINTERLISTIBMPROC = ?fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLNORMALPOINTERVINTELPROC = ?fn (GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BATIPROC = ?fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BVATIPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DATIPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FATIPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IATIPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SATIPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLOBJECTLABELPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTLABELKHRPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTPTRLABELPROC = ?fn (?*const anyopaque, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTPTRLABELKHRPROC = ?fn (?*const anyopaque, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTPURGEABLEAPPLEPROC = ?fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLOBJECTUNPURGEABLEAPPLEPROC = ?fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLORTHOPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLORTHOFPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLORTHOFOESPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLORTHOXPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLORTHOXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPNTRIANGLESFATIPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPNTRIANGLESIATIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPASSTEXCOORDATIPROC = ?fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLPASSTHROUGHPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLPASSTHROUGHXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLPATCHPARAMETERFVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIEXTPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIOESPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPATHCOLORGENNVPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHCOMMANDSNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHCOORDSNVPROC = ?fn (GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHCOVERDEPTHFUNCNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPATHDASHARRAYNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHFOGGENNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPATHGLYPHINDEXARRAYNVPROC = ?fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPATHGLYPHINDEXRANGENVPROC = ?fn (GLenum, ?*const anyopaque, GLbitfield, GLuint, GLfloat, GLuint) callconv(.C) GLenum;
pub const PFNGLPATHGLYPHRANGENVPROC = ?fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLPATHGLYPHSNVPROC = ?fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ?fn (GLuint, GLenum, GLsizeiptr, ?*const anyopaque, GLsizei, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPATHPARAMETERFNVPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERFVNVPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERINVPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPATHPARAMETERIVNVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPATHSTENCILDEPTHOFFSETNVPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPATHSTENCILFUNCNVPROC = ?fn (GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLPATHSTRINGNVPROC = ?fn (GLuint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHSUBCOMMANDSNVPROC = ?fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHSUBCOORDSNVPROC = ?fn (GLuint, GLsizei, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPATHTEXGENNVPROC = ?fn (GLenum, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPAUSETRANSFORMFEEDBACKPROC = ?fn () callconv(.C) void;
pub const PFNGLPAUSETRANSFORMFEEDBACKNVPROC = ?fn () callconv(.C) void;
pub const PFNGLPIXELDATARANGENVPROC = ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPIXELMAPFVPROC = ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELMAPUIVPROC = ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPIXELMAPUSVPROC = ?fn (GLenum, GLsizei, [*c]const GLushort) callconv(.C) void;
pub const PFNGLPIXELMAPXPROC = ?fn (GLenum, GLint, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPIXELSTOREFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELSTOREIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELSTOREXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERFSGISPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERFVSGISPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERISGISPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERIVSGISPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENSGIXPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPIXELTRANSFERFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFERIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFERXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELZOOMPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPIXELZOOMXOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOINTALONGPATHNVPROC = ?fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) callconv(.C) GLboolean;
pub const PFNGLPOINTPARAMETERFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFARBPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFEXTPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFSGISPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVSGISPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVNVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXVPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPOINTSIZEPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLPOINTSIZEPOINTEROESPROC = ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPOINTSIZEXPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLPOINTSIZEXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLPOLLASYNCSGIXPROC = ?fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLPOLLINSTRUMENTSSGIXPROC = ?fn ([*c]GLint) callconv(.C) GLint;
pub const PFNGLPOLYGONMODEPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLPOLYGONMODENVPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETEXTPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETXPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETXOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOLYGONSTIPPLEPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLPOPATTRIBPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPCLIENTATTRIBPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPDEBUGGROUPPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPDEBUGGROUPKHRPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPGROUPMARKEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPMATRIXPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPNAMEPROC = ?fn () callconv(.C) void;
pub const PFNGLPRESENTFRAMEDUALFILLNVPROC = ?fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLPRESENTFRAMEKEYEDNVPROC = ?fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXARBPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXEXTPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXOESPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTNVPROC = ?fn () callconv(.C) void;
pub const PFNGLPRIORITIZETEXTURESPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPRIORITIZETEXTURESEXTPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.C) void;
pub const PFNGLPRIORITIZETEXTURESXOESPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPROGRAMBINARYPROC = ?fn (GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMBINARYOESPROC = ?fn (GLuint, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DARBPROC = ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DVARBPROC = ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FARBPROC = ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FVARBPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4INVPROC = ?fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4IVNVPROC = ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UINVPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DARBPROC = ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FARBPROC = ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4INVPROC = ?fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DNVPROC = ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DVNVPROC = ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FNVPROC = ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FVNVPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIARBPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIEXTPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4DVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4FVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ?fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMSTRINGARBPROC = ?fn (GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC = ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DPROC = ?fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DEXTPROC = ?fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FPROC = ?fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FEXTPROC = ?fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64ARBPROC = ?fn (GLuint, GLint, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64NVPROC = ?fn (GLuint, GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IEXTPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64ARBPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIEXTPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DPROC = ?fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DEXTPROC = ?fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FPROC = ?fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FEXTPROC = ?fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64ARBPROC = ?fn (GLuint, GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64NVPROC = ?fn (GLuint, GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IEXTPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIPROC = ?fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64ARBPROC = ?fn (GLuint, GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIEXTPROC = ?fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DEXTPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FEXTPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64ARBPROC = ?fn (GLuint, GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64NVPROC = ?fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64ARBPROC = ?fn (GLuint, GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIEXTPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DEXTPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FEXTPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64ARBPROC = ?fn (GLuint, GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64NVPROC = ?fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64ARBPROC = ?fn (GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIEXTPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMVERTEXLIMITNVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPUSHATTRIBPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLPUSHCLIENTATTRIBPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLPUSHDEBUGGROUPPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPUSHDEBUGGROUPKHRPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPUSHGROUPMARKEREXTPROC = ?fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPUSHMATRIXPROC = ?fn () callconv(.C) void;
pub const PFNGLPUSHNAMEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLQUERYCOUNTERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLQUERYCOUNTEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLQUERYMATRIXXOESPROC = ?fn ([*c]GLfixed, [*c]GLint) callconv(.C) GLbitfield;
pub const PFNGLQUERYOBJECTPARAMETERUIAMDPROC = ?fn (GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLQUERYRESOURCENVPROC = ?fn (GLenum, GLint, GLuint, [*c]GLint) callconv(.C) GLint;
pub const PFNGLQUERYRESOURCETAGNVPROC = ?fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLRASTERPOS2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS2IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLRASTERPOS2IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLRASTERPOS2SPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS2SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS2XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLRASTERPOS3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLRASTERPOS3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS4DPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS4DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS4FPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS4FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS4IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLRASTERPOS4IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLRASTERPOS4SPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS4SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERSAMPLESEXTPROC = ?fn (GLuint, GLboolean) callconv(.C) void;
pub const PFNGLREADBUFFERPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLREADBUFFERINDEXEDEXTPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLREADBUFFERNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLREADINSTRUMENTSSGIXPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLREADPIXELSPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub const PFNGLREADNPIXELSPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLREADNPIXELSARBPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLREADNPIXELSEXTPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLREADNPIXELSKHRPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLRECTDPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLRECTDVPROC = ?fn ([*c]const GLdouble, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLRECTFPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLRECTFVPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLRECTIPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLRECTIVPROC = ?fn ([*c]const GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLRECTSPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLRECTSVPROC = ?fn ([*c]const GLshort, [*c]const GLshort) callconv(.C) void;
pub const PFNGLRECTXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRECTXVOESPROC = ?fn ([*c]const GLfixed, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLREFERENCEPLANESGIXPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = ?fn (GLuint, GLuint64) callconv(.C) GLboolean;
pub const PFNGLRELEASESHADERCOMPILERPROC = ?fn () callconv(.C) void;
pub const PFNGLRENDERGPUMASKNVPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLRENDERMODEPROC = ?fn (GLenum) callconv(.C) GLint;
pub const PFNGLRENDERBUFFERSTORAGEPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEOESPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEPOINTERSUNPROC = ?fn (GLenum, GLsizei, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBSUNPROC = ?fn (GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBVSUNPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUISUNPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVSUNPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSSUNPROC = ?fn (GLushort) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSVSUNPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLREQUESTRESIDENTPROGRAMSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLRESETHISTOGRAMPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRESETHISTOGRAMEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLRESETMINMAXPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRESETMINMAXEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRESIZEBUFFERSMESAPROC = ?fn () callconv(.C) void;
pub const PFNGLRESOLVEDEPTHVALUESNVPROC = ?fn () callconv(.C) void;
pub const PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC = ?fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKPROC = ?fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKNVPROC = ?fn () callconv(.C) void;
pub const PFNGLROTATEDPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLROTATEFPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLROTATEXPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLROTATEXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEPROC = ?fn (GLfloat, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEARBPROC = ?fn (GLfloat, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEXPROC = ?fn (GLclampx, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEXOESPROC = ?fn (GLclampx, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEMAPATIPROC = ?fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSAMPLEMASKEXTPROC = ?fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEMASKINDEXEDNVPROC = ?fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLSAMPLEMASKSGISPROC = ?fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEMASKIPROC = ?fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNSGISPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVOESPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVOESPROC = ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCALEDPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSCALEFPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSCALEXPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSCALEXOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSCISSORPROC = ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORARRAYVPROC = ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORARRAYVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORARRAYVOESPROC = ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVENVPROC = ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDNVPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDOESPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVNVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVOESPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BEXTPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVEXTPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DEXTPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IEXTPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVEXTPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SEXTPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVEXTPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBPROC = ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBEXTPROC = ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVEXTPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVEXTPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USPROC = ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USEXTPROC = ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVEXTPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLORFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLSECONDARYCOLORP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERPROC = ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLSELECTBUFFERPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ?fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ?fn (GLuint, GLenum, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLSEPARABLEFILTER2DPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSEPARABLEFILTER2DEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSETFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLSETFENCENVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSETINVARIANTEXTPROC = ?fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSETLOCALCONSTANTEXTPROC = ?fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSETMULTISAMPLEFVAMDPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSHADEMODELPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLSHADERBINARYPROC = ?fn (GLsizei, [*c]const GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub const PFNGLSHADEROP1EXTPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP2EXTPROC = ?fn (GLenum, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP3EXTPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADERSOURCEPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLSHADERSOURCEARBPROC = ?fn (GLhandleARB, GLsizei, [*c][*c]const GLcharARB, [*c]const GLint) callconv(.C) void;
pub const PFNGLSHADERSTORAGEBLOCKBINDINGPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEBARRIERNVPROC = ?fn (GLboolean) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEPALETTENVPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLSHARPENTEXFUNCSGISPROC = ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSIGNALSEMAPHOREEXTPROC = ?fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSIGNALSEMAPHOREUI64NVXPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKFENCENVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKSEMAPHORENVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLSPECIALIZESHADERPROC = ?fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSPECIALIZESHADERARBPROC = ?fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFSGIXPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFVSGIXPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERISGIXPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERIVSGIXPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSTARTINSTRUMENTSSGIXPROC = ?fn () callconv(.C) void;
pub const PFNGLSTARTTILINGQCOMPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLSTATECAPTURENVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILCLEARTAGEXTPROC = ?fn (GLsizei, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHNVPROC = ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFUNCPROC = ?fn (GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEPROC = ?fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEATIPROC = ?fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILMASKPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLSTENCILMASKSEPARATEPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILOPPROC = ?fn (GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEATIPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPVALUEAMDPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHNVPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ?fn (GLuint, GLenum, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ?fn (GLuint, GLint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTOPINSTRUMENTSSGIXPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLSTRINGMARKERGREMEDYPROC = ?fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLSUBPIXELPRECISIONBIASNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLSWIZZLEEXTPROC = ?fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSYNCTEXTUREINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLTAGSAMPLEBUFFERSGIXPROC = ?fn () callconv(.C) void;
pub const PFNGLTANGENT3BEXTPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTANGENT3BVEXTPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTANGENT3DEXTPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTANGENT3DVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTANGENT3FEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTANGENT3FVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTANGENT3IEXTPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLTANGENT3IVEXTPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTANGENT3SEXTPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLTANGENT3SVEXTPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTANGENTPOINTEREXTPROC = ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTBUFFERMASK3DFXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLTESSELLATIONFACTORAMDPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLTESSELLATIONMODEAMDPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLTESTFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTFENCENVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTOBJECTAPPLEPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLTEXATTACHMEMORYNVPROC = ?fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXBUFFERPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERARBPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFEREXTPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFEROESPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEPROC = ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEEXTPROC = ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEOESPROC = ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERFVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERIVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD1BOESPROC = ?fn (GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD1BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD1DPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD1DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD1FPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD1FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD1HNVPROC = ?fn (GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD1HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD1IPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLTEXCOORD1IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD1SPROC = ?fn (GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD1SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD1XOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD1XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD2BOESPROC = ?fn (GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD2BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2HNVPROC = ?fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD2HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD2IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLTEXCOORD2IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD2SPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD2SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD2XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD3BOESPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD3BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLTEXCOORD3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD4BOESPROC = ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD4BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD4DPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD4DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD4FPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD4HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD4IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLTEXCOORD4IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD4SPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD4SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORDFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXCOORDP1UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP1UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP2UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP2UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP4UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP4UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERPROC = ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERVINTELPROC = ?fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXENVFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXENVFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXENVIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXENVIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXENVXPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXVPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXFILTERFUNCSGISPROC = ?fn (GLenum, GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXGENDPROC = ?fn (GLenum, GLenum, GLdouble) callconv(.C) void;
pub const PFNGLTEXGENDVPROC = ?fn (GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXGENFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXGENFOESPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXGENFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXGENFVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXGENIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXGENIOESPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXGENIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXGENIVOESPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXGENXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXGENXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXIMAGE1DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE2DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = ?fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE3DEXTPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = ?fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DOESPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXIMAGE4DSGISPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXPAGECOMMITMENTARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXPAGECOMMITMENTEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVOESPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVOESPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXPARAMETERIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERXPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXVPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXRENDERBUFFERNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM1DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGESPARSEAMDPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE1DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE2DPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DOESPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE4DSGISPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREATTACHMEMORYNVPROC = ?fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTUREBARRIERPROC = ?fn () callconv(.C) void;
pub const PFNGLTEXTUREBARRIERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLTEXTUREBUFFERPROC = ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFEREXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEPROC = ?fn (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTURECOLORMASKSGISPROC = ?fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC = ?fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = ?fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = ?fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURELIGHTEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTUREMATERIALEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLTEXTURENORMALEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTUREPAGECOMMITMENTEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFEXTPROC = ?fn (GLuint, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIEXTPROC = ?fn (GLuint, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTURERANGEAPPLEPROC = ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURERENDERBUFFEREXTPROC = ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM1DEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGESPARSEAMDPROC = ?fn (GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DPROC = ?fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub const PFNGLTEXTUREVIEWPROC = ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREVIEWEXTPROC = ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREVIEWOESPROC = ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRACKMATRIXNVPROC = ?fn (GLenum, GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = ?fn (GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC = ?fn (GLsizei, [*c]const GLint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = ?fn (GLuint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMPATHNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTRANSLATEDPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTRANSLATEFPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTRANSLATEXPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTRANSLATEXOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLUNIFORM1DPROC = ?fn (GLint, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM1DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM1FPROC = ?fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FARBPROC = ?fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1I64ARBPROC = ?fn (GLint, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1I64NVPROC = ?fn (GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1IARBPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM1IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM1UIPROC = ?fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UI64ARBPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64NVPROC = ?fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UIEXTPROC = ?fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2DPROC = ?fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2FPROC = ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FARBPROC = ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2I64ARBPROC = ?fn (GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64NVPROC = ?fn (GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2IARBPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2UIPROC = ?fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UI64ARBPROC = ?fn (GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64NVPROC = ?fn (GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UIEXTPROC = ?fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3DPROC = ?fn (GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3FPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FARBPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3I64ARBPROC = ?fn (GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64NVPROC = ?fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3IARBPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3UIPROC = ?fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UI64ARBPROC = ?fn (GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64NVPROC = ?fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UIEXTPROC = ?fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4DPROC = ?fn (GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4FPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FARBPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4IPROC = ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4I64ARBPROC = ?fn (GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64NVPROC = ?fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4IARBPROC = ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4UIPROC = ?fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UI64ARBPROC = ?fn (GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64NVPROC = ?fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UIEXTPROC = ?fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORMBLOCKBINDINGPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORMBUFFEREXTPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64ARBPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64IMGPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64NVPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VIMGPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVARBPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVARBPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVARBPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMSUBROUTINESUIVPROC = ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORMUI64NVPROC = ?fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORMUI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNLOCKARRAYSEXTPROC = ?fn () callconv(.C) void;
pub const PFNGLUNMAPBUFFERPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLUNMAPBUFFERARBPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLUNMAPBUFFEROESPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLUNMAPNAMEDBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLUNMAPNAMEDBUFFEREXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLUNMAPOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLUNMAPTEXTURE2DINTELPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLUPDATEOBJECTBUFFERATIPROC = ?fn (GLuint, GLuint, GLsizei, ?*const anyopaque, GLenum) callconv(.C) void;
pub const PFNGLUPLOADGPUMASKNVXPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLUSEPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLUSEPROGRAMOBJECTARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLUSEPROGRAMSTAGESPROC = ?fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub const PFNGLUSEPROGRAMSTAGESEXTPROC = ?fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub const PFNGLUSESHADERPROGRAMEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVDPAUFININVPROC = ?fn () callconv(.C) void;
pub const PFNGLVDPAUGETSURFACEIVNVPROC = ?fn (GLvdpauSurfaceNV, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLVDPAUINITNVPROC = ?fn (?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVDPAUISSURFACENVPROC = ?fn (GLvdpauSurfaceNV) callconv(.C) GLboolean;
pub const PFNGLVDPAUMAPSURFACESNVPROC = ?fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = ?fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = ?fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC = ?fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUSURFACEACCESSNVPROC = ?fn (GLvdpauSurfaceNV, GLenum) callconv(.C) void;
pub const PFNGLVDPAUUNMAPSURFACESNVPROC = ?fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUUNREGISTERSURFACENVPROC = ?fn (GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLVARIANTARRAYOBJECTATIPROC = ?fn (GLuint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVARIANTPOINTEREXTPROC = ?fn (GLuint, GLenum, GLuint, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVARIANTBVEXTPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVARIANTDVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVARIANTFVEXTPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVARIANTIVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVARIANTSVEXTPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVARIANTUBVEXTPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVARIANTUIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVARIANTUSVEXTPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEX2BOESPROC = ?fn (GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX2BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEX2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEX2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEX2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEX2HNVPROC = ?fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX2HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX2IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEX2IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEX2SPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEX2SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEX2XOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLVERTEX2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX3BOESPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX3BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEX3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEX3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEX3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEX3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEX3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEX3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEX3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEX3XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLVERTEX3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX4BOESPROC = ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX4BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX4DPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEX4DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEX4FPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEX4FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEX4HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX4HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX4IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEX4IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEX4SPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEX4SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEX4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLVERTEX4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBBINDINGPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBFORMATPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBIFORMATPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBLFORMATPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDINGDIVISORPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = ?fn (GLuint, GLuint, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYELEMENTBUFFERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXARRAYRANGEAPPLEPROC = ?fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub const PFNGLVERTEXARRAYRANGENVPROC = ?fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERPROC = ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERSPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DARBPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DNVPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FPROC = ?fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FARBPROC = ?fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FNVPROC = ?fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HNVPROC = ?fn (GLuint, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SPROC = ?fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SARBPROC = ?fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SNVPROC = ?fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DARBPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DNVPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FARBPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FNVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HNVPROC = ?fn (GLuint, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SPROC = ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SARBPROC = ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SNVPROC = ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DARBPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DNVPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FARBPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FNVPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HNVPROC = ?fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SPROC = ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SARBPROC = ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SNVPROC = ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVARBPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVARBPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBARBPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVARBPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVARBPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVARBPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVARBPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DARBPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DNVPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FARBPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FNVPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HNVPROC = ?fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVARBPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SPROC = ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SARBPROC = ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SNVPROC = ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBNVPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVARBPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVNVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVARBPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVARBPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBBINDINGPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORANGLEPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORARBPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISOREXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATNVPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IEXTPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IEXTPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IEXTPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIEXTPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVEXTPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVEXTPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVEXTPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIEXTPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVEXTPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATPROC = ?fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATNVPROC = ?fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTERPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTEREXTPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DEXTPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64NVPROC = ?fn (GLuint, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64ARBPROC = ?fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64NVPROC = ?fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VARBPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DEXTPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64NVPROC = ?fn (GLuint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64NVPROC = ?fn (GLuint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DEXTPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64NVPROC = ?fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64NVPROC = ?fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DEXTPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64NVPROC = ?fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64NVPROC = ?fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATPROC = ?fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATNVPROC = ?fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTERPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTEREXTPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPARAMETERIAMDPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERARBPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERNVPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4UBVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXBINDINGDIVISORPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXBLENDARBPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVFATIPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVIATIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXP2UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP2UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP4UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP4UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXPOINTERPROC = ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub const PFNGLVERTEXPOINTERVINTELPROC = ?fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DATIPROC = ?fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FATIPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IATIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SATIPROC = ?fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DATIPROC = ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FATIPROC = ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IATIPROC = ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SATIPROC = ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DATIPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FATIPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IATIPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SATIPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DATIPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FATIPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IATIPROC = ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SATIPROC = ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFEXTPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHNVPROC = ?fn (GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVIDEOCAPTURENVPROC = ?fn (GLuint, [*c]GLuint, [*c]GLuint64EXT) callconv(.C) GLenum;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVIEWPORTPROC = ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVOESPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFNVPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFOESPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVOESPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTPOSITIONWSCALENVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTSWIZZLENVPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREEXTPROC = ?fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREUI64NVXPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLWAITSYNCPROC = ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub const PFNGLWAITSYNCAPPLEPROC = ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub const PFNGLWAITVKSEMAPHORENVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLWEIGHTPATHSNVPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTPOINTERARBPROC = ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLWEIGHTPOINTEROESPROC = ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub const PFNGLWEIGHTBVARBPROC = ?fn (GLint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLWEIGHTDVARBPROC = ?fn (GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLWEIGHTFVARBPROC = ?fn (GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTIVARBPROC = ?fn (GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLWEIGHTSVARBPROC = ?fn (GLint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLWEIGHTUBVARBPROC = ?fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLWEIGHTUIVARBPROC = ?fn (GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLWEIGHTUSVARBPROC = ?fn (GLint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLWINDOWPOS2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DARBPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DMESAPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVMESAPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FARBPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FMESAPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVMESAPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IARBPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IMESAPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVARBPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVMESAPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SARBPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SMESAPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVARBPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVMESAPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DARBPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DMESAPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVMESAPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FARBPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FMESAPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVMESAPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IARBPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IMESAPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVARBPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVMESAPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SARBPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SMESAPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVARBPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVMESAPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4DMESAPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4DVMESAPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4FMESAPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4FVMESAPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4IMESAPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4IVMESAPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4SMESAPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4SVMESAPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWRECTANGLESEXTPROC = ?fn (GLenum, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLWRITEMASKEXTPROC = ?fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glAccum: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glAccumxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glAcquireKeyedMutexWin32EXT: ?fn (GLuint, GLuint64, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glActiveProgramEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glActiveShaderProgram: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glActiveShaderProgramEXT: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glActiveStencilFaceEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glActiveTexture: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glActiveTextureARB: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glActiveVaryingNV: ?fn (GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glAlphaFragmentOp1ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glAlphaFragmentOp2ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glAlphaFragmentOp3ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glAlphaFunc: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glAlphaFuncQCOM: ?fn (GLenum, GLclampf) callconv(.C) void;
pub extern var epoxy_glAlphaFuncx: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glAlphaFuncxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glAlphaToCoverageDitherControlNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glApplyFramebufferAttachmentCMAAINTEL: ?fn () callconv(.C) void;
pub extern var epoxy_glApplyTextureEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glAreProgramsResidentNV: ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub extern var epoxy_glAreTexturesResident: ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub extern var epoxy_glAreTexturesResidentEXT: ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub extern var epoxy_glArrayElement: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glArrayElementEXT: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glArrayObjectATI: ?fn (GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glAsyncCopyBufferSubDataNVX: ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub extern var epoxy_glAsyncCopyImageSubDataNVX: ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub extern var epoxy_glAsyncMarkerSGIX: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glAttachObjectARB: ?fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub extern var epoxy_glAttachShader: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBegin: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBeginConditionalRender: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBeginConditionalRenderNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBeginConditionalRenderNVX: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBeginFragmentShaderATI: ?fn () callconv(.C) void;
pub extern var epoxy_glBeginOcclusionQueryNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBeginPerfMonitorAMD: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBeginPerfQueryINTEL: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBeginQuery: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBeginQueryARB: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBeginQueryEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBeginQueryIndexed: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBeginTransformFeedback: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBeginTransformFeedbackEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBeginTransformFeedbackNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBeginVertexShaderEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glBeginVideoCaptureNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindAttribLocation: ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glBindAttribLocationARB: ?fn (GLhandleARB, GLuint, [*c]const GLcharARB) callconv(.C) void;
pub extern var epoxy_glBindBuffer: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindBufferARB: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindBufferBase: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBindBufferBaseEXT: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBindBufferBaseNV: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBindBufferOffsetEXT: ?fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub extern var epoxy_glBindBufferOffsetNV: ?fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub extern var epoxy_glBindBufferRange: ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glBindBufferRangeEXT: ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glBindBufferRangeNV: ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glBindBuffersBase: ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glBindBuffersRange: ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glBindFragDataLocation: ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glBindFragDataLocationEXT: ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glBindFragDataLocationIndexed: ?fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glBindFragDataLocationIndexedEXT: ?fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glBindFragmentShaderATI: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindFramebuffer: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindFramebufferEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindFramebufferOES: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindImageTexture: ?fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBindImageTextureEXT: ?fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glBindImageTextures: ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glBindLightParameterEXT: ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub extern var epoxy_glBindMaterialParameterEXT: ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub extern var epoxy_glBindMultiTextureEXT: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindParameterEXT: ?fn (GLenum) callconv(.C) GLuint;
pub extern var epoxy_glBindProgramARB: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindProgramNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindProgramPipeline: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindProgramPipelineEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindRenderbuffer: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindRenderbufferEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindRenderbufferOES: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindSampler: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBindSamplers: ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glBindShadingRateImageNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindTexGenParameterEXT: ?fn (GLenum, GLenum, GLenum) callconv(.C) GLuint;
pub extern var epoxy_glBindTexture: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindTextureEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindTextureUnit: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBindTextureUnitParameterEXT: ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub extern var epoxy_glBindTextures: ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glBindTransformFeedback: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindTransformFeedbackNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindVertexArray: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindVertexArrayAPPLE: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindVertexArrayOES: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindVertexBuffer: ?fn (GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub extern var epoxy_glBindVertexBuffers: ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub extern var epoxy_glBindVertexShaderEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindVideoCaptureStreamBufferNV: ?fn (GLuint, GLuint, GLenum, GLintptrARB) callconv(.C) void;
pub extern var epoxy_glBindVideoCaptureStreamTextureNV: ?fn (GLuint, GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBinormal3bEXT: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glBinormal3bvEXT: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glBinormal3dEXT: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glBinormal3dvEXT: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glBinormal3fEXT: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glBinormal3fvEXT: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glBinormal3iEXT: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glBinormal3ivEXT: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glBinormal3sEXT: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glBinormal3svEXT: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glBinormalPointerEXT: ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glBitmap: ?fn (GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glBitmapxOES: ?fn (GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glBlendBarrier: ?fn () callconv(.C) void;
pub extern var epoxy_glBlendBarrierKHR: ?fn () callconv(.C) void;
pub extern var epoxy_glBlendBarrierNV: ?fn () callconv(.C) void;
pub extern var epoxy_glBlendColor: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glBlendColorEXT: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glBlendColorxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glBlendEquation: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationIndexedAMD: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationOES: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparate: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateEXT: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateIndexedAMD: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateOES: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparatei: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateiARB: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateiEXT: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateiOES: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationi: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationiARB: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationiEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationiOES: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFunc: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncIndexedAMD: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparate: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateEXT: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateINGR: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateIndexedAMD: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateOES: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparatei: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateiARB: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateiEXT: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateiOES: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFunci: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFunciARB: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFunciEXT: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFunciOES: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendParameteriNV: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glBlitFramebuffer: ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glBlitFramebufferANGLE: ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glBlitFramebufferEXT: ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glBlitFramebufferNV: ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glBlitNamedFramebuffer: ?fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glBufferAddressRangeNV: ?fn (GLenum, GLuint, GLuint64EXT, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glBufferAttachMemoryNV: ?fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glBufferData: ?fn (GLenum, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub extern var epoxy_glBufferDataARB: ?fn (GLenum, GLsizeiptrARB, ?*const anyopaque, GLenum) callconv(.C) void;
pub extern var epoxy_glBufferPageCommitmentARB: ?fn (GLenum, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub extern var epoxy_glBufferParameteriAPPLE: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glBufferStorage: ?fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub extern var epoxy_glBufferStorageEXT: ?fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub extern var epoxy_glBufferStorageExternalEXT: ?fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub extern var epoxy_glBufferStorageMemEXT: ?fn (GLenum, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glBufferSubData: ?fn (GLenum, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glBufferSubDataARB: ?fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCallCommandListNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glCallList: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glCallLists: ?fn (GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCheckFramebufferStatus: ?fn (GLenum) callconv(.C) GLenum;
pub extern var epoxy_glCheckFramebufferStatusEXT: ?fn (GLenum) callconv(.C) GLenum;
pub extern var epoxy_glCheckFramebufferStatusOES: ?fn (GLenum) callconv(.C) GLenum;
pub extern var epoxy_glCheckNamedFramebufferStatus: ?fn (GLuint, GLenum) callconv(.C) GLenum;
pub extern var epoxy_glCheckNamedFramebufferStatusEXT: ?fn (GLuint, GLenum) callconv(.C) GLenum;
pub extern var epoxy_glClampColor: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glClampColorARB: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glClear: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glClearAccum: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glClearAccumxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glClearBufferData: ?fn (GLenum, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glClearBufferSubData: ?fn (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glClearBufferfi: ?fn (GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub extern var epoxy_glClearBufferfv: ?fn (GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glClearBufferiv: ?fn (GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glClearBufferuiv: ?fn (GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glClearColor: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glClearColorIiEXT: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glClearColorIuiEXT: ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glClearColorx: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glClearColorxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glClearDepth: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glClearDepthdNV: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glClearDepthf: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glClearDepthfOES: ?fn (GLclampf) callconv(.C) void;
pub extern var epoxy_glClearDepthx: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glClearDepthxOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glClearIndex: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glClearNamedBufferData: ?fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glClearNamedBufferDataEXT: ?fn (GLuint, GLenum, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glClearNamedBufferSubData: ?fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glClearNamedBufferSubDataEXT: ?fn (GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glClearNamedFramebufferfi: ?fn (GLuint, GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub extern var epoxy_glClearNamedFramebufferfv: ?fn (GLuint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glClearNamedFramebufferiv: ?fn (GLuint, GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glClearNamedFramebufferuiv: ?fn (GLuint, GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glClearPixelLocalStorageuiEXT: ?fn (GLsizei, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glClearStencil: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glClearTexImage: ?fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glClearTexImageEXT: ?fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glClearTexSubImage: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glClearTexSubImageEXT: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glClientActiveTexture: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glClientActiveTextureARB: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glClientActiveVertexStreamATI: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glClientAttribDefaultEXT: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glClientWaitSemaphoreui64NVX: ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glClientWaitSync: ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub extern var epoxy_glClientWaitSyncAPPLE: ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub extern var epoxy_glClipControl: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glClipControlEXT: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glClipPlane: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glClipPlanef: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glClipPlanefIMG: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glClipPlanefOES: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glClipPlanex: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glClipPlanexIMG: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glClipPlanexOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glColor3b: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glColor3bv: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glColor3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glColor3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glColor3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor3hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glColor3hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glColor3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glColor3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glColor3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glColor3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glColor3ub: ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glColor3ubv: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glColor3ui: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glColor3uiv: ?fn ([*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glColor3us: ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub extern var epoxy_glColor3usv: ?fn ([*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glColor3xOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glColor3xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glColor4b: ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glColor4bv: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glColor4d: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glColor4dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glColor4f: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4fNormal3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4fNormal3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glColor4hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glColor4i: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glColor4iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glColor4s: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glColor4sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glColor4ub: ?fn (GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glColor4ubVertex2fSUN: ?fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4ubVertex2fvSUN: ?fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4ubVertex3fSUN: ?fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4ubVertex3fvSUN: ?fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4ubv: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glColor4ui: ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glColor4uiv: ?fn ([*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glColor4us: ?fn (GLushort, GLushort, GLushort, GLushort) callconv(.C) void;
pub extern var epoxy_glColor4usv: ?fn ([*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glColor4x: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glColor4xOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glColor4xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glColorFormatNV: ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glColorFragmentOp1ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glColorFragmentOp2ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glColorFragmentOp3ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glColorMask: ?fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glColorMaskIndexedEXT: ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glColorMaski: ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glColorMaskiEXT: ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glColorMaskiOES: ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glColorMaterial: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glColorP3ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glColorP3uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glColorP4ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glColorP4uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glColorPointer: ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glColorPointerEXT: ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glColorPointerListIBM: ?fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glColorPointervINTEL: ?fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glColorSubTable: ?fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glColorSubTableEXT: ?fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glColorTable: ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glColorTableEXT: ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glColorTableParameterfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColorTableParameterfvSGI: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColorTableParameteriv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glColorTableParameterivSGI: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glColorTableSGI: ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCombinerInputNV: ?fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glCombinerOutputNV: ?fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glCombinerParameterfNV: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glCombinerParameterfvNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glCombinerParameteriNV: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glCombinerParameterivNV: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glCombinerStageParameterfvNV: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glCommandListSegmentsNV: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glCompileCommandListNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glCompileShader: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glCompileShaderARB: ?fn (GLhandleARB) callconv(.C) void;
pub extern var epoxy_glCompileShaderIncludeARB: ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexImage1DEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexImage2DEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexImage3DEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexSubImage1DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexSubImage2DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexSubImage3DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage1D: ?fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage1DARB: ?fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage2D: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage2DARB: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage3D: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage3DARB: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage3DOES: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage1D: ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage1DARB: ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage2D: ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage2DARB: ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage3D: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage3DARB: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage3DOES: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTextureImage1DEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTextureImage2DEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTextureImage3DEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage1D: ?fn (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage1DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage2D: ?fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage2DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage3D: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage3DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glConservativeRasterParameterfNV: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glConservativeRasterParameteriNV: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glConvolutionFilter1D: ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glConvolutionFilter1DEXT: ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glConvolutionFilter2D: ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glConvolutionFilter2DEXT: ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterfEXT: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterfvEXT: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glConvolutionParameteri: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glConvolutionParameteriEXT: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glConvolutionParameteriv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterivEXT: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glCopyBufferSubData: ?fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glCopyBufferSubDataNV: ?fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glCopyColorSubTable: ?fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyColorSubTableEXT: ?fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyColorTable: ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyColorTableSGI: ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyConvolutionFilter1D: ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyConvolutionFilter1DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyConvolutionFilter2D: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyConvolutionFilter2DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyImageSubData: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyImageSubDataEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyImageSubDataNV: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyImageSubDataOES: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyMultiTexImage1DEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyMultiTexImage2DEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyMultiTexSubImage1DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyMultiTexSubImage2DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyMultiTexSubImage3DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyNamedBufferSubData: ?fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glCopyPathNV: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glCopyPixels: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum) callconv(.C) void;
pub extern var epoxy_glCopyTexImage1D: ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTexImage1DEXT: ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTexImage2D: ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTexImage2DEXT: ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage1D: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage1DEXT: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage2D: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage2DEXT: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage3D: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage3DEXT: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage3DOES: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureImage1DEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTextureImage2DEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTextureLevelsAPPLE: ?fn (GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage1D: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage1DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage2D: ?fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage2DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage3D: ?fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage3DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCoverFillPathInstancedNV: ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glCoverFillPathNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glCoverStrokePathInstancedNV: ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glCoverStrokePathNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glCoverageMaskNV: ?fn (GLboolean) callconv(.C) void;
pub extern var epoxy_glCoverageModulationNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glCoverageModulationTableNV: ?fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glCoverageOperationNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glCreateBuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateCommandListsNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateFramebuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateMemoryObjectsEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreatePerfQueryINTEL: ?fn (GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateProgram: ?fn () callconv(.C) GLuint;
pub extern var epoxy_glCreateProgramObjectARB: ?fn () callconv(.C) GLhandleARB;
pub extern var epoxy_glCreateProgramPipelines: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateProgressFenceNVX: ?fn () callconv(.C) GLuint;
pub extern var epoxy_glCreateQueries: ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateRenderbuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateSamplers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateShader: ?fn (GLenum) callconv(.C) GLuint;
pub extern var epoxy_glCreateShaderObjectARB: ?fn (GLenum) callconv(.C) GLhandleARB;
pub extern var epoxy_glCreateShaderProgramEXT: ?fn (GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glCreateShaderProgramv: ?fn (GLenum, GLsizei, [*c]const [*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glCreateShaderProgramvEXT: ?fn (GLenum, GLsizei, [*c][*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glCreateStatesNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateSyncFromCLeventARB: ?fn (?*struct__cl_context, ?*struct__cl_event, GLbitfield) callconv(.C) GLsync;
pub extern var epoxy_glCreateTextures: ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateTransformFeedbacks: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateVertexArrays: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCullFace: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glCullParameterdvEXT: ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glCullParameterfvEXT: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glCurrentPaletteMatrixARB: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glCurrentPaletteMatrixOES: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDebugMessageCallback: ?fn (GLDEBUGPROC, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glDebugMessageCallbackAMD: ?fn (GLDEBUGPROCAMD, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glDebugMessageCallbackARB: ?fn (GLDEBUGPROCARB, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glDebugMessageCallbackKHR: ?fn (GLDEBUGPROCKHR, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glDebugMessageControl: ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub extern var epoxy_glDebugMessageControlARB: ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub extern var epoxy_glDebugMessageControlKHR: ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub extern var epoxy_glDebugMessageEnableAMD: ?fn (GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub extern var epoxy_glDebugMessageInsert: ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glDebugMessageInsertAMD: ?fn (GLenum, GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glDebugMessageInsertARB: ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glDebugMessageInsertKHR: ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glDeformSGIX: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glDeformationMap3dSGIX: ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glDeformationMap3fSGIX: ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glDeleteAsyncMarkersSGIX: ?fn (GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDeleteBuffers: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteBuffersARB: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteCommandListsNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFencesAPPLE: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFencesNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFragmentShaderATI: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFramebuffers: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFramebuffersEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFramebuffersOES: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteLists: ?fn (GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDeleteMemoryObjectsEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteNamedStringARB: ?fn (GLint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glDeleteNamesAMD: ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteObjectARB: ?fn (GLhandleARB) callconv(.C) void;
pub extern var epoxy_glDeleteOcclusionQueriesNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeletePathsNV: ?fn (GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDeletePerfMonitorsAMD: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glDeletePerfQueryINTEL: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteProgram: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteProgramPipelines: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteProgramPipelinesEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteProgramsARB: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteProgramsNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteQueries: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteQueriesARB: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteQueriesEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteQueryResourceTagNV: ?fn (GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glDeleteRenderbuffers: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteRenderbuffersEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteRenderbuffersOES: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteSamplers: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteSemaphoresEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteShader: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteStatesNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteSync: ?fn (GLsync) callconv(.C) void;
pub extern var epoxy_glDeleteSyncAPPLE: ?fn (GLsync) callconv(.C) void;
pub extern var epoxy_glDeleteTextures: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteTexturesEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteTransformFeedbacks: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteTransformFeedbacksNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteVertexArrays: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteVertexArraysAPPLE: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteVertexArraysOES: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteVertexShaderEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDepthBoundsEXT: ?fn (GLclampd, GLclampd) callconv(.C) void;
pub extern var epoxy_glDepthBoundsdNV: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glDepthFunc: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glDepthMask: ?fn (GLboolean) callconv(.C) void;
pub extern var epoxy_glDepthRange: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glDepthRangeArrayfvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glDepthRangeArrayfvOES: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glDepthRangeArrayv: ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glDepthRangeIndexed: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glDepthRangeIndexedfNV: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glDepthRangeIndexedfOES: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glDepthRangedNV: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glDepthRangef: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glDepthRangefOES: ?fn (GLclampf, GLclampf) callconv(.C) void;
pub extern var epoxy_glDepthRangex: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glDepthRangexOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glDetachObjectARB: ?fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub extern var epoxy_glDetachShader: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDetailTexFuncSGIS: ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glDisable: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glDisableClientState: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glDisableClientStateIndexedEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableClientStateiEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableDriverControlQCOM: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDisableIndexedEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableVariantClientStateEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDisableVertexArrayAttrib: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableVertexArrayAttribEXT: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableVertexArrayEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glDisableVertexAttribAPPLE: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glDisableVertexAttribArray: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDisableVertexAttribArrayARB: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDisablei: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableiEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableiNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableiOES: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDiscardFramebufferEXT: ?fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDispatchCompute: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDispatchComputeGroupSizeARB: ?fn (GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDispatchComputeIndirect: ?fn (GLintptr) callconv(.C) void;
pub extern var epoxy_glDrawArrays: ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysEXT: ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysIndirect: ?fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstanced: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedANGLE: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedARB: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedBaseInstance: ?fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedBaseInstanceEXT: ?fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedEXT: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedNV: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawBuffer: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glDrawBuffers: ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDrawBuffersARB: ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDrawBuffersATI: ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDrawBuffersEXT: ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDrawBuffersIndexedEXT: ?fn (GLint, [*c]const GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glDrawBuffersNV: ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDrawCommandsAddressNV: ?fn (GLenum, [*c]const GLuint64, [*c]const GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawCommandsNV: ?fn (GLenum, GLuint, [*c]const GLintptr, [*c]const GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawCommandsStatesAddressNV: ?fn ([*c]const GLuint64, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawCommandsStatesNV: ?fn (GLuint, [*c]const GLintptr, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawElementArrayAPPLE: ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElementArrayATI: ?fn (GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElements: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glDrawElementsBaseVertex: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsBaseVertexEXT: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsBaseVertexOES: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsIndirect: ?fn (GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstanced: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedANGLE: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedARB: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseInstance: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseInstanceEXT: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseVertex: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseVertexBaseInstance: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseVertexBaseInstanceEXT: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseVertexEXT: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseVertexOES: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedEXT: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedNV: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawMeshArraysSUN: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawMeshTasksIndirectNV: ?fn (GLintptr) callconv(.C) void;
pub extern var epoxy_glDrawMeshTasksNV: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawPixels: ?fn (GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementArrayAPPLE: ?fn (GLenum, GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementArrayATI: ?fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawRangeElements: ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementsBaseVertex: ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementsBaseVertexEXT: ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementsBaseVertexOES: ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementsEXT: ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glDrawTexfOES: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glDrawTexfvOES: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glDrawTexiOES: ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glDrawTexivOES: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glDrawTexsOES: ?fn (GLshort, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glDrawTexsvOES: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glDrawTextureNV: ?fn (GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glDrawTexxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glDrawTexxvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedback: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackInstanced: ?fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackInstancedEXT: ?fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackStream: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackStreamInstanced: ?fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawVkImageNV: ?fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glEGLImageTargetRenderbufferStorageOES: ?fn (GLenum, GLeglImageOES) callconv(.C) void;
pub extern var epoxy_glEGLImageTargetTexStorageEXT: ?fn (GLenum, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glEGLImageTargetTexture2DOES: ?fn (GLenum, GLeglImageOES) callconv(.C) void;
pub extern var epoxy_glEGLImageTargetTextureStorageEXT: ?fn (GLuint, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glEdgeFlag: ?fn (GLboolean) callconv(.C) void;
pub extern var epoxy_glEdgeFlagFormatNV: ?fn (GLsizei) callconv(.C) void;
pub extern var epoxy_glEdgeFlagPointer: ?fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glEdgeFlagPointerEXT: ?fn (GLsizei, GLsizei, [*c]const GLboolean) callconv(.C) void;
pub extern var epoxy_glEdgeFlagPointerListIBM: ?fn (GLint, [*c][*c]const GLboolean, GLint) callconv(.C) void;
pub extern var epoxy_glEdgeFlagv: ?fn ([*c]const GLboolean) callconv(.C) void;
pub extern var epoxy_glElementPointerAPPLE: ?fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glElementPointerATI: ?fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glEnable: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glEnableClientState: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glEnableClientStateIndexedEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableClientStateiEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableDriverControlQCOM: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEnableIndexedEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableVariantClientStateEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEnableVertexArrayAttrib: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableVertexArrayAttribEXT: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableVertexArrayEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glEnableVertexAttribAPPLE: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glEnableVertexAttribArray: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEnableVertexAttribArrayARB: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEnablei: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableiEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableiNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableiOES: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnd: ?fn () callconv(.C) void;
pub extern var epoxy_glEndConditionalRender: ?fn () callconv(.C) void;
pub extern var epoxy_glEndConditionalRenderNV: ?fn () callconv(.C) void;
pub extern var epoxy_glEndConditionalRenderNVX: ?fn () callconv(.C) void;
pub extern var epoxy_glEndFragmentShaderATI: ?fn () callconv(.C) void;
pub extern var epoxy_glEndList: ?fn () callconv(.C) void;
pub extern var epoxy_glEndOcclusionQueryNV: ?fn () callconv(.C) void;
pub extern var epoxy_glEndPerfMonitorAMD: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEndPerfQueryINTEL: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEndQuery: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glEndQueryARB: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glEndQueryEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glEndQueryIndexed: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEndTilingQCOM: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glEndTransformFeedback: ?fn () callconv(.C) void;
pub extern var epoxy_glEndTransformFeedbackEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glEndTransformFeedbackNV: ?fn () callconv(.C) void;
pub extern var epoxy_glEndVertexShaderEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glEndVideoCaptureNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEvalCoord1d: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glEvalCoord1dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glEvalCoord1f: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glEvalCoord1fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glEvalCoord1xOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glEvalCoord1xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glEvalCoord2d: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glEvalCoord2dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glEvalCoord2f: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glEvalCoord2fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glEvalCoord2xOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glEvalCoord2xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glEvalMapsNV: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glEvalMesh1: ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glEvalMesh2: ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glEvalPoint1: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glEvalPoint2: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glEvaluateDepthValuesARB: ?fn () callconv(.C) void;
pub extern var epoxy_glExecuteProgramNV: ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glExtGetBufferPointervQCOM: ?fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glExtGetBuffersQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetFramebuffersQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetProgramBinarySourceQCOM: ?fn (GLuint, GLenum, [*c]GLchar, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetProgramsQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetRenderbuffersQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetShadersQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetTexLevelParameterivQCOM: ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetTexSubImageQCOM: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glExtGetTexturesQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtIsProgramBinaryQCOM: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glExtTexObjectStateOverrideiQCOM: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glExtractComponentEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glFeedbackBuffer: ?fn (GLsizei, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glFeedbackBufferxOES: ?fn (GLsizei, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glFenceSync: ?fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub extern var epoxy_glFenceSyncAPPLE: ?fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub extern var epoxy_glFinalCombinerInputNV: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glFinish: ?fn () callconv(.C) void;
pub extern var epoxy_glFinishAsyncSGIX: ?fn ([*c]GLuint) callconv(.C) GLint;
pub extern var epoxy_glFinishFenceAPPLE: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glFinishFenceNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glFinishObjectAPPLE: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFinishTextureSUNX: ?fn () callconv(.C) void;
pub extern var epoxy_glFlush: ?fn () callconv(.C) void;
pub extern var epoxy_glFlushMappedBufferRange: ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glFlushMappedBufferRangeAPPLE: ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glFlushMappedBufferRangeEXT: ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glFlushMappedNamedBufferRange: ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glFlushMappedNamedBufferRangeEXT: ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glFlushPixelDataRangeNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glFlushRasterSGIX: ?fn () callconv(.C) void;
pub extern var epoxy_glFlushStaticDataIBM: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glFlushVertexArrayRangeAPPLE: ?fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glFlushVertexArrayRangeNV: ?fn () callconv(.C) void;
pub extern var epoxy_glFogCoordFormatNV: ?fn (GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glFogCoordPointer: ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glFogCoordPointerEXT: ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glFogCoordPointerListIBM: ?fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glFogCoordd: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glFogCoorddEXT: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glFogCoorddv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glFogCoorddvEXT: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glFogCoordf: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glFogCoordfEXT: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glFogCoordfv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFogCoordfvEXT: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFogCoordhNV: ?fn (GLhalfNV) callconv(.C) void;
pub extern var epoxy_glFogCoordhvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glFogFuncSGIS: ?fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFogf: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glFogfv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFogi: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFogiv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glFogx: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glFogxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glFogxv: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glFogxvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glFragmentColorMaterialSGIX: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glFragmentCoverageColorNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glFragmentLightModelfSGIX: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentLightModelfvSGIX: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentLightModeliSGIX: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFragmentLightModelivSGIX: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glFragmentLightfSGIX: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentLightfvSGIX: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentLightiSGIX: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFragmentLightivSGIX: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glFragmentMaterialfSGIX: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentMaterialfvSGIX: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentMaterialiSGIX: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFragmentMaterialivSGIX: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glFrameTerminatorGREMEDY: ?fn () callconv(.C) void;
pub extern var epoxy_glFrameZoomSGIX: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferDrawBufferEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glFramebufferDrawBuffersEXT: ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glFramebufferFetchBarrierEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glFramebufferFetchBarrierQCOM: ?fn () callconv(.C) void;
pub extern var epoxy_glFramebufferFoveationConfigQCOM: ?fn (GLuint, GLuint, GLuint, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glFramebufferFoveationParametersQCOM: ?fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glFramebufferParameteri: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferParameteriMESA: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferPixelLocalStorageSizeEXT: ?fn (GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glFramebufferReadBufferEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glFramebufferRenderbuffer: ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glFramebufferRenderbufferEXT: ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glFramebufferRenderbufferOES: ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glFramebufferSampleLocationsfvARB: ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFramebufferSampleLocationsfvNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFramebufferSamplePositionsfvAMD: ?fn (GLenum, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture: ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture1D: ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture1DEXT: ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2D: ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2DDownsampleIMG: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2DEXT: ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2DMultisampleEXT: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2DMultisampleIMG: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2DOES: ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture3D: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture3DEXT: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture3DOES: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureARB: ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureEXT: ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureFaceARB: ?fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureFaceEXT: ?fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureLayer: ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureLayerARB: ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureLayerDownsampleIMG: ?fn (GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureLayerEXT: ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureMultisampleMultiviewOVR: ?fn (GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureMultiviewOVR: ?fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureOES: ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFreeObjectBufferATI: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glFrontFace: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glFrustum: ?fn (GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glFrustumf: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glFrustumfOES: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glFrustumx: ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glFrustumxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glGenAsyncMarkersSGIX: ?fn (GLsizei) callconv(.C) GLuint;
pub extern var epoxy_glGenBuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenBuffersARB: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenFencesAPPLE: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenFencesNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenFragmentShadersATI: ?fn (GLuint) callconv(.C) GLuint;
pub extern var epoxy_glGenFramebuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenFramebuffersEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenFramebuffersOES: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenLists: ?fn (GLsizei) callconv(.C) GLuint;
pub extern var epoxy_glGenNamesAMD: ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenOcclusionQueriesNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenPathsNV: ?fn (GLsizei) callconv(.C) GLuint;
pub extern var epoxy_glGenPerfMonitorsAMD: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenProgramPipelines: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenProgramPipelinesEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenProgramsARB: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenProgramsNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenQueries: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenQueriesARB: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenQueriesEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenQueryResourceTagNV: ?fn (GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGenRenderbuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenRenderbuffersEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenRenderbuffersOES: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenSamplers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenSemaphoresEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenSymbolsEXT: ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) GLuint;
pub extern var epoxy_glGenTextures: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenTexturesEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenTransformFeedbacks: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenTransformFeedbacksNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenVertexArrays: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenVertexArraysAPPLE: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenVertexArraysOES: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenVertexShadersEXT: ?fn (GLuint) callconv(.C) GLuint;
pub extern var epoxy_glGenerateMipmap: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glGenerateMipmapEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glGenerateMipmapOES: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glGenerateMultiTexMipmapEXT: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glGenerateTextureMipmap: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glGenerateTextureMipmapEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glGetActiveAtomicCounterBufferiv: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetActiveAttrib: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveAttribARB: ?fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub extern var epoxy_glGetActiveSubroutineName: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveSubroutineUniformName: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveSubroutineUniformiv: ?fn (GLuint, GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetActiveUniform: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveUniformARB: ?fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub extern var epoxy_glGetActiveUniformBlockName: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveUniformBlockiv: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetActiveUniformName: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveUniformsiv: ?fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetActiveVaryingNV: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetArrayObjectfvATI: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetArrayObjectivATI: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetAttachedObjectsARB: ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLhandleARB) callconv(.C) void;
pub extern var epoxy_glGetAttachedShaders: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetAttribLocation: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetAttribLocationARB: ?fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub extern var epoxy_glGetBooleanIndexedvEXT: ?fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetBooleani_v: ?fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetBooleanv: ?fn (GLenum, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetBufferParameteri64v: ?fn (GLenum, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetBufferParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetBufferParameterivARB: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetBufferParameterui64vNV: ?fn (GLenum, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetBufferPointerv: ?fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetBufferPointervARB: ?fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetBufferPointervOES: ?fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetBufferSubData: ?fn (GLenum, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetBufferSubDataARB: ?fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetClipPlane: ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetClipPlanef: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetClipPlanefOES: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetClipPlanex: ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetClipPlanexOES: ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetColorTable: ?fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetColorTableEXT: ?fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameterfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameterfvEXT: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameterfvSGI: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameterivSGI: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetColorTableSGI: ?fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetCombinerInputParameterfvNV: ?fn (GLenum, GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetCombinerInputParameterivNV: ?fn (GLenum, GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetCombinerOutputParameterfvNV: ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetCombinerOutputParameterivNV: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetCombinerStageParameterfvNV: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetCommandHeaderNV: ?fn (GLenum, GLuint) callconv(.C) GLuint;
pub extern var epoxy_glGetCompressedMultiTexImageEXT: ?fn (GLenum, GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetCompressedTexImage: ?fn (GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetCompressedTexImageARB: ?fn (GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetCompressedTextureImage: ?fn (GLuint, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetCompressedTextureImageEXT: ?fn (GLuint, GLenum, GLint, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetCompressedTextureSubImage: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetConvolutionFilter: ?fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetConvolutionFilterEXT: ?fn (GLenum, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetConvolutionParameterfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetConvolutionParameterfvEXT: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetConvolutionParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetConvolutionParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetConvolutionParameterxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetCoverageModulationTableNV: ?fn (GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetDebugMessageLog: ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetDebugMessageLogAMD: ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLuint, [*c]GLuint, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetDebugMessageLogARB: ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetDebugMessageLogKHR: ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetDetailTexFuncSGIS: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetDoubleIndexedvEXT: ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetDoublei_v: ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetDoublei_vEXT: ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetDoublev: ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetDriverControlStringQCOM: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetDriverControlsQCOM: ?fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetError: ?fn () callconv(.C) GLenum;
pub extern var epoxy_glGetFenceivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFinalCombinerInputParameterfvNV: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFinalCombinerInputParameterivNV: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFirstPerfQueryIdINTEL: ?fn ([*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetFixedv: ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetFixedvOES: ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetFloatIndexedvEXT: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFloati_v: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFloati_vEXT: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFloati_vNV: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFloati_vOES: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFloatv: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFogFuncSGIS: ?fn ([*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFragDataIndex: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetFragDataIndexEXT: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetFragDataLocation: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetFragDataLocationEXT: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetFragmentLightfvSGIX: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFragmentLightivSGIX: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFragmentMaterialfvSGIX: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFragmentMaterialivSGIX: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferAttachmentParameteriv: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferAttachmentParameterivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferAttachmentParameterivOES: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferParameterfvAMD: ?fn (GLenum, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFramebufferParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferParameterivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferParameterivMESA: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferPixelLocalStorageSizeEXT: ?fn (GLuint) callconv(.C) GLsizei;
pub extern var epoxy_glGetGraphicsResetStatus: ?fn () callconv(.C) GLenum;
pub extern var epoxy_glGetGraphicsResetStatusARB: ?fn () callconv(.C) GLenum;
pub extern var epoxy_glGetGraphicsResetStatusEXT: ?fn () callconv(.C) GLenum;
pub extern var epoxy_glGetGraphicsResetStatusKHR: ?fn () callconv(.C) GLenum;
pub extern var epoxy_glGetHandleARB: ?fn (GLenum) callconv(.C) GLhandleARB;
pub extern var epoxy_glGetHistogram: ?fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetHistogramEXT: ?fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetHistogramParameterfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetHistogramParameterfvEXT: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetHistogramParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetHistogramParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetHistogramParameterxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetImageHandleARB: ?fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub extern var epoxy_glGetImageHandleNV: ?fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub extern var epoxy_glGetImageTransformParameterfvHP: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetImageTransformParameterivHP: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetInfoLogARB: ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub extern var epoxy_glGetInstrumentsSGIX: ?fn () callconv(.C) GLint;
pub extern var epoxy_glGetInteger64i_v: ?fn (GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetInteger64v: ?fn (GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetInteger64vAPPLE: ?fn (GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetIntegerIndexedvEXT: ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetIntegeri_v: ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetIntegeri_vEXT: ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetIntegerui64i_vNV: ?fn (GLenum, GLuint, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetIntegerui64vNV: ?fn (GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetIntegerv: ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetInternalformatSampleivNV: ?fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetInternalformati64v: ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetInternalformativ: ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetInvariantBooleanvEXT: ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetInvariantFloatvEXT: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetInvariantIntegervEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetLightfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetLightiv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetLightxOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetLightxv: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetLightxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetListParameterfvSGIX: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetListParameterivSGIX: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetLocalConstantBooleanvEXT: ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetLocalConstantFloatvEXT: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetLocalConstantIntegervEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMapAttribParameterfvNV: ?fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMapAttribParameterivNV: ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMapControlPointsNV: ?fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetMapParameterfvNV: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMapParameterivNV: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMapdv: ?fn (GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetMapfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMapiv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMapxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetMaterialfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMaterialiv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMaterialxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glGetMaterialxv: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetMaterialxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetMemoryObjectDetachedResourcesuivNV: ?fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetMemoryObjectParameterivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMinmax: ?fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetMinmaxEXT: ?fn (GLenum, GLboolean, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetMinmaxParameterfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMinmaxParameterfvEXT: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMinmaxParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMinmaxParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexEnvfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMultiTexEnvivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexGendvEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetMultiTexGenfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMultiTexGenivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexImageEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetMultiTexLevelParameterfvEXT: ?fn (GLenum, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMultiTexLevelParameterivEXT: ?fn (GLenum, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexParameterIivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexParameterIuivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexParameterfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMultiTexParameterivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultisamplefv: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMultisamplefvNV: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferParameteri64v: ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferParameteriv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferParameterivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferParameterui64vNV: ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferPointerv: ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferPointervEXT: ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferSubData: ?fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferSubDataEXT: ?fn (GLuint, GLintptr, GLsizeiptr, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetNamedFramebufferAttachmentParameteriv: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedFramebufferAttachmentParameterivEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedFramebufferParameterfvAMD: ?fn (GLuint, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetNamedFramebufferParameteriv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedFramebufferParameterivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramLocalParameterIivEXT: ?fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramLocalParameterIuivEXT: ?fn (GLuint, GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramLocalParameterdvEXT: ?fn (GLuint, GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramLocalParameterfvEXT: ?fn (GLuint, GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramStringEXT: ?fn (GLuint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramivEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedRenderbufferParameteriv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedRenderbufferParameterivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedStringARB: ?fn (GLint, [*c]const GLchar, GLsizei, [*c]GLint, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetNamedStringivARB: ?fn (GLint, [*c]const GLchar, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNextPerfQueryIdINTEL: ?fn (GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetObjectBufferfvATI: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetObjectBufferivATI: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetObjectLabel: ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetObjectLabelEXT: ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetObjectLabelKHR: ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetObjectParameterfvARB: ?fn (GLhandleARB, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetObjectParameterivAPPLE: ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetObjectParameterivARB: ?fn (GLhandleARB, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetObjectPtrLabel: ?fn (?*const anyopaque, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetObjectPtrLabelKHR: ?fn (?*const anyopaque, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetOcclusionQueryivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetOcclusionQueryuivNV: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPathColorGenfvNV: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathColorGenivNV: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPathCommandsNV: ?fn (GLuint, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetPathCoordsNV: ?fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathDashArrayNV: ?fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathLengthNV: ?fn (GLuint, GLsizei, GLsizei) callconv(.C) GLfloat;
pub extern var epoxy_glGetPathMetricRangeNV: ?fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathMetricsNV: ?fn (GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathParameterfvNV: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathParameterivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPathSpacingNV: ?fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathTexGenfvNV: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathTexGenivNV: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPerfCounterInfoINTEL: ?fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorCounterDataAMD: ?fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorCounterInfoAMD: ?fn (GLuint, GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorCounterStringAMD: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorCountersAMD: ?fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorGroupStringAMD: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorGroupsAMD: ?fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPerfQueryDataINTEL: ?fn (GLuint, GLuint, GLsizei, ?*anyopaque, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPerfQueryIdByNameINTEL: ?fn ([*c]GLchar, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPerfQueryInfoINTEL: ?fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPixelMapfv: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPixelMapuiv: ?fn (GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPixelMapusv: ?fn (GLenum, [*c]GLushort) callconv(.C) void;
pub extern var epoxy_glGetPixelMapxv: ?fn (GLenum, GLint, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetPixelTexGenParameterfvSGIS: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPixelTexGenParameterivSGIS: ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPixelTransformParameterfvEXT: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPixelTransformParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPointerIndexedvEXT: ?fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetPointeri_vEXT: ?fn (GLenum, GLuint, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetPointerv: ?fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetPointervEXT: ?fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetPointervKHR: ?fn (GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetPolygonStipple: ?fn ([*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetProgramBinary: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetProgramBinaryOES: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetProgramEnvParameterIivNV: ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramEnvParameterIuivNV: ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetProgramEnvParameterdvARB: ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetProgramEnvParameterfvARB: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetProgramInfoLog: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetProgramInterfaceiv: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramLocalParameterIivNV: ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramLocalParameterIuivNV: ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetProgramLocalParameterdvARB: ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetProgramLocalParameterfvARB: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetProgramNamedParameterdvNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetProgramNamedParameterfvNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetProgramParameterdvNV: ?fn (GLenum, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetProgramParameterfvNV: ?fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetProgramPipelineInfoLog: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetProgramPipelineInfoLogEXT: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetProgramPipelineiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramPipelineivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramResourceIndex: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetProgramResourceLocation: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetProgramResourceLocationIndex: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetProgramResourceLocationIndexEXT: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetProgramResourceName: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetProgramResourcefvNV: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetProgramResourceiv: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramStageiv: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramStringARB: ?fn (GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetProgramStringNV: ?fn (GLuint, GLenum, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetProgramSubroutineParameteruivNV: ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetProgramiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramivARB: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryBufferObjecti64v: ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub extern var epoxy_glGetQueryBufferObjectiv: ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub extern var epoxy_glGetQueryBufferObjectui64v: ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub extern var epoxy_glGetQueryBufferObjectuiv: ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub extern var epoxy_glGetQueryIndexediv: ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjecti64v: ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetQueryObjecti64vEXT: ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectivARB: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectui64v: ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectui64vEXT: ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectuiv: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectuivARB: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectuivEXT: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetQueryiv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryivARB: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetRenderbufferParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetRenderbufferParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetRenderbufferParameterivOES: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIivOES: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIuiv: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIuivEXT: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIuivOES: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterfv: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameteriv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSemaphoreParameterui64vEXT: ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetSeparableFilter: ?fn (GLenum, GLenum, GLenum, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetSeparableFilterEXT: ?fn (GLenum, GLenum, GLenum, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetShaderInfoLog: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetShaderPrecisionFormat: ?fn (GLenum, GLenum, [*c]GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetShaderSource: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetShaderSourceARB: ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub extern var epoxy_glGetShaderiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetShadingRateImagePaletteNV: ?fn (GLuint, GLuint, [*c]GLenum) callconv(.C) void;
pub extern var epoxy_glGetShadingRateSampleLocationivNV: ?fn (GLenum, GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSharpenTexFuncSGIS: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetStageIndexNV: ?fn (GLenum) callconv(.C) GLushort;
pub extern var epoxy_glGetString: ?fn (GLenum) callconv(.C) [*c]const GLubyte;
pub extern var epoxy_glGetStringi: ?fn (GLenum, GLuint) callconv(.C) [*c]const GLubyte;
pub extern var epoxy_glGetSubroutineIndex: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetSubroutineUniformLocation: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetSynciv: ?fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSyncivAPPLE: ?fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexBumpParameterfvATI: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexBumpParameterivATI: ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexEnvfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexEnviv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexEnvxv: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTexEnvxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTexFilterFuncSGIS: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexGendv: ?fn (GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetTexGenfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexGenfvOES: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexGeniv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexGenivOES: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexGenxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTexImage: ?fn (GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetTexLevelParameterfv: ?fn (GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexLevelParameteriv: ?fn (GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexLevelParameterxvOES: ?fn (GLenum, GLint, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIiv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIivOES: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIuiv: ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIuivEXT: ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIuivOES: ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterPointervAPPLE: ?fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetTexParameterfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterxv: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTexParameterxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTextureHandleARB: ?fn (GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureHandleIMG: ?fn (GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureHandleNV: ?fn (GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureImage: ?fn (GLuint, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetTextureImageEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetTextureLevelParameterfv: ?fn (GLuint, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTextureLevelParameterfvEXT: ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTextureLevelParameteriv: ?fn (GLuint, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureLevelParameterivEXT: ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterIiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterIivEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterIuiv: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterIuivEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterfv: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterfvEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTextureParameteriv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterivEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureSamplerHandleARB: ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureSamplerHandleIMG: ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureSamplerHandleNV: ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureSubImage: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetTrackMatrixivNV: ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbackVarying: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbackVaryingEXT: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbackVaryingNV: ?fn (GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbacki64_v: ?fn (GLuint, GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbacki_v: ?fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbackiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTranslatedShaderSourceANGLE: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetUniformBlockIndex: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetUniformBufferSizeEXT: ?fn (GLuint, GLint) callconv(.C) GLint;
pub extern var epoxy_glGetUniformIndices: ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetUniformLocation: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetUniformLocationARB: ?fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub extern var epoxy_glGetUniformOffsetEXT: ?fn (GLuint, GLint) callconv(.C) GLintptr;
pub extern var epoxy_glGetUniformSubroutineuiv: ?fn (GLenum, GLint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetUniformdv: ?fn (GLuint, GLint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetUniformfv: ?fn (GLuint, GLint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetUniformfvARB: ?fn (GLhandleARB, GLint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetUniformi64vARB: ?fn (GLuint, GLint, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetUniformi64vNV: ?fn (GLuint, GLint, [*c]GLint64EXT) callconv(.C) void;
pub extern var epoxy_glGetUniformiv: ?fn (GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetUniformivARB: ?fn (GLhandleARB, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetUniformui64vARB: ?fn (GLuint, GLint, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetUniformui64vNV: ?fn (GLuint, GLint, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetUniformuiv: ?fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetUniformuivEXT: ?fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetUnsignedBytei_vEXT: ?fn (GLenum, GLuint, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetUnsignedBytevEXT: ?fn (GLenum, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetVariantArrayObjectfvATI: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVariantArrayObjectivATI: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVariantBooleanvEXT: ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetVariantFloatvEXT: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVariantIntegervEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVariantPointervEXT: ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetVaryingLocationNV: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetVertexArrayIndexed64iv: ?fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayIndexediv: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayIntegeri_vEXT: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayIntegervEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayPointeri_vEXT: ?fn (GLuint, GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayPointervEXT: ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribArrayObjectfvATI: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribArrayObjectivATI: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribIiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribIivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribIuiv: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribIuivEXT: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribLdv: ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribLdvEXT: ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribLi64vNV: ?fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribLui64vARB: ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribLui64vNV: ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribPointerv: ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribPointervARB: ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribPointervNV: ?fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribdv: ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribdvARB: ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribdvNV: ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribfv: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribfvARB: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribfvNV: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribivARB: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVideoCaptureStreamdvNV: ?fn (GLuint, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVideoCaptureStreamfvNV: ?fn (GLuint, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVideoCaptureStreamivNV: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVideoCaptureivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVideoi64vNV: ?fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub extern var epoxy_glGetVideoivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVideoui64vNV: ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetVideouivNV: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetVkProcAddrNV: ?fn ([*c]const GLchar) callconv(.C) GLVULKANPROCNV;
pub extern var epoxy_glGetnColorTable: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnColorTableARB: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnCompressedTexImage: ?fn (GLenum, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnCompressedTexImageARB: ?fn (GLenum, GLint, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnConvolutionFilter: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnConvolutionFilterARB: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnHistogram: ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnHistogramARB: ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnMapdv: ?fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetnMapdvARB: ?fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetnMapfv: ?fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnMapfvARB: ?fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnMapiv: ?fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnMapivARB: ?fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnMinmax: ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnMinmaxARB: ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapfv: ?fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapfvARB: ?fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapuiv: ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapuivARB: ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapusv: ?fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapusvARB: ?fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub extern var epoxy_glGetnPolygonStipple: ?fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetnPolygonStippleARB: ?fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetnSeparableFilter: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque, GLsizei, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnSeparableFilterARB: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*anyopaque, GLsizei, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnTexImage: ?fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnTexImageARB: ?fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glGetnUniformdv: ?fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetnUniformdvARB: ?fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetnUniformfv: ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnUniformfvARB: ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnUniformfvEXT: ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnUniformfvKHR: ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnUniformi64vARB: ?fn (GLuint, GLint, GLsizei, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetnUniformiv: ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnUniformivARB: ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnUniformivEXT: ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnUniformivKHR: ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnUniformui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetnUniformuiv: ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetnUniformuivARB: ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetnUniformuivKHR: ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactorbSUN: ?fn (GLbyte) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactordSUN: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactorfSUN: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactoriSUN: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactorsSUN: ?fn (GLshort) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactorubSUN: ?fn (GLubyte) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactoruiSUN: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactorusSUN: ?fn (GLushort) callconv(.C) void;
pub extern var epoxy_glHint: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glHintPGI: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glHistogram: ?fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub extern var epoxy_glHistogramEXT: ?fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub extern var epoxy_glIglooInterfaceSGIX: ?fn (GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glImageTransformParameterfHP: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glImageTransformParameterfvHP: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glImageTransformParameteriHP: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glImageTransformParameterivHP: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glImportMemoryFdEXT: ?fn (GLuint, GLuint64, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glImportMemoryWin32HandleEXT: ?fn (GLuint, GLuint64, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glImportMemoryWin32NameEXT: ?fn (GLuint, GLuint64, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glImportSemaphoreFdEXT: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glImportSemaphoreWin32HandleEXT: ?fn (GLuint, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glImportSemaphoreWin32NameEXT: ?fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glImportSyncEXT: ?fn (GLenum, GLintptr, GLbitfield) callconv(.C) GLsync;
pub extern var epoxy_glIndexFormatNV: ?fn (GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glIndexFuncEXT: ?fn (GLenum, GLclampf) callconv(.C) void;
pub extern var epoxy_glIndexMask: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glIndexMaterialEXT: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glIndexPointer: ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glIndexPointerEXT: ?fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glIndexPointerListIBM: ?fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glIndexd: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glIndexdv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glIndexf: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glIndexfv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glIndexi: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glIndexiv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glIndexs: ?fn (GLshort) callconv(.C) void;
pub extern var epoxy_glIndexsv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glIndexub: ?fn (GLubyte) callconv(.C) void;
pub extern var epoxy_glIndexubv: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glIndexxOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glIndexxvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glInitNames: ?fn () callconv(.C) void;
pub extern var epoxy_glInsertComponentEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glInsertEventMarkerEXT: ?fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glInstrumentsBufferSGIX: ?fn (GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glInterleavedArrays: ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glInterpolatePathsNV: ?fn (GLuint, GLuint, GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glInvalidateBufferData: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glInvalidateBufferSubData: ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glInvalidateFramebuffer: ?fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glInvalidateNamedFramebufferData: ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glInvalidateNamedFramebufferSubData: ?fn (GLuint, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glInvalidateSubFramebuffer: ?fn (GLenum, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glInvalidateTexImage: ?fn (GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glInvalidateTexSubImage: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glIsAsyncMarkerSGIX: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsBuffer: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsBufferARB: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsBufferResidentNV: ?fn (GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glIsCommandListNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnabled: ?fn (GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnabledIndexedEXT: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnabledi: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnablediEXT: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnablediNV: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnablediOES: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsFenceAPPLE: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsFenceNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsFramebuffer: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsFramebufferEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsFramebufferOES: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsImageHandleResidentARB: ?fn (GLuint64) callconv(.C) GLboolean;
pub extern var epoxy_glIsImageHandleResidentNV: ?fn (GLuint64) callconv(.C) GLboolean;
pub extern var epoxy_glIsList: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsMemoryObjectEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsNameAMD: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsNamedBufferResidentNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsNamedStringARB: ?fn (GLint, [*c]const GLchar) callconv(.C) GLboolean;
pub extern var epoxy_glIsObjectBufferATI: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsOcclusionQueryNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsPathNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsPointInFillPathNV: ?fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub extern var epoxy_glIsPointInStrokePathNV: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub extern var epoxy_glIsProgram: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsProgramARB: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsProgramNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsProgramPipeline: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsProgramPipelineEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsQuery: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsQueryARB: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsQueryEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsRenderbuffer: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsRenderbufferEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsRenderbufferOES: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsSampler: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsSemaphoreEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsShader: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsStateNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsSync: ?fn (GLsync) callconv(.C) GLboolean;
pub extern var epoxy_glIsSyncAPPLE: ?fn (GLsync) callconv(.C) GLboolean;
pub extern var epoxy_glIsTexture: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsTextureEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsTextureHandleResidentARB: ?fn (GLuint64) callconv(.C) GLboolean;
pub extern var epoxy_glIsTextureHandleResidentNV: ?fn (GLuint64) callconv(.C) GLboolean;
pub extern var epoxy_glIsTransformFeedback: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsTransformFeedbackNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsVariantEnabledEXT: ?fn (GLuint, GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glIsVertexArray: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsVertexArrayAPPLE: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsVertexArrayOES: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsVertexAttribEnabledAPPLE: ?fn (GLuint, GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glLGPUCopyImageSubDataNVX: ?fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glLGPUInterlockNVX: ?fn () callconv(.C) void;
pub extern var epoxy_glLGPUNamedBufferSubDataNVX: ?fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glLabelObjectEXT: ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glLightEnviSGIX: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glLightModelf: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glLightModelfv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glLightModeli: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glLightModeliv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glLightModelx: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glLightModelxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glLightModelxv: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLightModelxvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLightf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glLightfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glLighti: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glLightiv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glLightx: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glLightxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glLightxv: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLightxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLineStipple: ?fn (GLint, GLushort) callconv(.C) void;
pub extern var epoxy_glLineWidth: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glLineWidthx: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glLineWidthxOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glLinkProgram: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glLinkProgramARB: ?fn (GLhandleARB) callconv(.C) void;
pub extern var epoxy_glListBase: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glListDrawCommandsStatesClientNV: ?fn (GLuint, GLuint, [*c]?*const anyopaque, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glListParameterfSGIX: ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glListParameterfvSGIX: ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glListParameteriSGIX: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glListParameterivSGIX: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glLoadIdentity: ?fn () callconv(.C) void;
pub extern var epoxy_glLoadIdentityDeformationMapSGIX: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glLoadMatrixd: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glLoadMatrixf: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glLoadMatrixx: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLoadMatrixxOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLoadName: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glLoadPaletteFromModelViewMatrixOES: ?fn () callconv(.C) void;
pub extern var epoxy_glLoadProgramNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glLoadTransposeMatrixd: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glLoadTransposeMatrixdARB: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glLoadTransposeMatrixf: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glLoadTransposeMatrixfARB: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glLoadTransposeMatrixxOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLockArraysEXT: ?fn (GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glLogicOp: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMakeBufferNonResidentNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMakeBufferResidentNV: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glMakeImageHandleNonResidentARB: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMakeImageHandleNonResidentNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMakeImageHandleResidentARB: ?fn (GLuint64, GLenum) callconv(.C) void;
pub extern var epoxy_glMakeImageHandleResidentNV: ?fn (GLuint64, GLenum) callconv(.C) void;
pub extern var epoxy_glMakeNamedBufferNonResidentNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glMakeNamedBufferResidentNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glMakeTextureHandleNonResidentARB: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMakeTextureHandleNonResidentNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMakeTextureHandleResidentARB: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMakeTextureHandleResidentNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMap1d: ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMap1f: ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMap1xOES: ?fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub extern var epoxy_glMap2d: ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMap2f: ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMap2xOES: ?fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub extern var epoxy_glMapBuffer: ?fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapBufferARB: ?fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapBufferOES: ?fn (GLenum, GLenum) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapBufferRange: ?fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapBufferRangeEXT: ?fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapControlPointsNV: ?fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMapGrid1d: ?fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMapGrid1f: ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMapGrid1xOES: ?fn (GLint, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMapGrid2d: ?fn (GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMapGrid2f: ?fn (GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMapGrid2xOES: ?fn (GLint, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMapNamedBuffer: ?fn (GLuint, GLenum) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapNamedBufferEXT: ?fn (GLuint, GLenum) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapNamedBufferRange: ?fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapNamedBufferRangeEXT: ?fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapObjectBufferATI: ?fn (GLuint) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapParameterfvNV: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMapParameterivNV: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMapTexture2DINTEL: ?fn (GLuint, GLint, GLbitfield, [*c]GLint, [*c]GLenum) callconv(.C) ?*anyopaque;
pub extern var epoxy_glMapVertexAttrib1dAPPLE: ?fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMapVertexAttrib1fAPPLE: ?fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMapVertexAttrib2dAPPLE: ?fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMapVertexAttrib2fAPPLE: ?fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMaterialf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMaterialfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMateriali: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMaterialiv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMaterialx: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glMaterialxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glMaterialxv: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMaterialxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMatrixFrustumEXT: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixIndexPointerARB: ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMatrixIndexPointerOES: ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMatrixIndexubvARB: ?fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glMatrixIndexuivARB: ?fn (GLint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMatrixIndexusvARB: ?fn (GLint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glMatrixLoad3x2fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixLoad3x3fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixLoadIdentityEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMatrixLoadTranspose3x3fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixLoadTransposedEXT: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixLoadTransposefEXT: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixLoaddEXT: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixLoadfEXT: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixMode: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMatrixMult3x2fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixMult3x3fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixMultTranspose3x3fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixMultTransposedEXT: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixMultTransposefEXT: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixMultdEXT: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixMultfEXT: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixOrthoEXT: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixPopEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMatrixPushEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMatrixRotatedEXT: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixRotatefEXT: ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixScaledEXT: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixScalefEXT: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixTranslatedEXT: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixTranslatefEXT: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMaxShaderCompilerThreadsARB: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glMaxShaderCompilerThreadsKHR: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glMemoryBarrier: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glMemoryBarrierByRegion: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glMemoryBarrierEXT: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glMemoryObjectParameterivEXT: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMinSampleShading: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glMinSampleShadingARB: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glMinSampleShadingOES: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glMinmax: ?fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub extern var epoxy_glMinmaxEXT: ?fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub extern var epoxy_glMultMatrixd: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultMatrixf: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultMatrixx: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultMatrixxOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultTransposeMatrixd: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultTransposeMatrixdARB: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultTransposeMatrixf: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultTransposeMatrixfARB: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultTransposeMatrixxOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiDrawArrays: ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysEXT: ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirect: ?fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectAMD: ?fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectBindlessCountNV: ?fn (GLenum, ?*const anyopaque, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectBindlessNV: ?fn (GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectCount: ?fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectCountARB: ?fn (GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectEXT: ?fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementArrayAPPLE: ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElements: ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsBaseVertex: ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsBaseVertexEXT: ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsEXT: ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirect: ?fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectAMD: ?fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectBindlessCountNV: ?fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectBindlessNV: ?fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectCount: ?fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectCountARB: ?fn (GLenum, GLenum, ?*const anyopaque, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectEXT: ?fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawMeshTasksIndirectCountNV: ?fn (GLintptr, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawMeshTasksIndirectNV: ?fn (GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawRangeElementArrayAPPLE: ?fn (GLenum, GLuint, GLuint, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiModeDrawArraysIBM: ?fn ([*c]const GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiModeDrawElementsIBM: ?fn ([*c]const GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexBufferEXT: ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1bOES: ?fn (GLenum, GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1bvOES: ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1d: ?fn (GLenum, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1dARB: ?fn (GLenum, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1dv: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1dvARB: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1f: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1fARB: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1fv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1fvARB: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1hNV: ?fn (GLenum, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1hvNV: ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1i: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1iARB: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1iv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1ivARB: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1s: ?fn (GLenum, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1sARB: ?fn (GLenum, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1sv: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1svARB: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1xOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1xvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2bOES: ?fn (GLenum, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2bvOES: ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2d: ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2dARB: ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2dv: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2dvARB: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2f: ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2fARB: ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2fv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2fvARB: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2hNV: ?fn (GLenum, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2hvNV: ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2i: ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2iARB: ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2iv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2ivARB: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2s: ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2sARB: ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2sv: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2svARB: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2xOES: ?fn (GLenum, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2xvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3bOES: ?fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3bvOES: ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3d: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3dARB: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3dv: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3dvARB: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3f: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3fARB: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3fv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3fvARB: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3hNV: ?fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3hvNV: ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3i: ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3iARB: ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3iv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3ivARB: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3s: ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3sARB: ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3sv: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3svARB: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3xOES: ?fn (GLenum, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3xvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4bOES: ?fn (GLenum, GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4bvOES: ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4d: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4dARB: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4dv: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4dvARB: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4f: ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4fARB: ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4fv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4fvARB: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4hNV: ?fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4hvNV: ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4i: ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4iARB: ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4iv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4ivARB: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4s: ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4sARB: ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4sv: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4svARB: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4x: ?fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4xOES: ?fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4xvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP1ui: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP1uiv: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP2ui: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP2uiv: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP3ui: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP3uiv: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP4ui: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP4uiv: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordPointerEXT: ?fn (GLenum, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMultiTexEnvfEXT: ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexEnvfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexEnviEXT: ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexEnvivEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexGendEXT: ?fn (GLenum, GLenum, GLenum, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexGendvEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexGenfEXT: ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexGenfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexGeniEXT: ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexGenivEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexImage1DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMultiTexImage2DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMultiTexImage3DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMultiTexParameterIivEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexParameterIuivEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexParameterfEXT: ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexParameterfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexParameteriEXT: ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexParameterivEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexRenderbufferEXT: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexSubImage1DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMultiTexSubImage2DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMultiTexSubImage3DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMulticastBarrierNV: ?fn () callconv(.C) void;
pub extern var epoxy_glMulticastBlitFramebufferNV: ?fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glMulticastBufferSubDataNV: ?fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glMulticastCopyBufferSubDataNV: ?fn (GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glMulticastCopyImageSubDataNV: ?fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMulticastFramebufferSampleLocationsfvNV: ?fn (GLuint, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMulticastGetQueryObjecti64vNV: ?fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glMulticastGetQueryObjectivNV: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glMulticastGetQueryObjectui64vNV: ?fn (GLuint, GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glMulticastGetQueryObjectuivNV: ?fn (GLuint, GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glMulticastScissorArrayvNVX: ?fn (GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMulticastViewportArrayvNVX: ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMulticastViewportPositionWScaleNVX: ?fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMulticastWaitSyncNV: ?fn (GLuint, GLbitfield) callconv(.C) void;
pub extern var epoxy_glNamedBufferAttachMemoryNV: ?fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glNamedBufferData: ?fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub extern var epoxy_glNamedBufferDataEXT: ?fn (GLuint, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.C) void;
pub extern var epoxy_glNamedBufferPageCommitmentARB: ?fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub extern var epoxy_glNamedBufferPageCommitmentEXT: ?fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub extern var epoxy_glNamedBufferStorage: ?fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub extern var epoxy_glNamedBufferStorageEXT: ?fn (GLuint, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.C) void;
pub extern var epoxy_glNamedBufferStorageExternalEXT: ?fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub extern var epoxy_glNamedBufferStorageMemEXT: ?fn (GLuint, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glNamedBufferSubData: ?fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glNamedBufferSubDataEXT: ?fn (GLuint, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glNamedCopyBufferSubDataEXT: ?fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferDrawBuffer: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferDrawBuffers: ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferParameteri: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferParameteriEXT: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferReadBuffer: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferRenderbuffer: ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferRenderbufferEXT: ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferSampleLocationsfvARB: ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferSampleLocationsfvNV: ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferSamplePositionsfvAMD: ?fn (GLuint, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTexture: ?fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTexture1DEXT: ?fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTexture2DEXT: ?fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTexture3DEXT: ?fn (GLuint, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTextureEXT: ?fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTextureFaceEXT: ?fn (GLuint, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTextureLayer: ?fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTextureLayerEXT: ?fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameter4dEXT: ?fn (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameter4dvEXT: ?fn (GLuint, GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameter4fEXT: ?fn (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameter4fvEXT: ?fn (GLuint, GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameterI4iEXT: ?fn (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameterI4ivEXT: ?fn (GLuint, GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameterI4uiEXT: ?fn (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameterI4uivEXT: ?fn (GLuint, GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameters4fvEXT: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParametersI4ivEXT: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParametersI4uivEXT: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glNamedProgramStringEXT: ?fn (GLuint, GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorage: ?fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorageEXT: ?fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorageMultisample: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorageMultisampleAdvancedAMD: ?fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorageMultisampleCoverageEXT: ?fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorageMultisampleEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedStringARB: ?fn (GLenum, GLint, [*c]const GLchar, GLint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glNewList: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glNewObjectBufferATI: ?fn (GLsizei, ?*const anyopaque, GLenum) callconv(.C) GLuint;
pub extern var epoxy_glNormal3b: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glNormal3bv: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glNormal3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glNormal3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glNormal3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glNormal3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glNormal3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNormal3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNormal3hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glNormal3hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glNormal3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNormal3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glNormal3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glNormal3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glNormal3x: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glNormal3xOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glNormal3xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glNormalFormatNV: ?fn (GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glNormalP3ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glNormalP3uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glNormalPointer: ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glNormalPointerEXT: ?fn (GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glNormalPointerListIBM: ?fn (GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glNormalPointervINTEL: ?fn (GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glNormalStream3bATI: ?fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glNormalStream3bvATI: ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glNormalStream3dATI: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glNormalStream3dvATI: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glNormalStream3fATI: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glNormalStream3fvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNormalStream3iATI: ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNormalStream3ivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glNormalStream3sATI: ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glNormalStream3svATI: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glObjectLabel: ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glObjectLabelKHR: ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glObjectPtrLabel: ?fn (?*const anyopaque, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glObjectPtrLabelKHR: ?fn (?*const anyopaque, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glObjectPurgeableAPPLE: ?fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub extern var epoxy_glObjectUnpurgeableAPPLE: ?fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub extern var epoxy_glOrtho: ?fn (GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glOrthof: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glOrthofOES: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glOrthox: ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glOrthoxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glPNTrianglesfATI: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPNTrianglesiATI: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPassTexCoordATI: ?fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glPassThrough: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glPassThroughxOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glPatchParameterfv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPatchParameteri: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPatchParameteriEXT: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPatchParameteriOES: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPathColorGenNV: ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPathCommandsNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glPathCoordsNV: ?fn (GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glPathCoverDepthFuncNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glPathDashArrayNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPathFogGenNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glPathGlyphIndexArrayNV: ?fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub extern var epoxy_glPathGlyphIndexRangeNV: ?fn (GLenum, ?*const anyopaque, GLbitfield, GLuint, GLfloat, GLuint) callconv(.C) GLenum;
pub extern var epoxy_glPathGlyphRangeNV: ?fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glPathGlyphsNV: ?fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLenum, GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glPathMemoryGlyphIndexArrayNV: ?fn (GLuint, GLenum, GLsizeiptr, ?*const anyopaque, GLsizei, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub extern var epoxy_glPathParameterfNV: ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPathParameterfvNV: ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPathParameteriNV: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPathParameterivNV: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glPathStencilDepthOffsetNV: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPathStencilFuncNV: ?fn (GLenum, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glPathStringNV: ?fn (GLuint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glPathSubCommandsNV: ?fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glPathSubCoordsNV: ?fn (GLuint, GLsizei, GLsizei, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glPathTexGenNV: ?fn (GLenum, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPauseTransformFeedback: ?fn () callconv(.C) void;
pub extern var epoxy_glPauseTransformFeedbackNV: ?fn () callconv(.C) void;
pub extern var epoxy_glPixelDataRangeNV: ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glPixelMapfv: ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelMapuiv: ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glPixelMapusv: ?fn (GLenum, GLsizei, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glPixelMapx: ?fn (GLenum, GLint, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glPixelStoref: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelStorei: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPixelStorex: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glPixelTexGenParameterfSGIS: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelTexGenParameterfvSGIS: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelTexGenParameteriSGIS: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPixelTexGenParameterivSGIS: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glPixelTexGenSGIX: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glPixelTransferf: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelTransferi: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPixelTransferxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glPixelTransformParameterfEXT: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelTransformParameterfvEXT: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelTransformParameteriEXT: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPixelTransformParameterivEXT: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glPixelZoom: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelZoomxOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glPointAlongPathNV: ?fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) callconv(.C) GLboolean;
pub extern var epoxy_glPointParameterf: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfARB: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfEXT: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfSGIS: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfvARB: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfvEXT: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfvSGIS: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameteri: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPointParameteriNV: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPointParameteriv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glPointParameterivNV: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glPointParameterx: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glPointParameterxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glPointParameterxv: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glPointParameterxvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glPointSize: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glPointSizePointerOES: ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glPointSizex: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glPointSizexOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glPollAsyncSGIX: ?fn ([*c]GLuint) callconv(.C) GLint;
pub extern var epoxy_glPollInstrumentsSGIX: ?fn ([*c]GLint) callconv(.C) GLint;
pub extern var epoxy_glPolygonMode: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glPolygonModeNV: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glPolygonOffset: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPolygonOffsetClamp: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPolygonOffsetClampEXT: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPolygonOffsetEXT: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPolygonOffsetx: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glPolygonOffsetxOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glPolygonStipple: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glPopAttrib: ?fn () callconv(.C) void;
pub extern var epoxy_glPopClientAttrib: ?fn () callconv(.C) void;
pub extern var epoxy_glPopDebugGroup: ?fn () callconv(.C) void;
pub extern var epoxy_glPopDebugGroupKHR: ?fn () callconv(.C) void;
pub extern var epoxy_glPopGroupMarkerEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glPopMatrix: ?fn () callconv(.C) void;
pub extern var epoxy_glPopName: ?fn () callconv(.C) void;
pub extern var epoxy_glPresentFrameDualFillNV: ?fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glPresentFrameKeyedNV: ?fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glPrimitiveBoundingBox: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPrimitiveBoundingBoxARB: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPrimitiveBoundingBoxEXT: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPrimitiveBoundingBoxOES: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPrimitiveRestartIndex: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glPrimitiveRestartIndexNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glPrimitiveRestartNV: ?fn () callconv(.C) void;
pub extern var epoxy_glPrioritizeTextures: ?fn (GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPrioritizeTexturesEXT: ?fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.C) void;
pub extern var epoxy_glPrioritizeTexturesxOES: ?fn (GLsizei, [*c]const GLuint, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glProgramBinary: ?fn (GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub extern var epoxy_glProgramBinaryOES: ?fn (GLuint, GLenum, ?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glProgramBufferParametersIivNV: ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramBufferParametersIuivNV: ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramBufferParametersfvNV: ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameter4dARB: ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameter4dvARB: ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameter4fARB: ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameter4fvARB: ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameterI4iNV: ?fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameterI4ivNV: ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameterI4uiNV: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameterI4uivNV: ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameters4fvEXT: ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramEnvParametersI4ivNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramEnvParametersI4uivNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameter4dARB: ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameter4dvARB: ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameter4fARB: ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameter4fvARB: ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameterI4iNV: ?fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameterI4ivNV: ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameterI4uiNV: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameterI4uivNV: ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameters4fvEXT: ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramLocalParametersI4ivNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParametersI4uivNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramNamedParameter4dNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramNamedParameter4dvNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramNamedParameter4fNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramNamedParameter4fvNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramParameter4dNV: ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramParameter4dvNV: ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramParameter4fNV: ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramParameter4fvNV: ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramParameteri: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glProgramParameteriARB: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glProgramParameteriEXT: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glProgramParameters4dvNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramParameters4fvNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramPathFragmentInputGenNV: ?fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramStringARB: ?fn (GLenum, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glProgramSubroutineParametersuivNV: ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1d: ?fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform1dEXT: ?fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform1dv: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform1dvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform1f: ?fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform1fEXT: ?fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform1fv: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform1fvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform1i: ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1i64ARB: ?fn (GLuint, GLint, GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform1i64NV: ?fn (GLuint, GLint, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform1i64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform1i64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform1iEXT: ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1iv: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ui: ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ui64ARB: ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ui64NV: ?fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform1uiEXT: ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1uiv: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1uivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2d: ?fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform2dEXT: ?fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform2dv: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform2dvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform2f: ?fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform2fEXT: ?fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform2fv: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform2fvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform2i: ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2i64ARB: ?fn (GLuint, GLint, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform2i64NV: ?fn (GLuint, GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform2i64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform2i64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform2iEXT: ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2iv: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ui: ?fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ui64ARB: ?fn (GLuint, GLint, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ui64NV: ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform2uiEXT: ?fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2uiv: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2uivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3d: ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform3dEXT: ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform3dv: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform3dvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform3f: ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform3fEXT: ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform3fv: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform3fvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform3i: ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3i64ARB: ?fn (GLuint, GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform3i64NV: ?fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform3i64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform3i64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform3iEXT: ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3iv: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ui: ?fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ui64ARB: ?fn (GLuint, GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ui64NV: ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform3uiEXT: ?fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3uiv: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3uivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4d: ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform4dEXT: ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform4dv: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform4dvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform4f: ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform4fEXT: ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform4fv: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform4fvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform4i: ?fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4i64ARB: ?fn (GLuint, GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform4i64NV: ?fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform4i64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform4i64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform4iEXT: ?fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4iv: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ui: ?fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ui64ARB: ?fn (GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ui64NV: ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform4uiEXT: ?fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4uiv: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4uivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64ARB: ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64IMG: ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64NV: ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64vIMG: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x3dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x3dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x3fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x3fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x4dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x4dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x4fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x4fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x2dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x2dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x2fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x2fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x4dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x4dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x4fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x4fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x2dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x2dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x2fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x2fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x3dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x3dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x3fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x3fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformui64NV: ?fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniformui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramVertexLimitNV: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glProvokingVertex: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glProvokingVertexEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glPushAttrib: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glPushClientAttrib: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glPushClientAttribDefaultEXT: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glPushDebugGroup: ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glPushDebugGroupKHR: ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glPushGroupMarkerEXT: ?fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glPushMatrix: ?fn () callconv(.C) void;
pub extern var epoxy_glPushName: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glQueryCounter: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glQueryCounterEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glQueryMatrixxOES: ?fn ([*c]GLfixed, [*c]GLint) callconv(.C) GLbitfield;
pub extern var epoxy_glQueryObjectParameteruiAMD: ?fn (GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glQueryResourceNV: ?fn (GLenum, GLint, GLuint, [*c]GLint) callconv(.C) GLint;
pub extern var epoxy_glQueryResourceTagNV: ?fn (GLint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glRasterPos2d: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos2dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos2f: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos2fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos2i: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos2iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos2s: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos2sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos2xOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterPos2xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterPos3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos3xOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterPos3xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterPos4d: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos4dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos4f: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos4fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos4i: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos4iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos4s: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos4sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos4xOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterPos4xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterSamplesEXT: ?fn (GLuint, GLboolean) callconv(.C) void;
pub extern var epoxy_glReadBuffer: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glReadBufferIndexedEXT: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glReadBufferNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glReadInstrumentsSGIX: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glReadPixels: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glReadnPixels: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glReadnPixelsARB: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glReadnPixelsEXT: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glReadnPixelsKHR: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glRectd: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glRectdv: ?fn ([*c]const GLdouble, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glRectf: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glRectfv: ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glRecti: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glRectiv: ?fn ([*c]const GLint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glRects: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glRectsv: ?fn ([*c]const GLshort, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glRectxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glRectxvOES: ?fn ([*c]const GLfixed, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glReferencePlaneSGIX: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glReleaseKeyedMutexWin32EXT: ?fn (GLuint, GLuint64) callconv(.C) GLboolean;
pub extern var epoxy_glReleaseShaderCompiler: ?fn () callconv(.C) void;
pub extern var epoxy_glRenderGpuMaskNV: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glRenderMode: ?fn (GLenum) callconv(.C) GLint;
pub extern var epoxy_glRenderbufferStorage: ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageEXT: ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisample: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleANGLE: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleAPPLE: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleAdvancedAMD: ?fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleCoverageNV: ?fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleIMG: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleNV: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageOES: ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glReplacementCodePointerSUN: ?fn (GLenum, GLsizei, [*c]?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glReplacementCodeubSUN: ?fn (GLubyte) callconv(.C) void;
pub extern var epoxy_glReplacementCodeubvSUN: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor3fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor3fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor4fNormal3fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor4fNormal3fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor4ubVertex3fSUN: ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor4ubVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiNormal3fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiNormal3fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiSUN: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuivSUN: ?fn ([*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glReplacementCodeusSUN: ?fn (GLushort) callconv(.C) void;
pub extern var epoxy_glReplacementCodeusvSUN: ?fn ([*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glRequestResidentProgramsNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glResetHistogram: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glResetHistogramEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glResetMemoryObjectParameterNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glResetMinmax: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glResetMinmaxEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glResizeBuffersMESA: ?fn () callconv(.C) void;
pub extern var epoxy_glResolveDepthValuesNV: ?fn () callconv(.C) void;
pub extern var epoxy_glResolveMultisampleFramebufferAPPLE: ?fn () callconv(.C) void;
pub extern var epoxy_glResumeTransformFeedback: ?fn () callconv(.C) void;
pub extern var epoxy_glResumeTransformFeedbackNV: ?fn () callconv(.C) void;
pub extern var epoxy_glRotated: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glRotatef: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glRotatex: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glRotatexOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glSampleCoverage: ?fn (GLfloat, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleCoverageARB: ?fn (GLfloat, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleCoveragex: ?fn (GLclampx, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleCoveragexOES: ?fn (GLclampx, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleMapATI: ?fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glSampleMaskEXT: ?fn (GLclampf, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleMaskIndexedNV: ?fn (GLuint, GLbitfield) callconv(.C) void;
pub extern var epoxy_glSampleMaskSGIS: ?fn (GLclampf, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleMaski: ?fn (GLuint, GLbitfield) callconv(.C) void;
pub extern var epoxy_glSamplePatternEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glSamplePatternSGIS: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIiv: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIivEXT: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIivOES: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIuiv: ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIuivEXT: ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIuivOES: ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterf: ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glSamplerParameterfv: ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSamplerParameteri: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glSamplerParameteriv: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScaled: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glScalef: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glScalex: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glScalexOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glScissor: ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glScissorArrayv: ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorArrayvNV: ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorArrayvOES: ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorExclusiveArrayvNV: ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorExclusiveNV: ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glScissorIndexed: ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glScissorIndexedNV: ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glScissorIndexedOES: ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glScissorIndexedv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorIndexedvNV: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorIndexedvOES: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3b: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3bEXT: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3bv: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3bvEXT: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3dEXT: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3dvEXT: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3fEXT: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3fvEXT: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3iEXT: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ivEXT: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3sEXT: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3svEXT: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ub: ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ubEXT: ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ubv: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ubvEXT: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ui: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3uiEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3uiv: ?fn ([*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3uivEXT: ?fn ([*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3us: ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3usEXT: ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3usv: ?fn ([*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3usvEXT: ?fn ([*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glSecondaryColorFormatNV: ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glSecondaryColorP3ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColorP3uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColorPointer: ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glSecondaryColorPointerEXT: ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glSecondaryColorPointerListIBM: ?fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glSelectBuffer: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glSelectPerfMonitorCountersAMD: ?fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glSemaphoreParameterui64vEXT: ?fn (GLuint, GLenum, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glSeparableFilter2D: ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glSeparableFilter2DEXT: ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glSetFenceAPPLE: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glSetFenceNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glSetFragmentShaderConstantATI: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSetInvariantEXT: ?fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glSetLocalConstantEXT: ?fn (GLuint, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glSetMultisamplefvAMD: ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glShadeModel: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glShaderBinary: ?fn (GLsizei, [*c]const GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.C) void;
pub extern var epoxy_glShaderOp1EXT: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glShaderOp2EXT: ?fn (GLenum, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glShaderOp3EXT: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glShaderSource: ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glShaderSourceARB: ?fn (GLhandleARB, GLsizei, [*c][*c]const GLcharARB, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glShaderStorageBlockBinding: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glShadingRateImageBarrierNV: ?fn (GLboolean) callconv(.C) void;
pub extern var epoxy_glShadingRateImagePaletteNV: ?fn (GLuint, GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glShadingRateSampleOrderCustomNV: ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glShadingRateSampleOrderNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glSharpenTexFuncSGIS: ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSignalSemaphoreEXT: ?fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glSignalSemaphoreui64NVX: ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glSignalVkFenceNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glSignalVkSemaphoreNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glSpecializeShader: ?fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSpecializeShaderARB: ?fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSpriteParameterfSGIX: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glSpriteParameterfvSGIX: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSpriteParameteriSGIX: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glSpriteParameterivSGIX: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glStartInstrumentsSGIX: ?fn () callconv(.C) void;
pub extern var epoxy_glStartTilingQCOM: ?fn (GLuint, GLuint, GLuint, GLuint, GLbitfield) callconv(.C) void;
pub extern var epoxy_glStateCaptureNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glStencilClearTagEXT: ?fn (GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilFillPathInstancedNV: ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glStencilFillPathNV: ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilFunc: ?fn (GLenum, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilFuncSeparate: ?fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilFuncSeparateATI: ?fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilMask: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glStencilMaskSeparate: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilOp: ?fn (GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glStencilOpSeparate: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glStencilOpSeparateATI: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glStencilOpValueAMD: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilStrokePathInstancedNV: ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glStencilStrokePathNV: ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilThenCoverFillPathInstancedNV: ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glStencilThenCoverFillPathNV: ?fn (GLuint, GLenum, GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glStencilThenCoverStrokePathInstancedNV: ?fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glStencilThenCoverStrokePathNV: ?fn (GLuint, GLint, GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glStopInstrumentsSGIX: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glStringMarkerGREMEDY: ?fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glSubpixelPrecisionBiasNV: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glSwizzleEXT: ?fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glSyncTextureINTEL: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glTagSampleBufferSGIX: ?fn () callconv(.C) void;
pub extern var epoxy_glTangent3bEXT: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glTangent3bvEXT: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glTangent3dEXT: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glTangent3dvEXT: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTangent3fEXT: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTangent3fvEXT: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTangent3iEXT: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glTangent3ivEXT: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTangent3sEXT: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glTangent3svEXT: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glTangentPointerEXT: ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTbufferMask3DFX: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glTessellationFactorAMD: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glTessellationModeAMD: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glTestFenceAPPLE: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glTestFenceNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glTestObjectAPPLE: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glTexAttachMemoryNV: ?fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexBuffer: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexBufferARB: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexBufferEXT: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexBufferOES: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexBufferRange: ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTexBufferRangeEXT: ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTexBufferRangeOES: ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTexBumpParameterfvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexBumpParameterivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord1bOES: ?fn (GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord1bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord1d: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord1dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord1f: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord1fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord1hNV: ?fn (GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord1hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord1i: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord1iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord1s: ?fn (GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord1sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord1xOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord1xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord2bOES: ?fn (GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord2bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord2d: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord2dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord2f: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor4fNormal3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor4fNormal3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor4ubVertex3fSUN: ?fn (GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor4ubVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fNormal3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fNormal3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2hNV: ?fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord2hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord2i: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord2iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord2s: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord2sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord2xOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord2xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord3bOES: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord3bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord3hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord3hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord3xOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord3xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord4bOES: ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord4bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord4d: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord4dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord4f: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4fColor4fNormal3fVertex4fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4fColor4fNormal3fVertex4fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4fVertex4fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4fVertex4fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord4hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord4i: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord4iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord4s: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord4sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord4xOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord4xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoordFormatNV: ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexCoordP1ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP1uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP2ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP2uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP3ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP3uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP4ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP4uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordPointer: ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexCoordPointerEXT: ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexCoordPointerListIBM: ?fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glTexCoordPointervINTEL: ?fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexEnvf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexEnvfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexEnvi: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTexEnviv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexEnvx: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexEnvxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexEnvxv: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexEnvxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexFilterFuncSGIS: ?fn (GLenum, GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexGend: ?fn (GLenum, GLenum, GLdouble) callconv(.C) void;
pub extern var epoxy_glTexGendv: ?fn (GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTexGenf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexGenfOES: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexGenfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexGenfvOES: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexGeni: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTexGeniOES: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTexGeniv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexGenivOES: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexGenxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexGenxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexImage1D: ?fn (GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexImage2D: ?fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexImage2DMultisample: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexImage2DMultisampleCoverageNV: ?fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexImage3D: ?fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexImage3DEXT: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexImage3DMultisample: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexImage3DMultisampleCoverageNV: ?fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexImage3DOES: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexImage4DSGIS: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexPageCommitmentARB: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexPageCommitmentEXT: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexParameterIiv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexParameterIivEXT: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexParameterIivOES: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexParameterIuiv: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexParameterIuivEXT: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexParameterIuivOES: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexParameterf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexParameterfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexParameteri: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTexParameteriv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexParameterx: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexParameterxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexParameterxv: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexParameterxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexRenderbufferNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexStorage1D: ?fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage1DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage2D: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage2DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage2DMultisample: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexStorage3D: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage3DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage3DMultisample: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexStorage3DMultisampleOES: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexStorageMem1DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexStorageMem2DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexStorageMem2DMultisampleEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexStorageMem3DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexStorageMem3DMultisampleEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexStorageSparseAMD: ?fn (GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub extern var epoxy_glTexSubImage1D: ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexSubImage1DEXT: ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexSubImage2D: ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexSubImage2DEXT: ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexSubImage3D: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexSubImage3DEXT: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexSubImage3DOES: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTexSubImage4DSGIS: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureAttachMemoryNV: ?fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureBarrier: ?fn () callconv(.C) void;
pub extern var epoxy_glTextureBarrierNV: ?fn () callconv(.C) void;
pub extern var epoxy_glTextureBuffer: ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTextureBufferEXT: ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTextureBufferRange: ?fn (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTextureBufferRangeEXT: ?fn (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTextureColorMaskSGIS: ?fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureFoveationParametersQCOM: ?fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTextureImage1DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureImage2DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureImage2DMultisampleCoverageNV: ?fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureImage2DMultisampleNV: ?fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureImage3DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureImage3DMultisampleCoverageNV: ?fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureImage3DMultisampleNV: ?fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureLightEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glTextureMaterialEXT: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glTextureNormalEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glTexturePageCommitmentEXT: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureParameterIiv: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTextureParameterIivEXT: ?fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTextureParameterIuiv: ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTextureParameterIuivEXT: ?fn (GLuint, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTextureParameterf: ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTextureParameterfEXT: ?fn (GLuint, GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTextureParameterfv: ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTextureParameterfvEXT: ?fn (GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTextureParameteri: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTextureParameteriEXT: ?fn (GLuint, GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTextureParameteriv: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTextureParameterivEXT: ?fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTextureRangeAPPLE: ?fn (GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureRenderbufferEXT: ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTextureStorage1D: ?fn (GLuint, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage1DEXT: ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage2D: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage2DEXT: ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage2DMultisample: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureStorage2DMultisampleEXT: ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureStorage3D: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage3DEXT: ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage3DMultisample: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureStorage3DMultisampleEXT: ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureStorageMem1DEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureStorageMem2DEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureStorageMem2DMultisampleEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureStorageMem3DEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureStorageMem3DMultisampleEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureStorageSparseAMD: ?fn (GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub extern var epoxy_glTextureSubImage1D: ?fn (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureSubImage1DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureSubImage2D: ?fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureSubImage2DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureSubImage3D: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureSubImage3DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glTextureView: ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glTextureViewEXT: ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glTextureViewOES: ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glTrackMatrixNV: ?fn (GLenum, GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackAttribsNV: ?fn (GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackBufferBase: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackBufferRange: ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackStreamAttribsNV: ?fn (GLsizei, [*c]const GLint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackVaryings: ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackVaryingsEXT: ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackVaryingsNV: ?fn (GLuint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformPathNV: ?fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTranslated: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glTranslatef: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTranslatex: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glTranslatexOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glUniform1d: ?fn (GLint, GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform1dv: ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform1f: ?fn (GLint, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform1fARB: ?fn (GLint, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform1fv: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform1fvARB: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform1i: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform1i64ARB: ?fn (GLint, GLint64) callconv(.C) void;
pub extern var epoxy_glUniform1i64NV: ?fn (GLint, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform1i64vARB: ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glUniform1i64vNV: ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform1iARB: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform1iv: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform1ivARB: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform1ui: ?fn (GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform1ui64ARB: ?fn (GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform1ui64NV: ?fn (GLint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform1ui64vARB: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform1ui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform1uiEXT: ?fn (GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform1uiv: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform1uivEXT: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform2d: ?fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform2dv: ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform2f: ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform2fARB: ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform2fv: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform2fvARB: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform2i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform2i64ARB: ?fn (GLint, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glUniform2i64NV: ?fn (GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform2i64vARB: ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glUniform2i64vNV: ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform2iARB: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform2iv: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform2ivARB: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform2ui: ?fn (GLint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform2ui64ARB: ?fn (GLint, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform2ui64NV: ?fn (GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform2ui64vARB: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform2ui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform2uiEXT: ?fn (GLint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform2uiv: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform2uivEXT: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform3d: ?fn (GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform3dv: ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform3f: ?fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform3fARB: ?fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform3fv: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform3fvARB: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform3i: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform3i64ARB: ?fn (GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glUniform3i64NV: ?fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform3i64vARB: ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glUniform3i64vNV: ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform3iARB: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform3iv: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform3ivARB: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform3ui: ?fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform3ui64ARB: ?fn (GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform3ui64NV: ?fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform3ui64vARB: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform3ui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform3uiEXT: ?fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform3uiv: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform3uivEXT: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform4d: ?fn (GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform4dv: ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform4f: ?fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform4fARB: ?fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform4fv: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform4fvARB: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform4i: ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform4i64ARB: ?fn (GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glUniform4i64NV: ?fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform4i64vARB: ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glUniform4i64vNV: ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform4iARB: ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform4iv: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform4ivARB: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform4ui: ?fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform4ui64ARB: ?fn (GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform4ui64NV: ?fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform4ui64vARB: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform4ui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform4uiEXT: ?fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform4uiv: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform4uivEXT: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniformBlockBinding: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniformBufferEXT: ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64ARB: ?fn (GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64IMG: ?fn (GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64NV: ?fn (GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64vARB: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64vIMG: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2fvARB: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x3dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x3fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x3fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x4dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x4fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x4fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3fvARB: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x2dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x2fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x2fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x4dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x4fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x4fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4fvARB: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x2dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x2fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x2fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x3dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x3fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x3fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformSubroutinesuiv: ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniformui64NV: ?fn (GLint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniformui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUnlockArraysEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glUnmapBuffer: ?fn (GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glUnmapBufferARB: ?fn (GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glUnmapBufferOES: ?fn (GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glUnmapNamedBuffer: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glUnmapNamedBufferEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glUnmapObjectBufferATI: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glUnmapTexture2DINTEL: ?fn (GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glUpdateObjectBufferATI: ?fn (GLuint, GLuint, GLsizei, ?*const anyopaque, GLenum) callconv(.C) void;
pub extern var epoxy_glUploadGpuMaskNVX: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glUseProgram: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glUseProgramObjectARB: ?fn (GLhandleARB) callconv(.C) void;
pub extern var epoxy_glUseProgramStages: ?fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub extern var epoxy_glUseProgramStagesEXT: ?fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub extern var epoxy_glUseShaderProgramEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVDPAUFiniNV: ?fn () callconv(.C) void;
pub extern var epoxy_glVDPAUGetSurfaceivNV: ?fn (GLvdpauSurfaceNV, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glVDPAUInitNV: ?fn (?*const anyopaque, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVDPAUIsSurfaceNV: ?fn (GLvdpauSurfaceNV) callconv(.C) GLboolean;
pub extern var epoxy_glVDPAUMapSurfacesNV: ?fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub extern var epoxy_glVDPAURegisterOutputSurfaceNV: ?fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub extern var epoxy_glVDPAURegisterVideoSurfaceNV: ?fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub extern var epoxy_glVDPAURegisterVideoSurfaceWithPictureStructureNV: ?fn (?*const anyopaque, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) GLvdpauSurfaceNV;
pub extern var epoxy_glVDPAUSurfaceAccessNV: ?fn (GLvdpauSurfaceNV, GLenum) callconv(.C) void;
pub extern var epoxy_glVDPAUUnmapSurfacesNV: ?fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub extern var epoxy_glVDPAUUnregisterSurfaceNV: ?fn (GLvdpauSurfaceNV) callconv(.C) void;
pub extern var epoxy_glValidateProgram: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glValidateProgramARB: ?fn (GLhandleARB) callconv(.C) void;
pub extern var epoxy_glValidateProgramPipeline: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glValidateProgramPipelineEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glVariantArrayObjectATI: ?fn (GLuint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVariantPointerEXT: ?fn (GLuint, GLenum, GLuint, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVariantbvEXT: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVariantdvEXT: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVariantfvEXT: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVariantivEXT: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVariantsvEXT: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVariantubvEXT: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVariantuivEXT: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVariantusvEXT: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertex2bOES: ?fn (GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex2bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex2d: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex2dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex2f: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex2fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex2hNV: ?fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex2hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex2i: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertex2iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertex2s: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertex2sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertex2xOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glVertex2xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glVertex3bOES: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex3bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex3hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex3hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertex3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertex3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertex3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertex3xOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glVertex3xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glVertex4bOES: ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex4bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex4d: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex4dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex4f: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex4fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex4hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex4hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex4i: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertex4iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertex4s: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertex4sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertex4xOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glVertex4xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glVertexArrayAttribBinding: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayAttribFormat: ?fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayAttribIFormat: ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayAttribLFormat: ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayBindVertexBufferEXT: ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexArrayBindingDivisor: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayColorOffsetEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayEdgeFlagOffsetEXT: ?fn (GLuint, GLuint, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayElementBuffer: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayFogCoordOffsetEXT: ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayIndexOffsetEXT: ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayMultiTexCoordOffsetEXT: ?fn (GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayNormalOffsetEXT: ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayParameteriAPPLE: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glVertexArrayRangeAPPLE: ?fn (GLsizei, ?*anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexArrayRangeNV: ?fn (GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexArraySecondaryColorOffsetEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayTexCoordOffsetEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribBindingEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribDivisorEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribFormatEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribIFormatEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribIOffsetEXT: ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribLFormatEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribLOffsetEXT: ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribOffsetEXT: ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexBindingDivisorEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexBuffer: ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexBuffers: ?fn (GLuint, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexOffsetEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1d: ?fn (GLuint, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1dARB: ?fn (GLuint, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1dNV: ?fn (GLuint, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1dvARB: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1dvNV: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1f: ?fn (GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1fARB: ?fn (GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1fNV: ?fn (GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1fv: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1fvARB: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1fvNV: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1hNV: ?fn (GLuint, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1hvNV: ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1s: ?fn (GLuint, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1sARB: ?fn (GLuint, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1sNV: ?fn (GLuint, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1sv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1svARB: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1svNV: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2d: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2dARB: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2dNV: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2dvARB: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2dvNV: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2f: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2fARB: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2fNV: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2fv: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2fvARB: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2fvNV: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2hNV: ?fn (GLuint, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2hvNV: ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2s: ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2sARB: ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2sNV: ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2sv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2svARB: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2svNV: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3d: ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3dARB: ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3dNV: ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3dvARB: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3dvNV: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3f: ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3fARB: ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3fNV: ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3fv: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3fvARB: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3fvNV: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3hNV: ?fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3hvNV: ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3s: ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3sARB: ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3sNV: ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3sv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3svARB: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3svNV: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nbv: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NbvARB: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Niv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NivARB: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nsv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NsvARB: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nub: ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NubARB: ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nubv: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NubvARB: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nuiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NuivARB: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nusv: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NusvARB: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4bv: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4bvARB: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4d: ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4dARB: ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4dNV: ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4dvARB: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4dvNV: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4f: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4fARB: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4fNV: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4fv: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4fvARB: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4fvNV: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4hNV: ?fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4hvNV: ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4iv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4ivARB: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4s: ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4sARB: ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4sNV: ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4sv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4svARB: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4svNV: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4ubNV: ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4ubv: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4ubvARB: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4ubvNV: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4uiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4uivARB: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4usv: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4usvARB: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttribArrayObjectATI: ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribBinding: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribDivisor: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribDivisorANGLE: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribDivisorARB: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribDivisorEXT: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribDivisorNV: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribFormat: ?fn (GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribFormatNV: ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1i: ?fn (GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1iEXT: ?fn (GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1iv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1ivEXT: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1ui: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1uiEXT: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1uiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1uivEXT: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2i: ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2iEXT: ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2iv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2ivEXT: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2ui: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2uiEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2uiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2uivEXT: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3i: ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3iEXT: ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3iv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3ivEXT: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3ui: ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3uiEXT: ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3uiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3uivEXT: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4bv: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4bvEXT: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4i: ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4iEXT: ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4iv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4ivEXT: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4sv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4svEXT: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4ubv: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4ubvEXT: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4ui: ?fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4uiEXT: ?fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4uiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4uivEXT: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4usv: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4usvEXT: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttribIFormat: ?fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribIFormatNV: ?fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexAttribIPointer: ?fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexAttribIPointerEXT: ?fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1d: ?fn (GLuint, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1dEXT: ?fn (GLuint, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1dvEXT: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1i64NV: ?fn (GLuint, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1i64vNV: ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1ui64ARB: ?fn (GLuint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1ui64NV: ?fn (GLuint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1ui64vARB: ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1ui64vNV: ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2d: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2dEXT: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2dvEXT: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2i64NV: ?fn (GLuint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2i64vNV: ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2ui64NV: ?fn (GLuint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2ui64vNV: ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3d: ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3dEXT: ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3dvEXT: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3i64NV: ?fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3i64vNV: ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3ui64NV: ?fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3ui64vNV: ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4d: ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4dEXT: ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4dvEXT: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4i64NV: ?fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4i64vNV: ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4ui64NV: ?fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4ui64vNV: ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribLFormat: ?fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribLFormatNV: ?fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexAttribLPointer: ?fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexAttribLPointerEXT: ?fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexAttribP1ui: ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP1uiv: ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP2ui: ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP2uiv: ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP3ui: ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP3uiv: ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP4ui: ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP4uiv: ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribParameteriAMD: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribPointer: ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexAttribPointerARB: ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexAttribPointerNV: ?fn (GLuint, GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexAttribs1dvNV: ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribs1fvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttribs1hvNV: ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttribs1svNV: ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribs2dvNV: ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribs2fvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttribs2hvNV: ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttribs2svNV: ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribs3dvNV: ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribs3fvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttribs3hvNV: ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttribs3svNV: ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribs4dvNV: ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribs4fvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttribs4hvNV: ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttribs4svNV: ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribs4ubvNV: ?fn (GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexBindingDivisor: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexBlendARB: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glVertexBlendEnvfATI: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexBlendEnviATI: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glVertexFormatNV: ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexP2ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexP2uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexP3ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexP3uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexP4ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexP4uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexPointer: ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexPointerEXT: ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexPointerListIBM: ?fn (GLint, GLenum, GLint, [*c]?*const anyopaque, GLint) callconv(.C) void;
pub extern var epoxy_glVertexPointervINTEL: ?fn (GLint, GLenum, [*c]?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexStream1dATI: ?fn (GLenum, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream1dvATI: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream1fATI: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream1fvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream1iATI: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream1ivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream1sATI: ?fn (GLenum, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream1svATI: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream2dATI: ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream2dvATI: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream2fATI: ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream2fvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream2iATI: ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream2ivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream2sATI: ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream2svATI: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream3dATI: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream3dvATI: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream3fATI: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream3fvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream3iATI: ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream3ivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream3sATI: ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream3svATI: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream4dATI: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream4dvATI: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream4fATI: ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream4fvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream4iATI: ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream4ivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream4sATI: ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream4svATI: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexWeightPointerEXT: ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glVertexWeightfEXT: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexWeightfvEXT: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexWeighthNV: ?fn (GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexWeighthvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVideoCaptureNV: ?fn (GLuint, [*c]GLuint, [*c]GLuint64EXT) callconv(.C) GLenum;
pub extern var epoxy_glVideoCaptureStreamParameterdvNV: ?fn (GLuint, GLuint, GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVideoCaptureStreamParameterfvNV: ?fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVideoCaptureStreamParameterivNV: ?fn (GLuint, GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glViewport: ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glViewportArrayv: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportArrayvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportArrayvOES: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedf: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedfNV: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedfOES: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedfv: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedfvNV: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedfvOES: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportPositionWScaleNV: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportSwizzleNV: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glWaitSemaphoreEXT: ?fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glWaitSemaphoreui64NVX: ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glWaitSync: ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub extern var epoxy_glWaitSyncAPPLE: ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub extern var epoxy_glWaitVkSemaphoreNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glWeightPathsNV: ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWeightPointerARB: ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glWeightPointerOES: ?fn (GLint, GLenum, GLsizei, ?*const anyopaque) callconv(.C) void;
pub extern var epoxy_glWeightbvARB: ?fn (GLint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glWeightdvARB: ?fn (GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWeightfvARB: ?fn (GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWeightivARB: ?fn (GLint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWeightsvARB: ?fn (GLint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWeightubvARB: ?fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glWeightuivARB: ?fn (GLint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glWeightusvARB: ?fn (GLint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glWindowPos2d: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2dARB: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2dMESA: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2dvARB: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2dvMESA: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2f: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2fARB: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2fMESA: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2fvARB: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2fvMESA: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2i: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2iARB: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2iMESA: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2ivARB: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2ivMESA: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2s: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos2sARB: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos2sMESA: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos2sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos2svARB: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos2svMESA: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3dARB: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3dMESA: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3dvARB: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3dvMESA: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3fARB: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3fMESA: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3fvARB: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3fvMESA: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3iARB: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3iMESA: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3ivARB: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3ivMESA: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3sARB: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3sMESA: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3svARB: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3svMESA: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos4dMESA: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos4dvMESA: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos4fMESA: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos4fvMESA: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos4iMESA: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos4ivMESA: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos4sMESA: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos4svMESA: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowRectanglesEXT: ?fn (GLenum, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWriteMaskEXT: ?fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern fn epoxy_has_gl_extension(extension: [*c]const u8) bool;
pub extern fn epoxy_is_desktop_gl() bool;
pub extern fn epoxy_gl_version() c_int;
pub extern fn epoxy_glsl_version() c_int;
pub const epoxy_resolver_stub_t = ?fn () callconv(.C) void;
pub const epoxy_resolver_failure_handler_t = ?fn ([*c]const u8) callconv(.C) epoxy_resolver_stub_t;
pub extern fn epoxy_set_resolver_failure_handler(handler: epoxy_resolver_failure_handler_t) epoxy_resolver_failure_handler_t;
pub const GLFWglproc = ?fn () callconv(.C) void;
pub const GLFWvkproc = ?fn () callconv(.C) void;
pub const struct_GLFWmonitor = opaque {};
pub const GLFWmonitor = struct_GLFWmonitor;
pub const struct_GLFWwindow = opaque {};
pub const GLFWwindow = struct_GLFWwindow;
pub const struct_GLFWcursor = opaque {};
pub const GLFWcursor = struct_GLFWcursor;
pub const GLFWerrorfun = ?fn (c_int, [*c]const u8) callconv(.C) void;
pub const GLFWwindowposfun = ?fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowsizefun = ?fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowclosefun = ?fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowrefreshfun = ?fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowfocusfun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowiconifyfun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowmaximizefun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWframebuffersizefun = ?fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowcontentscalefun = ?fn (?*GLFWwindow, f32, f32) callconv(.C) void;
pub const GLFWmousebuttonfun = ?fn (?*GLFWwindow, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcursorposfun = ?fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWcursorenterfun = ?fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWscrollfun = ?fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWkeyfun = ?fn (?*GLFWwindow, c_int, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcharfun = ?fn (?*GLFWwindow, c_uint) callconv(.C) void;
pub const GLFWcharmodsfun = ?fn (?*GLFWwindow, c_uint, c_int) callconv(.C) void;
pub const GLFWdropfun = ?fn (?*GLFWwindow, c_int, [*c][*c]const u8) callconv(.C) void;
pub const GLFWmonitorfun = ?fn (?*GLFWmonitor, c_int) callconv(.C) void;
pub const GLFWjoystickfun = ?fn (c_int, c_int) callconv(.C) void;
pub const struct_GLFWvidmode = extern struct {
    width: c_int,
    height: c_int,
    redBits: c_int,
    greenBits: c_int,
    blueBits: c_int,
    refreshRate: c_int,
};
pub const GLFWvidmode = struct_GLFWvidmode;
pub const struct_GLFWgammaramp = extern struct {
    red: [*c]c_ushort,
    green: [*c]c_ushort,
    blue: [*c]c_ushort,
    size: c_uint,
};
pub const GLFWgammaramp = struct_GLFWgammaramp;
pub const struct_GLFWimage = extern struct {
    width: c_int,
    height: c_int,
    pixels: [*c]u8,
};
pub const GLFWimage = struct_GLFWimage;
pub const struct_GLFWgamepadstate = extern struct {
    buttons: [15]u8,
    axes: [6]f32,
};
pub const GLFWgamepadstate = struct_GLFWgamepadstate;
pub extern fn glfwInit() c_int;
pub extern fn glfwTerminate() void;
pub extern fn glfwInitHint(hint: c_int, value: c_int) void;
pub extern fn glfwGetVersion(major: [*c]c_int, minor: [*c]c_int, rev: [*c]c_int) void;
pub extern fn glfwGetVersionString() [*c]const u8;
pub extern fn glfwGetError(description: [*c][*c]const u8) c_int;
pub extern fn glfwSetErrorCallback(callback: GLFWerrorfun) GLFWerrorfun;
pub extern fn glfwGetMonitors(count: [*c]c_int) [*c]?*GLFWmonitor;
pub extern fn glfwGetPrimaryMonitor() ?*GLFWmonitor;
pub extern fn glfwGetMonitorPos(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwGetMonitorWorkarea(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetMonitorPhysicalSize(monitor: ?*GLFWmonitor, widthMM: [*c]c_int, heightMM: [*c]c_int) void;
pub extern fn glfwGetMonitorContentScale(monitor: ?*GLFWmonitor, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetMonitorName(monitor: ?*GLFWmonitor) [*c]const u8;
pub extern fn glfwSetMonitorUserPointer(monitor: ?*GLFWmonitor, pointer: ?*anyopaque) void;
pub extern fn glfwGetMonitorUserPointer(monitor: ?*GLFWmonitor) ?*anyopaque;
pub extern fn glfwSetMonitorCallback(callback: GLFWmonitorfun) GLFWmonitorfun;
pub extern fn glfwGetVideoModes(monitor: ?*GLFWmonitor, count: [*c]c_int) [*c]const GLFWvidmode;
pub extern fn glfwGetVideoMode(monitor: ?*GLFWmonitor) [*c]const GLFWvidmode;
pub extern fn glfwSetGamma(monitor: ?*GLFWmonitor, gamma: f32) void;
pub extern fn glfwGetGammaRamp(monitor: ?*GLFWmonitor) [*c]const GLFWgammaramp;
pub extern fn glfwSetGammaRamp(monitor: ?*GLFWmonitor, ramp: [*c]const GLFWgammaramp) void;
pub extern fn glfwDefaultWindowHints() void;
pub extern fn glfwWindowHint(hint: c_int, value: c_int) void;
pub extern fn glfwWindowHintString(hint: c_int, value: [*c]const u8) void;
pub extern fn glfwCreateWindow(width: c_int, height: c_int, title: [*c]const u8, monitor: ?*GLFWmonitor, share: ?*GLFWwindow) ?*GLFWwindow;
pub extern fn glfwDestroyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwWindowShouldClose(window: ?*GLFWwindow) c_int;
pub extern fn glfwSetWindowShouldClose(window: ?*GLFWwindow, value: c_int) void;
pub extern fn glfwSetWindowTitle(window: ?*GLFWwindow, title: [*c]const u8) void;
pub extern fn glfwSetWindowIcon(window: ?*GLFWwindow, count: c_int, images: [*c]const GLFWimage) void;
pub extern fn glfwGetWindowPos(window: ?*GLFWwindow, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwSetWindowPos(window: ?*GLFWwindow, xpos: c_int, ypos: c_int) void;
pub extern fn glfwGetWindowSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwSetWindowSizeLimits(window: ?*GLFWwindow, minwidth: c_int, minheight: c_int, maxwidth: c_int, maxheight: c_int) void;
pub extern fn glfwSetWindowAspectRatio(window: ?*GLFWwindow, numer: c_int, denom: c_int) void;
pub extern fn glfwSetWindowSize(window: ?*GLFWwindow, width: c_int, height: c_int) void;
pub extern fn glfwGetFramebufferSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetWindowFrameSize(window: ?*GLFWwindow, left: [*c]c_int, top: [*c]c_int, right: [*c]c_int, bottom: [*c]c_int) void;
pub extern fn glfwGetWindowContentScale(window: ?*GLFWwindow, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetWindowOpacity(window: ?*GLFWwindow) f32;
pub extern fn glfwSetWindowOpacity(window: ?*GLFWwindow, opacity: f32) void;
pub extern fn glfwIconifyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRestoreWindow(window: ?*GLFWwindow) void;
pub extern fn glfwMaximizeWindow(window: ?*GLFWwindow) void;
pub extern fn glfwShowWindow(window: ?*GLFWwindow) void;
pub extern fn glfwHideWindow(window: ?*GLFWwindow) void;
pub extern fn glfwFocusWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRequestWindowAttention(window: ?*GLFWwindow) void;
pub extern fn glfwGetWindowMonitor(window: ?*GLFWwindow) ?*GLFWmonitor;
pub extern fn glfwSetWindowMonitor(window: ?*GLFWwindow, monitor: ?*GLFWmonitor, xpos: c_int, ypos: c_int, width: c_int, height: c_int, refreshRate: c_int) void;
pub extern fn glfwGetWindowAttrib(window: ?*GLFWwindow, attrib: c_int) c_int;
pub extern fn glfwSetWindowAttrib(window: ?*GLFWwindow, attrib: c_int, value: c_int) void;
pub extern fn glfwSetWindowUserPointer(window: ?*GLFWwindow, pointer: ?*anyopaque) void;
pub extern fn glfwGetWindowUserPointer(window: ?*GLFWwindow) ?*anyopaque;
pub extern fn glfwSetWindowPosCallback(window: ?*GLFWwindow, callback: GLFWwindowposfun) GLFWwindowposfun;
pub extern fn glfwSetWindowSizeCallback(window: ?*GLFWwindow, callback: GLFWwindowsizefun) GLFWwindowsizefun;
pub extern fn glfwSetWindowCloseCallback(window: ?*GLFWwindow, callback: GLFWwindowclosefun) GLFWwindowclosefun;
pub extern fn glfwSetWindowRefreshCallback(window: ?*GLFWwindow, callback: GLFWwindowrefreshfun) GLFWwindowrefreshfun;
pub extern fn glfwSetWindowFocusCallback(window: ?*GLFWwindow, callback: GLFWwindowfocusfun) GLFWwindowfocusfun;
pub extern fn glfwSetWindowIconifyCallback(window: ?*GLFWwindow, callback: GLFWwindowiconifyfun) GLFWwindowiconifyfun;
pub extern fn glfwSetWindowMaximizeCallback(window: ?*GLFWwindow, callback: GLFWwindowmaximizefun) GLFWwindowmaximizefun;
pub extern fn glfwSetFramebufferSizeCallback(window: ?*GLFWwindow, callback: GLFWframebuffersizefun) GLFWframebuffersizefun;
pub extern fn glfwSetWindowContentScaleCallback(window: ?*GLFWwindow, callback: GLFWwindowcontentscalefun) GLFWwindowcontentscalefun;
pub extern fn glfwPollEvents() void;
pub extern fn glfwWaitEvents() void;
pub extern fn glfwWaitEventsTimeout(timeout: f64) void;
pub extern fn glfwPostEmptyEvent() void;
pub extern fn glfwGetInputMode(window: ?*GLFWwindow, mode: c_int) c_int;
pub extern fn glfwSetInputMode(window: ?*GLFWwindow, mode: c_int, value: c_int) void;
pub extern fn glfwRawMouseMotionSupported() c_int;
pub extern fn glfwGetKeyName(key: c_int, scancode: c_int) [*c]const u8;
pub extern fn glfwGetKeyScancode(key: c_int) c_int;
pub extern fn glfwGetKey(window: ?*GLFWwindow, key: c_int) c_int;
pub extern fn glfwGetMouseButton(window: ?*GLFWwindow, button: c_int) c_int;
pub extern fn glfwGetCursorPos(window: ?*GLFWwindow, xpos: [*c]f64, ypos: [*c]f64) void;
pub extern fn glfwSetCursorPos(window: ?*GLFWwindow, xpos: f64, ypos: f64) void;
pub extern fn glfwCreateCursor(image: [*c]const GLFWimage, xhot: c_int, yhot: c_int) ?*GLFWcursor;
pub extern fn glfwCreateStandardCursor(shape: c_int) ?*GLFWcursor;
pub extern fn glfwDestroyCursor(cursor: ?*GLFWcursor) void;
pub extern fn glfwSetCursor(window: ?*GLFWwindow, cursor: ?*GLFWcursor) void;
pub extern fn glfwSetKeyCallback(window: ?*GLFWwindow, callback: GLFWkeyfun) GLFWkeyfun;
pub extern fn glfwSetCharCallback(window: ?*GLFWwindow, callback: GLFWcharfun) GLFWcharfun;
pub extern fn glfwSetCharModsCallback(window: ?*GLFWwindow, callback: GLFWcharmodsfun) GLFWcharmodsfun;
pub extern fn glfwSetMouseButtonCallback(window: ?*GLFWwindow, callback: GLFWmousebuttonfun) GLFWmousebuttonfun;
pub extern fn glfwSetCursorPosCallback(window: ?*GLFWwindow, callback: GLFWcursorposfun) GLFWcursorposfun;
pub extern fn glfwSetCursorEnterCallback(window: ?*GLFWwindow, callback: GLFWcursorenterfun) GLFWcursorenterfun;
pub extern fn glfwSetScrollCallback(window: ?*GLFWwindow, callback: GLFWscrollfun) GLFWscrollfun;
pub extern fn glfwSetDropCallback(window: ?*GLFWwindow, callback: GLFWdropfun) GLFWdropfun;
pub extern fn glfwJoystickPresent(jid: c_int) c_int;
pub extern fn glfwGetJoystickAxes(jid: c_int, count: [*c]c_int) [*c]const f32;
pub extern fn glfwGetJoystickButtons(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickHats(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickName(jid: c_int) [*c]const u8;
pub extern fn glfwGetJoystickGUID(jid: c_int) [*c]const u8;
pub extern fn glfwSetJoystickUserPointer(jid: c_int, pointer: ?*anyopaque) void;
pub extern fn glfwGetJoystickUserPointer(jid: c_int) ?*anyopaque;
pub extern fn glfwJoystickIsGamepad(jid: c_int) c_int;
pub extern fn glfwSetJoystickCallback(callback: GLFWjoystickfun) GLFWjoystickfun;
pub extern fn glfwUpdateGamepadMappings(string: [*c]const u8) c_int;
pub extern fn glfwGetGamepadName(jid: c_int) [*c]const u8;
pub extern fn glfwGetGamepadState(jid: c_int, state: [*c]GLFWgamepadstate) c_int;
pub extern fn glfwSetClipboardString(window: ?*GLFWwindow, string: [*c]const u8) void;
pub extern fn glfwGetClipboardString(window: ?*GLFWwindow) [*c]const u8;
pub extern fn glfwGetTime() f64;
pub extern fn glfwSetTime(time: f64) void;
pub extern fn glfwGetTimerValue() u64;
pub extern fn glfwGetTimerFrequency() u64;
pub extern fn glfwMakeContextCurrent(window: ?*GLFWwindow) void;
pub extern fn glfwGetCurrentContext() ?*GLFWwindow;
pub extern fn glfwSwapBuffers(window: ?*GLFWwindow) void;
pub extern fn glfwSwapInterval(interval: c_int) void;
pub extern fn glfwExtensionSupported(extension: [*c]const u8) c_int;
pub extern fn glfwGetProcAddress(procname: [*c]const u8) GLFWglproc;
pub extern fn glfwVulkanSupported() c_int;
pub extern fn glfwGetRequiredInstanceExtensions(count: [*c]u32) [*c][*c]const u8;
pub const struct___va_list_tag = extern struct {
    gp_offset: c_uint,
    fp_offset: c_uint,
    overflow_arg_area: ?*anyopaque,
    reg_save_area: ?*anyopaque,
};
pub const __builtin_va_list = [1]struct___va_list_tag;
pub const va_list = __builtin_va_list;
pub const __gnuc_va_list = __builtin_va_list;
const union_unnamed_1 = extern union {
    __wch: c_uint,
    __wchb: [4]u8,
};
pub const __mbstate_t = extern struct {
    __count: c_int,
    __value: union_unnamed_1,
};
pub const struct__G_fpos_t = extern struct {
    __pos: __off_t,
    __state: __mbstate_t,
};
pub const __fpos_t = struct__G_fpos_t;
pub const struct__G_fpos64_t = extern struct {
    __pos: __off64_t,
    __state: __mbstate_t,
};
pub const __fpos64_t = struct__G_fpos64_t;
pub const struct__IO_marker = opaque {};
pub const _IO_lock_t = anyopaque;
pub const struct__IO_codecvt = opaque {};
pub const struct__IO_wide_data = opaque {};
pub const struct__IO_FILE = extern struct {
    _flags: c_int,
    _IO_read_ptr: [*c]u8,
    _IO_read_end: [*c]u8,
    _IO_read_base: [*c]u8,
    _IO_write_base: [*c]u8,
    _IO_write_ptr: [*c]u8,
    _IO_write_end: [*c]u8,
    _IO_buf_base: [*c]u8,
    _IO_buf_end: [*c]u8,
    _IO_save_base: [*c]u8,
    _IO_backup_base: [*c]u8,
    _IO_save_end: [*c]u8,
    _markers: ?*struct__IO_marker,
    _chain: [*c]struct__IO_FILE,
    _fileno: c_int,
    _flags2: c_int,
    _old_offset: __off_t,
    _cur_column: c_ushort,
    _vtable_offset: i8,
    _shortbuf: [1]u8,
    _lock: ?*_IO_lock_t,
    _offset: __off64_t,
    _codecvt: ?*struct__IO_codecvt,
    _wide_data: ?*struct__IO_wide_data,
    _freeres_list: [*c]struct__IO_FILE,
    _freeres_buf: ?*anyopaque,
    __pad5: usize,
    _mode: c_int,
    _unused2: [20]u8,
};
pub const __FILE = struct__IO_FILE;
pub const FILE = struct__IO_FILE;
pub const off_t = __off_t;
pub const fpos_t = __fpos_t;
pub extern var stdin: [*c]FILE;
pub extern var stdout: [*c]FILE;
pub extern var stderr: [*c]FILE;
pub extern fn remove(__filename: [*c]const u8) c_int;
pub extern fn rename(__old: [*c]const u8, __new: [*c]const u8) c_int;
pub extern fn renameat(__oldfd: c_int, __old: [*c]const u8, __newfd: c_int, __new: [*c]const u8) c_int;
pub extern fn fclose(__stream: [*c]FILE) c_int;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam([*c]u8) [*c]u8;
pub extern fn tmpnam_r(__s: [*c]u8) [*c]u8;
pub extern fn tempnam(__dir: [*c]const u8, __pfx: [*c]const u8) [*c]u8;
pub extern fn fflush(__stream: [*c]FILE) c_int;
pub extern fn fflush_unlocked(__stream: [*c]FILE) c_int;
pub extern fn fopen(__filename: [*c]const u8, __modes: [*c]const u8) [*c]FILE;
pub extern fn freopen(noalias __filename: [*c]const u8, noalias __modes: [*c]const u8, noalias __stream: [*c]FILE) [*c]FILE;
pub extern fn fdopen(__fd: c_int, __modes: [*c]const u8) [*c]FILE;
pub extern fn fmemopen(__s: ?*anyopaque, __len: usize, __modes: [*c]const u8) [*c]FILE;
pub extern fn open_memstream(__bufloc: [*c][*c]u8, __sizeloc: [*c]usize) [*c]FILE;
pub extern fn setbuf(noalias __stream: [*c]FILE, noalias __buf: [*c]u8) void;
pub extern fn setvbuf(noalias __stream: [*c]FILE, noalias __buf: [*c]u8, __modes: c_int, __n: usize) c_int;
pub extern fn setbuffer(noalias __stream: [*c]FILE, noalias __buf: [*c]u8, __size: usize) void;
pub extern fn setlinebuf(__stream: [*c]FILE) void;
pub extern fn fprintf(__stream: [*c]FILE, __format: [*c]const u8, ...) c_int;
pub extern fn printf(__format: [*c]const u8, ...) c_int;
pub extern fn sprintf(__s: [*c]u8, __format: [*c]const u8, ...) c_int;
pub extern fn vfprintf(__s: [*c]FILE, __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub fn vprintf(arg___fmt: [*c]const u8, arg___arg: [*c]struct___va_list_tag) callconv(.C) c_int {
    var __fmt = arg___fmt;
    var __arg = arg___arg;
    return vfprintf(stdout, __fmt, __arg);
}
pub extern fn vsprintf(__s: [*c]u8, __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn snprintf(__s: [*c]u8, __maxlen: c_ulong, __format: [*c]const u8, ...) c_int;
pub extern fn vsnprintf(__s: [*c]u8, __maxlen: c_ulong, __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn vdprintf(__fd: c_int, noalias __fmt: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn dprintf(__fd: c_int, noalias __fmt: [*c]const u8, ...) c_int;
pub extern fn fscanf(noalias __stream: [*c]FILE, noalias __format: [*c]const u8, ...) c_int;
pub extern fn scanf(noalias __format: [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias __s: [*c]const u8, noalias __format: [*c]const u8, ...) c_int;
pub const _Float32 = f32;
pub const _Float64 = f64;
pub const _Float32x = f64;
pub const _Float64x = c_longdouble;
pub extern fn vfscanf(noalias __s: [*c]FILE, noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn vscanf(noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn vsscanf(noalias __s: [*c]const u8, noalias __format: [*c]const u8, __arg: [*c]struct___va_list_tag) c_int;
pub extern fn fgetc(__stream: [*c]FILE) c_int;
pub extern fn getc(__stream: [*c]FILE) c_int;
pub fn getchar() callconv(.C) c_int {
    return getc(stdin);
}
pub fn getc_unlocked(arg___fp: [*c]FILE) callconv(.C) c_int {
    var __fp = arg___fp;
    return if (__builtin_expect(@bitCast(c_long, @as(c_long, @boolToInt(__fp.*._IO_read_ptr >= __fp.*._IO_read_end))), @bitCast(c_long, @as(c_long, @as(c_int, 0)))) != 0) __uflow(__fp) else @bitCast(c_int, @as(c_uint, @ptrCast([*c]u8, @alignCast(@import("std").meta.alignment(u8), blk: {
        const ref = &__fp.*._IO_read_ptr;
        const tmp = ref.*;
        ref.* += 1;
        break :blk tmp;
    })).*));
}
pub fn getchar_unlocked() callconv(.C) c_int {
    return if (__builtin_expect(@bitCast(c_long, @as(c_long, @boolToInt(stdin.*._IO_read_ptr >= stdin.*._IO_read_end))), @bitCast(c_long, @as(c_long, @as(c_int, 0)))) != 0) __uflow(stdin) else @bitCast(c_int, @as(c_uint, @ptrCast([*c]u8, @alignCast(@import("std").meta.alignment(u8), blk: {
        const ref = &stdin.*._IO_read_ptr;
        const tmp = ref.*;
        ref.* += 1;
        break :blk tmp;
    })).*));
}
pub fn fgetc_unlocked(arg___fp: [*c]FILE) callconv(.C) c_int {
    var __fp = arg___fp;
    return if (__builtin_expect(@bitCast(c_long, @as(c_long, @boolToInt(__fp.*._IO_read_ptr >= __fp.*._IO_read_end))), @bitCast(c_long, @as(c_long, @as(c_int, 0)))) != 0) __uflow(__fp) else @bitCast(c_int, @as(c_uint, @ptrCast([*c]u8, @alignCast(@import("std").meta.alignment(u8), blk: {
        const ref = &__fp.*._IO_read_ptr;
        const tmp = ref.*;
        ref.* += 1;
        break :blk tmp;
    })).*));
}
pub extern fn fputc(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn putc(__c: c_int, __stream: [*c]FILE) c_int;
pub fn putchar(arg___c: c_int) callconv(.C) c_int {
    var __c = arg___c;
    return putc(__c, stdout);
}
pub fn fputc_unlocked(arg___c: c_int, arg___stream: [*c]FILE) callconv(.C) c_int {
    var __c = arg___c;
    var __stream = arg___stream;
    return if (__builtin_expect(@bitCast(c_long, @as(c_long, @boolToInt(__stream.*._IO_write_ptr >= __stream.*._IO_write_end))), @bitCast(c_long, @as(c_long, @as(c_int, 0)))) != 0) __overflow(__stream, @bitCast(c_int, @as(c_uint, @bitCast(u8, @truncate(i8, __c))))) else @bitCast(c_int, @as(c_uint, @bitCast(u8, blk: {
        const tmp = @bitCast(u8, @truncate(i8, __c));
        (blk_1: {
            const ref = &__stream.*._IO_write_ptr;
            const tmp_2 = ref.*;
            ref.* += 1;
            break :blk_1 tmp_2;
        }).* = tmp;
        break :blk tmp;
    })));
}
pub fn putc_unlocked(arg___c: c_int, arg___stream: [*c]FILE) callconv(.C) c_int {
    var __c = arg___c;
    var __stream = arg___stream;
    return if (__builtin_expect(@bitCast(c_long, @as(c_long, @boolToInt(__stream.*._IO_write_ptr >= __stream.*._IO_write_end))), @bitCast(c_long, @as(c_long, @as(c_int, 0)))) != 0) __overflow(__stream, @bitCast(c_int, @as(c_uint, @bitCast(u8, @truncate(i8, __c))))) else @bitCast(c_int, @as(c_uint, @bitCast(u8, blk: {
        const tmp = @bitCast(u8, @truncate(i8, __c));
        (blk_1: {
            const ref = &__stream.*._IO_write_ptr;
            const tmp_2 = ref.*;
            ref.* += 1;
            break :blk_1 tmp_2;
        }).* = tmp;
        break :blk tmp;
    })));
}
pub fn putchar_unlocked(arg___c: c_int) callconv(.C) c_int {
    var __c = arg___c;
    return if (__builtin_expect(@bitCast(c_long, @as(c_long, @boolToInt(stdout.*._IO_write_ptr >= stdout.*._IO_write_end))), @bitCast(c_long, @as(c_long, @as(c_int, 0)))) != 0) __overflow(stdout, @bitCast(c_int, @as(c_uint, @bitCast(u8, @truncate(i8, __c))))) else @bitCast(c_int, @as(c_uint, @bitCast(u8, blk: {
        const tmp = @bitCast(u8, @truncate(i8, __c));
        (blk_1: {
            const ref = &stdout.*._IO_write_ptr;
            const tmp_2 = ref.*;
            ref.* += 1;
            break :blk_1 tmp_2;
        }).* = tmp;
        break :blk tmp;
    })));
}
pub extern fn getw(__stream: [*c]FILE) c_int;
pub extern fn putw(__w: c_int, __stream: [*c]FILE) c_int;
pub extern fn fgets(noalias __s: [*c]u8, __n: c_int, noalias __stream: [*c]FILE) [*c]u8;
pub extern fn __getdelim(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn getdelim(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn getline(noalias __lineptr: [*c][*c]u8, noalias __n: [*c]usize, noalias __stream: [*c]FILE) __ssize_t;
pub extern fn fputs(noalias __s: [*c]const u8, noalias __stream: [*c]FILE) c_int;
pub extern fn puts(__s: [*c]const u8) c_int;
pub extern fn ungetc(__c: c_int, __stream: [*c]FILE) c_int;
pub extern fn fread(__ptr: ?*anyopaque, __size: c_ulong, __n: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn fwrite(__ptr: ?*const anyopaque, __size: c_ulong, __n: c_ulong, __s: [*c]FILE) c_ulong;
pub extern fn fread_unlocked(noalias __ptr: ?*anyopaque, __size: usize, __n: usize, noalias __stream: [*c]FILE) usize;
pub extern fn fwrite_unlocked(noalias __ptr: ?*const anyopaque, __size: usize, __n: usize, noalias __stream: [*c]FILE) usize;
pub extern fn fseek(__stream: [*c]FILE, __off: c_long, __whence: c_int) c_int;
pub extern fn ftell(__stream: [*c]FILE) c_long;
pub extern fn rewind(__stream: [*c]FILE) void;
pub extern fn fseeko(__stream: [*c]FILE, __off: __off_t, __whence: c_int) c_int;
pub extern fn ftello(__stream: [*c]FILE) __off_t;
pub extern fn fgetpos(noalias __stream: [*c]FILE, noalias __pos: [*c]fpos_t) c_int;
pub extern fn fsetpos(__stream: [*c]FILE, __pos: [*c]const fpos_t) c_int;
pub extern fn clearerr(__stream: [*c]FILE) void;
pub extern fn feof(__stream: [*c]FILE) c_int;
pub extern fn ferror(__stream: [*c]FILE) c_int;
pub extern fn clearerr_unlocked(__stream: [*c]FILE) void;
pub fn feof_unlocked(arg___stream: [*c]FILE) callconv(.C) c_int {
    var __stream = arg___stream;
    return @boolToInt((__stream.*._flags & @as(c_int, 16)) != @as(c_int, 0));
}
pub fn ferror_unlocked(arg___stream: [*c]FILE) callconv(.C) c_int {
    var __stream = arg___stream;
    return @boolToInt((__stream.*._flags & @as(c_int, 32)) != @as(c_int, 0));
}
pub extern fn perror(__s: [*c]const u8) void;
pub extern fn fileno(__stream: [*c]FILE) c_int;
pub extern fn fileno_unlocked(__stream: [*c]FILE) c_int;
pub extern fn pclose(__stream: [*c]FILE) c_int;
pub extern fn popen(__command: [*c]const u8, __modes: [*c]const u8) [*c]FILE;
pub extern fn ctermid(__s: [*c]u8) [*c]u8;
pub extern fn flockfile(__stream: [*c]FILE) void;
pub extern fn ftrylockfile(__stream: [*c]FILE) c_int;
pub extern fn funlockfile(__stream: [*c]FILE) void;
pub extern fn __uflow([*c]FILE) c_int;
pub extern fn __overflow([*c]FILE, c_int) c_int;
pub const STBI_default: c_int = 0;
pub const STBI_grey: c_int = 1;
pub const STBI_grey_alpha: c_int = 2;
pub const STBI_rgb: c_int = 3;
pub const STBI_rgb_alpha: c_int = 4;
const enum_unnamed_2 = c_uint;
pub const div_t = extern struct {
    quot: c_int,
    rem: c_int,
};
pub const ldiv_t = extern struct {
    quot: c_long,
    rem: c_long,
};
pub const lldiv_t = extern struct {
    quot: c_longlong,
    rem: c_longlong,
};
pub extern fn __ctype_get_mb_cur_max() usize;
pub fn atof(arg___nptr: [*c]const u8) callconv(.C) f64 {
    var __nptr = arg___nptr;
    return strtod(__nptr, @ptrCast([*c][*c]u8, @alignCast(@import("std").meta.alignment([*c]u8), @intToPtr(?*anyopaque, @as(c_int, 0)))));
}
pub fn atoi(arg___nptr: [*c]const u8) callconv(.C) c_int {
    var __nptr = arg___nptr;
    return @bitCast(c_int, @truncate(c_int, strtol(__nptr, @ptrCast([*c][*c]u8, @alignCast(@import("std").meta.alignment([*c]u8), @intToPtr(?*anyopaque, @as(c_int, 0)))), @as(c_int, 10))));
}
pub fn atol(arg___nptr: [*c]const u8) callconv(.C) c_long {
    var __nptr = arg___nptr;
    return strtol(__nptr, @ptrCast([*c][*c]u8, @alignCast(@import("std").meta.alignment([*c]u8), @intToPtr(?*anyopaque, @as(c_int, 0)))), @as(c_int, 10));
}
pub fn atoll(arg___nptr: [*c]const u8) callconv(.C) c_longlong {
    var __nptr = arg___nptr;
    return strtoll(__nptr, @ptrCast([*c][*c]u8, @alignCast(@import("std").meta.alignment([*c]u8), @intToPtr(?*anyopaque, @as(c_int, 0)))), @as(c_int, 10));
}
pub extern fn strtod(__nptr: [*c]const u8, __endptr: [*c][*c]u8) f64;
pub extern fn strtof(__nptr: [*c]const u8, __endptr: [*c][*c]u8) f32;
pub extern fn strtold(__nptr: [*c]const u8, __endptr: [*c][*c]u8) c_longdouble;
pub extern fn strtol(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_long;
pub extern fn strtoul(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn strtoq(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtouq(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn strtoll(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtoull(__nptr: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn l64a(__n: c_long) [*c]u8;
pub extern fn a64l(__s: [*c]const u8) c_long;
pub const u_char = __u_char;
pub const u_short = __u_short;
pub const u_int = __u_int;
pub const u_long = __u_long;
pub const quad_t = __quad_t;
pub const u_quad_t = __u_quad_t;
pub const fsid_t = __fsid_t;
pub const loff_t = __loff_t;
pub const ino_t = __ino_t;
pub const dev_t = __dev_t;
pub const gid_t = __gid_t;
pub const mode_t = __mode_t;
pub const nlink_t = __nlink_t;
pub const uid_t = __uid_t;
pub const pid_t = __pid_t;
pub const id_t = __id_t;
pub const daddr_t = __daddr_t;
pub const caddr_t = __caddr_t;
pub const key_t = __key_t;
pub const clock_t = __clock_t;
pub const clockid_t = __clockid_t;
pub const time_t = __time_t;
pub const timer_t = __timer_t;
pub const ulong = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_int8_t = __uint8_t;
pub const u_int16_t = __uint16_t;
pub const u_int32_t = __uint32_t;
pub const u_int64_t = __uint64_t;
pub const register_t = c_long;
pub fn __bswap_16(arg___bsx: __uint16_t) callconv(.C) __uint16_t {
    var __bsx = arg___bsx;
    return @bitCast(__uint16_t, @truncate(c_short, ((@bitCast(c_int, @as(c_uint, __bsx)) >> @intCast(@import("std").math.Log2Int(c_int), 8)) & @as(c_int, 255)) | ((@bitCast(c_int, @as(c_uint, __bsx)) & @as(c_int, 255)) << @intCast(@import("std").math.Log2Int(c_int), 8))));
}
pub fn __bswap_32(arg___bsx: __uint32_t) callconv(.C) __uint32_t {
    var __bsx = arg___bsx;
    return ((((__bsx & @as(c_uint, 4278190080)) >> @intCast(@import("std").math.Log2Int(c_uint), 24)) | ((__bsx & @as(c_uint, 16711680)) >> @intCast(@import("std").math.Log2Int(c_uint), 8))) | ((__bsx & @as(c_uint, 65280)) << @intCast(@import("std").math.Log2Int(c_uint), 8))) | ((__bsx & @as(c_uint, 255)) << @intCast(@import("std").math.Log2Int(c_uint), 24));
}
pub fn __bswap_64(arg___bsx: __uint64_t) callconv(.C) __uint64_t {
    var __bsx = arg___bsx;
    return @bitCast(__uint64_t, @truncate(c_ulong, ((((((((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 56)) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 71776119061217280)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 280375465082880)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 1095216660480)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 4278190080)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 16711680)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 65280)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(c_ulonglong, @as(c_ulonglong, __bsx)) & @as(c_ulonglong, 255)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 56))));
}
pub fn __uint16_identity(arg___x: __uint16_t) callconv(.C) __uint16_t {
    var __x = arg___x;
    return __x;
}
pub fn __uint32_identity(arg___x: __uint32_t) callconv(.C) __uint32_t {
    var __x = arg___x;
    return __x;
}
pub fn __uint64_identity(arg___x: __uint64_t) callconv(.C) __uint64_t {
    var __x = arg___x;
    return __x;
}
pub const __sigset_t = extern struct {
    __val: [16]c_ulong,
};
pub const sigset_t = __sigset_t;
pub const struct_timeval = extern struct {
    tv_sec: __time_t,
    tv_usec: __suseconds_t,
};
pub const struct_timespec = extern struct {
    tv_sec: __time_t,
    tv_nsec: __syscall_slong_t,
};
pub const suseconds_t = __suseconds_t;
pub const __fd_mask = c_long;
pub const fd_set = extern struct {
    __fds_bits: [16]__fd_mask,
};
pub const fd_mask = __fd_mask;
pub extern fn select(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]struct_timeval) c_int;
pub extern fn pselect(__nfds: c_int, noalias __readfds: [*c]fd_set, noalias __writefds: [*c]fd_set, noalias __exceptfds: [*c]fd_set, noalias __timeout: [*c]const struct_timespec, noalias __sigmask: [*c]const __sigset_t) c_int;
pub const blksize_t = __blksize_t;
pub const blkcnt_t = __blkcnt_t;
pub const fsblkcnt_t = __fsblkcnt_t;
pub const fsfilcnt_t = __fsfilcnt_t;
const struct_unnamed_3 = extern struct {
    __low: c_uint,
    __high: c_uint,
};
pub const __atomic_wide_counter = extern union {
    __value64: c_ulonglong,
    __value32: struct_unnamed_3,
};
pub const struct___pthread_internal_list = extern struct {
    __prev: [*c]struct___pthread_internal_list,
    __next: [*c]struct___pthread_internal_list,
};
pub const __pthread_list_t = struct___pthread_internal_list;
pub const struct___pthread_internal_slist = extern struct {
    __next: [*c]struct___pthread_internal_slist,
};
pub const __pthread_slist_t = struct___pthread_internal_slist;
pub const struct___pthread_mutex_s = extern struct {
    __lock: c_int,
    __count: c_uint,
    __owner: c_int,
    __nusers: c_uint,
    __kind: c_int,
    __spins: c_short,
    __elision: c_short,
    __list: __pthread_list_t,
};
pub const struct___pthread_rwlock_arch_t = extern struct {
    __readers: c_uint,
    __writers: c_uint,
    __wrphase_futex: c_uint,
    __writers_futex: c_uint,
    __pad3: c_uint,
    __pad4: c_uint,
    __cur_writer: c_int,
    __shared: c_int,
    __rwelision: i8,
    __pad1: [7]u8,
    __pad2: c_ulong,
    __flags: c_uint,
};
pub const struct___pthread_cond_s = extern struct {
    __wseq: __atomic_wide_counter,
    __g1_start: __atomic_wide_counter,
    __g_refs: [2]c_uint,
    __g_size: [2]c_uint,
    __g1_orig_size: c_uint,
    __wrefs: c_uint,
    __g_signals: [2]c_uint,
};
pub const __tss_t = c_uint;
pub const __thrd_t = c_ulong;
pub const __once_flag = extern struct {
    __data: c_int,
};
pub const pthread_t = c_ulong;
pub const pthread_mutexattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_condattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub const pthread_key_t = c_uint;
pub const pthread_once_t = c_int;
pub const union_pthread_attr_t = extern union {
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_attr_t = union_pthread_attr_t;
pub const pthread_mutex_t = extern union {
    __data: struct___pthread_mutex_s,
    __size: [40]u8,
    __align: c_long,
};
pub const pthread_cond_t = extern union {
    __data: struct___pthread_cond_s,
    __size: [48]u8,
    __align: c_longlong,
};
pub const pthread_rwlock_t = extern union {
    __data: struct___pthread_rwlock_arch_t,
    __size: [56]u8,
    __align: c_long,
};
pub const pthread_rwlockattr_t = extern union {
    __size: [8]u8,
    __align: c_long,
};
pub const pthread_spinlock_t = c_int;
pub const pthread_barrier_t = extern union {
    __size: [32]u8,
    __align: c_long,
};
pub const pthread_barrierattr_t = extern union {
    __size: [4]u8,
    __align: c_int,
};
pub extern fn random() c_long;
pub extern fn srandom(__seed: c_uint) void;
pub extern fn initstate(__seed: c_uint, __statebuf: [*c]u8, __statelen: usize) [*c]u8;
pub extern fn setstate(__statebuf: [*c]u8) [*c]u8;
pub const struct_random_data = extern struct {
    fptr: [*c]i32,
    rptr: [*c]i32,
    state: [*c]i32,
    rand_type: c_int,
    rand_deg: c_int,
    rand_sep: c_int,
    end_ptr: [*c]i32,
};
pub extern fn random_r(noalias __buf: [*c]struct_random_data, noalias __result: [*c]i32) c_int;
pub extern fn srandom_r(__seed: c_uint, __buf: [*c]struct_random_data) c_int;
pub extern fn initstate_r(__seed: c_uint, noalias __statebuf: [*c]u8, __statelen: usize, noalias __buf: [*c]struct_random_data) c_int;
pub extern fn setstate_r(noalias __statebuf: [*c]u8, noalias __buf: [*c]struct_random_data) c_int;
pub extern fn rand() c_int;
pub extern fn srand(__seed: c_uint) void;
pub extern fn rand_r(__seed: [*c]c_uint) c_int;
pub extern fn drand48() f64;
pub extern fn erand48(__xsubi: [*c]c_ushort) f64;
pub extern fn lrand48() c_long;
pub extern fn nrand48(__xsubi: [*c]c_ushort) c_long;
pub extern fn mrand48() c_long;
pub extern fn jrand48(__xsubi: [*c]c_ushort) c_long;
pub extern fn srand48(__seedval: c_long) void;
pub extern fn seed48(__seed16v: [*c]c_ushort) [*c]c_ushort;
pub extern fn lcong48(__param: [*c]c_ushort) void;
pub const struct_drand48_data = extern struct {
    __x: [3]c_ushort,
    __old_x: [3]c_ushort,
    __c: c_ushort,
    __init: c_ushort,
    __a: c_ulonglong,
};
pub extern fn drand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]f64) c_int;
pub extern fn erand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]f64) c_int;
pub extern fn lrand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn nrand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn mrand48_r(noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn jrand48_r(__xsubi: [*c]c_ushort, noalias __buffer: [*c]struct_drand48_data, noalias __result: [*c]c_long) c_int;
pub extern fn srand48_r(__seedval: c_long, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn seed48_r(__seed16v: [*c]c_ushort, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn lcong48_r(__param: [*c]c_ushort, __buffer: [*c]struct_drand48_data) c_int;
pub extern fn malloc(__size: c_ulong) ?*anyopaque;
pub extern fn calloc(__nmemb: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn realloc(__ptr: ?*anyopaque, __size: c_ulong) ?*anyopaque;
pub extern fn free(__ptr: ?*anyopaque) void;
pub extern fn reallocarray(__ptr: ?*anyopaque, __nmemb: usize, __size: usize) ?*anyopaque;
pub extern fn alloca(__size: c_ulong) ?*anyopaque;
pub extern fn valloc(__size: usize) ?*anyopaque;
pub extern fn posix_memalign(__memptr: [*c]?*anyopaque, __alignment: usize, __size: usize) c_int;
pub extern fn aligned_alloc(__alignment: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn abort() noreturn;
pub extern fn atexit(__func: ?fn () callconv(.C) void) c_int;
pub extern fn at_quick_exit(__func: ?fn () callconv(.C) void) c_int;
pub extern fn on_exit(__func: ?fn (c_int, ?*anyopaque) callconv(.C) void, __arg: ?*anyopaque) c_int;
pub extern fn exit(__status: c_int) noreturn;
pub extern fn quick_exit(__status: c_int) noreturn;
pub extern fn _Exit(__status: c_int) noreturn;
pub extern fn getenv(__name: [*c]const u8) [*c]u8;
pub extern fn putenv(__string: [*c]u8) c_int;
pub extern fn setenv(__name: [*c]const u8, __value: [*c]const u8, __replace: c_int) c_int;
pub extern fn unsetenv(__name: [*c]const u8) c_int;
pub extern fn clearenv() c_int;
pub extern fn mktemp(__template: [*c]u8) [*c]u8;
pub extern fn mkstemp(__template: [*c]u8) c_int;
pub extern fn mkstemps(__template: [*c]u8, __suffixlen: c_int) c_int;
pub extern fn mkdtemp(__template: [*c]u8) [*c]u8;
pub extern fn system(__command: [*c]const u8) c_int;
pub extern fn realpath(noalias __name: [*c]const u8, noalias __resolved: [*c]u8) [*c]u8;
pub const __compar_fn_t = ?fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int;
pub fn bsearch(arg___key: ?*const anyopaque, arg___base: ?*const anyopaque, arg___nmemb: usize, arg___size: usize, arg___compar: __compar_fn_t) callconv(.C) ?*anyopaque {
    var __key = arg___key;
    var __base = arg___base;
    var __nmemb = arg___nmemb;
    var __size = arg___size;
    var __compar = arg___compar;
    var __l: usize = undefined;
    var __u: usize = undefined;
    var __idx: usize = undefined;
    var __p: ?*const anyopaque = undefined;
    var __comparison: c_int = undefined;
    __l = 0;
    __u = __nmemb;
    while (__l < __u) {
        __idx = (__l +% __u) / @bitCast(c_ulong, @as(c_long, @as(c_int, 2)));
        __p = @ptrCast(?*const anyopaque, @ptrCast([*c]const u8, @alignCast(@import("std").meta.alignment(u8), __base)) + (__idx *% __size));
        __comparison = __compar.?(__key, __p);
        if (__comparison < @as(c_int, 0)) {
            __u = __idx;
        } else if (__comparison > @as(c_int, 0)) {
            __l = __idx +% @bitCast(c_ulong, @as(c_long, @as(c_int, 1)));
        } else {
            return @intToPtr(?*anyopaque, @ptrToInt(__p));
        }
    }
    return @intToPtr(?*anyopaque, @as(c_int, 0));
}
pub extern fn qsort(__base: ?*anyopaque, __nmemb: usize, __size: usize, __compar: __compar_fn_t) void;
pub extern fn abs(__x: c_int) c_int;
pub extern fn labs(__x: c_long) c_long;
pub extern fn llabs(__x: c_longlong) c_longlong;
pub extern fn div(__numer: c_int, __denom: c_int) div_t;
pub extern fn ldiv(__numer: c_long, __denom: c_long) ldiv_t;
pub extern fn lldiv(__numer: c_longlong, __denom: c_longlong) lldiv_t;
pub extern fn ecvt(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn fcvt(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn gcvt(__value: f64, __ndigit: c_int, __buf: [*c]u8) [*c]u8;
pub extern fn qecvt(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn qfcvt(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int) [*c]u8;
pub extern fn qgcvt(__value: c_longdouble, __ndigit: c_int, __buf: [*c]u8) [*c]u8;
pub extern fn ecvt_r(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn fcvt_r(__value: f64, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn qecvt_r(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn qfcvt_r(__value: c_longdouble, __ndigit: c_int, noalias __decpt: [*c]c_int, noalias __sign: [*c]c_int, noalias __buf: [*c]u8, __len: usize) c_int;
pub extern fn mblen(__s: [*c]const u8, __n: usize) c_int;
pub extern fn mbtowc(noalias __pwc: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize) c_int;
pub extern fn wctomb(__s: [*c]u8, __wchar: wchar_t) c_int;
pub extern fn mbstowcs(noalias __pwcs: [*c]wchar_t, noalias __s: [*c]const u8, __n: usize) usize;
pub extern fn wcstombs(noalias __s: [*c]u8, noalias __pwcs: [*c]const wchar_t, __n: usize) usize;
pub extern fn rpmatch(__response: [*c]const u8) c_int;
pub extern fn getsubopt(noalias __optionp: [*c][*c]u8, noalias __tokens: [*c]const [*c]u8, noalias __valuep: [*c][*c]u8) c_int;
pub extern fn getloadavg(__loadavg: [*c]f64, __nelem: c_int) c_int;
pub const stbi_uc = u8;
pub const stbi_us = c_ushort;
pub const stbi_io_callbacks = extern struct {
    read: ?fn (?*anyopaque, [*c]u8, c_int) callconv(.C) c_int,
    skip: ?fn (?*anyopaque, c_int) callconv(.C) void,
    eof: ?fn (?*anyopaque) callconv(.C) c_int,
};
pub extern fn stbi_load_from_memory(buffer: [*c]const stbi_uc, len: c_int, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_uc;
pub extern fn stbi_load_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_uc;
pub extern fn stbi_load(filename: [*c]const u8, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_uc;
pub extern fn stbi_load_from_file(f: [*c]FILE, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_uc;
pub extern fn stbi_load_gif_from_memory(buffer: [*c]const stbi_uc, len: c_int, delays: [*c][*c]c_int, x: [*c]c_int, y: [*c]c_int, z: [*c]c_int, comp: [*c]c_int, req_comp: c_int) [*c]stbi_uc;
pub extern fn stbi_load_16_from_memory(buffer: [*c]const stbi_uc, len: c_int, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_us;
pub extern fn stbi_load_16_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_us;
pub extern fn stbi_load_16(filename: [*c]const u8, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_us;
pub extern fn stbi_load_from_file_16(f: [*c]FILE, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]stbi_us;
pub extern fn stbi_loadf_from_memory(buffer: [*c]const stbi_uc, len: c_int, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]f32;
pub extern fn stbi_loadf_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]f32;
pub extern fn stbi_loadf(filename: [*c]const u8, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]f32;
pub extern fn stbi_loadf_from_file(f: [*c]FILE, x: [*c]c_int, y: [*c]c_int, channels_in_file: [*c]c_int, desired_channels: c_int) [*c]f32;
pub extern fn stbi_hdr_to_ldr_gamma(gamma: f32) void;
pub extern fn stbi_hdr_to_ldr_scale(scale: f32) void;
pub extern fn stbi_ldr_to_hdr_gamma(gamma: f32) void;
pub extern fn stbi_ldr_to_hdr_scale(scale: f32) void;
pub extern fn stbi_is_hdr_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque) c_int;
pub extern fn stbi_is_hdr_from_memory(buffer: [*c]const stbi_uc, len: c_int) c_int;
pub extern fn stbi_is_hdr(filename: [*c]const u8) c_int;
pub extern fn stbi_is_hdr_from_file(f: [*c]FILE) c_int;
pub extern fn stbi_failure_reason() [*c]const u8;
pub extern fn stbi_image_free(retval_from_stbi_load: ?*anyopaque) void;
pub extern fn stbi_info_from_memory(buffer: [*c]const stbi_uc, len: c_int, x: [*c]c_int, y: [*c]c_int, comp: [*c]c_int) c_int;
pub extern fn stbi_info_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque, x: [*c]c_int, y: [*c]c_int, comp: [*c]c_int) c_int;
pub extern fn stbi_is_16_bit_from_memory(buffer: [*c]const stbi_uc, len: c_int) c_int;
pub extern fn stbi_is_16_bit_from_callbacks(clbk: [*c]const stbi_io_callbacks, user: ?*anyopaque) c_int;
pub extern fn stbi_info(filename: [*c]const u8, x: [*c]c_int, y: [*c]c_int, comp: [*c]c_int) c_int;
pub extern fn stbi_info_from_file(f: [*c]FILE, x: [*c]c_int, y: [*c]c_int, comp: [*c]c_int) c_int;
pub extern fn stbi_is_16_bit(filename: [*c]const u8) c_int;
pub extern fn stbi_is_16_bit_from_file(f: [*c]FILE) c_int;
pub extern fn stbi_set_unpremultiply_on_load(flag_true_if_should_unpremultiply: c_int) void;
pub extern fn stbi_convert_iphone_png_to_rgb(flag_true_if_should_convert: c_int) void;
pub extern fn stbi_set_flip_vertically_on_load(flag_true_if_should_flip: c_int) void;
pub extern fn stbi_set_flip_vertically_on_load_thread(flag_true_if_should_flip: c_int) void;
pub extern fn stbi_zlib_decode_malloc_guesssize(buffer: [*c]const u8, len: c_int, initial_size: c_int, outlen: [*c]c_int) [*c]u8;
pub extern fn stbi_zlib_decode_malloc_guesssize_headerflag(buffer: [*c]const u8, len: c_int, initial_size: c_int, outlen: [*c]c_int, parse_header: c_int) [*c]u8;
pub extern fn stbi_zlib_decode_malloc(buffer: [*c]const u8, len: c_int, outlen: [*c]c_int) [*c]u8;
pub extern fn stbi_zlib_decode_buffer(obuffer: [*c]u8, olen: c_int, ibuffer: [*c]const u8, ilen: c_int) c_int;
pub extern fn stbi_zlib_decode_noheader_malloc(buffer: [*c]const u8, len: c_int, outlen: [*c]c_int) [*c]u8;
pub extern fn stbi_zlib_decode_noheader_buffer(obuffer: [*c]u8, olen: c_int, ibuffer: [*c]const u8, ilen: c_int) c_int;
pub const useconds_t = __useconds_t;
pub const socklen_t = __socklen_t;
pub extern fn access(__name: [*c]const u8, __type: c_int) c_int;
pub extern fn faccessat(__fd: c_int, __file: [*c]const u8, __type: c_int, __flag: c_int) c_int;
pub extern fn lseek(__fd: c_int, __offset: __off_t, __whence: c_int) __off_t;
pub extern fn close(__fd: c_int) c_int;
pub extern fn closefrom(__lowfd: c_int) void;
pub extern fn read(__fd: c_int, __buf: ?*anyopaque, __nbytes: usize) isize;
pub extern fn write(__fd: c_int, __buf: ?*const anyopaque, __n: usize) isize;
pub extern fn pread(__fd: c_int, __buf: ?*anyopaque, __nbytes: usize, __offset: __off_t) isize;
pub extern fn pwrite(__fd: c_int, __buf: ?*const anyopaque, __n: usize, __offset: __off_t) isize;
pub extern fn pipe(__pipedes: [*c]c_int) c_int;
pub extern fn alarm(__seconds: c_uint) c_uint;
pub extern fn sleep(__seconds: c_uint) c_uint;
pub extern fn ualarm(__value: __useconds_t, __interval: __useconds_t) __useconds_t;
pub extern fn usleep(__useconds: __useconds_t) c_int;
pub extern fn pause() c_int;
pub extern fn chown(__file: [*c]const u8, __owner: __uid_t, __group: __gid_t) c_int;
pub extern fn fchown(__fd: c_int, __owner: __uid_t, __group: __gid_t) c_int;
pub extern fn lchown(__file: [*c]const u8, __owner: __uid_t, __group: __gid_t) c_int;
pub extern fn fchownat(__fd: c_int, __file: [*c]const u8, __owner: __uid_t, __group: __gid_t, __flag: c_int) c_int;
pub extern fn chdir(__path: [*c]const u8) c_int;
pub extern fn fchdir(__fd: c_int) c_int;
pub extern fn getcwd(__buf: [*c]u8, __size: usize) [*c]u8;
pub extern fn getwd(__buf: [*c]u8) [*c]u8;
pub extern fn dup(__fd: c_int) c_int;
pub extern fn dup2(__fd: c_int, __fd2: c_int) c_int;
pub extern var __environ: [*c][*c]u8;
pub extern fn execve(__path: [*c]const u8, __argv: [*c]const [*c]u8, __envp: [*c]const [*c]u8) c_int;
pub extern fn fexecve(__fd: c_int, __argv: [*c]const [*c]u8, __envp: [*c]const [*c]u8) c_int;
pub extern fn execv(__path: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn execle(__path: [*c]const u8, __arg: [*c]const u8, ...) c_int;
pub extern fn execl(__path: [*c]const u8, __arg: [*c]const u8, ...) c_int;
pub extern fn execvp(__file: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn execlp(__file: [*c]const u8, __arg: [*c]const u8, ...) c_int;
pub extern fn nice(__inc: c_int) c_int;
pub extern fn _exit(__status: c_int) noreturn;
pub const _PC_LINK_MAX: c_int = 0;
pub const _PC_MAX_CANON: c_int = 1;
pub const _PC_MAX_INPUT: c_int = 2;
pub const _PC_NAME_MAX: c_int = 3;
pub const _PC_PATH_MAX: c_int = 4;
pub const _PC_PIPE_BUF: c_int = 5;
pub const _PC_CHOWN_RESTRICTED: c_int = 6;
pub const _PC_NO_TRUNC: c_int = 7;
pub const _PC_VDISABLE: c_int = 8;
pub const _PC_SYNC_IO: c_int = 9;
pub const _PC_ASYNC_IO: c_int = 10;
pub const _PC_PRIO_IO: c_int = 11;
pub const _PC_SOCK_MAXBUF: c_int = 12;
pub const _PC_FILESIZEBITS: c_int = 13;
pub const _PC_REC_INCR_XFER_SIZE: c_int = 14;
pub const _PC_REC_MAX_XFER_SIZE: c_int = 15;
pub const _PC_REC_MIN_XFER_SIZE: c_int = 16;
pub const _PC_REC_XFER_ALIGN: c_int = 17;
pub const _PC_ALLOC_SIZE_MIN: c_int = 18;
pub const _PC_SYMLINK_MAX: c_int = 19;
pub const _PC_2_SYMLINKS: c_int = 20;
const enum_unnamed_4 = c_uint;
pub const _SC_ARG_MAX: c_int = 0;
pub const _SC_CHILD_MAX: c_int = 1;
pub const _SC_CLK_TCK: c_int = 2;
pub const _SC_NGROUPS_MAX: c_int = 3;
pub const _SC_OPEN_MAX: c_int = 4;
pub const _SC_STREAM_MAX: c_int = 5;
pub const _SC_TZNAME_MAX: c_int = 6;
pub const _SC_JOB_CONTROL: c_int = 7;
pub const _SC_SAVED_IDS: c_int = 8;
pub const _SC_REALTIME_SIGNALS: c_int = 9;
pub const _SC_PRIORITY_SCHEDULING: c_int = 10;
pub const _SC_TIMERS: c_int = 11;
pub const _SC_ASYNCHRONOUS_IO: c_int = 12;
pub const _SC_PRIORITIZED_IO: c_int = 13;
pub const _SC_SYNCHRONIZED_IO: c_int = 14;
pub const _SC_FSYNC: c_int = 15;
pub const _SC_MAPPED_FILES: c_int = 16;
pub const _SC_MEMLOCK: c_int = 17;
pub const _SC_MEMLOCK_RANGE: c_int = 18;
pub const _SC_MEMORY_PROTECTION: c_int = 19;
pub const _SC_MESSAGE_PASSING: c_int = 20;
pub const _SC_SEMAPHORES: c_int = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: c_int = 22;
pub const _SC_AIO_LISTIO_MAX: c_int = 23;
pub const _SC_AIO_MAX: c_int = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: c_int = 25;
pub const _SC_DELAYTIMER_MAX: c_int = 26;
pub const _SC_MQ_OPEN_MAX: c_int = 27;
pub const _SC_MQ_PRIO_MAX: c_int = 28;
pub const _SC_VERSION: c_int = 29;
pub const _SC_PAGESIZE: c_int = 30;
pub const _SC_RTSIG_MAX: c_int = 31;
pub const _SC_SEM_NSEMS_MAX: c_int = 32;
pub const _SC_SEM_VALUE_MAX: c_int = 33;
pub const _SC_SIGQUEUE_MAX: c_int = 34;
pub const _SC_TIMER_MAX: c_int = 35;
pub const _SC_BC_BASE_MAX: c_int = 36;
pub const _SC_BC_DIM_MAX: c_int = 37;
pub const _SC_BC_SCALE_MAX: c_int = 38;
pub const _SC_BC_STRING_MAX: c_int = 39;
pub const _SC_COLL_WEIGHTS_MAX: c_int = 40;
pub const _SC_EQUIV_CLASS_MAX: c_int = 41;
pub const _SC_EXPR_NEST_MAX: c_int = 42;
pub const _SC_LINE_MAX: c_int = 43;
pub const _SC_RE_DUP_MAX: c_int = 44;
pub const _SC_CHARCLASS_NAME_MAX: c_int = 45;
pub const _SC_2_VERSION: c_int = 46;
pub const _SC_2_C_BIND: c_int = 47;
pub const _SC_2_C_DEV: c_int = 48;
pub const _SC_2_FORT_DEV: c_int = 49;
pub const _SC_2_FORT_RUN: c_int = 50;
pub const _SC_2_SW_DEV: c_int = 51;
pub const _SC_2_LOCALEDEF: c_int = 52;
pub const _SC_PII: c_int = 53;
pub const _SC_PII_XTI: c_int = 54;
pub const _SC_PII_SOCKET: c_int = 55;
pub const _SC_PII_INTERNET: c_int = 56;
pub const _SC_PII_OSI: c_int = 57;
pub const _SC_POLL: c_int = 58;
pub const _SC_SELECT: c_int = 59;
pub const _SC_UIO_MAXIOV: c_int = 60;
pub const _SC_IOV_MAX: c_int = 60;
pub const _SC_PII_INTERNET_STREAM: c_int = 61;
pub const _SC_PII_INTERNET_DGRAM: c_int = 62;
pub const _SC_PII_OSI_COTS: c_int = 63;
pub const _SC_PII_OSI_CLTS: c_int = 64;
pub const _SC_PII_OSI_M: c_int = 65;
pub const _SC_T_IOV_MAX: c_int = 66;
pub const _SC_THREADS: c_int = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: c_int = 68;
pub const _SC_GETGR_R_SIZE_MAX: c_int = 69;
pub const _SC_GETPW_R_SIZE_MAX: c_int = 70;
pub const _SC_LOGIN_NAME_MAX: c_int = 71;
pub const _SC_TTY_NAME_MAX: c_int = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: c_int = 73;
pub const _SC_THREAD_KEYS_MAX: c_int = 74;
pub const _SC_THREAD_STACK_MIN: c_int = 75;
pub const _SC_THREAD_THREADS_MAX: c_int = 76;
pub const _SC_THREAD_ATTR_STACKADDR: c_int = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: c_int = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: c_int = 79;
pub const _SC_THREAD_PRIO_INHERIT: c_int = 80;
pub const _SC_THREAD_PRIO_PROTECT: c_int = 81;
pub const _SC_THREAD_PROCESS_SHARED: c_int = 82;
pub const _SC_NPROCESSORS_CONF: c_int = 83;
pub const _SC_NPROCESSORS_ONLN: c_int = 84;
pub const _SC_PHYS_PAGES: c_int = 85;
pub const _SC_AVPHYS_PAGES: c_int = 86;
pub const _SC_ATEXIT_MAX: c_int = 87;
pub const _SC_PASS_MAX: c_int = 88;
pub const _SC_XOPEN_VERSION: c_int = 89;
pub const _SC_XOPEN_XCU_VERSION: c_int = 90;
pub const _SC_XOPEN_UNIX: c_int = 91;
pub const _SC_XOPEN_CRYPT: c_int = 92;
pub const _SC_XOPEN_ENH_I18N: c_int = 93;
pub const _SC_XOPEN_SHM: c_int = 94;
pub const _SC_2_CHAR_TERM: c_int = 95;
pub const _SC_2_C_VERSION: c_int = 96;
pub const _SC_2_UPE: c_int = 97;
pub const _SC_XOPEN_XPG2: c_int = 98;
pub const _SC_XOPEN_XPG3: c_int = 99;
pub const _SC_XOPEN_XPG4: c_int = 100;
pub const _SC_CHAR_BIT: c_int = 101;
pub const _SC_CHAR_MAX: c_int = 102;
pub const _SC_CHAR_MIN: c_int = 103;
pub const _SC_INT_MAX: c_int = 104;
pub const _SC_INT_MIN: c_int = 105;
pub const _SC_LONG_BIT: c_int = 106;
pub const _SC_WORD_BIT: c_int = 107;
pub const _SC_MB_LEN_MAX: c_int = 108;
pub const _SC_NZERO: c_int = 109;
pub const _SC_SSIZE_MAX: c_int = 110;
pub const _SC_SCHAR_MAX: c_int = 111;
pub const _SC_SCHAR_MIN: c_int = 112;
pub const _SC_SHRT_MAX: c_int = 113;
pub const _SC_SHRT_MIN: c_int = 114;
pub const _SC_UCHAR_MAX: c_int = 115;
pub const _SC_UINT_MAX: c_int = 116;
pub const _SC_ULONG_MAX: c_int = 117;
pub const _SC_USHRT_MAX: c_int = 118;
pub const _SC_NL_ARGMAX: c_int = 119;
pub const _SC_NL_LANGMAX: c_int = 120;
pub const _SC_NL_MSGMAX: c_int = 121;
pub const _SC_NL_NMAX: c_int = 122;
pub const _SC_NL_SETMAX: c_int = 123;
pub const _SC_NL_TEXTMAX: c_int = 124;
pub const _SC_XBS5_ILP32_OFF32: c_int = 125;
pub const _SC_XBS5_ILP32_OFFBIG: c_int = 126;
pub const _SC_XBS5_LP64_OFF64: c_int = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: c_int = 128;
pub const _SC_XOPEN_LEGACY: c_int = 129;
pub const _SC_XOPEN_REALTIME: c_int = 130;
pub const _SC_XOPEN_REALTIME_THREADS: c_int = 131;
pub const _SC_ADVISORY_INFO: c_int = 132;
pub const _SC_BARRIERS: c_int = 133;
pub const _SC_BASE: c_int = 134;
pub const _SC_C_LANG_SUPPORT: c_int = 135;
pub const _SC_C_LANG_SUPPORT_R: c_int = 136;
pub const _SC_CLOCK_SELECTION: c_int = 137;
pub const _SC_CPUTIME: c_int = 138;
pub const _SC_THREAD_CPUTIME: c_int = 139;
pub const _SC_DEVICE_IO: c_int = 140;
pub const _SC_DEVICE_SPECIFIC: c_int = 141;
pub const _SC_DEVICE_SPECIFIC_R: c_int = 142;
pub const _SC_FD_MGMT: c_int = 143;
pub const _SC_FIFO: c_int = 144;
pub const _SC_PIPE: c_int = 145;
pub const _SC_FILE_ATTRIBUTES: c_int = 146;
pub const _SC_FILE_LOCKING: c_int = 147;
pub const _SC_FILE_SYSTEM: c_int = 148;
pub const _SC_MONOTONIC_CLOCK: c_int = 149;
pub const _SC_MULTI_PROCESS: c_int = 150;
pub const _SC_SINGLE_PROCESS: c_int = 151;
pub const _SC_NETWORKING: c_int = 152;
pub const _SC_READER_WRITER_LOCKS: c_int = 153;
pub const _SC_SPIN_LOCKS: c_int = 154;
pub const _SC_REGEXP: c_int = 155;
pub const _SC_REGEX_VERSION: c_int = 156;
pub const _SC_SHELL: c_int = 157;
pub const _SC_SIGNALS: c_int = 158;
pub const _SC_SPAWN: c_int = 159;
pub const _SC_SPORADIC_SERVER: c_int = 160;
pub const _SC_THREAD_SPORADIC_SERVER: c_int = 161;
pub const _SC_SYSTEM_DATABASE: c_int = 162;
pub const _SC_SYSTEM_DATABASE_R: c_int = 163;
pub const _SC_TIMEOUTS: c_int = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: c_int = 165;
pub const _SC_USER_GROUPS: c_int = 166;
pub const _SC_USER_GROUPS_R: c_int = 167;
pub const _SC_2_PBS: c_int = 168;
pub const _SC_2_PBS_ACCOUNTING: c_int = 169;
pub const _SC_2_PBS_LOCATE: c_int = 170;
pub const _SC_2_PBS_MESSAGE: c_int = 171;
pub const _SC_2_PBS_TRACK: c_int = 172;
pub const _SC_SYMLOOP_MAX: c_int = 173;
pub const _SC_STREAMS: c_int = 174;
pub const _SC_2_PBS_CHECKPOINT: c_int = 175;
pub const _SC_V6_ILP32_OFF32: c_int = 176;
pub const _SC_V6_ILP32_OFFBIG: c_int = 177;
pub const _SC_V6_LP64_OFF64: c_int = 178;
pub const _SC_V6_LPBIG_OFFBIG: c_int = 179;
pub const _SC_HOST_NAME_MAX: c_int = 180;
pub const _SC_TRACE: c_int = 181;
pub const _SC_TRACE_EVENT_FILTER: c_int = 182;
pub const _SC_TRACE_INHERIT: c_int = 183;
pub const _SC_TRACE_LOG: c_int = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: c_int = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: c_int = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: c_int = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: c_int = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: c_int = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: c_int = 190;
pub const _SC_LEVEL2_CACHE_SIZE: c_int = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: c_int = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: c_int = 193;
pub const _SC_LEVEL3_CACHE_SIZE: c_int = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: c_int = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: c_int = 196;
pub const _SC_LEVEL4_CACHE_SIZE: c_int = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: c_int = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: c_int = 199;
pub const _SC_IPV6: c_int = 235;
pub const _SC_RAW_SOCKETS: c_int = 236;
pub const _SC_V7_ILP32_OFF32: c_int = 237;
pub const _SC_V7_ILP32_OFFBIG: c_int = 238;
pub const _SC_V7_LP64_OFF64: c_int = 239;
pub const _SC_V7_LPBIG_OFFBIG: c_int = 240;
pub const _SC_SS_REPL_MAX: c_int = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: c_int = 242;
pub const _SC_TRACE_NAME_MAX: c_int = 243;
pub const _SC_TRACE_SYS_MAX: c_int = 244;
pub const _SC_TRACE_USER_EVENT_MAX: c_int = 245;
pub const _SC_XOPEN_STREAMS: c_int = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: c_int = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: c_int = 248;
pub const _SC_MINSIGSTKSZ: c_int = 249;
pub const _SC_SIGSTKSZ: c_int = 250;
const enum_unnamed_5 = c_uint;
pub const _CS_PATH: c_int = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: c_int = 1;
pub const _CS_GNU_LIBC_VERSION: c_int = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: c_int = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: c_int = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: c_int = 5;
pub const _CS_LFS_CFLAGS: c_int = 1000;
pub const _CS_LFS_LDFLAGS: c_int = 1001;
pub const _CS_LFS_LIBS: c_int = 1002;
pub const _CS_LFS_LINTFLAGS: c_int = 1003;
pub const _CS_LFS64_CFLAGS: c_int = 1004;
pub const _CS_LFS64_LDFLAGS: c_int = 1005;
pub const _CS_LFS64_LIBS: c_int = 1006;
pub const _CS_LFS64_LINTFLAGS: c_int = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: c_int = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: c_int = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: c_int = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: c_int = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: c_int = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: c_int = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: c_int = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: c_int = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: c_int = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: c_int = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: c_int = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: c_int = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: c_int = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: c_int = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: c_int = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: c_int = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: c_int = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: c_int = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: c_int = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: c_int = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: c_int = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: c_int = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: c_int = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: c_int = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: c_int = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: c_int = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: c_int = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: c_int = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: c_int = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: c_int = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: c_int = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: c_int = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: c_int = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: c_int = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: c_int = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: c_int = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: c_int = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: c_int = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: c_int = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: c_int = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: c_int = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: c_int = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: c_int = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: c_int = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: c_int = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: c_int = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: c_int = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: c_int = 1147;
pub const _CS_V6_ENV: c_int = 1148;
pub const _CS_V7_ENV: c_int = 1149;
const enum_unnamed_6 = c_uint;
pub extern fn pathconf(__path: [*c]const u8, __name: c_int) c_long;
pub extern fn fpathconf(__fd: c_int, __name: c_int) c_long;
pub extern fn sysconf(__name: c_int) c_long;
pub extern fn confstr(__name: c_int, __buf: [*c]u8, __len: usize) usize;
pub extern fn getpid() __pid_t;
pub extern fn getppid() __pid_t;
pub extern fn getpgrp() __pid_t;
pub extern fn __getpgid(__pid: __pid_t) __pid_t;
pub extern fn getpgid(__pid: __pid_t) __pid_t;
pub extern fn setpgid(__pid: __pid_t, __pgid: __pid_t) c_int;
pub extern fn setpgrp() c_int;
pub extern fn setsid() __pid_t;
pub extern fn getsid(__pid: __pid_t) __pid_t;
pub extern fn getuid() __uid_t;
pub extern fn geteuid() __uid_t;
pub extern fn getgid() __gid_t;
pub extern fn getegid() __gid_t;
pub extern fn getgroups(__size: c_int, __list: [*c]__gid_t) c_int;
pub extern fn setuid(__uid: __uid_t) c_int;
pub extern fn setreuid(__ruid: __uid_t, __euid: __uid_t) c_int;
pub extern fn seteuid(__uid: __uid_t) c_int;
pub extern fn setgid(__gid: __gid_t) c_int;
pub extern fn setregid(__rgid: __gid_t, __egid: __gid_t) c_int;
pub extern fn setegid(__gid: __gid_t) c_int;
pub extern fn fork() __pid_t;
pub extern fn vfork() c_int;
pub extern fn ttyname(__fd: c_int) [*c]u8;
pub extern fn ttyname_r(__fd: c_int, __buf: [*c]u8, __buflen: usize) c_int;
pub extern fn isatty(__fd: c_int) c_int;
pub extern fn ttyslot() c_int;
pub extern fn link(__from: [*c]const u8, __to: [*c]const u8) c_int;
pub extern fn linkat(__fromfd: c_int, __from: [*c]const u8, __tofd: c_int, __to: [*c]const u8, __flags: c_int) c_int;
pub extern fn symlink(__from: [*c]const u8, __to: [*c]const u8) c_int;
pub extern fn readlink(noalias __path: [*c]const u8, noalias __buf: [*c]u8, __len: usize) isize;
pub extern fn symlinkat(__from: [*c]const u8, __tofd: c_int, __to: [*c]const u8) c_int;
pub extern fn readlinkat(__fd: c_int, noalias __path: [*c]const u8, noalias __buf: [*c]u8, __len: usize) isize;
pub extern fn unlink(__name: [*c]const u8) c_int;
pub extern fn unlinkat(__fd: c_int, __name: [*c]const u8, __flag: c_int) c_int;
pub extern fn rmdir(__path: [*c]const u8) c_int;
pub extern fn tcgetpgrp(__fd: c_int) __pid_t;
pub extern fn tcsetpgrp(__fd: c_int, __pgrp_id: __pid_t) c_int;
pub extern fn getlogin() [*c]u8;
pub extern fn getlogin_r(__name: [*c]u8, __name_len: usize) c_int;
pub extern fn setlogin(__name: [*c]const u8) c_int;
pub extern var optarg: [*c]u8;
pub extern var optind: c_int;
pub extern var opterr: c_int;
pub extern var optopt: c_int;
pub extern fn getopt(___argc: c_int, ___argv: [*c]const [*c]u8, __shortopts: [*c]const u8) c_int;
pub extern fn gethostname(__name: [*c]u8, __len: usize) c_int;
pub extern fn sethostname(__name: [*c]const u8, __len: usize) c_int;
pub extern fn sethostid(__id: c_long) c_int;
pub extern fn getdomainname(__name: [*c]u8, __len: usize) c_int;
pub extern fn setdomainname(__name: [*c]const u8, __len: usize) c_int;
pub extern fn vhangup() c_int;
pub extern fn revoke(__file: [*c]const u8) c_int;
pub extern fn profil(__sample_buffer: [*c]c_ushort, __size: usize, __offset: usize, __scale: c_uint) c_int;
pub extern fn acct(__name: [*c]const u8) c_int;
pub extern fn getusershell() [*c]u8;
pub extern fn endusershell() void;
pub extern fn setusershell() void;
pub extern fn daemon(__nochdir: c_int, __noclose: c_int) c_int;
pub extern fn chroot(__path: [*c]const u8) c_int;
pub extern fn getpass(__prompt: [*c]const u8) [*c]u8;
pub extern fn fsync(__fd: c_int) c_int;
pub extern fn gethostid() c_long;
pub extern fn sync() void;
pub extern fn getpagesize() c_int;
pub extern fn getdtablesize() c_int;
pub extern fn truncate(__file: [*c]const u8, __length: __off_t) c_int;
pub extern fn ftruncate(__fd: c_int, __length: __off_t) c_int;
pub extern fn brk(__addr: ?*anyopaque) c_int;
pub extern fn sbrk(__delta: isize) ?*anyopaque;
pub extern fn syscall(__sysno: c_long, ...) c_long;
pub extern fn lockf(__fd: c_int, __cmd: c_int, __len: __off_t) c_int;
pub extern fn fdatasync(__fildes: c_int) c_int;
pub extern fn crypt(__key: [*c]const u8, __salt: [*c]const u8) [*c]u8;
pub extern fn getentropy(__buffer: ?*anyopaque, __length: usize) c_int;
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):67:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):73:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):164:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):186:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):194:9
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):315:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):316:9
pub const EPOXY_PUBLIC = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /usr/include/epoxy/common.h:44:11
pub const APIENTRYP = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/epoxy/gl.h:80:9
pub const GLAPIENTRYP = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/epoxy/gl.h:84:9
pub const __GLIBC_USE = @compileError("unable to translate macro: undefined identifier `__GLIBC_USE_`"); // /usr/include/features.h:186:9
pub const __glibc_has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`"); // /usr/include/sys/cdefs.h:45:10
pub const __glibc_has_builtin = @compileError("unable to translate macro: undefined identifier `__has_builtin`"); // /usr/include/sys/cdefs.h:50:10
pub const __glibc_has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`"); // /usr/include/sys/cdefs.h:55:10
pub const __THROW = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:79:11
pub const __THROWNL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:80:11
pub const __NTH = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:81:11
pub const __NTHNL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:82:11
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token .HashHash"); // /usr/include/sys/cdefs.h:124:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token .Hash"); // /usr/include/sys/cdefs.h:125:9
pub const __glibc_unsigned_or_positive = @compileError("unable to translate macro: undefined identifier `__typeof`"); // /usr/include/sys/cdefs.h:160:9
pub const __glibc_safe_or_unknown_len = @compileError("unable to translate macro: undefined identifier `__builtin_constant_p`"); // /usr/include/sys/cdefs.h:167:9
pub const __glibc_unsafe_len = @compileError("unable to translate macro: undefined identifier `__builtin_constant_p`"); // /usr/include/sys/cdefs.h:176:9
pub const __glibc_fortify = @compileError("unable to translate C expr: expected ')'"); // /usr/include/sys/cdefs.h:185:9
pub const __glibc_fortify_n = @compileError("unable to translate C expr: expected ')'"); // /usr/include/sys/cdefs.h:195:9
pub const __warnattr = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/sys/cdefs.h:207:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /usr/include/sys/cdefs.h:208:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token .LBracket"); // /usr/include/sys/cdefs.h:216:10
pub const __REDIRECT = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /usr/include/sys/cdefs.h:247:10
pub const __REDIRECT_NTH = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /usr/include/sys/cdefs.h:254:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /usr/include/sys/cdefs.h:256:11
pub const __ASMNAME2 = @compileError("unable to translate C expr: unexpected token .Identifier"); // /usr/include/sys/cdefs.h:260:10
pub const __attribute_malloc__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:281:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/sys/cdefs.h:292:10
pub const __attribute_alloc_align__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:298:10
pub const __attribute_pure__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:308:10
pub const __attribute_const__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:315:10
pub const __attribute_maybe_unused__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:321:10
pub const __attribute_used__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:330:10
pub const __attribute_noinline__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:331:10
pub const __attribute_deprecated__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:339:10
pub const __attribute_deprecated_msg__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:349:10
pub const __attribute_format_arg__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:362:10
pub const __attribute_format_strfmon__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:372:10
pub const __attribute_nonnull__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:384:11
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:397:10
pub const __attribute_warn_unused_result__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:406:10
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__inline`"); // /usr/include/sys/cdefs.h:424:10
pub const __attribute_artificial__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:433:10
pub const __extern_inline = @compileError("unable to translate macro: undefined identifier `__inline`"); // /usr/include/sys/cdefs.h:451:11
pub const __extern_always_inline = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:452:11
pub const __restrict_arr = @compileError("unable to translate macro: undefined identifier `__restrict`"); // /usr/include/sys/cdefs.h:495:10
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/sys/cdefs.h:544:10
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/sys/cdefs.h:620:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/sys/cdefs.h:621:10
pub const __glibc_macro_warning1 = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /usr/include/sys/cdefs.h:635:10
pub const __glibc_macro_warning = @compileError("unable to translate macro: undefined identifier `GCC`"); // /usr/include/sys/cdefs.h:636:10
pub const __fortified_attr_access = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/sys/cdefs.h:681:11
pub const __attr_access = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/sys/cdefs.h:682:11
pub const __attr_access_none = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/sys/cdefs.h:683:11
pub const __attr_dealloc = @compileError("unable to translate C expr: unexpected token .Eof"); // /usr/include/sys/cdefs.h:693:10
pub const __attribute_returns_twice__ = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /usr/include/sys/cdefs.h:700:10
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token .Keyword_typedef"); // /usr/include/bits/types.h:137:10
pub const __FSID_T_TYPE = @compileError("unable to translate macro: undefined identifier `__val`"); // /usr/include/bits/typesizes.h:73:9
pub const __INT64_C = @compileError("unable to translate macro: undefined identifier `L`"); // /usr/include/stdint.h:106:11
pub const __UINT64_C = @compileError("unable to translate macro: undefined identifier `UL`"); // /usr/include/stdint.h:107:11
pub const INT64_C = @compileError("unable to translate macro: undefined identifier `L`"); // /usr/include/stdint.h:252:11
pub const UINT32_C = @compileError("unable to translate macro: undefined identifier `U`"); // /usr/include/stdint.h:260:10
pub const UINT64_C = @compileError("unable to translate macro: undefined identifier `UL`"); // /usr/include/stdint.h:262:11
pub const INTMAX_C = @compileError("unable to translate macro: undefined identifier `L`"); // /usr/include/stdint.h:269:11
pub const UINTMAX_C = @compileError("unable to translate macro: undefined identifier `UL`"); // /usr/include/stdint.h:270:11
pub const offsetof = @compileError("unable to translate macro: undefined identifier `__builtin_offsetof`"); // /usr/lib/zig/include/stddef.h:104:9
pub const va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`"); // /usr/lib/zig/include/stdarg.h:17:9
pub const va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`"); // /usr/lib/zig/include/stdarg.h:18:9
pub const va_arg = @compileError("unable to translate macro: undefined identifier `__builtin_va_arg`"); // /usr/lib/zig/include/stdarg.h:19:9
pub const __va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`"); // /usr/lib/zig/include/stdarg.h:24:9
pub const va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`"); // /usr/lib/zig/include/stdarg.h:27:9
pub const __getc_unlocked_body = @compileError("TODO postfix inc/dec expr"); // /usr/include/bits/types/struct_FILE.h:102:9
pub const __putc_unlocked_body = @compileError("TODO postfix inc/dec expr"); // /usr/include/bits/types/struct_FILE.h:106:9
pub const __f32 = @compileError("unable to translate macro: undefined identifier `f`"); // /usr/include/bits/floatn-common.h:91:12
pub const __f64x = @compileError("unable to translate macro: undefined identifier `l`"); // /usr/include/bits/floatn-common.h:120:13
pub const __CFLOAT32 = @compileError("unable to translate: TODO _Complex"); // /usr/include/bits/floatn-common.h:149:12
pub const __CFLOAT64 = @compileError("unable to translate: TODO _Complex"); // /usr/include/bits/floatn-common.h:160:13
pub const __CFLOAT32X = @compileError("unable to translate: TODO _Complex"); // /usr/include/bits/floatn-common.h:169:12
pub const __CFLOAT64X = @compileError("unable to translate: TODO _Complex"); // /usr/include/bits/floatn-common.h:178:13
pub const __builtin_nansf32 = @compileError("unable to translate macro: undefined identifier `__builtin_nansf`"); // /usr/include/bits/floatn-common.h:221:12
pub const __builtin_huge_valf64 = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`"); // /usr/include/bits/floatn-common.h:255:13
pub const __builtin_inff64 = @compileError("unable to translate macro: undefined identifier `__builtin_inf`"); // /usr/include/bits/floatn-common.h:256:13
pub const __builtin_nanf64 = @compileError("unable to translate macro: undefined identifier `__builtin_nan`"); // /usr/include/bits/floatn-common.h:257:13
pub const __builtin_nansf64 = @compileError("unable to translate macro: undefined identifier `__builtin_nans`"); // /usr/include/bits/floatn-common.h:258:13
pub const __builtin_huge_valf32x = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`"); // /usr/include/bits/floatn-common.h:272:12
pub const __builtin_inff32x = @compileError("unable to translate macro: undefined identifier `__builtin_inf`"); // /usr/include/bits/floatn-common.h:273:12
pub const __builtin_nanf32x = @compileError("unable to translate macro: undefined identifier `__builtin_nan`"); // /usr/include/bits/floatn-common.h:274:12
pub const __builtin_nansf32x = @compileError("unable to translate macro: undefined identifier `__builtin_nans`"); // /usr/include/bits/floatn-common.h:275:12
pub const __builtin_huge_valf64x = @compileError("unable to translate macro: undefined identifier `__builtin_huge_vall`"); // /usr/include/bits/floatn-common.h:289:13
pub const __builtin_inff64x = @compileError("unable to translate macro: undefined identifier `__builtin_infl`"); // /usr/include/bits/floatn-common.h:290:13
pub const __builtin_nanf64x = @compileError("unable to translate macro: undefined identifier `__builtin_nanl`"); // /usr/include/bits/floatn-common.h:291:13
pub const __builtin_nansf64x = @compileError("unable to translate macro: undefined identifier `__builtin_nansl`"); // /usr/include/bits/floatn-common.h:292:13
pub const __FD_ZERO = @compileError("unable to translate macro: undefined identifier `__i`"); // /usr/include/bits/select.h:25:9
pub const __FD_SET = @compileError("unable to translate C expr: expected ')' instead got: PipeEqual"); // /usr/include/bits/select.h:32:9
pub const __FD_CLR = @compileError("unable to translate C expr: expected ')' instead got: AmpersandEqual"); // /usr/include/bits/select.h:34:9
pub const __PTHREAD_MUTEX_INITIALIZER = @compileError("unable to translate C expr: unexpected token .LBrace"); // /usr/include/bits/struct_mutex.h:56:10
pub const __PTHREAD_RWLOCK_ELISION_EXTRA = @compileError("unable to translate C expr: unexpected token .LBrace"); // /usr/include/bits/struct_rwlock.h:40:11
pub const __ONCE_FLAG_INIT = @compileError("unable to translate C expr: unexpected token .LBrace"); // /usr/include/bits/thread-shared-types.h:113:9
pub const STBIDEF = @compileError("unable to translate C expr: unexpected token .Keyword_extern"); // /home/mel/documents/_programming/zig/nessie/deps/stb/stb_image.h:367:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 13);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 1);
pub const __clang_version__ = "13.0.1 ";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 13.0.1";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __OPTIMIZE__ = @as(c_int, 1);
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __WCHAR_TYPE__ = c_int;
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_TYPE__ = c_uint;
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_EVAL_METHOD__ = @as(c_int, 0);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __corei7 = @as(c_int, 1);
pub const __corei7__ = @as(c_int, 1);
pub const __tune_corei7__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __ELF__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __GLIBC_MINOR__ = @as(c_int, 19);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const EPOXY_GL_H = "";
pub const EPOXY_COMMON_H = "";
pub const EPOXY_BEGIN_DECLS = "";
pub const EPOXY_END_DECLS = "";
pub const __STDBOOL_H = "";
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const __gl_h_ = "";
pub const __glext_h_ = "";
pub const KHRONOS_SUPPORT_INT64 = @as(c_int, 1);
pub const KHRONOS_SUPPORT_FLOAT = @as(c_int, 1);
pub const KHRONOS_APIATTRIBUTES = "";
pub const APIENTRY = "";
pub const GLAPIENTRY = "";
pub const EPOXY_CALLSPEC = "";
pub const GLAPI = "";
pub const KHRONOS_APIENTRY = "";
pub const KHRONOS_APICALL = "";
pub const __CLANG_INTTYPES_H = "";
pub const _INTTYPES_H = @as(c_int, 1);
pub const _FEATURES_H = @as(c_int, 1);
pub const __KERNEL_STRICT_NAMES = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min)) {
    return ((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const __GLIBC_USE_ISOC2X = @as(c_int, 0);
pub const __USE_ISOC11 = @as(c_int, 1);
pub const __USE_ISOC99 = @as(c_int, 1);
pub const __USE_ISOC95 = @as(c_int, 1);
pub const __USE_POSIX_IMPLICITLY = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = @as(c_int, 1);
pub const __USE_POSIX2 = @as(c_int, 1);
pub const __USE_POSIX199309 = @as(c_int, 1);
pub const __USE_POSIX199506 = @as(c_int, 1);
pub const __USE_XOPEN2K = @as(c_int, 1);
pub const __USE_XOPEN2K8 = @as(c_int, 1);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __WORDSIZE = @as(c_int, 64);
pub const __WORDSIZE_TIME64_COMPAT32 = @as(c_int, 1);
pub const __SYSCALL_WORDSIZE = @as(c_int, 64);
pub const __TIMESIZE = __WORDSIZE;
pub const __USE_MISC = @as(c_int, 1);
pub const __USE_ATFILE = @as(c_int, 1);
pub const __USE_FORTIFY_LEVEL = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_GETS = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_SCANF = @as(c_int, 0);
pub const _STDC_PREDEF_H = @as(c_int, 1);
pub const __STDC_IEC_559__ = @as(c_int, 1);
pub const __STDC_IEC_60559_BFP__ = @as(c_long, 201404);
pub const __STDC_IEC_559_COMPLEX__ = @as(c_int, 1);
pub const __STDC_IEC_60559_COMPLEX__ = @as(c_long, 201404);
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = @as(c_int, 6);
pub const __GLIBC__ = @as(c_int, 2);
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    return ((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _SYS_CDEFS_H = @as(c_int, 1);
pub const __LEAF = "";
pub const __LEAF_ATTR = "";
pub inline fn __P(args: anytype) @TypeOf(args) {
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    return args;
}
pub const __ptr_t = ?*anyopaque;
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __glibc_objsize0(__o: anytype) @TypeOf(__bos0(__o)) {
    return __bos0(__o);
}
pub inline fn __glibc_objsize(__o: anytype) @TypeOf(__bos(__o)) {
    return __bos(__o);
}
pub inline fn __glibc_safe_len_cond(__l: anytype, __s: anytype, __osz: anytype) @TypeOf(__l <= (__osz / __s)) {
    return __l <= (__osz / __s);
}
pub const __glibc_c99_flexarr_available = @as(c_int, 1);
pub inline fn __ASMNAME(cname: anytype) @TypeOf(__ASMNAME2(__USER_LABEL_PREFIX__, cname)) {
    return __ASMNAME2(__USER_LABEL_PREFIX__, cname);
}
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute_nonnull__(params)) {
    return __attribute_nonnull__(params);
}
pub const __wur = "";
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 0))) {
    return __builtin_expect(cond, @as(c_int, 0));
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 1))) {
    return __builtin_expect(cond, @as(c_int, 1));
}
pub const __attribute_nonstring__ = "";
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = @as(c_int, 0);
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    _ = alias;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = alias;
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    return name ++ proto ++ __THROW;
}
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    return __REDIRECT_NTH(name, proto, alias);
}
pub const __HAVE_GENERIC_SELECTION = @as(c_int, 1);
pub const __attr_dealloc_free = "";
pub const __USE_EXTERN_INLINES = @as(c_int, 1);
pub const __stub___compat_bdflush = "";
pub const __stub_chflags = "";
pub const __stub_fchflags = "";
pub const __stub_gtty = "";
pub const __stub_revoke = "";
pub const __stub_setlogin = "";
pub const __stub_sigreturn = "";
pub const __stub_stty = "";
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = @as(c_int, 1);
pub const __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION = "";
pub const __GLIBC_USE_LIB_EXT2 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = @as(c_int, 0);
pub const _BITS_TYPES_H = @as(c_int, 1);
pub const __S16_TYPE = c_short;
pub const __U16_TYPE = c_ushort;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONGWORD_TYPE = c_long;
pub const __ULONGWORD_TYPE = c_ulong;
pub const __SQUAD_TYPE = c_long;
pub const __UQUAD_TYPE = c_ulong;
pub const __SWORD_TYPE = c_long;
pub const __UWORD_TYPE = c_ulong;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const __S64_TYPE = c_long;
pub const __U64_TYPE = c_ulong;
pub const _BITS_TYPESIZES_H = @as(c_int, 1);
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __TIMER_T_TYPE = ?*anyopaque;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = @as(c_int, 1);
pub const __INO_T_MATCHES_INO64_T = @as(c_int, 1);
pub const __RLIM_T_MATCHES_RLIM64_T = @as(c_int, 1);
pub const __STATFS_MATCHES_STATFS64 = @as(c_int, 1);
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = @as(c_int, 1);
pub const __FD_SETSIZE = @as(c_int, 1024);
pub const _BITS_TIME64_H = @as(c_int, 1);
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = @as(c_int, 1);
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - @as(c_int, 1);
pub const _BITS_STDINT_INTN_H = @as(c_int, 1);
pub const _BITS_STDINT_UINTN_H = @as(c_int, 1);
pub const __intptr_t_defined = "";
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_LEAST8_MIN = -@as(c_int, 128);
pub const INT_LEAST16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT_LEAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT_LEAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_LEAST8_MAX = @as(c_int, 127);
pub const INT_LEAST16_MAX = @as(c_int, 32767);
pub const INT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_LEAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_LEAST8_MAX = @as(c_int, 255);
pub const UINT_LEAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_LEAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_FAST8_MIN = -@as(c_int, 128);
pub const INT_FAST16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_FAST8_MAX = @as(c_int, 127);
pub const INT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_FAST8_MAX = @as(c_int, 255);
pub const UINT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTPTR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INTMAX_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const PTRDIFF_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const PTRDIFF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const SIG_ATOMIC_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const SIG_ATOMIC_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    return c;
}
pub const ____gwchar_t_defined = @as(c_int, 1);
pub const __PRI64_PREFIX = "l";
pub const __PRIPTR_PREFIX = "l";
pub const PRId8 = "d";
pub const PRId16 = "d";
pub const PRId32 = "d";
pub const PRId64 = __PRI64_PREFIX ++ "d";
pub const PRIdLEAST8 = "d";
pub const PRIdLEAST16 = "d";
pub const PRIdLEAST32 = "d";
pub const PRIdLEAST64 = __PRI64_PREFIX ++ "d";
pub const PRIdFAST8 = "d";
pub const PRIdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const PRIdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const PRIdFAST64 = __PRI64_PREFIX ++ "d";
pub const PRIi8 = "i";
pub const PRIi16 = "i";
pub const PRIi32 = "i";
pub const PRIi64 = __PRI64_PREFIX ++ "i";
pub const PRIiLEAST8 = "i";
pub const PRIiLEAST16 = "i";
pub const PRIiLEAST32 = "i";
pub const PRIiLEAST64 = __PRI64_PREFIX ++ "i";
pub const PRIiFAST8 = "i";
pub const PRIiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const PRIiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const PRIiFAST64 = __PRI64_PREFIX ++ "i";
pub const PRIo8 = "o";
pub const PRIo16 = "o";
pub const PRIo32 = "o";
pub const PRIo64 = __PRI64_PREFIX ++ "o";
pub const PRIoLEAST8 = "o";
pub const PRIoLEAST16 = "o";
pub const PRIoLEAST32 = "o";
pub const PRIoLEAST64 = __PRI64_PREFIX ++ "o";
pub const PRIoFAST8 = "o";
pub const PRIoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const PRIoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const PRIoFAST64 = __PRI64_PREFIX ++ "o";
pub const PRIu8 = "u";
pub const PRIu16 = "u";
pub const PRIu32 = "u";
pub const PRIu64 = __PRI64_PREFIX ++ "u";
pub const PRIuLEAST8 = "u";
pub const PRIuLEAST16 = "u";
pub const PRIuLEAST32 = "u";
pub const PRIuLEAST64 = __PRI64_PREFIX ++ "u";
pub const PRIuFAST8 = "u";
pub const PRIuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const PRIuFAST32 = __PRIPTR_PREFIX ++ "u";
pub const PRIuFAST64 = __PRI64_PREFIX ++ "u";
pub const PRIx8 = "x";
pub const PRIx16 = "x";
pub const PRIx32 = "x";
pub const PRIx64 = __PRI64_PREFIX ++ "x";
pub const PRIxLEAST8 = "x";
pub const PRIxLEAST16 = "x";
pub const PRIxLEAST32 = "x";
pub const PRIxLEAST64 = __PRI64_PREFIX ++ "x";
pub const PRIxFAST8 = "x";
pub const PRIxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const PRIxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const PRIxFAST64 = __PRI64_PREFIX ++ "x";
pub const PRIX8 = "X";
pub const PRIX16 = "X";
pub const PRIX32 = "X";
pub const PRIX64 = __PRI64_PREFIX ++ "X";
pub const PRIXLEAST8 = "X";
pub const PRIXLEAST16 = "X";
pub const PRIXLEAST32 = "X";
pub const PRIXLEAST64 = __PRI64_PREFIX ++ "X";
pub const PRIXFAST8 = "X";
pub const PRIXFAST16 = __PRIPTR_PREFIX ++ "X";
pub const PRIXFAST32 = __PRIPTR_PREFIX ++ "X";
pub const PRIXFAST64 = __PRI64_PREFIX ++ "X";
pub const PRIdMAX = __PRI64_PREFIX ++ "d";
pub const PRIiMAX = __PRI64_PREFIX ++ "i";
pub const PRIoMAX = __PRI64_PREFIX ++ "o";
pub const PRIuMAX = __PRI64_PREFIX ++ "u";
pub const PRIxMAX = __PRI64_PREFIX ++ "x";
pub const PRIXMAX = __PRI64_PREFIX ++ "X";
pub const PRIdPTR = __PRIPTR_PREFIX ++ "d";
pub const PRIiPTR = __PRIPTR_PREFIX ++ "i";
pub const PRIoPTR = __PRIPTR_PREFIX ++ "o";
pub const PRIuPTR = __PRIPTR_PREFIX ++ "u";
pub const PRIxPTR = __PRIPTR_PREFIX ++ "x";
pub const PRIXPTR = __PRIPTR_PREFIX ++ "X";
pub const SCNd8 = "hhd";
pub const SCNd16 = "hd";
pub const SCNd32 = "d";
pub const SCNd64 = __PRI64_PREFIX ++ "d";
pub const SCNdLEAST8 = "hhd";
pub const SCNdLEAST16 = "hd";
pub const SCNdLEAST32 = "d";
pub const SCNdLEAST64 = __PRI64_PREFIX ++ "d";
pub const SCNdFAST8 = "hhd";
pub const SCNdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const SCNdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const SCNdFAST64 = __PRI64_PREFIX ++ "d";
pub const SCNi8 = "hhi";
pub const SCNi16 = "hi";
pub const SCNi32 = "i";
pub const SCNi64 = __PRI64_PREFIX ++ "i";
pub const SCNiLEAST8 = "hhi";
pub const SCNiLEAST16 = "hi";
pub const SCNiLEAST32 = "i";
pub const SCNiLEAST64 = __PRI64_PREFIX ++ "i";
pub const SCNiFAST8 = "hhi";
pub const SCNiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const SCNiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const SCNiFAST64 = __PRI64_PREFIX ++ "i";
pub const SCNu8 = "hhu";
pub const SCNu16 = "hu";
pub const SCNu32 = "u";
pub const SCNu64 = __PRI64_PREFIX ++ "u";
pub const SCNuLEAST8 = "hhu";
pub const SCNuLEAST16 = "hu";
pub const SCNuLEAST32 = "u";
pub const SCNuLEAST64 = __PRI64_PREFIX ++ "u";
pub const SCNuFAST8 = "hhu";
pub const SCNuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const SCNuFAST32 = __PRIPTR_PREFIX ++ "u";
pub const SCNuFAST64 = __PRI64_PREFIX ++ "u";
pub const SCNo8 = "hho";
pub const SCNo16 = "ho";
pub const SCNo32 = "o";
pub const SCNo64 = __PRI64_PREFIX ++ "o";
pub const SCNoLEAST8 = "hho";
pub const SCNoLEAST16 = "ho";
pub const SCNoLEAST32 = "o";
pub const SCNoLEAST64 = __PRI64_PREFIX ++ "o";
pub const SCNoFAST8 = "hho";
pub const SCNoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const SCNoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const SCNoFAST64 = __PRI64_PREFIX ++ "o";
pub const SCNx8 = "hhx";
pub const SCNx16 = "hx";
pub const SCNx32 = "x";
pub const SCNx64 = __PRI64_PREFIX ++ "x";
pub const SCNxLEAST8 = "hhx";
pub const SCNxLEAST16 = "hx";
pub const SCNxLEAST32 = "x";
pub const SCNxLEAST64 = __PRI64_PREFIX ++ "x";
pub const SCNxFAST8 = "hhx";
pub const SCNxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const SCNxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const SCNxFAST64 = __PRI64_PREFIX ++ "x";
pub const SCNdMAX = __PRI64_PREFIX ++ "d";
pub const SCNiMAX = __PRI64_PREFIX ++ "i";
pub const SCNoMAX = __PRI64_PREFIX ++ "o";
pub const SCNuMAX = __PRI64_PREFIX ++ "u";
pub const SCNxMAX = __PRI64_PREFIX ++ "x";
pub const SCNdPTR = __PRIPTR_PREFIX ++ "d";
pub const SCNiPTR = __PRIPTR_PREFIX ++ "i";
pub const SCNoPTR = __PRIPTR_PREFIX ++ "o";
pub const SCNuPTR = __PRIPTR_PREFIX ++ "u";
pub const SCNxPTR = __PRIPTR_PREFIX ++ "x";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_STDDEF_H_misc = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const __khrplatform_h_ = @as(c_int, 1);
pub const KHRONOS_MAX_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFF, .hexadecimal);
pub const GL_ES_VERSION_2_0 = @as(c_int, 1);
pub const GL_ES_VERSION_3_0 = @as(c_int, 1);
pub const GL_ES_VERSION_3_1 = @as(c_int, 1);
pub const GL_ES_VERSION_3_2 = @as(c_int, 1);
pub const GL_SC_VERSION_2_0 = @as(c_int, 1);
pub const GL_VERSION_1_0 = @as(c_int, 1);
pub const GL_VERSION_1_1 = @as(c_int, 1);
pub const GL_VERSION_1_2 = @as(c_int, 1);
pub const GL_VERSION_1_3 = @as(c_int, 1);
pub const GL_VERSION_1_4 = @as(c_int, 1);
pub const GL_VERSION_1_5 = @as(c_int, 1);
pub const GL_VERSION_2_0 = @as(c_int, 1);
pub const GL_VERSION_2_1 = @as(c_int, 1);
pub const GL_VERSION_3_0 = @as(c_int, 1);
pub const GL_VERSION_3_1 = @as(c_int, 1);
pub const GL_VERSION_3_2 = @as(c_int, 1);
pub const GL_VERSION_3_3 = @as(c_int, 1);
pub const GL_VERSION_4_0 = @as(c_int, 1);
pub const GL_VERSION_4_1 = @as(c_int, 1);
pub const GL_VERSION_4_2 = @as(c_int, 1);
pub const GL_VERSION_4_3 = @as(c_int, 1);
pub const GL_VERSION_4_4 = @as(c_int, 1);
pub const GL_VERSION_4_5 = @as(c_int, 1);
pub const GL_VERSION_4_6 = @as(c_int, 1);
pub const GL_VERSION_ES_CM_1_0 = @as(c_int, 1);
pub const GL_3DFX_multisample = @as(c_int, 1);
pub const GL_3DFX_tbuffer = @as(c_int, 1);
pub const GL_3DFX_texture_compression_FXT1 = @as(c_int, 1);
pub const GL_AMD_blend_minmax_factor = @as(c_int, 1);
pub const GL_AMD_compressed_3DC_texture = @as(c_int, 1);
pub const GL_AMD_compressed_ATC_texture = @as(c_int, 1);
pub const GL_AMD_conservative_depth = @as(c_int, 1);
pub const GL_AMD_debug_output = @as(c_int, 1);
pub const GL_AMD_depth_clamp_separate = @as(c_int, 1);
pub const GL_AMD_draw_buffers_blend = @as(c_int, 1);
pub const GL_AMD_framebuffer_multisample_advanced = @as(c_int, 1);
pub const GL_AMD_framebuffer_sample_positions = @as(c_int, 1);
pub const GL_AMD_gcn_shader = @as(c_int, 1);
pub const GL_AMD_gpu_shader_half_float = @as(c_int, 1);
pub const GL_AMD_gpu_shader_int16 = @as(c_int, 1);
pub const GL_AMD_gpu_shader_int64 = @as(c_int, 1);
pub const GL_AMD_interleaved_elements = @as(c_int, 1);
pub const GL_AMD_multi_draw_indirect = @as(c_int, 1);
pub const GL_AMD_name_gen_delete = @as(c_int, 1);
pub const GL_AMD_occlusion_query_event = @as(c_int, 1);
pub const GL_AMD_performance_monitor = @as(c_int, 1);
pub const GL_AMD_pinned_memory = @as(c_int, 1);
pub const GL_AMD_program_binary_Z400 = @as(c_int, 1);
pub const GL_AMD_query_buffer_object = @as(c_int, 1);
pub const GL_AMD_sample_positions = @as(c_int, 1);
pub const GL_AMD_seamless_cubemap_per_texture = @as(c_int, 1);
pub const GL_AMD_shader_atomic_counter_ops = @as(c_int, 1);
pub const GL_AMD_shader_ballot = @as(c_int, 1);
pub const GL_AMD_shader_explicit_vertex_parameter = @as(c_int, 1);
pub const GL_AMD_shader_gpu_shader_half_float_fetch = @as(c_int, 1);
pub const GL_AMD_shader_image_load_store_lod = @as(c_int, 1);
pub const GL_AMD_shader_stencil_export = @as(c_int, 1);
pub const GL_AMD_shader_trinary_minmax = @as(c_int, 1);
pub const GL_AMD_sparse_texture = @as(c_int, 1);
pub const GL_AMD_stencil_operation_extended = @as(c_int, 1);
pub const GL_AMD_texture_gather_bias_lod = @as(c_int, 1);
pub const GL_AMD_texture_texture4 = @as(c_int, 1);
pub const GL_AMD_transform_feedback3_lines_triangles = @as(c_int, 1);
pub const GL_AMD_transform_feedback4 = @as(c_int, 1);
pub const GL_AMD_vertex_shader_layer = @as(c_int, 1);
pub const GL_AMD_vertex_shader_tessellator = @as(c_int, 1);
pub const GL_AMD_vertex_shader_viewport_index = @as(c_int, 1);
pub const GL_ANDROID_extension_pack_es31a = @as(c_int, 1);
pub const GL_ANGLE_depth_texture = @as(c_int, 1);
pub const GL_ANGLE_framebuffer_blit = @as(c_int, 1);
pub const GL_ANGLE_framebuffer_multisample = @as(c_int, 1);
pub const GL_ANGLE_instanced_arrays = @as(c_int, 1);
pub const GL_ANGLE_pack_reverse_row_order = @as(c_int, 1);
pub const GL_ANGLE_program_binary = @as(c_int, 1);
pub const GL_ANGLE_texture_compression_dxt3 = @as(c_int, 1);
pub const GL_ANGLE_texture_compression_dxt5 = @as(c_int, 1);
pub const GL_ANGLE_texture_usage = @as(c_int, 1);
pub const GL_ANGLE_translated_shader_source = @as(c_int, 1);
pub const GL_APPLE_aux_depth_stencil = @as(c_int, 1);
pub const GL_APPLE_client_storage = @as(c_int, 1);
pub const GL_APPLE_clip_distance = @as(c_int, 1);
pub const GL_APPLE_color_buffer_packed_float = @as(c_int, 1);
pub const GL_APPLE_copy_texture_levels = @as(c_int, 1);
pub const GL_APPLE_element_array = @as(c_int, 1);
pub const GL_APPLE_fence = @as(c_int, 1);
pub const GL_APPLE_float_pixels = @as(c_int, 1);
pub const GL_APPLE_flush_buffer_range = @as(c_int, 1);
pub const GL_APPLE_framebuffer_multisample = @as(c_int, 1);
pub const GL_APPLE_object_purgeable = @as(c_int, 1);
pub const GL_APPLE_rgb_422 = @as(c_int, 1);
pub const GL_APPLE_row_bytes = @as(c_int, 1);
pub const GL_APPLE_specular_vector = @as(c_int, 1);
pub const GL_APPLE_sync = @as(c_int, 1);
pub const GL_APPLE_texture_2D_limited_npot = @as(c_int, 1);
pub const GL_APPLE_texture_format_BGRA8888 = @as(c_int, 1);
pub const GL_APPLE_texture_max_level = @as(c_int, 1);
pub const GL_APPLE_texture_packed_float = @as(c_int, 1);
pub const GL_APPLE_texture_range = @as(c_int, 1);
pub const GL_APPLE_transform_hint = @as(c_int, 1);
pub const GL_APPLE_vertex_array_object = @as(c_int, 1);
pub const GL_APPLE_vertex_array_range = @as(c_int, 1);
pub const GL_APPLE_vertex_program_evaluators = @as(c_int, 1);
pub const GL_APPLE_ycbcr_422 = @as(c_int, 1);
pub const GL_ARB_ES2_compatibility = @as(c_int, 1);
pub const GL_ARB_ES3_1_compatibility = @as(c_int, 1);
pub const GL_ARB_ES3_2_compatibility = @as(c_int, 1);
pub const GL_ARB_ES3_compatibility = @as(c_int, 1);
pub const GL_ARB_arrays_of_arrays = @as(c_int, 1);
pub const GL_ARB_base_instance = @as(c_int, 1);
pub const GL_ARB_bindless_texture = @as(c_int, 1);
pub const GL_ARB_blend_func_extended = @as(c_int, 1);
pub const GL_ARB_buffer_storage = @as(c_int, 1);
pub const GL_ARB_cl_event = @as(c_int, 1);
pub const GL_ARB_clear_buffer_object = @as(c_int, 1);
pub const GL_ARB_clear_texture = @as(c_int, 1);
pub const GL_ARB_clip_control = @as(c_int, 1);
pub const GL_ARB_color_buffer_float = @as(c_int, 1);
pub const GL_ARB_compatibility = @as(c_int, 1);
pub const GL_ARB_compressed_texture_pixel_storage = @as(c_int, 1);
pub const GL_ARB_compute_shader = @as(c_int, 1);
pub const GL_ARB_compute_variable_group_size = @as(c_int, 1);
pub const GL_ARB_conditional_render_inverted = @as(c_int, 1);
pub const GL_ARB_conservative_depth = @as(c_int, 1);
pub const GL_ARB_copy_buffer = @as(c_int, 1);
pub const GL_ARB_copy_image = @as(c_int, 1);
pub const GL_ARB_cull_distance = @as(c_int, 1);
pub const GL_ARB_debug_output = @as(c_int, 1);
pub const GL_ARB_depth_buffer_float = @as(c_int, 1);
pub const GL_ARB_depth_clamp = @as(c_int, 1);
pub const GL_ARB_depth_texture = @as(c_int, 1);
pub const GL_ARB_derivative_control = @as(c_int, 1);
pub const GL_ARB_direct_state_access = @as(c_int, 1);
pub const GL_ARB_draw_buffers = @as(c_int, 1);
pub const GL_ARB_draw_buffers_blend = @as(c_int, 1);
pub const GL_ARB_draw_elements_base_vertex = @as(c_int, 1);
pub const GL_ARB_draw_indirect = @as(c_int, 1);
pub const GL_ARB_draw_instanced = @as(c_int, 1);
pub const GL_ARB_enhanced_layouts = @as(c_int, 1);
pub const GL_ARB_explicit_attrib_location = @as(c_int, 1);
pub const GL_ARB_explicit_uniform_location = @as(c_int, 1);
pub const GL_ARB_fragment_coord_conventions = @as(c_int, 1);
pub const GL_ARB_fragment_layer_viewport = @as(c_int, 1);
pub const GL_ARB_fragment_program = @as(c_int, 1);
pub const GL_ARB_fragment_program_shadow = @as(c_int, 1);
pub const GL_ARB_fragment_shader = @as(c_int, 1);
pub const GL_ARB_fragment_shader_interlock = @as(c_int, 1);
pub const GL_ARB_framebuffer_no_attachments = @as(c_int, 1);
pub const GL_ARB_framebuffer_object = @as(c_int, 1);
pub const GL_ARB_framebuffer_sRGB = @as(c_int, 1);
pub const GL_ARB_geometry_shader4 = @as(c_int, 1);
pub const GL_ARB_get_program_binary = @as(c_int, 1);
pub const GL_ARB_get_texture_sub_image = @as(c_int, 1);
pub const GL_ARB_gl_spirv = @as(c_int, 1);
pub const GL_ARB_gpu_shader5 = @as(c_int, 1);
pub const GL_ARB_gpu_shader_fp64 = @as(c_int, 1);
pub const GL_ARB_gpu_shader_int64 = @as(c_int, 1);
pub const GL_ARB_half_float_pixel = @as(c_int, 1);
pub const GL_ARB_half_float_vertex = @as(c_int, 1);
pub const GL_ARB_imaging = @as(c_int, 1);
pub const GL_ARB_indirect_parameters = @as(c_int, 1);
pub const GL_ARB_instanced_arrays = @as(c_int, 1);
pub const GL_ARB_internalformat_query = @as(c_int, 1);
pub const GL_ARB_internalformat_query2 = @as(c_int, 1);
pub const GL_ARB_invalidate_subdata = @as(c_int, 1);
pub const GL_ARB_map_buffer_alignment = @as(c_int, 1);
pub const GL_ARB_map_buffer_range = @as(c_int, 1);
pub const GL_ARB_matrix_palette = @as(c_int, 1);
pub const GL_ARB_multi_bind = @as(c_int, 1);
pub const GL_ARB_multi_draw_indirect = @as(c_int, 1);
pub const GL_ARB_multisample = @as(c_int, 1);
pub const GL_ARB_multitexture = @as(c_int, 1);
pub const GL_ARB_occlusion_query = @as(c_int, 1);
pub const GL_ARB_occlusion_query2 = @as(c_int, 1);
pub const GL_ARB_parallel_shader_compile = @as(c_int, 1);
pub const GL_ARB_pipeline_statistics_query = @as(c_int, 1);
pub const GL_ARB_pixel_buffer_object = @as(c_int, 1);
pub const GL_ARB_point_parameters = @as(c_int, 1);
pub const GL_ARB_point_sprite = @as(c_int, 1);
pub const GL_ARB_polygon_offset_clamp = @as(c_int, 1);
pub const GL_ARB_post_depth_coverage = @as(c_int, 1);
pub const GL_ARB_program_interface_query = @as(c_int, 1);
pub const GL_ARB_provoking_vertex = @as(c_int, 1);
pub const GL_ARB_query_buffer_object = @as(c_int, 1);
pub const GL_ARB_robust_buffer_access_behavior = @as(c_int, 1);
pub const GL_ARB_robustness = @as(c_int, 1);
pub const GL_ARB_robustness_isolation = @as(c_int, 1);
pub const GL_ARB_sample_locations = @as(c_int, 1);
pub const GL_ARB_sample_shading = @as(c_int, 1);
pub const GL_ARB_sampler_objects = @as(c_int, 1);
pub const GL_ARB_seamless_cube_map = @as(c_int, 1);
pub const GL_ARB_seamless_cubemap_per_texture = @as(c_int, 1);
pub const GL_ARB_separate_shader_objects = @as(c_int, 1);
pub const GL_ARB_shader_atomic_counter_ops = @as(c_int, 1);
pub const GL_ARB_shader_atomic_counters = @as(c_int, 1);
pub const GL_ARB_shader_ballot = @as(c_int, 1);
pub const GL_ARB_shader_bit_encoding = @as(c_int, 1);
pub const GL_ARB_shader_clock = @as(c_int, 1);
pub const GL_ARB_shader_draw_parameters = @as(c_int, 1);
pub const GL_ARB_shader_group_vote = @as(c_int, 1);
pub const GL_ARB_shader_image_load_store = @as(c_int, 1);
pub const GL_ARB_shader_image_size = @as(c_int, 1);
pub const GL_ARB_shader_objects = @as(c_int, 1);
pub const GL_ARB_shader_precision = @as(c_int, 1);
pub const GL_ARB_shader_stencil_export = @as(c_int, 1);
pub const GL_ARB_shader_storage_buffer_object = @as(c_int, 1);
pub const GL_ARB_shader_subroutine = @as(c_int, 1);
pub const GL_ARB_shader_texture_image_samples = @as(c_int, 1);
pub const GL_ARB_shader_texture_lod = @as(c_int, 1);
pub const GL_ARB_shader_viewport_layer_array = @as(c_int, 1);
pub const GL_ARB_shading_language_100 = @as(c_int, 1);
pub const GL_ARB_shading_language_420pack = @as(c_int, 1);
pub const GL_ARB_shading_language_include = @as(c_int, 1);
pub const GL_ARB_shading_language_packing = @as(c_int, 1);
pub const GL_ARB_shadow = @as(c_int, 1);
pub const GL_ARB_shadow_ambient = @as(c_int, 1);
pub const GL_ARB_sparse_buffer = @as(c_int, 1);
pub const GL_ARB_sparse_texture = @as(c_int, 1);
pub const GL_ARB_sparse_texture2 = @as(c_int, 1);
pub const GL_ARB_sparse_texture_clamp = @as(c_int, 1);
pub const GL_ARB_spirv_extensions = @as(c_int, 1);
pub const GL_ARB_stencil_texturing = @as(c_int, 1);
pub const GL_ARB_sync = @as(c_int, 1);
pub const GL_ARB_tessellation_shader = @as(c_int, 1);
pub const GL_ARB_texture_barrier = @as(c_int, 1);
pub const GL_ARB_texture_border_clamp = @as(c_int, 1);
pub const GL_ARB_texture_buffer_object = @as(c_int, 1);
pub const GL_ARB_texture_buffer_object_rgb32 = @as(c_int, 1);
pub const GL_ARB_texture_buffer_range = @as(c_int, 1);
pub const GL_ARB_texture_compression = @as(c_int, 1);
pub const GL_ARB_texture_compression_bptc = @as(c_int, 1);
pub const GL_ARB_texture_compression_rgtc = @as(c_int, 1);
pub const GL_ARB_texture_cube_map = @as(c_int, 1);
pub const GL_ARB_texture_cube_map_array = @as(c_int, 1);
pub const GL_ARB_texture_env_add = @as(c_int, 1);
pub const GL_ARB_texture_env_combine = @as(c_int, 1);
pub const GL_ARB_texture_env_crossbar = @as(c_int, 1);
pub const GL_ARB_texture_env_dot3 = @as(c_int, 1);
pub const GL_ARB_texture_filter_anisotropic = @as(c_int, 1);
pub const GL_ARB_texture_filter_minmax = @as(c_int, 1);
pub const GL_ARB_texture_float = @as(c_int, 1);
pub const GL_ARB_texture_gather = @as(c_int, 1);
pub const GL_ARB_texture_mirror_clamp_to_edge = @as(c_int, 1);
pub const GL_ARB_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_ARB_texture_multisample = @as(c_int, 1);
pub const GL_ARB_texture_non_power_of_two = @as(c_int, 1);
pub const GL_ARB_texture_query_levels = @as(c_int, 1);
pub const GL_ARB_texture_query_lod = @as(c_int, 1);
pub const GL_ARB_texture_rectangle = @as(c_int, 1);
pub const GL_ARB_texture_rg = @as(c_int, 1);
pub const GL_ARB_texture_rgb10_a2ui = @as(c_int, 1);
pub const GL_ARB_texture_stencil8 = @as(c_int, 1);
pub const GL_ARB_texture_storage = @as(c_int, 1);
pub const GL_ARB_texture_storage_multisample = @as(c_int, 1);
pub const GL_ARB_texture_swizzle = @as(c_int, 1);
pub const GL_ARB_texture_view = @as(c_int, 1);
pub const GL_ARB_timer_query = @as(c_int, 1);
pub const GL_ARB_transform_feedback2 = @as(c_int, 1);
pub const GL_ARB_transform_feedback3 = @as(c_int, 1);
pub const GL_ARB_transform_feedback_instanced = @as(c_int, 1);
pub const GL_ARB_transform_feedback_overflow_query = @as(c_int, 1);
pub const GL_ARB_transpose_matrix = @as(c_int, 1);
pub const GL_ARB_uniform_buffer_object = @as(c_int, 1);
pub const GL_ARB_vertex_array_bgra = @as(c_int, 1);
pub const GL_ARB_vertex_array_object = @as(c_int, 1);
pub const GL_ARB_vertex_attrib_64bit = @as(c_int, 1);
pub const GL_ARB_vertex_attrib_binding = @as(c_int, 1);
pub const GL_ARB_vertex_blend = @as(c_int, 1);
pub const GL_ARB_vertex_buffer_object = @as(c_int, 1);
pub const GL_ARB_vertex_program = @as(c_int, 1);
pub const GL_ARB_vertex_shader = @as(c_int, 1);
pub const GL_ARB_vertex_type_10f_11f_11f_rev = @as(c_int, 1);
pub const GL_ARB_vertex_type_2_10_10_10_rev = @as(c_int, 1);
pub const GL_ARB_viewport_array = @as(c_int, 1);
pub const GL_ARB_window_pos = @as(c_int, 1);
pub const GL_ARM_mali_program_binary = @as(c_int, 1);
pub const GL_ARM_mali_shader_binary = @as(c_int, 1);
pub const GL_ARM_rgba8 = @as(c_int, 1);
pub const GL_ARM_shader_framebuffer_fetch = @as(c_int, 1);
pub const GL_ARM_shader_framebuffer_fetch_depth_stencil = @as(c_int, 1);
pub const GL_ATI_draw_buffers = @as(c_int, 1);
pub const GL_ATI_element_array = @as(c_int, 1);
pub const GL_ATI_envmap_bumpmap = @as(c_int, 1);
pub const GL_ATI_fragment_shader = @as(c_int, 1);
pub const GL_ATI_map_object_buffer = @as(c_int, 1);
pub const GL_ATI_meminfo = @as(c_int, 1);
pub const GL_ATI_pixel_format_float = @as(c_int, 1);
pub const GL_ATI_pn_triangles = @as(c_int, 1);
pub const GL_ATI_separate_stencil = @as(c_int, 1);
pub const GL_ATI_text_fragment_shader = @as(c_int, 1);
pub const GL_ATI_texture_env_combine3 = @as(c_int, 1);
pub const GL_ATI_texture_float = @as(c_int, 1);
pub const GL_ATI_texture_mirror_once = @as(c_int, 1);
pub const GL_ATI_vertex_array_object = @as(c_int, 1);
pub const GL_ATI_vertex_attrib_array_object = @as(c_int, 1);
pub const GL_ATI_vertex_streams = @as(c_int, 1);
pub const GL_DMP_program_binary = @as(c_int, 1);
pub const GL_DMP_shader_binary = @as(c_int, 1);
pub const GL_EXT_422_pixels = @as(c_int, 1);
pub const GL_EXT_EGL_image_array = @as(c_int, 1);
pub const GL_EXT_EGL_image_storage = @as(c_int, 1);
pub const GL_EXT_YUV_target = @as(c_int, 1);
pub const GL_EXT_abgr = @as(c_int, 1);
pub const GL_EXT_base_instance = @as(c_int, 1);
pub const GL_EXT_bgra = @as(c_int, 1);
pub const GL_EXT_bindable_uniform = @as(c_int, 1);
pub const GL_EXT_blend_color = @as(c_int, 1);
pub const GL_EXT_blend_equation_separate = @as(c_int, 1);
pub const GL_EXT_blend_func_extended = @as(c_int, 1);
pub const GL_EXT_blend_func_separate = @as(c_int, 1);
pub const GL_EXT_blend_logic_op = @as(c_int, 1);
pub const GL_EXT_blend_minmax = @as(c_int, 1);
pub const GL_EXT_blend_subtract = @as(c_int, 1);
pub const GL_EXT_buffer_storage = @as(c_int, 1);
pub const GL_EXT_clear_texture = @as(c_int, 1);
pub const GL_EXT_clip_control = @as(c_int, 1);
pub const GL_EXT_clip_cull_distance = @as(c_int, 1);
pub const GL_EXT_clip_volume_hint = @as(c_int, 1);
pub const GL_EXT_cmyka = @as(c_int, 1);
pub const GL_EXT_color_buffer_float = @as(c_int, 1);
pub const GL_EXT_color_buffer_half_float = @as(c_int, 1);
pub const GL_EXT_color_subtable = @as(c_int, 1);
pub const GL_EXT_compiled_vertex_array = @as(c_int, 1);
pub const GL_EXT_conservative_depth = @as(c_int, 1);
pub const GL_EXT_convolution = @as(c_int, 1);
pub const GL_EXT_coordinate_frame = @as(c_int, 1);
pub const GL_EXT_copy_image = @as(c_int, 1);
pub const GL_EXT_copy_texture = @as(c_int, 1);
pub const GL_EXT_cull_vertex = @as(c_int, 1);
pub const GL_EXT_debug_label = @as(c_int, 1);
pub const GL_EXT_debug_marker = @as(c_int, 1);
pub const GL_EXT_depth_bounds_test = @as(c_int, 1);
pub const GL_EXT_depth_clamp = @as(c_int, 1);
pub const GL_EXT_direct_state_access = @as(c_int, 1);
pub const GL_EXT_discard_framebuffer = @as(c_int, 1);
pub const GL_EXT_disjoint_timer_query = @as(c_int, 1);
pub const GL_EXT_draw_buffers = @as(c_int, 1);
pub const GL_EXT_draw_buffers2 = @as(c_int, 1);
pub const GL_EXT_draw_buffers_indexed = @as(c_int, 1);
pub const GL_EXT_draw_elements_base_vertex = @as(c_int, 1);
pub const GL_EXT_draw_instanced = @as(c_int, 1);
pub const GL_EXT_draw_range_elements = @as(c_int, 1);
pub const GL_EXT_draw_transform_feedback = @as(c_int, 1);
pub const GL_EXT_external_buffer = @as(c_int, 1);
pub const GL_EXT_float_blend = @as(c_int, 1);
pub const GL_EXT_fog_coord = @as(c_int, 1);
pub const GL_EXT_framebuffer_blit = @as(c_int, 1);
pub const GL_EXT_framebuffer_multisample = @as(c_int, 1);
pub const GL_EXT_framebuffer_multisample_blit_scaled = @as(c_int, 1);
pub const GL_EXT_framebuffer_object = @as(c_int, 1);
pub const GL_EXT_framebuffer_sRGB = @as(c_int, 1);
pub const GL_EXT_geometry_point_size = @as(c_int, 1);
pub const GL_EXT_geometry_shader = @as(c_int, 1);
pub const GL_EXT_geometry_shader4 = @as(c_int, 1);
pub const GL_EXT_gpu_program_parameters = @as(c_int, 1);
pub const GL_EXT_gpu_shader4 = @as(c_int, 1);
pub const GL_EXT_gpu_shader5 = @as(c_int, 1);
pub const GL_EXT_histogram = @as(c_int, 1);
pub const GL_EXT_index_array_formats = @as(c_int, 1);
pub const GL_EXT_index_func = @as(c_int, 1);
pub const GL_EXT_index_material = @as(c_int, 1);
pub const GL_EXT_index_texture = @as(c_int, 1);
pub const GL_EXT_instanced_arrays = @as(c_int, 1);
pub const GL_EXT_light_texture = @as(c_int, 1);
pub const GL_EXT_map_buffer_range = @as(c_int, 1);
pub const GL_EXT_memory_object = @as(c_int, 1);
pub const GL_EXT_memory_object_fd = @as(c_int, 1);
pub const GL_EXT_memory_object_win32 = @as(c_int, 1);
pub const GL_EXT_misc_attribute = @as(c_int, 1);
pub const GL_EXT_multi_draw_arrays = @as(c_int, 1);
pub const GL_EXT_multi_draw_indirect = @as(c_int, 1);
pub const GL_EXT_multisample = @as(c_int, 1);
pub const GL_EXT_multisampled_compatibility = @as(c_int, 1);
pub const GL_EXT_multisampled_render_to_texture = @as(c_int, 1);
pub const GL_EXT_multiview_draw_buffers = @as(c_int, 1);
pub const GL_EXT_multiview_tessellation_geometry_shader = @as(c_int, 1);
pub const GL_EXT_multiview_texture_multisample = @as(c_int, 1);
pub const GL_EXT_multiview_timer_query = @as(c_int, 1);
pub const GL_EXT_occlusion_query_boolean = @as(c_int, 1);
pub const GL_EXT_packed_depth_stencil = @as(c_int, 1);
pub const GL_EXT_packed_float = @as(c_int, 1);
pub const GL_EXT_packed_pixels = @as(c_int, 1);
pub const GL_EXT_paletted_texture = @as(c_int, 1);
pub const GL_EXT_pixel_buffer_object = @as(c_int, 1);
pub const GL_EXT_pixel_transform = @as(c_int, 1);
pub const GL_EXT_pixel_transform_color_table = @as(c_int, 1);
pub const GL_EXT_point_parameters = @as(c_int, 1);
pub const GL_EXT_polygon_offset = @as(c_int, 1);
pub const GL_EXT_polygon_offset_clamp = @as(c_int, 1);
pub const GL_EXT_post_depth_coverage = @as(c_int, 1);
pub const GL_EXT_primitive_bounding_box = @as(c_int, 1);
pub const GL_EXT_protected_textures = @as(c_int, 1);
pub const GL_EXT_provoking_vertex = @as(c_int, 1);
pub const GL_EXT_pvrtc_sRGB = @as(c_int, 1);
pub const GL_EXT_raster_multisample = @as(c_int, 1);
pub const GL_EXT_read_format_bgra = @as(c_int, 1);
pub const GL_EXT_render_snorm = @as(c_int, 1);
pub const GL_EXT_rescale_normal = @as(c_int, 1);
pub const GL_EXT_robustness = @as(c_int, 1);
pub const GL_EXT_sRGB = @as(c_int, 1);
pub const GL_EXT_sRGB_write_control = @as(c_int, 1);
pub const GL_EXT_secondary_color = @as(c_int, 1);
pub const GL_EXT_semaphore = @as(c_int, 1);
pub const GL_EXT_semaphore_fd = @as(c_int, 1);
pub const GL_EXT_semaphore_win32 = @as(c_int, 1);
pub const GL_EXT_separate_shader_objects = @as(c_int, 1);
pub const GL_EXT_separate_specular_color = @as(c_int, 1);
pub const GL_EXT_shader_framebuffer_fetch = @as(c_int, 1);
pub const GL_EXT_shader_framebuffer_fetch_non_coherent = @as(c_int, 1);
pub const GL_EXT_shader_group_vote = @as(c_int, 1);
pub const GL_EXT_shader_image_load_formatted = @as(c_int, 1);
pub const GL_EXT_shader_image_load_store = @as(c_int, 1);
pub const GL_EXT_shader_implicit_conversions = @as(c_int, 1);
pub const GL_EXT_shader_integer_mix = @as(c_int, 1);
pub const GL_EXT_shader_io_blocks = @as(c_int, 1);
pub const GL_EXT_shader_non_constant_global_initializers = @as(c_int, 1);
pub const GL_EXT_shader_pixel_local_storage = @as(c_int, 1);
pub const GL_EXT_shader_pixel_local_storage2 = @as(c_int, 1);
pub const GL_EXT_shader_texture_lod = @as(c_int, 1);
pub const GL_EXT_shadow_funcs = @as(c_int, 1);
pub const GL_EXT_shadow_samplers = @as(c_int, 1);
pub const GL_EXT_shared_texture_palette = @as(c_int, 1);
pub const GL_EXT_sparse_texture = @as(c_int, 1);
pub const GL_EXT_sparse_texture2 = @as(c_int, 1);
pub const GL_EXT_stencil_clear_tag = @as(c_int, 1);
pub const GL_EXT_stencil_two_side = @as(c_int, 1);
pub const GL_EXT_stencil_wrap = @as(c_int, 1);
pub const GL_EXT_subtexture = @as(c_int, 1);
pub const GL_EXT_tessellation_point_size = @as(c_int, 1);
pub const GL_EXT_tessellation_shader = @as(c_int, 1);
pub const GL_EXT_texture = @as(c_int, 1);
pub const GL_EXT_texture3D = @as(c_int, 1);
pub const GL_EXT_texture_array = @as(c_int, 1);
pub const GL_EXT_texture_border_clamp = @as(c_int, 1);
pub const GL_EXT_texture_buffer = @as(c_int, 1);
pub const GL_EXT_texture_buffer_object = @as(c_int, 1);
pub const GL_EXT_texture_compression_astc_decode_mode = @as(c_int, 1);
pub const GL_EXT_texture_compression_bptc = @as(c_int, 1);
pub const GL_EXT_texture_compression_dxt1 = @as(c_int, 1);
pub const GL_EXT_texture_compression_latc = @as(c_int, 1);
pub const GL_EXT_texture_compression_rgtc = @as(c_int, 1);
pub const GL_EXT_texture_compression_s3tc = @as(c_int, 1);
pub const GL_EXT_texture_compression_s3tc_srgb = @as(c_int, 1);
pub const GL_EXT_texture_cube_map = @as(c_int, 1);
pub const GL_EXT_texture_cube_map_array = @as(c_int, 1);
pub const GL_EXT_texture_env_add = @as(c_int, 1);
pub const GL_EXT_texture_env_combine = @as(c_int, 1);
pub const GL_EXT_texture_env_dot3 = @as(c_int, 1);
pub const GL_EXT_texture_filter_anisotropic = @as(c_int, 1);
pub const GL_EXT_texture_filter_minmax = @as(c_int, 1);
pub const GL_EXT_texture_format_BGRA8888 = @as(c_int, 1);
pub const GL_EXT_texture_format_sRGB_override = @as(c_int, 1);
pub const GL_EXT_texture_integer = @as(c_int, 1);
pub const GL_EXT_texture_lod_bias = @as(c_int, 1);
pub const GL_EXT_texture_mirror_clamp = @as(c_int, 1);
pub const GL_EXT_texture_mirror_clamp_to_edge = @as(c_int, 1);
pub const GL_EXT_texture_norm16 = @as(c_int, 1);
pub const GL_EXT_texture_object = @as(c_int, 1);
pub const GL_EXT_texture_perturb_normal = @as(c_int, 1);
pub const GL_EXT_texture_query_lod = @as(c_int, 1);
pub const GL_EXT_texture_rg = @as(c_int, 1);
pub const GL_EXT_texture_sRGB = @as(c_int, 1);
pub const GL_EXT_texture_sRGB_R8 = @as(c_int, 1);
pub const GL_EXT_texture_sRGB_RG8 = @as(c_int, 1);
pub const GL_EXT_texture_sRGB_decode = @as(c_int, 1);
pub const GL_EXT_texture_shadow_lod = @as(c_int, 1);
pub const GL_EXT_texture_shared_exponent = @as(c_int, 1);
pub const GL_EXT_texture_snorm = @as(c_int, 1);
pub const GL_EXT_texture_storage = @as(c_int, 1);
pub const GL_EXT_texture_swizzle = @as(c_int, 1);
pub const GL_EXT_texture_type_2_10_10_10_REV = @as(c_int, 1);
pub const GL_EXT_texture_view = @as(c_int, 1);
pub const GL_EXT_timer_query = @as(c_int, 1);
pub const GL_EXT_transform_feedback = @as(c_int, 1);
pub const GL_EXT_unpack_subimage = @as(c_int, 1);
pub const GL_EXT_vertex_array = @as(c_int, 1);
pub const GL_EXT_vertex_array_bgra = @as(c_int, 1);
pub const GL_EXT_vertex_attrib_64bit = @as(c_int, 1);
pub const GL_EXT_vertex_shader = @as(c_int, 1);
pub const GL_EXT_vertex_weighting = @as(c_int, 1);
pub const GL_EXT_win32_keyed_mutex = @as(c_int, 1);
pub const GL_EXT_window_rectangles = @as(c_int, 1);
pub const GL_EXT_x11_sync_object = @as(c_int, 1);
pub const GL_FJ_shader_binary_GCCSO = @as(c_int, 1);
pub const GL_GREMEDY_frame_terminator = @as(c_int, 1);
pub const GL_GREMEDY_string_marker = @as(c_int, 1);
pub const GL_HP_convolution_border_modes = @as(c_int, 1);
pub const GL_HP_image_transform = @as(c_int, 1);
pub const GL_HP_occlusion_test = @as(c_int, 1);
pub const GL_HP_texture_lighting = @as(c_int, 1);
pub const GL_IBM_cull_vertex = @as(c_int, 1);
pub const GL_IBM_multimode_draw_arrays = @as(c_int, 1);
pub const GL_IBM_rasterpos_clip = @as(c_int, 1);
pub const GL_IBM_static_data = @as(c_int, 1);
pub const GL_IBM_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_IBM_vertex_array_lists = @as(c_int, 1);
pub const GL_IMG_bindless_texture = @as(c_int, 1);
pub const GL_IMG_framebuffer_downsample = @as(c_int, 1);
pub const GL_IMG_multisampled_render_to_texture = @as(c_int, 1);
pub const GL_IMG_program_binary = @as(c_int, 1);
pub const GL_IMG_read_format = @as(c_int, 1);
pub const GL_IMG_shader_binary = @as(c_int, 1);
pub const GL_IMG_texture_compression_pvrtc = @as(c_int, 1);
pub const GL_IMG_texture_compression_pvrtc2 = @as(c_int, 1);
pub const GL_IMG_texture_env_enhanced_fixed_function = @as(c_int, 1);
pub const GL_IMG_texture_filter_cubic = @as(c_int, 1);
pub const GL_IMG_user_clip_plane = @as(c_int, 1);
pub const GL_INGR_blend_func_separate = @as(c_int, 1);
pub const GL_INGR_color_clamp = @as(c_int, 1);
pub const GL_INGR_interlace_read = @as(c_int, 1);
pub const GL_INTEL_blackhole_render = @as(c_int, 1);
pub const GL_INTEL_conservative_rasterization = @as(c_int, 1);
pub const GL_INTEL_fragment_shader_ordering = @as(c_int, 1);
pub const GL_INTEL_framebuffer_CMAA = @as(c_int, 1);
pub const GL_INTEL_map_texture = @as(c_int, 1);
pub const GL_INTEL_parallel_arrays = @as(c_int, 1);
pub const GL_INTEL_performance_query = @as(c_int, 1);
pub const GL_KHR_blend_equation_advanced = @as(c_int, 1);
pub const GL_KHR_blend_equation_advanced_coherent = @as(c_int, 1);
pub const GL_KHR_context_flush_control = @as(c_int, 1);
pub const GL_KHR_debug = @as(c_int, 1);
pub const GL_KHR_no_error = @as(c_int, 1);
pub const GL_KHR_parallel_shader_compile = @as(c_int, 1);
pub const GL_KHR_robust_buffer_access_behavior = @as(c_int, 1);
pub const GL_KHR_robustness = @as(c_int, 1);
pub const GL_KHR_shader_subgroup = @as(c_int, 1);
pub const GL_KHR_texture_compression_astc_hdr = @as(c_int, 1);
pub const GL_KHR_texture_compression_astc_ldr = @as(c_int, 1);
pub const GL_KHR_texture_compression_astc_sliced_3d = @as(c_int, 1);
pub const GL_MESAX_texture_stack = @as(c_int, 1);
pub const GL_MESA_framebuffer_flip_y = @as(c_int, 1);
pub const GL_MESA_pack_invert = @as(c_int, 1);
pub const GL_MESA_program_binary_formats = @as(c_int, 1);
pub const GL_MESA_resize_buffers = @as(c_int, 1);
pub const GL_MESA_shader_integer_functions = @as(c_int, 1);
pub const GL_MESA_tile_raster_order = @as(c_int, 1);
pub const GL_MESA_window_pos = @as(c_int, 1);
pub const GL_MESA_ycbcr_texture = @as(c_int, 1);
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers = @as(c_int, 1);
pub const GL_NVX_conditional_render = @as(c_int, 1);
pub const GL_NVX_cross_process_interop = @as(c_int, 1);
pub const GL_NVX_gpu_memory_info = @as(c_int, 1);
pub const GL_NVX_gpu_multicast2 = @as(c_int, 1);
pub const GL_NVX_linked_gpu_multicast = @as(c_int, 1);
pub const GL_NVX_progress_fence = @as(c_int, 1);
pub const GL_NV_alpha_to_coverage_dither_control = @as(c_int, 1);
pub const GL_NV_bindless_multi_draw_indirect = @as(c_int, 1);
pub const GL_NV_bindless_multi_draw_indirect_count = @as(c_int, 1);
pub const GL_NV_bindless_texture = @as(c_int, 1);
pub const GL_NV_blend_equation_advanced = @as(c_int, 1);
pub const GL_NV_blend_equation_advanced_coherent = @as(c_int, 1);
pub const GL_NV_blend_minmax_factor = @as(c_int, 1);
pub const GL_NV_blend_square = @as(c_int, 1);
pub const GL_NV_clip_space_w_scaling = @as(c_int, 1);
pub const GL_NV_command_list = @as(c_int, 1);
pub const GL_NV_compute_program5 = @as(c_int, 1);
pub const GL_NV_compute_shader_derivatives = @as(c_int, 1);
pub const GL_NV_conditional_render = @as(c_int, 1);
pub const GL_NV_conservative_raster = @as(c_int, 1);
pub const GL_NV_conservative_raster_dilate = @as(c_int, 1);
pub const GL_NV_conservative_raster_pre_snap = @as(c_int, 1);
pub const GL_NV_conservative_raster_pre_snap_triangles = @as(c_int, 1);
pub const GL_NV_conservative_raster_underestimation = @as(c_int, 1);
pub const GL_NV_copy_buffer = @as(c_int, 1);
pub const GL_NV_copy_depth_to_color = @as(c_int, 1);
pub const GL_NV_copy_image = @as(c_int, 1);
pub const GL_NV_coverage_sample = @as(c_int, 1);
pub const GL_NV_deep_texture3D = @as(c_int, 1);
pub const GL_NV_depth_buffer_float = @as(c_int, 1);
pub const GL_NV_depth_clamp = @as(c_int, 1);
pub const GL_NV_depth_nonlinear = @as(c_int, 1);
pub const GL_NV_draw_buffers = @as(c_int, 1);
pub const GL_NV_draw_instanced = @as(c_int, 1);
pub const GL_NV_draw_texture = @as(c_int, 1);
pub const GL_NV_draw_vulkan_image = @as(c_int, 1);
pub const GL_NV_evaluators = @as(c_int, 1);
pub const GL_NV_explicit_attrib_location = @as(c_int, 1);
pub const GL_NV_explicit_multisample = @as(c_int, 1);
pub const GL_NV_fbo_color_attachments = @as(c_int, 1);
pub const GL_NV_fence = @as(c_int, 1);
pub const GL_NV_fill_rectangle = @as(c_int, 1);
pub const GL_NV_float_buffer = @as(c_int, 1);
pub const GL_NV_fog_distance = @as(c_int, 1);
pub const GL_NV_fragment_coverage_to_color = @as(c_int, 1);
pub const GL_NV_fragment_program = @as(c_int, 1);
pub const GL_NV_fragment_program2 = @as(c_int, 1);
pub const GL_NV_fragment_program4 = @as(c_int, 1);
pub const GL_NV_fragment_program_option = @as(c_int, 1);
pub const GL_NV_fragment_shader_barycentric = @as(c_int, 1);
pub const GL_NV_fragment_shader_interlock = @as(c_int, 1);
pub const GL_NV_framebuffer_blit = @as(c_int, 1);
pub const GL_NV_framebuffer_mixed_samples = @as(c_int, 1);
pub const GL_NV_framebuffer_multisample = @as(c_int, 1);
pub const GL_NV_framebuffer_multisample_coverage = @as(c_int, 1);
pub const GL_NV_generate_mipmap_sRGB = @as(c_int, 1);
pub const GL_NV_geometry_program4 = @as(c_int, 1);
pub const GL_NV_geometry_shader4 = @as(c_int, 1);
pub const GL_NV_geometry_shader_passthrough = @as(c_int, 1);
pub const GL_NV_gpu_multicast = @as(c_int, 1);
pub const GL_NV_gpu_program4 = @as(c_int, 1);
pub const GL_NV_gpu_program5 = @as(c_int, 1);
pub const GL_NV_gpu_program5_mem_extended = @as(c_int, 1);
pub const GL_NV_gpu_shader5 = @as(c_int, 1);
pub const GL_NV_half_float = @as(c_int, 1);
pub const GL_NV_image_formats = @as(c_int, 1);
pub const GL_NV_instanced_arrays = @as(c_int, 1);
pub const GL_NV_internalformat_sample_query = @as(c_int, 1);
pub const GL_NV_light_max_exponent = @as(c_int, 1);
pub const GL_NV_memory_attachment = @as(c_int, 1);
pub const GL_NV_mesh_shader = @as(c_int, 1);
pub const GL_NV_multisample_coverage = @as(c_int, 1);
pub const GL_NV_multisample_filter_hint = @as(c_int, 1);
pub const GL_NV_non_square_matrices = @as(c_int, 1);
pub const GL_NV_occlusion_query = @as(c_int, 1);
pub const GL_NV_packed_depth_stencil = @as(c_int, 1);
pub const GL_NV_parameter_buffer_object = @as(c_int, 1);
pub const GL_NV_parameter_buffer_object2 = @as(c_int, 1);
pub const GL_NV_path_rendering = @as(c_int, 1);
pub const GL_NV_path_rendering_shared_edge = @as(c_int, 1);
pub const GL_NV_pixel_buffer_object = @as(c_int, 1);
pub const GL_NV_pixel_data_range = @as(c_int, 1);
pub const GL_NV_point_sprite = @as(c_int, 1);
pub const GL_NV_polygon_mode = @as(c_int, 1);
pub const GL_NV_present_video = @as(c_int, 1);
pub const GL_NV_primitive_restart = @as(c_int, 1);
pub const GL_NV_query_resource = @as(c_int, 1);
pub const GL_NV_query_resource_tag = @as(c_int, 1);
pub const GL_NV_read_buffer = @as(c_int, 1);
pub const GL_NV_read_buffer_front = @as(c_int, 1);
pub const GL_NV_read_depth = @as(c_int, 1);
pub const GL_NV_read_depth_stencil = @as(c_int, 1);
pub const GL_NV_read_stencil = @as(c_int, 1);
pub const GL_NV_register_combiners = @as(c_int, 1);
pub const GL_NV_register_combiners2 = @as(c_int, 1);
pub const GL_NV_representative_fragment_test = @as(c_int, 1);
pub const GL_NV_robustness_video_memory_purge = @as(c_int, 1);
pub const GL_NV_sRGB_formats = @as(c_int, 1);
pub const GL_NV_sample_locations = @as(c_int, 1);
pub const GL_NV_sample_mask_override_coverage = @as(c_int, 1);
pub const GL_NV_scissor_exclusive = @as(c_int, 1);
pub const GL_NV_shader_atomic_counters = @as(c_int, 1);
pub const GL_NV_shader_atomic_float = @as(c_int, 1);
pub const GL_NV_shader_atomic_float64 = @as(c_int, 1);
pub const GL_NV_shader_atomic_fp16_vector = @as(c_int, 1);
pub const GL_NV_shader_atomic_int64 = @as(c_int, 1);
pub const GL_NV_shader_buffer_load = @as(c_int, 1);
pub const GL_NV_shader_buffer_store = @as(c_int, 1);
pub const GL_NV_shader_noperspective_interpolation = @as(c_int, 1);
pub const GL_NV_shader_storage_buffer_object = @as(c_int, 1);
pub const GL_NV_shader_subgroup_partitioned = @as(c_int, 1);
pub const GL_NV_shader_texture_footprint = @as(c_int, 1);
pub const GL_NV_shader_thread_group = @as(c_int, 1);
pub const GL_NV_shader_thread_shuffle = @as(c_int, 1);
pub const GL_NV_shading_rate_image = @as(c_int, 1);
pub const GL_NV_shadow_samplers_array = @as(c_int, 1);
pub const GL_NV_shadow_samplers_cube = @as(c_int, 1);
pub const GL_NV_stereo_view_rendering = @as(c_int, 1);
pub const GL_NV_tessellation_program5 = @as(c_int, 1);
pub const GL_NV_texgen_emboss = @as(c_int, 1);
pub const GL_NV_texgen_reflection = @as(c_int, 1);
pub const GL_NV_texture_barrier = @as(c_int, 1);
pub const GL_NV_texture_border_clamp = @as(c_int, 1);
pub const GL_NV_texture_compression_s3tc_update = @as(c_int, 1);
pub const GL_NV_texture_compression_vtc = @as(c_int, 1);
pub const GL_NV_texture_env_combine4 = @as(c_int, 1);
pub const GL_NV_texture_expand_normal = @as(c_int, 1);
pub const GL_NV_texture_multisample = @as(c_int, 1);
pub const GL_NV_texture_npot_2D_mipmap = @as(c_int, 1);
pub const GL_NV_texture_rectangle = @as(c_int, 1);
pub const GL_NV_texture_rectangle_compressed = @as(c_int, 1);
pub const GL_NV_texture_shader = @as(c_int, 1);
pub const GL_NV_texture_shader2 = @as(c_int, 1);
pub const GL_NV_texture_shader3 = @as(c_int, 1);
pub const GL_NV_transform_feedback = @as(c_int, 1);
pub const GL_NV_transform_feedback2 = @as(c_int, 1);
pub const GL_NV_uniform_buffer_unified_memory = @as(c_int, 1);
pub const GL_NV_vdpau_interop = @as(c_int, 1);
pub const GL_NV_vdpau_interop2 = @as(c_int, 1);
pub const GL_NV_vertex_array_range = @as(c_int, 1);
pub const GL_NV_vertex_array_range2 = @as(c_int, 1);
pub const GL_NV_vertex_attrib_integer_64bit = @as(c_int, 1);
pub const GL_NV_vertex_buffer_unified_memory = @as(c_int, 1);
pub const GL_NV_vertex_program = @as(c_int, 1);
pub const GL_NV_vertex_program1_1 = @as(c_int, 1);
pub const GL_NV_vertex_program2 = @as(c_int, 1);
pub const GL_NV_vertex_program2_option = @as(c_int, 1);
pub const GL_NV_vertex_program3 = @as(c_int, 1);
pub const GL_NV_vertex_program4 = @as(c_int, 1);
pub const GL_NV_video_capture = @as(c_int, 1);
pub const GL_NV_viewport_array = @as(c_int, 1);
pub const GL_NV_viewport_array2 = @as(c_int, 1);
pub const GL_NV_viewport_swizzle = @as(c_int, 1);
pub const GL_OES_EGL_image = @as(c_int, 1);
pub const GL_OES_EGL_image_external = @as(c_int, 1);
pub const GL_OES_EGL_image_external_essl3 = @as(c_int, 1);
pub const GL_OES_blend_equation_separate = @as(c_int, 1);
pub const GL_OES_blend_func_separate = @as(c_int, 1);
pub const GL_OES_blend_subtract = @as(c_int, 1);
pub const GL_OES_byte_coordinates = @as(c_int, 1);
pub const GL_OES_compressed_ETC1_RGB8_sub_texture = @as(c_int, 1);
pub const GL_OES_compressed_ETC1_RGB8_texture = @as(c_int, 1);
pub const GL_OES_compressed_paletted_texture = @as(c_int, 1);
pub const GL_OES_copy_image = @as(c_int, 1);
pub const GL_OES_depth24 = @as(c_int, 1);
pub const GL_OES_depth32 = @as(c_int, 1);
pub const GL_OES_depth_texture = @as(c_int, 1);
pub const GL_OES_draw_buffers_indexed = @as(c_int, 1);
pub const GL_OES_draw_elements_base_vertex = @as(c_int, 1);
pub const GL_OES_draw_texture = @as(c_int, 1);
pub const GL_OES_element_index_uint = @as(c_int, 1);
pub const GL_OES_extended_matrix_palette = @as(c_int, 1);
pub const GL_OES_fbo_render_mipmap = @as(c_int, 1);
pub const GL_OES_fixed_point = @as(c_int, 1);
pub const GL_OES_fragment_precision_high = @as(c_int, 1);
pub const GL_OES_framebuffer_object = @as(c_int, 1);
pub const GL_OES_geometry_point_size = @as(c_int, 1);
pub const GL_OES_geometry_shader = @as(c_int, 1);
pub const GL_OES_get_program_binary = @as(c_int, 1);
pub const GL_OES_gpu_shader5 = @as(c_int, 1);
pub const GL_OES_mapbuffer = @as(c_int, 1);
pub const GL_OES_matrix_get = @as(c_int, 1);
pub const GL_OES_matrix_palette = @as(c_int, 1);
pub const GL_OES_packed_depth_stencil = @as(c_int, 1);
pub const GL_OES_point_size_array = @as(c_int, 1);
pub const GL_OES_point_sprite = @as(c_int, 1);
pub const GL_OES_primitive_bounding_box = @as(c_int, 1);
pub const GL_OES_query_matrix = @as(c_int, 1);
pub const GL_OES_read_format = @as(c_int, 1);
pub const GL_OES_required_internalformat = @as(c_int, 1);
pub const GL_OES_rgb8_rgba8 = @as(c_int, 1);
pub const GL_OES_sample_shading = @as(c_int, 1);
pub const GL_OES_sample_variables = @as(c_int, 1);
pub const GL_OES_shader_image_atomic = @as(c_int, 1);
pub const GL_OES_shader_io_blocks = @as(c_int, 1);
pub const GL_OES_shader_multisample_interpolation = @as(c_int, 1);
pub const GL_OES_single_precision = @as(c_int, 1);
pub const GL_OES_standard_derivatives = @as(c_int, 1);
pub const GL_OES_stencil1 = @as(c_int, 1);
pub const GL_OES_stencil4 = @as(c_int, 1);
pub const GL_OES_stencil8 = @as(c_int, 1);
pub const GL_OES_stencil_wrap = @as(c_int, 1);
pub const GL_OES_surfaceless_context = @as(c_int, 1);
pub const GL_OES_tessellation_point_size = @as(c_int, 1);
pub const GL_OES_tessellation_shader = @as(c_int, 1);
pub const GL_OES_texture_3D = @as(c_int, 1);
pub const GL_OES_texture_border_clamp = @as(c_int, 1);
pub const GL_OES_texture_buffer = @as(c_int, 1);
pub const GL_OES_texture_compression_astc = @as(c_int, 1);
pub const GL_OES_texture_cube_map = @as(c_int, 1);
pub const GL_OES_texture_cube_map_array = @as(c_int, 1);
pub const GL_OES_texture_env_crossbar = @as(c_int, 1);
pub const GL_OES_texture_float = @as(c_int, 1);
pub const GL_OES_texture_float_linear = @as(c_int, 1);
pub const GL_OES_texture_half_float = @as(c_int, 1);
pub const GL_OES_texture_half_float_linear = @as(c_int, 1);
pub const GL_OES_texture_mirrored_repeat = @as(c_int, 1);
pub const GL_OES_texture_npot = @as(c_int, 1);
pub const GL_OES_texture_stencil8 = @as(c_int, 1);
pub const GL_OES_texture_storage_multisample_2d_array = @as(c_int, 1);
pub const GL_OES_texture_view = @as(c_int, 1);
pub const GL_OES_vertex_array_object = @as(c_int, 1);
pub const GL_OES_vertex_half_float = @as(c_int, 1);
pub const GL_OES_vertex_type_10_10_10_2 = @as(c_int, 1);
pub const GL_OES_viewport_array = @as(c_int, 1);
pub const GL_OML_interlace = @as(c_int, 1);
pub const GL_OML_resample = @as(c_int, 1);
pub const GL_OML_subsample = @as(c_int, 1);
pub const GL_OVR_multiview = @as(c_int, 1);
pub const GL_OVR_multiview2 = @as(c_int, 1);
pub const GL_OVR_multiview_multisampled_render_to_texture = @as(c_int, 1);
pub const GL_PGI_misc_hints = @as(c_int, 1);
pub const GL_PGI_vertex_hints = @as(c_int, 1);
pub const GL_QCOM_YUV_texture_gather = @as(c_int, 1);
pub const GL_QCOM_alpha_test = @as(c_int, 1);
pub const GL_QCOM_binning_control = @as(c_int, 1);
pub const GL_QCOM_driver_control = @as(c_int, 1);
pub const GL_QCOM_extended_get = @as(c_int, 1);
pub const GL_QCOM_extended_get2 = @as(c_int, 1);
pub const GL_QCOM_framebuffer_foveated = @as(c_int, 1);
pub const GL_QCOM_perfmon_global_mode = @as(c_int, 1);
pub const GL_QCOM_shader_framebuffer_fetch_noncoherent = @as(c_int, 1);
pub const GL_QCOM_shader_framebuffer_fetch_rate = @as(c_int, 1);
pub const GL_QCOM_texture_foveated = @as(c_int, 1);
pub const GL_QCOM_texture_foveated_subsampled_layout = @as(c_int, 1);
pub const GL_QCOM_tiled_rendering = @as(c_int, 1);
pub const GL_QCOM_writeonly_rendering = @as(c_int, 1);
pub const GL_REND_screen_coordinates = @as(c_int, 1);
pub const GL_S3_s3tc = @as(c_int, 1);
pub const GL_SGIS_detail_texture = @as(c_int, 1);
pub const GL_SGIS_fog_function = @as(c_int, 1);
pub const GL_SGIS_generate_mipmap = @as(c_int, 1);
pub const GL_SGIS_multisample = @as(c_int, 1);
pub const GL_SGIS_pixel_texture = @as(c_int, 1);
pub const GL_SGIS_point_line_texgen = @as(c_int, 1);
pub const GL_SGIS_point_parameters = @as(c_int, 1);
pub const GL_SGIS_sharpen_texture = @as(c_int, 1);
pub const GL_SGIS_texture4D = @as(c_int, 1);
pub const GL_SGIS_texture_border_clamp = @as(c_int, 1);
pub const GL_SGIS_texture_color_mask = @as(c_int, 1);
pub const GL_SGIS_texture_edge_clamp = @as(c_int, 1);
pub const GL_SGIS_texture_filter4 = @as(c_int, 1);
pub const GL_SGIS_texture_lod = @as(c_int, 1);
pub const GL_SGIS_texture_select = @as(c_int, 1);
pub const GL_SGIX_async = @as(c_int, 1);
pub const GL_SGIX_async_histogram = @as(c_int, 1);
pub const GL_SGIX_async_pixel = @as(c_int, 1);
pub const GL_SGIX_blend_alpha_minmax = @as(c_int, 1);
pub const GL_SGIX_calligraphic_fragment = @as(c_int, 1);
pub const GL_SGIX_clipmap = @as(c_int, 1);
pub const GL_SGIX_convolution_accuracy = @as(c_int, 1);
pub const GL_SGIX_depth_pass_instrument = @as(c_int, 1);
pub const GL_SGIX_depth_texture = @as(c_int, 1);
pub const GL_SGIX_flush_raster = @as(c_int, 1);
pub const GL_SGIX_fog_offset = @as(c_int, 1);
pub const GL_SGIX_fragment_lighting = @as(c_int, 1);
pub const GL_SGIX_framezoom = @as(c_int, 1);
pub const GL_SGIX_igloo_interface = @as(c_int, 1);
pub const GL_SGIX_instruments = @as(c_int, 1);
pub const GL_SGIX_interlace = @as(c_int, 1);
pub const GL_SGIX_ir_instrument1 = @as(c_int, 1);
pub const GL_SGIX_list_priority = @as(c_int, 1);
pub const GL_SGIX_pixel_texture = @as(c_int, 1);
pub const GL_SGIX_pixel_tiles = @as(c_int, 1);
pub const GL_SGIX_polynomial_ffd = @as(c_int, 1);
pub const GL_SGIX_reference_plane = @as(c_int, 1);
pub const GL_SGIX_resample = @as(c_int, 1);
pub const GL_SGIX_scalebias_hint = @as(c_int, 1);
pub const GL_SGIX_shadow = @as(c_int, 1);
pub const GL_SGIX_shadow_ambient = @as(c_int, 1);
pub const GL_SGIX_sprite = @as(c_int, 1);
pub const GL_SGIX_subsample = @as(c_int, 1);
pub const GL_SGIX_tag_sample_buffer = @as(c_int, 1);
pub const GL_SGIX_texture_add_env = @as(c_int, 1);
pub const GL_SGIX_texture_coordinate_clamp = @as(c_int, 1);
pub const GL_SGIX_texture_lod_bias = @as(c_int, 1);
pub const GL_SGIX_texture_multi_buffer = @as(c_int, 1);
pub const GL_SGIX_texture_scale_bias = @as(c_int, 1);
pub const GL_SGIX_vertex_preclip = @as(c_int, 1);
pub const GL_SGIX_ycrcb = @as(c_int, 1);
pub const GL_SGIX_ycrcb_subsample = @as(c_int, 1);
pub const GL_SGIX_ycrcba = @as(c_int, 1);
pub const GL_SGI_color_matrix = @as(c_int, 1);
pub const GL_SGI_color_table = @as(c_int, 1);
pub const GL_SGI_texture_color_table = @as(c_int, 1);
pub const GL_SUNX_constant_data = @as(c_int, 1);
pub const GL_SUN_convolution_border_modes = @as(c_int, 1);
pub const GL_SUN_global_alpha = @as(c_int, 1);
pub const GL_SUN_mesh_array = @as(c_int, 1);
pub const GL_SUN_slice_accum = @as(c_int, 1);
pub const GL_SUN_triangle_list = @as(c_int, 1);
pub const GL_SUN_vertex = @as(c_int, 1);
pub const GL_VIV_shader_binary = @as(c_int, 1);
pub const GL_WIN_phong_shading = @as(c_int, 1);
pub const GL_WIN_specular_fog = @as(c_int, 1);
pub const GL_NEXT_BUFFER_NV = -@as(c_int, 2);
pub const GL_SKIP_COMPONENTS4_NV = -@as(c_int, 3);
pub const GL_SKIP_COMPONENTS3_NV = -@as(c_int, 4);
pub const GL_SKIP_COMPONENTS2_NV = -@as(c_int, 5);
pub const GL_SKIP_COMPONENTS1_NV = -@as(c_int, 6);
pub const GL_FALSE = @as(c_int, 0);
pub const GL_LAYOUT_DEFAULT_INTEL = @as(c_int, 0);
pub const GL_NONE = @as(c_int, 0);
pub const GL_NONE_OES = @as(c_int, 0);
pub const GL_NO_ERROR = @as(c_int, 0);
pub const GL_ZERO = @as(c_int, 0);
pub const GL_CLOSE_PATH_NV = @as(c_int, 0x00);
pub const GL_POINTS = @as(c_int, 0x0000);
pub const GL_TERMINATE_SEQUENCE_COMMAND_NV = @as(c_int, 0x0000);
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = @as(c_int, 0x00000000);
pub const GL_2X_BIT_ATI = @as(c_int, 0x00000001);
pub const GL_CLIENT_PIXEL_STORE_BIT = @as(c_int, 0x00000001);
pub const GL_COLOR_BUFFER_BIT0_QCOM = @as(c_int, 0x00000001);
pub const GL_CONTEXT_CORE_PROFILE_BIT = @as(c_int, 0x00000001);
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = @as(c_int, 0x00000001);
pub const GL_CURRENT_BIT = @as(c_int, 0x00000001);
pub const GL_FOVEATION_ENABLE_BIT_QCOM = @as(c_int, 0x00000001);
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = @as(c_int, 0x00000001);
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = @as(c_int, 0x00000001);
pub const GL_RED_BIT_ATI = @as(c_int, 0x00000001);
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = @as(c_int, 0x00000001);
pub const GL_SYNC_FLUSH_COMMANDS_BIT = @as(c_int, 0x00000001);
pub const GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = @as(c_int, 0x00000001);
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX = @as(c_int, 0x00000001);
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = @as(c_int, 0x00000001);
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = @as(c_int, 0x00000001);
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = @as(c_int, 0x00000001);
pub const GL_VERTEX_SHADER_BIT = @as(c_int, 0x00000001);
pub const GL_VERTEX_SHADER_BIT_EXT = @as(c_int, 0x00000001);
pub const GL_4X_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_CLIENT_VERTEX_ARRAY_BIT = @as(c_int, 0x00000002);
pub const GL_COLOR_BUFFER_BIT1_QCOM = @as(c_int, 0x00000002);
pub const GL_COMP_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = @as(c_int, 0x00000002);
pub const GL_CONTEXT_FLAG_DEBUG_BIT = @as(c_int, 0x00000002);
pub const GL_CONTEXT_FLAG_DEBUG_BIT_KHR = @as(c_int, 0x00000002);
pub const GL_ELEMENT_ARRAY_BARRIER_BIT = @as(c_int, 0x00000002);
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = @as(c_int, 0x00000002);
pub const GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = @as(c_int, 0x00000002);
pub const GL_FRAGMENT_SHADER_BIT = @as(c_int, 0x00000002);
pub const GL_FRAGMENT_SHADER_BIT_EXT = @as(c_int, 0x00000002);
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX = @as(c_int, 0x00000002);
pub const GL_GREEN_BIT_ATI = @as(c_int, 0x00000002);
pub const GL_POINT_BIT = @as(c_int, 0x00000002);
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000002);
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = @as(c_int, 0x00000002);
pub const GL_8X_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_BLUE_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_COLOR_BUFFER_BIT2_QCOM = @as(c_int, 0x00000004);
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = @as(c_int, 0x00000004);
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = @as(c_int, 0x00000004);
pub const GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = @as(c_int, 0x00000004);
pub const GL_GEOMETRY_SHADER_BIT = @as(c_int, 0x00000004);
pub const GL_GEOMETRY_SHADER_BIT_EXT = @as(c_int, 0x00000004);
pub const GL_GEOMETRY_SHADER_BIT_OES = @as(c_int, 0x00000004);
pub const GL_LINE_BIT = @as(c_int, 0x00000004);
pub const GL_NEGATE_BIT_ATI = @as(c_int, 0x00000004);
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000004);
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = @as(c_int, 0x00000004);
pub const GL_UNIFORM_BARRIER_BIT = @as(c_int, 0x00000004);
pub const GL_UNIFORM_BARRIER_BIT_EXT = @as(c_int, 0x00000004);
pub const GL_VERTEX23_BIT_PGI = @as(c_int, 0x00000004);
pub const GL_BIAS_BIT_ATI = @as(c_int, 0x00000008);
pub const GL_COLOR_BUFFER_BIT3_QCOM = @as(c_int, 0x00000008);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT = @as(c_int, 0x00000008);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = @as(c_int, 0x00000008);
pub const GL_HALF_BIT_ATI = @as(c_int, 0x00000008);
pub const GL_POLYGON_BIT = @as(c_int, 0x00000008);
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = @as(c_int, 0x00000008);
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = @as(c_int, 0x00000008);
pub const GL_TESS_CONTROL_SHADER_BIT = @as(c_int, 0x00000008);
pub const GL_TESS_CONTROL_SHADER_BIT_EXT = @as(c_int, 0x00000008);
pub const GL_TESS_CONTROL_SHADER_BIT_OES = @as(c_int, 0x00000008);
pub const GL_TEXTURE_FETCH_BARRIER_BIT = @as(c_int, 0x00000008);
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT = @as(c_int, 0x00000008);
pub const GL_VERTEX4_BIT_PGI = @as(c_int, 0x00000008);
pub const GL_COLOR_BUFFER_BIT4_QCOM = @as(c_int, 0x00000010);
pub const GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = @as(c_int, 0x00000010);
pub const GL_POLYGON_STIPPLE_BIT = @as(c_int, 0x00000010);
pub const GL_QUARTER_BIT_ATI = @as(c_int, 0x00000010);
pub const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = @as(c_int, 0x00000010);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = @as(c_int, 0x00000010);
pub const GL_TESS_EVALUATION_SHADER_BIT = @as(c_int, 0x00000010);
pub const GL_TESS_EVALUATION_SHADER_BIT_EXT = @as(c_int, 0x00000010);
pub const GL_TESS_EVALUATION_SHADER_BIT_OES = @as(c_int, 0x00000010);
pub const GL_COLOR_BUFFER_BIT5_QCOM = @as(c_int, 0x00000020);
pub const GL_COMPUTE_SHADER_BIT = @as(c_int, 0x00000020);
pub const GL_EIGHTH_BIT_ATI = @as(c_int, 0x00000020);
pub const GL_PIXEL_MODE_BIT = @as(c_int, 0x00000020);
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = @as(c_int, 0x00000020);
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = @as(c_int, 0x00000020);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = @as(c_int, 0x00000020);
pub const GL_COLOR_BUFFER_BIT6_QCOM = @as(c_int, 0x00000040);
pub const GL_COMMAND_BARRIER_BIT = @as(c_int, 0x00000040);
pub const GL_COMMAND_BARRIER_BIT_EXT = @as(c_int, 0x00000040);
pub const GL_LIGHTING_BIT = @as(c_int, 0x00000040);
pub const GL_MESH_SHADER_BIT_NV = @as(c_int, 0x00000040);
pub const GL_SATURATE_BIT_ATI = @as(c_int, 0x00000040);
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = @as(c_int, 0x00000040);
pub const GL_COLOR_BUFFER_BIT7_QCOM = @as(c_int, 0x00000080);
pub const GL_FOG_BIT = @as(c_int, 0x00000080);
pub const GL_PIXEL_BUFFER_BARRIER_BIT = @as(c_int, 0x00000080);
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00000080);
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = @as(c_int, 0x00000080);
pub const GL_TASK_SHADER_BIT_NV = @as(c_int, 0x00000080);
pub const GL_DEPTH_BUFFER_BIT = @as(c_int, 0x00000100);
pub const GL_DEPTH_BUFFER_BIT0_QCOM = @as(c_int, 0x00000100);
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = @as(c_int, 0x00000100);
pub const GL_TEXTURE_UPDATE_BARRIER_BIT = @as(c_int, 0x00000100);
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = @as(c_int, 0x00000100);
pub const GL_ACCUM_BUFFER_BIT = @as(c_int, 0x00000200);
pub const GL_BUFFER_UPDATE_BARRIER_BIT = @as(c_int, 0x00000200);
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT = @as(c_int, 0x00000200);
pub const GL_DEPTH_BUFFER_BIT1_QCOM = @as(c_int, 0x00000200);
pub const GL_DEPTH_BUFFER_BIT2_QCOM = @as(c_int, 0x00000400);
pub const GL_FRAMEBUFFER_BARRIER_BIT = @as(c_int, 0x00000400);
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00000400);
pub const GL_STENCIL_BUFFER_BIT = @as(c_int, 0x00000400);
pub const GL_DEPTH_BUFFER_BIT3_QCOM = @as(c_int, 0x00000800);
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = @as(c_int, 0x00000800);
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = @as(c_int, 0x00000800);
pub const GL_VIEWPORT_BIT = @as(c_int, 0x00000800);
pub const GL_ATOMIC_COUNTER_BARRIER_BIT = @as(c_int, 0x00001000);
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = @as(c_int, 0x00001000);
pub const GL_DEPTH_BUFFER_BIT4_QCOM = @as(c_int, 0x00001000);
pub const GL_TRANSFORM_BIT = @as(c_int, 0x00001000);
pub const GL_DEPTH_BUFFER_BIT5_QCOM = @as(c_int, 0x00002000);
pub const GL_ENABLE_BIT = @as(c_int, 0x00002000);
pub const GL_SHADER_STORAGE_BARRIER_BIT = @as(c_int, 0x00002000);
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = @as(c_int, 0x00004000);
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00004000);
pub const GL_COLOR_BUFFER_BIT = @as(c_int, 0x00004000);
pub const GL_DEPTH_BUFFER_BIT6_QCOM = @as(c_int, 0x00004000);
pub const GL_COVERAGE_BUFFER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const GL_DEPTH_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const GL_HINT_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const GL_QUERY_BUFFER_BARRIER_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const GL_LINES = @as(c_int, 0x0001);
pub const GL_MAP_READ_BIT = @as(c_int, 0x0001);
pub const GL_MAP_READ_BIT_EXT = @as(c_int, 0x0001);
pub const GL_NOP_COMMAND_NV = @as(c_int, 0x0001);
pub const GL_RESTART_SUN = @as(c_int, 0x0001);
pub const GL_TRACE_OPERATIONS_BIT_MESA = @as(c_int, 0x0001);
pub const GL_COLOR3_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_EVAL_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT0_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_DRAW_ELEMENTS_COMMAND_NV = @as(c_int, 0x0002);
pub const GL_LINE_LOOP = @as(c_int, 0x0002);
pub const GL_MAP_WRITE_BIT = @as(c_int, 0x0002);
pub const GL_MAP_WRITE_BIT_EXT = @as(c_int, 0x0002);
pub const GL_REPLACE_MIDDLE_SUN = @as(c_int, 0x0002);
pub const GL_TRACE_PRIMITIVES_BIT_MESA = @as(c_int, 0x0002);
pub const GL_COLOR4_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_LIST_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT1_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_DRAW_ARRAYS_COMMAND_NV = @as(c_int, 0x0003);
pub const GL_LINE_STRIP = @as(c_int, 0x0003);
pub const GL_REPLACE_OLDEST_SUN = @as(c_int, 0x0003);
pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = @as(c_int, 0x0004);
pub const GL_MAP_INVALIDATE_RANGE_BIT = @as(c_int, 0x0004);
pub const GL_MAP_INVALIDATE_RANGE_BIT_EXT = @as(c_int, 0x0004);
pub const GL_TRACE_ARRAYS_BIT_MESA = @as(c_int, 0x0004);
pub const GL_TRIANGLES = @as(c_int, 0x0004);
pub const GL_EDGEFLAG_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT2_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_TEXTURE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV = @as(c_int, 0x0005);
pub const GL_TRIANGLE_STRIP = @as(c_int, 0x0005);
pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = @as(c_int, 0x0006);
pub const GL_TRIANGLE_FAN = @as(c_int, 0x0006);
pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = @as(c_int, 0x0007);
pub const GL_QUADS = @as(c_int, 0x0007);
pub const GL_QUADS_EXT = @as(c_int, 0x0007);
pub const GL_QUADS_OES = @as(c_int, 0x0007);
pub const GL_ELEMENT_ADDRESS_COMMAND_NV = @as(c_int, 0x0008);
pub const GL_MAP_INVALIDATE_BUFFER_BIT = @as(c_int, 0x0008);
pub const GL_MAP_INVALIDATE_BUFFER_BIT_EXT = @as(c_int, 0x0008);
pub const GL_QUAD_STRIP = @as(c_int, 0x0008);
pub const GL_TRACE_TEXTURES_BIT_MESA = @as(c_int, 0x0008);
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_INDEX_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_SCISSOR_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT3_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV = @as(c_int, 0x0009);
pub const GL_POLYGON = @as(c_int, 0x0009);
pub const GL_LINES_ADJACENCY = @as(c_int, 0x000A);
pub const GL_LINES_ADJACENCY_ARB = @as(c_int, 0x000A);
pub const GL_LINES_ADJACENCY_EXT = @as(c_int, 0x000A);
pub const GL_LINES_ADJACENCY_OES = @as(c_int, 0x000A);
pub const GL_UNIFORM_ADDRESS_COMMAND_NV = @as(c_int, 0x000A);
pub const GL_BLEND_COLOR_COMMAND_NV = @as(c_int, 0x000B);
pub const GL_LINE_STRIP_ADJACENCY = @as(c_int, 0x000B);
pub const GL_LINE_STRIP_ADJACENCY_ARB = @as(c_int, 0x000B);
pub const GL_LINE_STRIP_ADJACENCY_EXT = @as(c_int, 0x000B);
pub const GL_LINE_STRIP_ADJACENCY_OES = @as(c_int, 0x000B);
pub const GL_STENCIL_REF_COMMAND_NV = @as(c_int, 0x000C);
pub const GL_TRIANGLES_ADJACENCY = @as(c_int, 0x000C);
pub const GL_TRIANGLES_ADJACENCY_ARB = @as(c_int, 0x000C);
pub const GL_TRIANGLES_ADJACENCY_EXT = @as(c_int, 0x000C);
pub const GL_TRIANGLES_ADJACENCY_OES = @as(c_int, 0x000C);
pub const GL_LINE_WIDTH_COMMAND_NV = @as(c_int, 0x000D);
pub const GL_TRIANGLE_STRIP_ADJACENCY = @as(c_int, 0x000D);
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB = @as(c_int, 0x000D);
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT = @as(c_int, 0x000D);
pub const GL_TRIANGLE_STRIP_ADJACENCY_OES = @as(c_int, 0x000D);
pub const GL_PATCHES = @as(c_int, 0x000E);
pub const GL_PATCHES_EXT = @as(c_int, 0x000E);
pub const GL_PATCHES_OES = @as(c_int, 0x000E);
pub const GL_POLYGON_OFFSET_COMMAND_NV = @as(c_int, 0x000E);
pub const GL_ALPHA_REF_COMMAND_NV = @as(c_int, 0x000F);
pub const GL_MAP_FLUSH_EXPLICIT_BIT = @as(c_int, 0x0010);
pub const GL_MAP_FLUSH_EXPLICIT_BIT_EXT = @as(c_int, 0x0010);
pub const GL_TRACE_PIXELS_BIT_MESA = @as(c_int, 0x0010);
pub const GL_VIEWPORT_COMMAND_NV = @as(c_int, 0x0010);
pub const GL_FONT_UNITS_PER_EM_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const GL_MAT_AMBIENT_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT4_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const GL_SCISSOR_COMMAND_NV = @as(c_int, 0x0011);
pub const GL_FRONT_FACE_COMMAND_NV = @as(c_int, 0x0012);
pub const GL_MAP_UNSYNCHRONIZED_BIT = @as(c_int, 0x0020);
pub const GL_MAP_UNSYNCHRONIZED_BIT_EXT = @as(c_int, 0x0020);
pub const GL_TRACE_ERRORS_BIT_MESA = @as(c_int, 0x0020);
pub const GL_FONT_ASCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT5_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const GL_MAP_PERSISTENT_BIT = @as(c_int, 0x0040);
pub const GL_MAP_PERSISTENT_BIT_EXT = @as(c_int, 0x0040);
pub const GL_FONT_DESCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const GL_MAT_DIFFUSE_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT6_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const GL_MAP_COHERENT_BIT = @as(c_int, 0x0080);
pub const GL_MAP_COHERENT_BIT_EXT = @as(c_int, 0x0080);
pub const GL_FONT_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const GL_MAT_EMISSION_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const GL_STENCIL_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const GL_BOLD_BIT_NV = @as(c_int, 0x01);
pub const GL_GLYPH_WIDTH_BIT_NV = @as(c_int, 0x01);
pub const GL_ACCUM = @as(c_int, 0x0100);
pub const GL_DYNAMIC_STORAGE_BIT = @as(c_int, 0x0100);
pub const GL_DYNAMIC_STORAGE_BIT_EXT = @as(c_int, 0x0100);
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const GL_MAT_COLOR_INDEXES_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT0_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const GL_LOAD = @as(c_int, 0x0101);
pub const GL_RETURN = @as(c_int, 0x0102);
pub const GL_MULT = @as(c_int, 0x0103);
pub const GL_ADD = @as(c_int, 0x0104);
pub const GL_GLYPH_HEIGHT_BIT_NV = @as(c_int, 0x02);
pub const GL_ITALIC_BIT_NV = @as(c_int, 0x02);
pub const GL_MOVE_TO_NV = @as(c_int, 0x02);
pub const GL_CLIENT_STORAGE_BIT = @as(c_int, 0x0200);
pub const GL_CLIENT_STORAGE_BIT_EXT = @as(c_int, 0x0200);
pub const GL_NEVER = @as(c_int, 0x0200);
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const GL_MAT_SHININESS_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT1_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const GL_LESS = @as(c_int, 0x0201);
pub const GL_EQUAL = @as(c_int, 0x0202);
pub const GL_LEQUAL = @as(c_int, 0x0203);
pub const GL_GREATER = @as(c_int, 0x0204);
pub const GL_NOTEQUAL = @as(c_int, 0x0205);
pub const GL_GEQUAL = @as(c_int, 0x0206);
pub const GL_ALWAYS = @as(c_int, 0x0207);
pub const GL_RELATIVE_MOVE_TO_NV = @as(c_int, 0x03);
pub const GL_SRC_COLOR = @as(c_int, 0x0300);
pub const GL_ONE_MINUS_SRC_COLOR = @as(c_int, 0x0301);
pub const GL_SRC_ALPHA = @as(c_int, 0x0302);
pub const GL_ONE_MINUS_SRC_ALPHA = @as(c_int, 0x0303);
pub const GL_DST_ALPHA = @as(c_int, 0x0304);
pub const GL_ONE_MINUS_DST_ALPHA = @as(c_int, 0x0305);
pub const GL_DST_COLOR = @as(c_int, 0x0306);
pub const GL_ONE_MINUS_DST_COLOR = @as(c_int, 0x0307);
pub const GL_SRC_ALPHA_SATURATE = @as(c_int, 0x0308);
pub const GL_SRC_ALPHA_SATURATE_EXT = @as(c_int, 0x0308);
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = @as(c_int, 0x04);
pub const GL_LINE_TO_NV = @as(c_int, 0x04);
pub const GL_FRONT_LEFT = @as(c_int, 0x0400);
pub const GL_SPARSE_STORAGE_BIT_ARB = @as(c_int, 0x0400);
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const GL_MAT_SPECULAR_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT2_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hexadecimal);
pub const GL_FRONT_RIGHT = @as(c_int, 0x0401);
pub const GL_BACK_LEFT = @as(c_int, 0x0402);
pub const GL_BACK_RIGHT = @as(c_int, 0x0403);
pub const GL_FRONT = @as(c_int, 0x0404);
pub const GL_BACK = @as(c_int, 0x0405);
pub const GL_LEFT = @as(c_int, 0x0406);
pub const GL_RIGHT = @as(c_int, 0x0407);
pub const GL_FRONT_AND_BACK = @as(c_int, 0x0408);
pub const GL_AUX0 = @as(c_int, 0x0409);
pub const GL_AUX1 = @as(c_int, 0x040A);
pub const GL_AUX2 = @as(c_int, 0x040B);
pub const GL_AUX3 = @as(c_int, 0x040C);
pub const GL_RELATIVE_LINE_TO_NV = @as(c_int, 0x05);
pub const GL_INVALID_ENUM = @as(c_int, 0x0500);
pub const GL_INVALID_VALUE = @as(c_int, 0x0501);
pub const GL_INVALID_OPERATION = @as(c_int, 0x0502);
pub const GL_STACK_OVERFLOW = @as(c_int, 0x0503);
pub const GL_STACK_OVERFLOW_KHR = @as(c_int, 0x0503);
pub const GL_STACK_UNDERFLOW = @as(c_int, 0x0504);
pub const GL_STACK_UNDERFLOW_KHR = @as(c_int, 0x0504);
pub const GL_OUT_OF_MEMORY = @as(c_int, 0x0505);
pub const GL_INVALID_FRAMEBUFFER_OPERATION = @as(c_int, 0x0506);
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT = @as(c_int, 0x0506);
pub const GL_INVALID_FRAMEBUFFER_OPERATION_OES = @as(c_int, 0x0506);
pub const GL_CONTEXT_LOST = @as(c_int, 0x0507);
pub const GL_CONTEXT_LOST_KHR = @as(c_int, 0x0507);
pub const GL_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x06);
pub const GL_2D = @as(c_int, 0x0600);
pub const GL_3D = @as(c_int, 0x0601);
pub const GL_3D_COLOR = @as(c_int, 0x0602);
pub const GL_3D_COLOR_TEXTURE = @as(c_int, 0x0603);
pub const GL_4D_COLOR_TEXTURE = @as(c_int, 0x0604);
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x07);
pub const GL_PASS_THROUGH_TOKEN = @as(c_int, 0x0700);
pub const GL_POINT_TOKEN = @as(c_int, 0x0701);
pub const GL_LINE_TOKEN = @as(c_int, 0x0702);
pub const GL_POLYGON_TOKEN = @as(c_int, 0x0703);
pub const GL_BITMAP_TOKEN = @as(c_int, 0x0704);
pub const GL_DRAW_PIXEL_TOKEN = @as(c_int, 0x0705);
pub const GL_COPY_PIXEL_TOKEN = @as(c_int, 0x0706);
pub const GL_LINE_RESET_TOKEN = @as(c_int, 0x0707);
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = @as(c_int, 0x08);
pub const GL_VERTICAL_LINE_TO_NV = @as(c_int, 0x08);
pub const GL_EXP = @as(c_int, 0x0800);
pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX = @as(c_int, 0x0800);
pub const GL_PER_GPU_STORAGE_BIT_NV = @as(c_int, 0x0800);
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT3_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const GL_NORMAL_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const GL_EXP2 = @as(c_int, 0x0801);
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV = @as(c_int, 0x09);
pub const GL_CW = @as(c_int, 0x0900);
pub const GL_CCW = @as(c_int, 0x0901);
pub const GL_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0A);
pub const GL_COEFF = @as(c_int, 0x0A00);
pub const GL_ORDER = @as(c_int, 0x0A01);
pub const GL_DOMAIN = @as(c_int, 0x0A02);
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0B);
pub const GL_CURRENT_COLOR = @as(c_int, 0x0B00);
pub const GL_CURRENT_INDEX = @as(c_int, 0x0B01);
pub const GL_CURRENT_NORMAL = @as(c_int, 0x0B02);
pub const GL_CURRENT_TEXTURE_COORDS = @as(c_int, 0x0B03);
pub const GL_CURRENT_RASTER_COLOR = @as(c_int, 0x0B04);
pub const GL_CURRENT_RASTER_INDEX = @as(c_int, 0x0B05);
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = @as(c_int, 0x0B06);
pub const GL_CURRENT_RASTER_POSITION = @as(c_int, 0x0B07);
pub const GL_CURRENT_RASTER_POSITION_VALID = @as(c_int, 0x0B08);
pub const GL_CURRENT_RASTER_DISTANCE = @as(c_int, 0x0B09);
pub const GL_POINT_SMOOTH = @as(c_int, 0x0B10);
pub const GL_POINT_SIZE = @as(c_int, 0x0B11);
pub const GL_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_SMOOTH_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_LINE_SMOOTH = @as(c_int, 0x0B20);
pub const GL_LINE_WIDTH = @as(c_int, 0x0B21);
pub const GL_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_SMOOTH_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_LINE_STIPPLE = @as(c_int, 0x0B24);
pub const GL_LINE_STIPPLE_PATTERN = @as(c_int, 0x0B25);
pub const GL_LINE_STIPPLE_REPEAT = @as(c_int, 0x0B26);
pub const GL_LIST_MODE = @as(c_int, 0x0B30);
pub const GL_MAX_LIST_NESTING = @as(c_int, 0x0B31);
pub const GL_LIST_BASE = @as(c_int, 0x0B32);
pub const GL_LIST_INDEX = @as(c_int, 0x0B33);
pub const GL_POLYGON_MODE = @as(c_int, 0x0B40);
pub const GL_POLYGON_MODE_NV = @as(c_int, 0x0B40);
pub const GL_POLYGON_SMOOTH = @as(c_int, 0x0B41);
pub const GL_POLYGON_STIPPLE = @as(c_int, 0x0B42);
pub const GL_EDGE_FLAG = @as(c_int, 0x0B43);
pub const GL_CULL_FACE = @as(c_int, 0x0B44);
pub const GL_CULL_FACE_MODE = @as(c_int, 0x0B45);
pub const GL_FRONT_FACE = @as(c_int, 0x0B46);
pub const GL_LIGHTING = @as(c_int, 0x0B50);
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = @as(c_int, 0x0B51);
pub const GL_LIGHT_MODEL_TWO_SIDE = @as(c_int, 0x0B52);
pub const GL_LIGHT_MODEL_AMBIENT = @as(c_int, 0x0B53);
pub const GL_SHADE_MODEL = @as(c_int, 0x0B54);
pub const GL_COLOR_MATERIAL_FACE = @as(c_int, 0x0B55);
pub const GL_COLOR_MATERIAL_PARAMETER = @as(c_int, 0x0B56);
pub const GL_COLOR_MATERIAL = @as(c_int, 0x0B57);
pub const GL_FOG = @as(c_int, 0x0B60);
pub const GL_FOG_INDEX = @as(c_int, 0x0B61);
pub const GL_FOG_DENSITY = @as(c_int, 0x0B62);
pub const GL_FOG_START = @as(c_int, 0x0B63);
pub const GL_FOG_END = @as(c_int, 0x0B64);
pub const GL_FOG_MODE = @as(c_int, 0x0B65);
pub const GL_FOG_COLOR = @as(c_int, 0x0B66);
pub const GL_DEPTH_RANGE = @as(c_int, 0x0B70);
pub const GL_DEPTH_TEST = @as(c_int, 0x0B71);
pub const GL_DEPTH_WRITEMASK = @as(c_int, 0x0B72);
pub const GL_DEPTH_CLEAR_VALUE = @as(c_int, 0x0B73);
pub const GL_DEPTH_FUNC = @as(c_int, 0x0B74);
pub const GL_ACCUM_CLEAR_VALUE = @as(c_int, 0x0B80);
pub const GL_STENCIL_TEST = @as(c_int, 0x0B90);
pub const GL_STENCIL_CLEAR_VALUE = @as(c_int, 0x0B91);
pub const GL_STENCIL_FUNC = @as(c_int, 0x0B92);
pub const GL_STENCIL_VALUE_MASK = @as(c_int, 0x0B93);
pub const GL_STENCIL_FAIL = @as(c_int, 0x0B94);
pub const GL_STENCIL_PASS_DEPTH_FAIL = @as(c_int, 0x0B95);
pub const GL_STENCIL_PASS_DEPTH_PASS = @as(c_int, 0x0B96);
pub const GL_STENCIL_REF = @as(c_int, 0x0B97);
pub const GL_STENCIL_WRITEMASK = @as(c_int, 0x0B98);
pub const GL_MATRIX_MODE = @as(c_int, 0x0BA0);
pub const GL_NORMALIZE = @as(c_int, 0x0BA1);
pub const GL_VIEWPORT = @as(c_int, 0x0BA2);
pub const GL_MODELVIEW0_STACK_DEPTH_EXT = @as(c_int, 0x0BA3);
pub const GL_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0BA3);
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV = @as(c_int, 0x0BA3);
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV = @as(c_int, 0x0BA4);
pub const GL_PROJECTION_STACK_DEPTH = @as(c_int, 0x0BA4);
pub const GL_TEXTURE_STACK_DEPTH = @as(c_int, 0x0BA5);
pub const GL_MODELVIEW0_MATRIX_EXT = @as(c_int, 0x0BA6);
pub const GL_MODELVIEW_MATRIX = @as(c_int, 0x0BA6);
pub const GL_PATH_MODELVIEW_MATRIX_NV = @as(c_int, 0x0BA6);
pub const GL_PATH_PROJECTION_MATRIX_NV = @as(c_int, 0x0BA7);
pub const GL_PROJECTION_MATRIX = @as(c_int, 0x0BA7);
pub const GL_TEXTURE_MATRIX = @as(c_int, 0x0BA8);
pub const GL_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB0);
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB1);
pub const GL_ALPHA_TEST = @as(c_int, 0x0BC0);
pub const GL_ALPHA_TEST_QCOM = @as(c_int, 0x0BC0);
pub const GL_ALPHA_TEST_FUNC = @as(c_int, 0x0BC1);
pub const GL_ALPHA_TEST_FUNC_QCOM = @as(c_int, 0x0BC1);
pub const GL_ALPHA_TEST_REF = @as(c_int, 0x0BC2);
pub const GL_ALPHA_TEST_REF_QCOM = @as(c_int, 0x0BC2);
pub const GL_DITHER = @as(c_int, 0x0BD0);
pub const GL_BLEND_DST = @as(c_int, 0x0BE0);
pub const GL_BLEND_SRC = @as(c_int, 0x0BE1);
pub const GL_BLEND = @as(c_int, 0x0BE2);
pub const GL_LOGIC_OP_MODE = @as(c_int, 0x0BF0);
pub const GL_INDEX_LOGIC_OP = @as(c_int, 0x0BF1);
pub const GL_LOGIC_OP = @as(c_int, 0x0BF1);
pub const GL_COLOR_LOGIC_OP = @as(c_int, 0x0BF2);
pub const GL_CUBIC_CURVE_TO_NV = @as(c_int, 0x0C);
pub const GL_AUX_BUFFERS = @as(c_int, 0x0C00);
pub const GL_DRAW_BUFFER = @as(c_int, 0x0C01);
pub const GL_DRAW_BUFFER_EXT = @as(c_int, 0x0C01);
pub const GL_READ_BUFFER = @as(c_int, 0x0C02);
pub const GL_READ_BUFFER_EXT = @as(c_int, 0x0C02);
pub const GL_READ_BUFFER_NV = @as(c_int, 0x0C02);
pub const GL_SCISSOR_BOX = @as(c_int, 0x0C10);
pub const GL_SCISSOR_TEST = @as(c_int, 0x0C11);
pub const GL_INDEX_CLEAR_VALUE = @as(c_int, 0x0C20);
pub const GL_INDEX_WRITEMASK = @as(c_int, 0x0C21);
pub const GL_COLOR_CLEAR_VALUE = @as(c_int, 0x0C22);
pub const GL_COLOR_WRITEMASK = @as(c_int, 0x0C23);
pub const GL_INDEX_MODE = @as(c_int, 0x0C30);
pub const GL_RGBA_MODE = @as(c_int, 0x0C31);
pub const GL_DOUBLEBUFFER = @as(c_int, 0x0C32);
pub const GL_STEREO = @as(c_int, 0x0C33);
pub const GL_RENDER_MODE = @as(c_int, 0x0C40);
pub const GL_PERSPECTIVE_CORRECTION_HINT = @as(c_int, 0x0C50);
pub const GL_POINT_SMOOTH_HINT = @as(c_int, 0x0C51);
pub const GL_LINE_SMOOTH_HINT = @as(c_int, 0x0C52);
pub const GL_POLYGON_SMOOTH_HINT = @as(c_int, 0x0C53);
pub const GL_FOG_HINT = @as(c_int, 0x0C54);
pub const GL_TEXTURE_GEN_S = @as(c_int, 0x0C60);
pub const GL_TEXTURE_GEN_T = @as(c_int, 0x0C61);
pub const GL_TEXTURE_GEN_R = @as(c_int, 0x0C62);
pub const GL_TEXTURE_GEN_Q = @as(c_int, 0x0C63);
pub const GL_PIXEL_MAP_I_TO_I = @as(c_int, 0x0C70);
pub const GL_PIXEL_MAP_S_TO_S = @as(c_int, 0x0C71);
pub const GL_PIXEL_MAP_I_TO_R = @as(c_int, 0x0C72);
pub const GL_PIXEL_MAP_I_TO_G = @as(c_int, 0x0C73);
pub const GL_PIXEL_MAP_I_TO_B = @as(c_int, 0x0C74);
pub const GL_PIXEL_MAP_I_TO_A = @as(c_int, 0x0C75);
pub const GL_PIXEL_MAP_R_TO_R = @as(c_int, 0x0C76);
pub const GL_PIXEL_MAP_G_TO_G = @as(c_int, 0x0C77);
pub const GL_PIXEL_MAP_B_TO_B = @as(c_int, 0x0C78);
pub const GL_PIXEL_MAP_A_TO_A = @as(c_int, 0x0C79);
pub const GL_PIXEL_MAP_I_TO_I_SIZE = @as(c_int, 0x0CB0);
pub const GL_PIXEL_MAP_S_TO_S_SIZE = @as(c_int, 0x0CB1);
pub const GL_PIXEL_MAP_I_TO_R_SIZE = @as(c_int, 0x0CB2);
pub const GL_PIXEL_MAP_I_TO_G_SIZE = @as(c_int, 0x0CB3);
pub const GL_PIXEL_MAP_I_TO_B_SIZE = @as(c_int, 0x0CB4);
pub const GL_PIXEL_MAP_I_TO_A_SIZE = @as(c_int, 0x0CB5);
pub const GL_PIXEL_MAP_R_TO_R_SIZE = @as(c_int, 0x0CB6);
pub const GL_PIXEL_MAP_G_TO_G_SIZE = @as(c_int, 0x0CB7);
pub const GL_PIXEL_MAP_B_TO_B_SIZE = @as(c_int, 0x0CB8);
pub const GL_PIXEL_MAP_A_TO_A_SIZE = @as(c_int, 0x0CB9);
pub const GL_UNPACK_SWAP_BYTES = @as(c_int, 0x0CF0);
pub const GL_UNPACK_LSB_FIRST = @as(c_int, 0x0CF1);
pub const GL_UNPACK_ROW_LENGTH = @as(c_int, 0x0CF2);
pub const GL_UNPACK_ROW_LENGTH_EXT = @as(c_int, 0x0CF2);
pub const GL_UNPACK_SKIP_ROWS = @as(c_int, 0x0CF3);
pub const GL_UNPACK_SKIP_ROWS_EXT = @as(c_int, 0x0CF3);
pub const GL_UNPACK_SKIP_PIXELS = @as(c_int, 0x0CF4);
pub const GL_UNPACK_SKIP_PIXELS_EXT = @as(c_int, 0x0CF4);
pub const GL_UNPACK_ALIGNMENT = @as(c_int, 0x0CF5);
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV = @as(c_int, 0x0D);
pub const GL_PACK_SWAP_BYTES = @as(c_int, 0x0D00);
pub const GL_PACK_LSB_FIRST = @as(c_int, 0x0D01);
pub const GL_PACK_ROW_LENGTH = @as(c_int, 0x0D02);
pub const GL_PACK_SKIP_ROWS = @as(c_int, 0x0D03);
pub const GL_PACK_SKIP_PIXELS = @as(c_int, 0x0D04);
pub const GL_PACK_ALIGNMENT = @as(c_int, 0x0D05);
pub const GL_MAP_COLOR = @as(c_int, 0x0D10);
pub const GL_MAP_STENCIL = @as(c_int, 0x0D11);
pub const GL_INDEX_SHIFT = @as(c_int, 0x0D12);
pub const GL_INDEX_OFFSET = @as(c_int, 0x0D13);
pub const GL_RED_SCALE = @as(c_int, 0x0D14);
pub const GL_RED_BIAS = @as(c_int, 0x0D15);
pub const GL_ZOOM_X = @as(c_int, 0x0D16);
pub const GL_ZOOM_Y = @as(c_int, 0x0D17);
pub const GL_GREEN_SCALE = @as(c_int, 0x0D18);
pub const GL_GREEN_BIAS = @as(c_int, 0x0D19);
pub const GL_BLUE_SCALE = @as(c_int, 0x0D1A);
pub const GL_BLUE_BIAS = @as(c_int, 0x0D1B);
pub const GL_ALPHA_SCALE = @as(c_int, 0x0D1C);
pub const GL_ALPHA_BIAS = @as(c_int, 0x0D1D);
pub const GL_DEPTH_SCALE = @as(c_int, 0x0D1E);
pub const GL_DEPTH_BIAS = @as(c_int, 0x0D1F);
pub const GL_MAX_EVAL_ORDER = @as(c_int, 0x0D30);
pub const GL_MAX_LIGHTS = @as(c_int, 0x0D31);
pub const GL_MAX_CLIP_DISTANCES = @as(c_int, 0x0D32);
pub const GL_MAX_CLIP_DISTANCES_APPLE = @as(c_int, 0x0D32);
pub const GL_MAX_CLIP_DISTANCES_EXT = @as(c_int, 0x0D32);
pub const GL_MAX_CLIP_PLANES = @as(c_int, 0x0D32);
pub const GL_MAX_CLIP_PLANES_IMG = @as(c_int, 0x0D32);
pub const GL_MAX_TEXTURE_SIZE = @as(c_int, 0x0D33);
pub const GL_MAX_PIXEL_MAP_TABLE = @as(c_int, 0x0D34);
pub const GL_MAX_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D35);
pub const GL_MAX_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0D36);
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = @as(c_int, 0x0D36);
pub const GL_MAX_NAME_STACK_DEPTH = @as(c_int, 0x0D37);
pub const GL_MAX_PROJECTION_STACK_DEPTH = @as(c_int, 0x0D38);
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = @as(c_int, 0x0D38);
pub const GL_MAX_TEXTURE_STACK_DEPTH = @as(c_int, 0x0D39);
pub const GL_MAX_VIEWPORT_DIMS = @as(c_int, 0x0D3A);
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D3B);
pub const GL_SUBPIXEL_BITS = @as(c_int, 0x0D50);
pub const GL_INDEX_BITS = @as(c_int, 0x0D51);
pub const GL_RED_BITS = @as(c_int, 0x0D52);
pub const GL_GREEN_BITS = @as(c_int, 0x0D53);
pub const GL_BLUE_BITS = @as(c_int, 0x0D54);
pub const GL_ALPHA_BITS = @as(c_int, 0x0D55);
pub const GL_DEPTH_BITS = @as(c_int, 0x0D56);
pub const GL_STENCIL_BITS = @as(c_int, 0x0D57);
pub const GL_ACCUM_RED_BITS = @as(c_int, 0x0D58);
pub const GL_ACCUM_GREEN_BITS = @as(c_int, 0x0D59);
pub const GL_ACCUM_BLUE_BITS = @as(c_int, 0x0D5A);
pub const GL_ACCUM_ALPHA_BITS = @as(c_int, 0x0D5B);
pub const GL_NAME_STACK_DEPTH = @as(c_int, 0x0D70);
pub const GL_AUTO_NORMAL = @as(c_int, 0x0D80);
pub const GL_MAP1_COLOR_4 = @as(c_int, 0x0D90);
pub const GL_MAP1_INDEX = @as(c_int, 0x0D91);
pub const GL_MAP1_NORMAL = @as(c_int, 0x0D92);
pub const GL_MAP1_TEXTURE_COORD_1 = @as(c_int, 0x0D93);
pub const GL_MAP1_TEXTURE_COORD_2 = @as(c_int, 0x0D94);
pub const GL_MAP1_TEXTURE_COORD_3 = @as(c_int, 0x0D95);
pub const GL_MAP1_TEXTURE_COORD_4 = @as(c_int, 0x0D96);
pub const GL_MAP1_VERTEX_3 = @as(c_int, 0x0D97);
pub const GL_MAP1_VERTEX_4 = @as(c_int, 0x0D98);
pub const GL_MAP2_COLOR_4 = @as(c_int, 0x0DB0);
pub const GL_MAP2_INDEX = @as(c_int, 0x0DB1);
pub const GL_MAP2_NORMAL = @as(c_int, 0x0DB2);
pub const GL_MAP2_TEXTURE_COORD_1 = @as(c_int, 0x0DB3);
pub const GL_MAP2_TEXTURE_COORD_2 = @as(c_int, 0x0DB4);
pub const GL_MAP2_TEXTURE_COORD_3 = @as(c_int, 0x0DB5);
pub const GL_MAP2_TEXTURE_COORD_4 = @as(c_int, 0x0DB6);
pub const GL_MAP2_VERTEX_3 = @as(c_int, 0x0DB7);
pub const GL_MAP2_VERTEX_4 = @as(c_int, 0x0DB8);
pub const GL_MAP1_GRID_DOMAIN = @as(c_int, 0x0DD0);
pub const GL_MAP1_GRID_SEGMENTS = @as(c_int, 0x0DD1);
pub const GL_MAP2_GRID_DOMAIN = @as(c_int, 0x0DD2);
pub const GL_MAP2_GRID_SEGMENTS = @as(c_int, 0x0DD3);
pub const GL_TEXTURE_1D = @as(c_int, 0x0DE0);
pub const GL_TEXTURE_2D = @as(c_int, 0x0DE1);
pub const GL_FEEDBACK_BUFFER_POINTER = @as(c_int, 0x0DF0);
pub const GL_FEEDBACK_BUFFER_SIZE = @as(c_int, 0x0DF1);
pub const GL_FEEDBACK_BUFFER_TYPE = @as(c_int, 0x0DF2);
pub const GL_SELECTION_BUFFER_POINTER = @as(c_int, 0x0DF3);
pub const GL_SELECTION_BUFFER_SIZE = @as(c_int, 0x0DF4);
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0E);
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0F);
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x10);
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x10);
pub const GL_GLYPH_HAS_KERNING_BIT_NV = @as(c_int, 0x100);
pub const GL_TEXTURE_WIDTH = @as(c_int, 0x1000);
pub const GL_FONT_HAS_KERNING_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT4_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const GL_TEXCOORD1_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const GL_TEXTURE_HEIGHT = @as(c_int, 0x1001);
pub const GL_TEXTURE_COMPONENTS = @as(c_int, 0x1003);
pub const GL_TEXTURE_INTERNAL_FORMAT = @as(c_int, 0x1003);
pub const GL_TEXTURE_BORDER_COLOR = @as(c_int, 0x1004);
pub const GL_TEXTURE_BORDER_COLOR_EXT = @as(c_int, 0x1004);
pub const GL_TEXTURE_BORDER_COLOR_NV = @as(c_int, 0x1004);
pub const GL_TEXTURE_BORDER_COLOR_OES = @as(c_int, 0x1004);
pub const GL_TEXTURE_BORDER = @as(c_int, 0x1005);
pub const GL_TEXTURE_TARGET = @as(c_int, 0x1006);
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x11);
pub const GL_DONT_CARE = @as(c_int, 0x1100);
pub const GL_FASTEST = @as(c_int, 0x1101);
pub const GL_NICEST = @as(c_int, 0x1102);
pub const GL_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x12);
pub const GL_AMBIENT = @as(c_int, 0x1200);
pub const GL_DIFFUSE = @as(c_int, 0x1201);
pub const GL_SPECULAR = @as(c_int, 0x1202);
pub const GL_POSITION = @as(c_int, 0x1203);
pub const GL_SPOT_DIRECTION = @as(c_int, 0x1204);
pub const GL_SPOT_EXPONENT = @as(c_int, 0x1205);
pub const GL_SPOT_CUTOFF = @as(c_int, 0x1206);
pub const GL_CONSTANT_ATTENUATION = @as(c_int, 0x1207);
pub const GL_LINEAR_ATTENUATION = @as(c_int, 0x1208);
pub const GL_QUADRATIC_ATTENUATION = @as(c_int, 0x1209);
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x13);
pub const GL_COMPILE = @as(c_int, 0x1300);
pub const GL_COMPILE_AND_EXECUTE = @as(c_int, 0x1301);
pub const GL_SMALL_CW_ARC_TO_NV = @as(c_int, 0x14);
pub const GL_BYTE = @as(c_int, 0x1400);
pub const GL_UNSIGNED_BYTE = @as(c_int, 0x1401);
pub const GL_SHORT = @as(c_int, 0x1402);
pub const GL_UNSIGNED_SHORT = @as(c_int, 0x1403);
pub const GL_INT = @as(c_int, 0x1404);
pub const GL_UNSIGNED_INT = @as(c_int, 0x1405);
pub const GL_FLOAT = @as(c_int, 0x1406);
pub const GL_2_BYTES = @as(c_int, 0x1407);
pub const GL_2_BYTES_NV = @as(c_int, 0x1407);
pub const GL_3_BYTES = @as(c_int, 0x1408);
pub const GL_3_BYTES_NV = @as(c_int, 0x1408);
pub const GL_4_BYTES = @as(c_int, 0x1409);
pub const GL_4_BYTES_NV = @as(c_int, 0x1409);
pub const GL_DOUBLE = @as(c_int, 0x140A);
pub const GL_DOUBLE_EXT = @as(c_int, 0x140A);
pub const GL_HALF_APPLE = @as(c_int, 0x140B);
pub const GL_HALF_FLOAT = @as(c_int, 0x140B);
pub const GL_HALF_FLOAT_ARB = @as(c_int, 0x140B);
pub const GL_HALF_FLOAT_NV = @as(c_int, 0x140B);
pub const GL_FIXED = @as(c_int, 0x140C);
pub const GL_FIXED_OES = @as(c_int, 0x140C);
pub const GL_INT64_ARB = @as(c_int, 0x140E);
pub const GL_INT64_NV = @as(c_int, 0x140E);
pub const GL_UNSIGNED_INT64_ARB = @as(c_int, 0x140F);
pub const GL_UNSIGNED_INT64_NV = @as(c_int, 0x140F);
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV = @as(c_int, 0x15);
pub const GL_CLEAR = @as(c_int, 0x1500);
pub const GL_AND = @as(c_int, 0x1501);
pub const GL_AND_REVERSE = @as(c_int, 0x1502);
pub const GL_COPY = @as(c_int, 0x1503);
pub const GL_AND_INVERTED = @as(c_int, 0x1504);
pub const GL_NOOP = @as(c_int, 0x1505);
pub const GL_XOR = @as(c_int, 0x1506);
pub const GL_XOR_NV = @as(c_int, 0x1506);
pub const GL_OR = @as(c_int, 0x1507);
pub const GL_NOR = @as(c_int, 0x1508);
pub const GL_EQUIV = @as(c_int, 0x1509);
pub const GL_INVERT = @as(c_int, 0x150A);
pub const GL_OR_REVERSE = @as(c_int, 0x150B);
pub const GL_COPY_INVERTED = @as(c_int, 0x150C);
pub const GL_OR_INVERTED = @as(c_int, 0x150D);
pub const GL_NAND = @as(c_int, 0x150E);
pub const GL_SET = @as(c_int, 0x150F);
pub const GL_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x16);
pub const GL_EMISSION = @as(c_int, 0x1600);
pub const GL_SHININESS = @as(c_int, 0x1601);
pub const GL_AMBIENT_AND_DIFFUSE = @as(c_int, 0x1602);
pub const GL_COLOR_INDEXES = @as(c_int, 0x1603);
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x17);
pub const GL_MODELVIEW = @as(c_int, 0x1700);
pub const GL_MODELVIEW0_ARB = @as(c_int, 0x1700);
pub const GL_MODELVIEW0_EXT = @as(c_int, 0x1700);
pub const GL_PATH_MODELVIEW_NV = @as(c_int, 0x1700);
pub const GL_PATH_PROJECTION_NV = @as(c_int, 0x1701);
pub const GL_PROJECTION = @as(c_int, 0x1701);
pub const GL_TEXTURE = @as(c_int, 0x1702);
pub const GL_LARGE_CW_ARC_TO_NV = @as(c_int, 0x18);
pub const GL_COLOR = @as(c_int, 0x1800);
pub const GL_COLOR_EXT = @as(c_int, 0x1800);
pub const GL_DEPTH = @as(c_int, 0x1801);
pub const GL_DEPTH_EXT = @as(c_int, 0x1801);
pub const GL_STENCIL = @as(c_int, 0x1802);
pub const GL_STENCIL_EXT = @as(c_int, 0x1802);
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV = @as(c_int, 0x19);
pub const GL_COLOR_INDEX = @as(c_int, 0x1900);
pub const GL_STENCIL_INDEX = @as(c_int, 0x1901);
pub const GL_STENCIL_INDEX_OES = @as(c_int, 0x1901);
pub const GL_DEPTH_COMPONENT = @as(c_int, 0x1902);
pub const GL_RED = @as(c_int, 0x1903);
pub const GL_RED_EXT = @as(c_int, 0x1903);
pub const GL_RED_NV = @as(c_int, 0x1903);
pub const GL_GREEN = @as(c_int, 0x1904);
pub const GL_GREEN_NV = @as(c_int, 0x1904);
pub const GL_BLUE = @as(c_int, 0x1905);
pub const GL_BLUE_NV = @as(c_int, 0x1905);
pub const GL_ALPHA = @as(c_int, 0x1906);
pub const GL_RGB = @as(c_int, 0x1907);
pub const GL_RGBA = @as(c_int, 0x1908);
pub const GL_LUMINANCE = @as(c_int, 0x1909);
pub const GL_LUMINANCE_ALPHA = @as(c_int, 0x190A);
pub const GL_RASTER_POSITION_UNCLIPPED_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x19262, .hexadecimal);
pub const GL_CONIC_CURVE_TO_NV = @as(c_int, 0x1A);
pub const GL_BITMAP = @as(c_int, 0x1A00);
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A1F8, .hexadecimal);
pub const GL_CONSERVE_MEMORY_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A1FD, .hexadecimal);
pub const GL_RECLAIM_MEMORY_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A1FE, .hexadecimal);
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A202, .hexadecimal);
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A203, .hexadecimal);
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A204, .hexadecimal);
pub const GL_ALWAYS_FAST_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20C, .hexadecimal);
pub const GL_ALWAYS_SOFT_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20D, .hexadecimal);
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20E, .hexadecimal);
pub const GL_ALLOW_DRAW_WIN_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A20F, .hexadecimal);
pub const GL_ALLOW_DRAW_FRG_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A210, .hexadecimal);
pub const GL_ALLOW_DRAW_MEM_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A211, .hexadecimal);
pub const GL_STRICT_DEPTHFUNC_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A216, .hexadecimal);
pub const GL_STRICT_LIGHTING_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A217, .hexadecimal);
pub const GL_STRICT_SCISSOR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A218, .hexadecimal);
pub const GL_FULL_STIPPLE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A219, .hexadecimal);
pub const GL_CLIP_NEAR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A220, .hexadecimal);
pub const GL_CLIP_FAR_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A221, .hexadecimal);
pub const GL_WIDE_LINE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A222, .hexadecimal);
pub const GL_BACK_NORMALS_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A223, .hexadecimal);
pub const GL_VERTEX_DATA_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22A, .hexadecimal);
pub const GL_VERTEX_CONSISTENT_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22B, .hexadecimal);
pub const GL_MATERIAL_SIDE_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22C, .hexadecimal);
pub const GL_MAX_VERTEX_HINT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1A22D, .hexadecimal);
pub const GL_RELATIVE_CONIC_CURVE_TO_NV = @as(c_int, 0x1B);
pub const GL_POINT = @as(c_int, 0x1B00);
pub const GL_POINT_NV = @as(c_int, 0x1B00);
pub const GL_LINE = @as(c_int, 0x1B01);
pub const GL_LINE_NV = @as(c_int, 0x1B01);
pub const GL_FILL = @as(c_int, 0x1B02);
pub const GL_FILL_NV = @as(c_int, 0x1B02);
pub const GL_RENDER = @as(c_int, 0x1C00);
pub const GL_FEEDBACK = @as(c_int, 0x1C01);
pub const GL_SELECT = @as(c_int, 0x1C02);
pub const GL_FLAT = @as(c_int, 0x1D00);
pub const GL_SMOOTH = @as(c_int, 0x1D01);
pub const GL_KEEP = @as(c_int, 0x1E00);
pub const GL_REPLACE = @as(c_int, 0x1E01);
pub const GL_INCR = @as(c_int, 0x1E02);
pub const GL_DECR = @as(c_int, 0x1E03);
pub const GL_VENDOR = @as(c_int, 0x1F00);
pub const GL_RENDERER = @as(c_int, 0x1F01);
pub const GL_VERSION = @as(c_int, 0x1F02);
pub const GL_EXTENSIONS = @as(c_int, 0x1F03);
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = @as(c_int, 0x20);
pub const GL_EXTERNAL_STORAGE_BIT_NVX = @as(c_int, 0x2000);
pub const GL_S = @as(c_int, 0x2000);
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_MULTISAMPLE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_MULTISAMPLE_BIT_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_MULTISAMPLE_BIT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_MULTISAMPLE_BIT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT5_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_TEXCOORD2_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_T = @as(c_int, 0x2001);
pub const GL_R = @as(c_int, 0x2002);
pub const GL_Q = @as(c_int, 0x2003);
pub const GL_MODULATE = @as(c_int, 0x2100);
pub const GL_DECAL = @as(c_int, 0x2101);
pub const GL_TEXTURE_ENV_MODE = @as(c_int, 0x2200);
pub const GL_TEXTURE_ENV_COLOR = @as(c_int, 0x2201);
pub const GL_TEXTURE_ENV = @as(c_int, 0x2300);
pub const GL_EYE_LINEAR = @as(c_int, 0x2400);
pub const GL_EYE_LINEAR_NV = @as(c_int, 0x2400);
pub const GL_OBJECT_LINEAR = @as(c_int, 0x2401);
pub const GL_OBJECT_LINEAR_NV = @as(c_int, 0x2401);
pub const GL_SPHERE_MAP = @as(c_int, 0x2402);
pub const GL_TEXTURE_GEN_MODE = @as(c_int, 0x2500);
pub const GL_TEXTURE_GEN_MODE_OES = @as(c_int, 0x2500);
pub const GL_OBJECT_PLANE = @as(c_int, 0x2501);
pub const GL_EYE_PLANE = @as(c_int, 0x2502);
pub const GL_NEAREST = @as(c_int, 0x2600);
pub const GL_LINEAR = @as(c_int, 0x2601);
pub const GL_NEAREST_MIPMAP_NEAREST = @as(c_int, 0x2700);
pub const GL_LINEAR_MIPMAP_NEAREST = @as(c_int, 0x2701);
pub const GL_NEAREST_MIPMAP_LINEAR = @as(c_int, 0x2702);
pub const GL_LINEAR_MIPMAP_LINEAR = @as(c_int, 0x2703);
pub const GL_TEXTURE_MAG_FILTER = @as(c_int, 0x2800);
pub const GL_TEXTURE_MIN_FILTER = @as(c_int, 0x2801);
pub const GL_TEXTURE_WRAP_S = @as(c_int, 0x2802);
pub const GL_TEXTURE_WRAP_T = @as(c_int, 0x2803);
pub const GL_CLAMP = @as(c_int, 0x2900);
pub const GL_REPEAT = @as(c_int, 0x2901);
pub const GL_POLYGON_OFFSET_UNITS = @as(c_int, 0x2A00);
pub const GL_POLYGON_OFFSET_POINT = @as(c_int, 0x2A01);
pub const GL_POLYGON_OFFSET_POINT_NV = @as(c_int, 0x2A01);
pub const GL_POLYGON_OFFSET_LINE = @as(c_int, 0x2A02);
pub const GL_POLYGON_OFFSET_LINE_NV = @as(c_int, 0x2A02);
pub const GL_R3_G3_B2 = @as(c_int, 0x2A10);
pub const GL_V2F = @as(c_int, 0x2A20);
pub const GL_V3F = @as(c_int, 0x2A21);
pub const GL_C4UB_V2F = @as(c_int, 0x2A22);
pub const GL_C4UB_V3F = @as(c_int, 0x2A23);
pub const GL_C3F_V3F = @as(c_int, 0x2A24);
pub const GL_N3F_V3F = @as(c_int, 0x2A25);
pub const GL_C4F_N3F_V3F = @as(c_int, 0x2A26);
pub const GL_T2F_V3F = @as(c_int, 0x2A27);
pub const GL_T4F_V4F = @as(c_int, 0x2A28);
pub const GL_T2F_C4UB_V3F = @as(c_int, 0x2A29);
pub const GL_T2F_C3F_V3F = @as(c_int, 0x2A2A);
pub const GL_T2F_N3F_V3F = @as(c_int, 0x2A2B);
pub const GL_T2F_C4F_N3F_V3F = @as(c_int, 0x2A2C);
pub const GL_T4F_C4F_N3F_V4F = @as(c_int, 0x2A2D);
pub const GL_CLIP_DISTANCE0 = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE0_APPLE = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE0_EXT = @as(c_int, 0x3000);
pub const GL_CLIP_PLANE0 = @as(c_int, 0x3000);
pub const GL_CLIP_PLANE0_IMG = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE1 = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE1_APPLE = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE1_EXT = @as(c_int, 0x3001);
pub const GL_CLIP_PLANE1 = @as(c_int, 0x3001);
pub const GL_CLIP_PLANE1_IMG = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE2 = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE2_APPLE = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE2_EXT = @as(c_int, 0x3002);
pub const GL_CLIP_PLANE2 = @as(c_int, 0x3002);
pub const GL_CLIP_PLANE2_IMG = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE3 = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE3_APPLE = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE3_EXT = @as(c_int, 0x3003);
pub const GL_CLIP_PLANE3 = @as(c_int, 0x3003);
pub const GL_CLIP_PLANE3_IMG = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE4 = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE4_APPLE = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE4_EXT = @as(c_int, 0x3004);
pub const GL_CLIP_PLANE4 = @as(c_int, 0x3004);
pub const GL_CLIP_PLANE4_IMG = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE5 = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE5_APPLE = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE5_EXT = @as(c_int, 0x3005);
pub const GL_CLIP_PLANE5 = @as(c_int, 0x3005);
pub const GL_CLIP_PLANE5_IMG = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE6 = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE6_APPLE = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE6_EXT = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE7 = @as(c_int, 0x3007);
pub const GL_CLIP_DISTANCE7_APPLE = @as(c_int, 0x3007);
pub const GL_CLIP_DISTANCE7_EXT = @as(c_int, 0x3007);
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = @as(c_int, 0x40);
pub const GL_LIGHT0 = @as(c_int, 0x4000);
pub const GL_MULTISAMPLE_BUFFER_BIT6_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const GL_TEXCOORD3_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const GL_LIGHT1 = @as(c_int, 0x4001);
pub const GL_LIGHT2 = @as(c_int, 0x4002);
pub const GL_LIGHT3 = @as(c_int, 0x4003);
pub const GL_LIGHT4 = @as(c_int, 0x4004);
pub const GL_LIGHT5 = @as(c_int, 0x4005);
pub const GL_LIGHT6 = @as(c_int, 0x4006);
pub const GL_LIGHT7 = @as(c_int, 0x4007);
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x80);
pub const GL_ABGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal);
pub const GL_MULTISAMPLE_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const GL_TEXCOORD4_BIT_PGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const GL_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hexadecimal);
pub const GL_CONSTANT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hexadecimal);
pub const GL_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hexadecimal);
pub const GL_CONSTANT_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hexadecimal);
pub const GL_BLEND_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hexadecimal);
pub const GL_BLEND_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hexadecimal);
pub const GL_FUNC_ADD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hexadecimal);
pub const GL_FUNC_ADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hexadecimal);
pub const GL_FUNC_ADD_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hexadecimal);
pub const GL_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hexadecimal);
pub const GL_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hexadecimal);
pub const GL_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hexadecimal);
pub const GL_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hexadecimal);
pub const GL_BLEND_EQUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_RGB_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_FUNC_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hexadecimal);
pub const GL_FUNC_SUBTRACT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hexadecimal);
pub const GL_FUNC_SUBTRACT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hexadecimal);
pub const GL_FUNC_REVERSE_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hexadecimal);
pub const GL_FUNC_REVERSE_SUBTRACT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hexadecimal);
pub const GL_FUNC_REVERSE_SUBTRACT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hexadecimal);
pub const GL_CMYK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800C, .hexadecimal);
pub const GL_CMYKA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800D, .hexadecimal);
pub const GL_PACK_CMYK_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800E, .hexadecimal);
pub const GL_UNPACK_CMYK_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800F, .hexadecimal);
pub const GL_CONVOLUTION_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hexadecimal);
pub const GL_CONVOLUTION_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hexadecimal);
pub const GL_CONVOLUTION_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hexadecimal);
pub const GL_CONVOLUTION_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hexadecimal);
pub const GL_SEPARABLE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hexadecimal);
pub const GL_SEPARABLE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8013, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8013, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8014, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8014, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8015, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8015, .hexadecimal);
pub const GL_REDUCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8016, .hexadecimal);
pub const GL_REDUCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8016, .hexadecimal);
pub const GL_CONVOLUTION_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8017, .hexadecimal);
pub const GL_CONVOLUTION_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8017, .hexadecimal);
pub const GL_CONVOLUTION_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8018, .hexadecimal);
pub const GL_CONVOLUTION_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8018, .hexadecimal);
pub const GL_CONVOLUTION_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8019, .hexadecimal);
pub const GL_CONVOLUTION_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8019, .hexadecimal);
pub const GL_MAX_CONVOLUTION_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801A, .hexadecimal);
pub const GL_MAX_CONVOLUTION_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801A, .hexadecimal);
pub const GL_MAX_CONVOLUTION_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801B, .hexadecimal);
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801B, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801C, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801C, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801D, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801D, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801E, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801E, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801F, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801F, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8021, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8021, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8022, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8022, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8023, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8023, .hexadecimal);
pub const GL_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hexadecimal);
pub const GL_HISTOGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hexadecimal);
pub const GL_PROXY_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hexadecimal);
pub const GL_PROXY_HISTOGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hexadecimal);
pub const GL_HISTOGRAM_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8026, .hexadecimal);
pub const GL_HISTOGRAM_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8026, .hexadecimal);
pub const GL_HISTOGRAM_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8027, .hexadecimal);
pub const GL_HISTOGRAM_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8027, .hexadecimal);
pub const GL_HISTOGRAM_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8028, .hexadecimal);
pub const GL_HISTOGRAM_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8028, .hexadecimal);
pub const GL_HISTOGRAM_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8029, .hexadecimal);
pub const GL_HISTOGRAM_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8029, .hexadecimal);
pub const GL_HISTOGRAM_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802A, .hexadecimal);
pub const GL_HISTOGRAM_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802A, .hexadecimal);
pub const GL_HISTOGRAM_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802B, .hexadecimal);
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802B, .hexadecimal);
pub const GL_HISTOGRAM_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802C, .hexadecimal);
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802C, .hexadecimal);
pub const GL_HISTOGRAM_SINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802D, .hexadecimal);
pub const GL_HISTOGRAM_SINK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802D, .hexadecimal);
pub const GL_MINMAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hexadecimal);
pub const GL_MINMAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hexadecimal);
pub const GL_MINMAX_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802F, .hexadecimal);
pub const GL_MINMAX_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802F, .hexadecimal);
pub const GL_MINMAX_SINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8030, .hexadecimal);
pub const GL_MINMAX_SINK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8030, .hexadecimal);
pub const GL_TABLE_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8031, .hexadecimal);
pub const GL_TABLE_TOO_LARGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8031, .hexadecimal);
pub const GL_UNSIGNED_BYTE_3_3_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hexadecimal);
pub const GL_UNSIGNED_BYTE_3_3_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_5_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hexadecimal);
pub const GL_UNSIGNED_INT_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hexadecimal);
pub const GL_UNSIGNED_INT_10_10_10_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hexadecimal);
pub const GL_POLYGON_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hexadecimal);
pub const GL_POLYGON_OFFSET_FILL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hexadecimal);
pub const GL_POLYGON_OFFSET_FACTOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hexadecimal);
pub const GL_POLYGON_OFFSET_FACTOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hexadecimal);
pub const GL_POLYGON_OFFSET_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8039, .hexadecimal);
pub const GL_RESCALE_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hexadecimal);
pub const GL_RESCALE_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hexadecimal);
pub const GL_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hexadecimal);
pub const GL_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hexadecimal);
pub const GL_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hexadecimal);
pub const GL_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hexadecimal);
pub const GL_ALPHA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hexadecimal);
pub const GL_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hexadecimal);
pub const GL_ALPHA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hexadecimal);
pub const GL_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hexadecimal);
pub const GL_ALPHA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hexadecimal);
pub const GL_LUMINANCE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hexadecimal);
pub const GL_LUMINANCE4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hexadecimal);
pub const GL_LUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hexadecimal);
pub const GL_LUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hexadecimal);
pub const GL_LUMINANCE8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hexadecimal);
pub const GL_LUMINANCE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hexadecimal);
pub const GL_LUMINANCE12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hexadecimal);
pub const GL_LUMINANCE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hexadecimal);
pub const GL_LUMINANCE16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hexadecimal);
pub const GL_LUMINANCE4_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hexadecimal);
pub const GL_LUMINANCE4_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hexadecimal);
pub const GL_LUMINANCE4_ALPHA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hexadecimal);
pub const GL_LUMINANCE6_ALPHA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hexadecimal);
pub const GL_LUMINANCE6_ALPHA2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hexadecimal);
pub const GL_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hexadecimal);
pub const GL_INTENSITY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hexadecimal);
pub const GL_INTENSITY4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hexadecimal);
pub const GL_INTENSITY4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hexadecimal);
pub const GL_INTENSITY8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hexadecimal);
pub const GL_INTENSITY8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hexadecimal);
pub const GL_INTENSITY12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hexadecimal);
pub const GL_INTENSITY12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hexadecimal);
pub const GL_INTENSITY16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hexadecimal);
pub const GL_INTENSITY16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hexadecimal);
pub const GL_RGB2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804E, .hexadecimal);
pub const GL_RGB4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hexadecimal);
pub const GL_RGB4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hexadecimal);
pub const GL_RGB5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hexadecimal);
pub const GL_RGB5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hexadecimal);
pub const GL_RGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hexadecimal);
pub const GL_RGB8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hexadecimal);
pub const GL_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hexadecimal);
pub const GL_RGB10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hexadecimal);
pub const GL_RGB10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hexadecimal);
pub const GL_RGB12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hexadecimal);
pub const GL_RGB12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hexadecimal);
pub const GL_RGB16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hexadecimal);
pub const GL_RGB16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hexadecimal);
pub const GL_RGBA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hexadecimal);
pub const GL_RGBA2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hexadecimal);
pub const GL_RGBA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hexadecimal);
pub const GL_RGBA4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hexadecimal);
pub const GL_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hexadecimal);
pub const GL_RGB5_A1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hexadecimal);
pub const GL_RGB5_A1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hexadecimal);
pub const GL_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hexadecimal);
pub const GL_RGBA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hexadecimal);
pub const GL_RGBA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hexadecimal);
pub const GL_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hexadecimal);
pub const GL_RGB10_A2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hexadecimal);
pub const GL_RGB10_A2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hexadecimal);
pub const GL_RGBA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hexadecimal);
pub const GL_RGBA12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hexadecimal);
pub const GL_RGBA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hexadecimal);
pub const GL_RGBA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hexadecimal);
pub const GL_TEXTURE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hexadecimal);
pub const GL_TEXTURE_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hexadecimal);
pub const GL_TEXTURE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hexadecimal);
pub const GL_TEXTURE_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hexadecimal);
pub const GL_TEXTURE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hexadecimal);
pub const GL_TEXTURE_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hexadecimal);
pub const GL_TEXTURE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hexadecimal);
pub const GL_TEXTURE_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hexadecimal);
pub const GL_REPLACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8062, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hexadecimal);
pub const GL_TEXTURE_TOO_LARGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8065, .hexadecimal);
pub const GL_TEXTURE_PRIORITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hexadecimal);
pub const GL_TEXTURE_PRIORITY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hexadecimal);
pub const GL_TEXTURE_RESIDENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hexadecimal);
pub const GL_TEXTURE_RESIDENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hexadecimal);
pub const GL_TEXTURE_1D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hexadecimal);
pub const GL_TEXTURE_BINDING_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hexadecimal);
pub const GL_TEXTURE_2D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hexadecimal);
pub const GL_TEXTURE_3D_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const GL_TEXTURE_3D_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const GL_TEXTURE_BINDING_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const GL_TEXTURE_BINDING_3D_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const GL_PACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hexadecimal);
pub const GL_PACK_SKIP_IMAGES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hexadecimal);
pub const GL_PACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hexadecimal);
pub const GL_PACK_IMAGE_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hexadecimal);
pub const GL_UNPACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hexadecimal);
pub const GL_UNPACK_SKIP_IMAGES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hexadecimal);
pub const GL_UNPACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hexadecimal);
pub const GL_UNPACK_IMAGE_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hexadecimal);
pub const GL_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hexadecimal);
pub const GL_TEXTURE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hexadecimal);
pub const GL_TEXTURE_3D_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hexadecimal);
pub const GL_PROXY_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hexadecimal);
pub const GL_PROXY_TEXTURE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hexadecimal);
pub const GL_TEXTURE_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hexadecimal);
pub const GL_TEXTURE_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hexadecimal);
pub const GL_TEXTURE_WRAP_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hexadecimal);
pub const GL_TEXTURE_WRAP_R_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hexadecimal);
pub const GL_TEXTURE_WRAP_R_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hexadecimal);
pub const GL_MAX_3D_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hexadecimal);
pub const GL_MAX_3D_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hexadecimal);
pub const GL_MAX_3D_TEXTURE_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hexadecimal);
pub const GL_VERTEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hexadecimal);
pub const GL_VERTEX_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hexadecimal);
pub const GL_VERTEX_ARRAY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hexadecimal);
pub const GL_NORMAL_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hexadecimal);
pub const GL_NORMAL_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hexadecimal);
pub const GL_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hexadecimal);
pub const GL_COLOR_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hexadecimal);
pub const GL_INDEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hexadecimal);
pub const GL_INDEX_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hexadecimal);
pub const GL_VERTEX_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hexadecimal);
pub const GL_VERTEX_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hexadecimal);
pub const GL_VERTEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hexadecimal);
pub const GL_VERTEX_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hexadecimal);
pub const GL_VERTEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hexadecimal);
pub const GL_VERTEX_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hexadecimal);
pub const GL_VERTEX_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807D, .hexadecimal);
pub const GL_NORMAL_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hexadecimal);
pub const GL_NORMAL_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hexadecimal);
pub const GL_NORMAL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hexadecimal);
pub const GL_NORMAL_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hexadecimal);
pub const GL_NORMAL_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8080, .hexadecimal);
pub const GL_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hexadecimal);
pub const GL_COLOR_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hexadecimal);
pub const GL_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hexadecimal);
pub const GL_COLOR_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hexadecimal);
pub const GL_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hexadecimal);
pub const GL_COLOR_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hexadecimal);
pub const GL_COLOR_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8084, .hexadecimal);
pub const GL_INDEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hexadecimal);
pub const GL_INDEX_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hexadecimal);
pub const GL_INDEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hexadecimal);
pub const GL_INDEX_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hexadecimal);
pub const GL_INDEX_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8087, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808B, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808D, .hexadecimal);
pub const GL_VERTEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hexadecimal);
pub const GL_VERTEX_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hexadecimal);
pub const GL_NORMAL_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hexadecimal);
pub const GL_NORMAL_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hexadecimal);
pub const GL_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hexadecimal);
pub const GL_COLOR_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hexadecimal);
pub const GL_INDEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hexadecimal);
pub const GL_INDEX_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hexadecimal);
pub const GL_INTERLACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8094, .hexadecimal);
pub const GL_DETAIL_TEXTURE_2D_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8095, .hexadecimal);
pub const GL_DETAIL_TEXTURE_2D_BINDING_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8096, .hexadecimal);
pub const GL_LINEAR_DETAIL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8097, .hexadecimal);
pub const GL_LINEAR_DETAIL_ALPHA_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8098, .hexadecimal);
pub const GL_LINEAR_DETAIL_COLOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8099, .hexadecimal);
pub const GL_DETAIL_TEXTURE_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809A, .hexadecimal);
pub const GL_DETAIL_TEXTURE_MODE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809B, .hexadecimal);
pub const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809C, .hexadecimal);
pub const GL_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_MULTISAMPLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_MULTISAMPLE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_SAMPLE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_SAMPLE_MASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_1PASS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A1, .hexadecimal);
pub const GL_1PASS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A1, .hexadecimal);
pub const GL_2PASS_0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A2, .hexadecimal);
pub const GL_2PASS_0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A2, .hexadecimal);
pub const GL_2PASS_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A3, .hexadecimal);
pub const GL_2PASS_1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A3, .hexadecimal);
pub const GL_4PASS_0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A4, .hexadecimal);
pub const GL_4PASS_0_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A4, .hexadecimal);
pub const GL_4PASS_1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A5, .hexadecimal);
pub const GL_4PASS_1_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A5, .hexadecimal);
pub const GL_4PASS_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A6, .hexadecimal);
pub const GL_4PASS_2_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A6, .hexadecimal);
pub const GL_4PASS_3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A7, .hexadecimal);
pub const GL_4PASS_3_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A7, .hexadecimal);
pub const GL_SAMPLE_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_INVERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_INVERT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_SAMPLE_MASK_INVERT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_SAMPLE_MASK_INVERT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_SAMPLE_PATTERN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AC, .hexadecimal);
pub const GL_SAMPLE_PATTERN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AC, .hexadecimal);
pub const GL_LINEAR_SHARPEN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AD, .hexadecimal);
pub const GL_LINEAR_SHARPEN_ALPHA_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AE, .hexadecimal);
pub const GL_LINEAR_SHARPEN_COLOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AF, .hexadecimal);
pub const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B0, .hexadecimal);
pub const GL_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B1, .hexadecimal);
pub const GL_COLOR_MATRIX_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B1, .hexadecimal);
pub const GL_COLOR_MATRIX_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B2, .hexadecimal);
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B2, .hexadecimal);
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B3, .hexadecimal);
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B3, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B4, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B4, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B5, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B5, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B6, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B6, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B7, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B7, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B8, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B8, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B9, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B9, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BA, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BA, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BB, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BB, .hexadecimal);
pub const GL_TEXTURE_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BC, .hexadecimal);
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BD, .hexadecimal);
pub const GL_TEXTURE_ENV_BIAS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BE, .hexadecimal);
pub const GL_SHADOW_AMBIENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BF, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BF, .hexadecimal);
pub const GL_BLEND_DST_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hexadecimal);
pub const GL_BLEND_DST_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hexadecimal);
pub const GL_BLEND_DST_RGB_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hexadecimal);
pub const GL_BLEND_SRC_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hexadecimal);
pub const GL_BLEND_SRC_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hexadecimal);
pub const GL_BLEND_SRC_RGB_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hexadecimal);
pub const GL_BLEND_DST_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hexadecimal);
pub const GL_BLEND_DST_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hexadecimal);
pub const GL_BLEND_DST_ALPHA_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hexadecimal);
pub const GL_BLEND_SRC_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hexadecimal);
pub const GL_BLEND_SRC_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hexadecimal);
pub const GL_BLEND_SRC_ALPHA_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hexadecimal);
pub const GL_422_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CC, .hexadecimal);
pub const GL_422_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CD, .hexadecimal);
pub const GL_422_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CE, .hexadecimal);
pub const GL_422_REV_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CF, .hexadecimal);
pub const GL_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hexadecimal);
pub const GL_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hexadecimal);
pub const GL_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hexadecimal);
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hexadecimal);
pub const GL_PROXY_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hexadecimal);
pub const GL_PROXY_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hexadecimal);
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hexadecimal);
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hexadecimal);
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hexadecimal);
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hexadecimal);
pub const GL_COLOR_TABLE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D6, .hexadecimal);
pub const GL_COLOR_TABLE_SCALE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D6, .hexadecimal);
pub const GL_COLOR_TABLE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D7, .hexadecimal);
pub const GL_COLOR_TABLE_BIAS_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D7, .hexadecimal);
pub const GL_COLOR_TABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hexadecimal);
pub const GL_COLOR_TABLE_FORMAT_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hexadecimal);
pub const GL_COLOR_TABLE_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hexadecimal);
pub const GL_COLOR_TABLE_WIDTH_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hexadecimal);
pub const GL_COLOR_TABLE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hexadecimal);
pub const GL_COLOR_TABLE_RED_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hexadecimal);
pub const GL_COLOR_TABLE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hexadecimal);
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hexadecimal);
pub const GL_COLOR_TABLE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hexadecimal);
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hexadecimal);
pub const GL_COLOR_TABLE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hexadecimal);
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hexadecimal);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hexadecimal);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hexadecimal);
pub const GL_COLOR_TABLE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hexadecimal);
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hexadecimal);
pub const GL_BGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hexadecimal);
pub const GL_BGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hexadecimal);
pub const GL_BGRA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hexadecimal);
pub const GL_BGRA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hexadecimal);
pub const GL_BGRA_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hexadecimal);
pub const GL_COLOR_INDEX1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E2, .hexadecimal);
pub const GL_COLOR_INDEX2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E3, .hexadecimal);
pub const GL_COLOR_INDEX4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E4, .hexadecimal);
pub const GL_COLOR_INDEX8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E5, .hexadecimal);
pub const GL_COLOR_INDEX12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E6, .hexadecimal);
pub const GL_COLOR_INDEX16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E7, .hexadecimal);
pub const GL_MAX_ELEMENTS_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hexadecimal);
pub const GL_MAX_ELEMENTS_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hexadecimal);
pub const GL_MAX_ELEMENTS_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hexadecimal);
pub const GL_MAX_ELEMENTS_INDICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hexadecimal);
pub const GL_PHONG_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EA, .hexadecimal);
pub const GL_PHONG_HINT_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EB, .hexadecimal);
pub const GL_FOG_SPECULAR_TEXTURE_WIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EC, .hexadecimal);
pub const GL_TEXTURE_INDEX_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80ED, .hexadecimal);
pub const GL_PARAMETER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hexadecimal);
pub const GL_PARAMETER_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EE, .hexadecimal);
pub const GL_PARAMETER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hexadecimal);
pub const GL_PARAMETER_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80EF, .hexadecimal);
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80F0, .hexadecimal);
pub const GL_DUAL_ALPHA4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8110, .hexadecimal);
pub const GL_DUAL_ALPHA8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8111, .hexadecimal);
pub const GL_DUAL_ALPHA12_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8112, .hexadecimal);
pub const GL_DUAL_ALPHA16_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8113, .hexadecimal);
pub const GL_DUAL_LUMINANCE4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8114, .hexadecimal);
pub const GL_DUAL_LUMINANCE8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8115, .hexadecimal);
pub const GL_DUAL_LUMINANCE12_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8116, .hexadecimal);
pub const GL_DUAL_LUMINANCE16_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8117, .hexadecimal);
pub const GL_DUAL_INTENSITY4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8118, .hexadecimal);
pub const GL_DUAL_INTENSITY8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8119, .hexadecimal);
pub const GL_DUAL_INTENSITY12_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811A, .hexadecimal);
pub const GL_DUAL_INTENSITY16_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811B, .hexadecimal);
pub const GL_DUAL_LUMINANCE_ALPHA4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811C, .hexadecimal);
pub const GL_DUAL_LUMINANCE_ALPHA8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811D, .hexadecimal);
pub const GL_QUAD_ALPHA4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811E, .hexadecimal);
pub const GL_QUAD_ALPHA8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x811F, .hexadecimal);
pub const GL_QUAD_LUMINANCE4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8120, .hexadecimal);
pub const GL_QUAD_LUMINANCE8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8121, .hexadecimal);
pub const GL_QUAD_INTENSITY4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8122, .hexadecimal);
pub const GL_QUAD_INTENSITY8_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8123, .hexadecimal);
pub const GL_DUAL_TEXTURE_SELECT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8124, .hexadecimal);
pub const GL_QUAD_TEXTURE_SELECT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8125, .hexadecimal);
pub const GL_POINT_SIZE_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_MIN_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_MIN_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_SIZE_MAX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_SIZE_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_SIZE_MAX_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_DISTANCE_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const GL_DISTANCE_ATTENUATION_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const GL_POINT_DISTANCE_ATTENUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const GL_POINT_DISTANCE_ATTENUATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const GL_FOG_FUNC_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812A, .hexadecimal);
pub const GL_FOG_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812B, .hexadecimal);
pub const GL_MAX_FOG_FUNC_POINTS_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812C, .hexadecimal);
pub const GL_CLAMP_TO_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_CLAMP_TO_BORDER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_CLAMP_TO_BORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_CLAMP_TO_BORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_CLAMP_TO_BORDER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_CLAMP_TO_BORDER_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812E, .hexadecimal);
pub const GL_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hexadecimal);
pub const GL_CLAMP_TO_EDGE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hexadecimal);
pub const GL_PACK_SKIP_VOLUMES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8130, .hexadecimal);
pub const GL_PACK_IMAGE_DEPTH_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8131, .hexadecimal);
pub const GL_UNPACK_SKIP_VOLUMES_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8132, .hexadecimal);
pub const GL_UNPACK_IMAGE_DEPTH_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8133, .hexadecimal);
pub const GL_TEXTURE_4D_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8134, .hexadecimal);
pub const GL_PROXY_TEXTURE_4D_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8135, .hexadecimal);
pub const GL_TEXTURE_4DSIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8136, .hexadecimal);
pub const GL_TEXTURE_WRAP_Q_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8137, .hexadecimal);
pub const GL_MAX_4D_TEXTURE_SIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8138, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8139, .hexadecimal);
pub const GL_TEXTURE_MIN_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hexadecimal);
pub const GL_TEXTURE_MIN_LOD_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hexadecimal);
pub const GL_TEXTURE_MAX_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hexadecimal);
pub const GL_TEXTURE_MAX_LOD_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hexadecimal);
pub const GL_TEXTURE_BASE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hexadecimal);
pub const GL_TEXTURE_BASE_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hexadecimal);
pub const GL_TEXTURE_MAX_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hexadecimal);
pub const GL_TEXTURE_MAX_LEVEL_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hexadecimal);
pub const GL_TEXTURE_MAX_LEVEL_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hexadecimal);
pub const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813E, .hexadecimal);
pub const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813F, .hexadecimal);
pub const GL_PIXEL_TILE_WIDTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8140, .hexadecimal);
pub const GL_PIXEL_TILE_HEIGHT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8141, .hexadecimal);
pub const GL_PIXEL_TILE_GRID_WIDTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8142, .hexadecimal);
pub const GL_PIXEL_TILE_GRID_HEIGHT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8143, .hexadecimal);
pub const GL_PIXEL_TILE_GRID_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8144, .hexadecimal);
pub const GL_PIXEL_TILE_CACHE_SIZE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8145, .hexadecimal);
pub const GL_FILTER4_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8146, .hexadecimal);
pub const GL_TEXTURE_FILTER4_SIZE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8147, .hexadecimal);
pub const GL_SPRITE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8148, .hexadecimal);
pub const GL_SPRITE_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8149, .hexadecimal);
pub const GL_SPRITE_AXIS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814A, .hexadecimal);
pub const GL_SPRITE_TRANSLATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814B, .hexadecimal);
pub const GL_SPRITE_AXIAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814C, .hexadecimal);
pub const GL_SPRITE_OBJECT_ALIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814D, .hexadecimal);
pub const GL_SPRITE_EYE_ALIGNED_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814E, .hexadecimal);
pub const GL_TEXTURE_4D_BINDING_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x814F, .hexadecimal);
pub const GL_IGNORE_BORDER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8150, .hexadecimal);
pub const GL_CONSTANT_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8151, .hexadecimal);
pub const GL_CONSTANT_BORDER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8151, .hexadecimal);
pub const GL_REPLICATE_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8153, .hexadecimal);
pub const GL_REPLICATE_BORDER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8153, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8154, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_COLOR_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8154, .hexadecimal);
pub const GL_IMAGE_SCALE_X_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8155, .hexadecimal);
pub const GL_IMAGE_SCALE_Y_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8156, .hexadecimal);
pub const GL_IMAGE_TRANSLATE_X_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8157, .hexadecimal);
pub const GL_IMAGE_TRANSLATE_Y_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8158, .hexadecimal);
pub const GL_IMAGE_ROTATE_ANGLE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8159, .hexadecimal);
pub const GL_IMAGE_ROTATE_ORIGIN_X_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815A, .hexadecimal);
pub const GL_IMAGE_ROTATE_ORIGIN_Y_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815B, .hexadecimal);
pub const GL_IMAGE_MAG_FILTER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815C, .hexadecimal);
pub const GL_IMAGE_MIN_FILTER_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815D, .hexadecimal);
pub const GL_IMAGE_CUBIC_WEIGHT_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815E, .hexadecimal);
pub const GL_CUBIC_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x815F, .hexadecimal);
pub const GL_AVERAGE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8160, .hexadecimal);
pub const GL_IMAGE_TRANSFORM_2D_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8161, .hexadecimal);
pub const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8162, .hexadecimal);
pub const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8163, .hexadecimal);
pub const GL_OCCLUSION_TEST_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8165, .hexadecimal);
pub const GL_OCCLUSION_TEST_RESULT_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8166, .hexadecimal);
pub const GL_TEXTURE_LIGHTING_MODE_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8167, .hexadecimal);
pub const GL_TEXTURE_POST_SPECULAR_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8168, .hexadecimal);
pub const GL_TEXTURE_PRE_SPECULAR_HP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8169, .hexadecimal);
pub const GL_LINEAR_CLIPMAP_LINEAR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8170, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_CENTER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8171, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_FRAME_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8172, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8173, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8174, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8175, .hexadecimal);
pub const GL_TEXTURE_CLIPMAP_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8176, .hexadecimal);
pub const GL_MAX_CLIPMAP_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8177, .hexadecimal);
pub const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8178, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8179, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817A, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817B, .hexadecimal);
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817C, .hexadecimal);
pub const GL_REFERENCE_PLANE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817D, .hexadecimal);
pub const GL_REFERENCE_PLANE_EQUATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817E, .hexadecimal);
pub const GL_IR_INSTRUMENT1_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x817F, .hexadecimal);
pub const GL_INSTRUMENT_BUFFER_POINTER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8180, .hexadecimal);
pub const GL_INSTRUMENT_MEASUREMENTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8181, .hexadecimal);
pub const GL_LIST_PRIORITY_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8182, .hexadecimal);
pub const GL_CALLIGRAPHIC_FRAGMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8183, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8184, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8185, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8186, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8187, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8188, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8189, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818A, .hexadecimal);
pub const GL_FRAMEZOOM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818B, .hexadecimal);
pub const GL_FRAMEZOOM_FACTOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818C, .hexadecimal);
pub const GL_MAX_FRAMEZOOM_FACTOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818D, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS_S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818E, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS_T_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x818F, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8190, .hexadecimal);
pub const GL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hexadecimal);
pub const GL_GENERATE_MIPMAP_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hexadecimal);
pub const GL_GENERATE_MIPMAP_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hexadecimal);
pub const GL_GENERATE_MIPMAP_HINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hexadecimal);
pub const GL_GEOMETRY_DEFORMATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8194, .hexadecimal);
pub const GL_TEXTURE_DEFORMATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8195, .hexadecimal);
pub const GL_DEFORMATIONS_MASK_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8196, .hexadecimal);
pub const GL_MAX_DEFORMATION_ORDER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8197, .hexadecimal);
pub const GL_FOG_OFFSET_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8198, .hexadecimal);
pub const GL_FOG_OFFSET_VALUE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8199, .hexadecimal);
pub const GL_TEXTURE_COMPARE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819A, .hexadecimal);
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819B, .hexadecimal);
pub const GL_TEXTURE_LEQUAL_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819C, .hexadecimal);
pub const GL_TEXTURE_GEQUAL_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x819D, .hexadecimal);
pub const GL_DEPTH_COMPONENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT16_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT16_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT24_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT24_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GL_DEPTH_COMPONENT32_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GL_DEPTH_COMPONENT32_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GL_DEPTH_COMPONENT32_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A8, .hexadecimal);
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A9, .hexadecimal);
pub const GL_CULL_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AA, .hexadecimal);
pub const GL_CULL_VERTEX_EYE_POSITION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AB, .hexadecimal);
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AC, .hexadecimal);
pub const GL_IUI_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AD, .hexadecimal);
pub const GL_IUI_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AE, .hexadecimal);
pub const GL_IUI_N3F_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81AF, .hexadecimal);
pub const GL_IUI_N3F_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B0, .hexadecimal);
pub const GL_T2F_IUI_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B1, .hexadecimal);
pub const GL_T2F_IUI_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B2, .hexadecimal);
pub const GL_T2F_IUI_N3F_V2F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B3, .hexadecimal);
pub const GL_T2F_IUI_N3F_V3F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B4, .hexadecimal);
pub const GL_INDEX_TEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B5, .hexadecimal);
pub const GL_INDEX_TEST_FUNC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B6, .hexadecimal);
pub const GL_INDEX_TEST_REF_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B7, .hexadecimal);
pub const GL_INDEX_MATERIAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B8, .hexadecimal);
pub const GL_INDEX_MATERIAL_PARAMETER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81B9, .hexadecimal);
pub const GL_INDEX_MATERIAL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BA, .hexadecimal);
pub const GL_YCRCB_422_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BB, .hexadecimal);
pub const GL_YCRCB_444_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81BC, .hexadecimal);
pub const GL_WRAP_BORDER_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D4, .hexadecimal);
pub const GL_UNPACK_CONSTANT_DATA_SUNX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D5, .hexadecimal);
pub const GL_TEXTURE_CONSTANT_DATA_SUNX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D6, .hexadecimal);
pub const GL_TRIANGLE_LIST_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D7, .hexadecimal);
pub const GL_REPLACEMENT_CODE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D8, .hexadecimal);
pub const GL_GLOBAL_ALPHA_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81D9, .hexadecimal);
pub const GL_GLOBAL_ALPHA_FACTOR_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81DA, .hexadecimal);
pub const GL_TEXTURE_COLOR_WRITEMASK_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81EF, .hexadecimal);
pub const GL_EYE_DISTANCE_TO_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F0, .hexadecimal);
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F1, .hexadecimal);
pub const GL_EYE_DISTANCE_TO_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F2, .hexadecimal);
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F3, .hexadecimal);
pub const GL_EYE_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F4, .hexadecimal);
pub const GL_OBJECT_POINT_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F5, .hexadecimal);
pub const GL_EYE_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F6, .hexadecimal);
pub const GL_OBJECT_LINE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F7, .hexadecimal);
pub const GL_LIGHT_MODEL_COLOR_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hexadecimal);
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hexadecimal);
pub const GL_SINGLE_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hexadecimal);
pub const GL_SINGLE_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hexadecimal);
pub const GL_SEPARATE_SPECULAR_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hexadecimal);
pub const GL_SEPARATE_SPECULAR_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hexadecimal);
pub const GL_SHARED_TEXTURE_PALETTE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FB, .hexadecimal);
pub const GL_TEXT_FRAGMENT_SHADER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8200, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8210, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8210, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8211, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8211, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8212, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8213, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8214, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8215, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8216, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8217, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8218, .hexadecimal);
pub const GL_FRAMEBUFFER_UNDEFINED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8219, .hexadecimal);
pub const GL_FRAMEBUFFER_UNDEFINED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8219, .hexadecimal);
pub const GL_DEPTH_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821A, .hexadecimal);
pub const GL_MAJOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821B, .hexadecimal);
pub const GL_MINOR_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821C, .hexadecimal);
pub const GL_NUM_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821D, .hexadecimal);
pub const GL_CONTEXT_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821E, .hexadecimal);
pub const GL_BUFFER_IMMUTABLE_STORAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821F, .hexadecimal);
pub const GL_BUFFER_IMMUTABLE_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821F, .hexadecimal);
pub const GL_BUFFER_STORAGE_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8220, .hexadecimal);
pub const GL_BUFFER_STORAGE_FLAGS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8220, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hexadecimal);
pub const GL_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8222, .hexadecimal);
pub const GL_COMPRESSED_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8225, .hexadecimal);
pub const GL_COMPRESSED_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8226, .hexadecimal);
pub const GL_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8227, .hexadecimal);
pub const GL_RG_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8227, .hexadecimal);
pub const GL_RG_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8228, .hexadecimal);
pub const GL_R8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hexadecimal);
pub const GL_R8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hexadecimal);
pub const GL_R16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822A, .hexadecimal);
pub const GL_R16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822A, .hexadecimal);
pub const GL_RG8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hexadecimal);
pub const GL_RG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hexadecimal);
pub const GL_RG16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822C, .hexadecimal);
pub const GL_RG16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822C, .hexadecimal);
pub const GL_R16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hexadecimal);
pub const GL_R16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hexadecimal);
pub const GL_R32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hexadecimal);
pub const GL_R32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hexadecimal);
pub const GL_RG16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hexadecimal);
pub const GL_RG16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hexadecimal);
pub const GL_RG32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hexadecimal);
pub const GL_RG32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hexadecimal);
pub const GL_R8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8231, .hexadecimal);
pub const GL_R8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8232, .hexadecimal);
pub const GL_R16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8233, .hexadecimal);
pub const GL_R16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8234, .hexadecimal);
pub const GL_R32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8235, .hexadecimal);
pub const GL_R32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8236, .hexadecimal);
pub const GL_RG8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8237, .hexadecimal);
pub const GL_RG8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8238, .hexadecimal);
pub const GL_RG16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8239, .hexadecimal);
pub const GL_RG16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823A, .hexadecimal);
pub const GL_RG32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823B, .hexadecimal);
pub const GL_RG32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x823C, .hexadecimal);
pub const GL_SYNC_CL_EVENT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8240, .hexadecimal);
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8241, .hexadecimal);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hexadecimal);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hexadecimal);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hexadecimal);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hexadecimal);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hexadecimal);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hexadecimal);
pub const GL_DEBUG_CALLBACK_FUNCTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hexadecimal);
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hexadecimal);
pub const GL_DEBUG_CALLBACK_FUNCTION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hexadecimal);
pub const GL_DEBUG_CALLBACK_USER_PARAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hexadecimal);
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hexadecimal);
pub const GL_DEBUG_CALLBACK_USER_PARAM_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hexadecimal);
pub const GL_DEBUG_SOURCE_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hexadecimal);
pub const GL_DEBUG_SOURCE_API_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hexadecimal);
pub const GL_DEBUG_SOURCE_API_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hexadecimal);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hexadecimal);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hexadecimal);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hexadecimal);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hexadecimal);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hexadecimal);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hexadecimal);
pub const GL_DEBUG_SOURCE_THIRD_PARTY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hexadecimal);
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hexadecimal);
pub const GL_DEBUG_SOURCE_THIRD_PARTY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hexadecimal);
pub const GL_DEBUG_SOURCE_APPLICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hexadecimal);
pub const GL_DEBUG_SOURCE_APPLICATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hexadecimal);
pub const GL_DEBUG_SOURCE_APPLICATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hexadecimal);
pub const GL_DEBUG_SOURCE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hexadecimal);
pub const GL_DEBUG_SOURCE_OTHER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hexadecimal);
pub const GL_DEBUG_SOURCE_OTHER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hexadecimal);
pub const GL_DEBUG_TYPE_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hexadecimal);
pub const GL_DEBUG_TYPE_ERROR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hexadecimal);
pub const GL_DEBUG_TYPE_ERROR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hexadecimal);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hexadecimal);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hexadecimal);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hexadecimal);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hexadecimal);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hexadecimal);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hexadecimal);
pub const GL_DEBUG_TYPE_PORTABILITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hexadecimal);
pub const GL_DEBUG_TYPE_PORTABILITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hexadecimal);
pub const GL_DEBUG_TYPE_PORTABILITY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hexadecimal);
pub const GL_DEBUG_TYPE_PERFORMANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hexadecimal);
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hexadecimal);
pub const GL_DEBUG_TYPE_PERFORMANCE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hexadecimal);
pub const GL_DEBUG_TYPE_OTHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hexadecimal);
pub const GL_DEBUG_TYPE_OTHER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hexadecimal);
pub const GL_DEBUG_TYPE_OTHER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hexadecimal);
pub const GL_LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hexadecimal);
pub const GL_LOSE_CONTEXT_ON_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hexadecimal);
pub const GL_LOSE_CONTEXT_ON_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hexadecimal);
pub const GL_LOSE_CONTEXT_ON_RESET_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hexadecimal);
pub const GL_GUILTY_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hexadecimal);
pub const GL_GUILTY_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hexadecimal);
pub const GL_GUILTY_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hexadecimal);
pub const GL_GUILTY_CONTEXT_RESET_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hexadecimal);
pub const GL_INNOCENT_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hexadecimal);
pub const GL_INNOCENT_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hexadecimal);
pub const GL_INNOCENT_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hexadecimal);
pub const GL_INNOCENT_CONTEXT_RESET_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hexadecimal);
pub const GL_UNKNOWN_CONTEXT_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hexadecimal);
pub const GL_UNKNOWN_CONTEXT_RESET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hexadecimal);
pub const GL_UNKNOWN_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hexadecimal);
pub const GL_UNKNOWN_CONTEXT_RESET_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hexadecimal);
pub const GL_RESET_NOTIFICATION_STRATEGY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hexadecimal);
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hexadecimal);
pub const GL_RESET_NOTIFICATION_STRATEGY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hexadecimal);
pub const GL_RESET_NOTIFICATION_STRATEGY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hexadecimal);
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8257, .hexadecimal);
pub const GL_PROGRAM_SEPARABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8258, .hexadecimal);
pub const GL_PROGRAM_SEPARABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8258, .hexadecimal);
pub const GL_ACTIVE_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8259, .hexadecimal);
pub const GL_PROGRAM_PIPELINE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825A, .hexadecimal);
pub const GL_PROGRAM_PIPELINE_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825A, .hexadecimal);
pub const GL_MAX_VIEWPORTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hexadecimal);
pub const GL_MAX_VIEWPORTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hexadecimal);
pub const GL_MAX_VIEWPORTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hexadecimal);
pub const GL_VIEWPORT_SUBPIXEL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hexadecimal);
pub const GL_VIEWPORT_SUBPIXEL_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hexadecimal);
pub const GL_VIEWPORT_SUBPIXEL_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hexadecimal);
pub const GL_VIEWPORT_SUBPIXEL_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hexadecimal);
pub const GL_VIEWPORT_BOUNDS_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hexadecimal);
pub const GL_VIEWPORT_BOUNDS_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hexadecimal);
pub const GL_VIEWPORT_BOUNDS_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hexadecimal);
pub const GL_VIEWPORT_BOUNDS_RANGE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hexadecimal);
pub const GL_LAYER_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hexadecimal);
pub const GL_LAYER_PROVOKING_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hexadecimal);
pub const GL_LAYER_PROVOKING_VERTEX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hexadecimal);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hexadecimal);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hexadecimal);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hexadecimal);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hexadecimal);
pub const GL_UNDEFINED_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hexadecimal);
pub const GL_UNDEFINED_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hexadecimal);
pub const GL_UNDEFINED_VERTEX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hexadecimal);
pub const GL_NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hexadecimal);
pub const GL_NO_RESET_NOTIFICATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hexadecimal);
pub const GL_NO_RESET_NOTIFICATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hexadecimal);
pub const GL_NO_RESET_NOTIFICATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hexadecimal);
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8262, .hexadecimal);
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8263, .hexadecimal);
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8264, .hexadecimal);
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8265, .hexadecimal);
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8266, .hexadecimal);
pub const GL_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8267, .hexadecimal);
pub const GL_DEBUG_TYPE_MARKER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8268, .hexadecimal);
pub const GL_DEBUG_TYPE_MARKER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8268, .hexadecimal);
pub const GL_DEBUG_TYPE_PUSH_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8269, .hexadecimal);
pub const GL_DEBUG_TYPE_PUSH_GROUP_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8269, .hexadecimal);
pub const GL_DEBUG_TYPE_POP_GROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826A, .hexadecimal);
pub const GL_DEBUG_TYPE_POP_GROUP_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826A, .hexadecimal);
pub const GL_DEBUG_SEVERITY_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826B, .hexadecimal);
pub const GL_DEBUG_SEVERITY_NOTIFICATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826B, .hexadecimal);
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826C, .hexadecimal);
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826C, .hexadecimal);
pub const GL_DEBUG_GROUP_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826D, .hexadecimal);
pub const GL_DEBUG_GROUP_STACK_DEPTH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826D, .hexadecimal);
pub const GL_MAX_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826E, .hexadecimal);
pub const GL_INTERNALFORMAT_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826F, .hexadecimal);
pub const GL_INTERNALFORMAT_PREFERRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8270, .hexadecimal);
pub const GL_INTERNALFORMAT_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8271, .hexadecimal);
pub const GL_INTERNALFORMAT_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8272, .hexadecimal);
pub const GL_INTERNALFORMAT_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8273, .hexadecimal);
pub const GL_INTERNALFORMAT_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8274, .hexadecimal);
pub const GL_INTERNALFORMAT_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8275, .hexadecimal);
pub const GL_INTERNALFORMAT_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8276, .hexadecimal);
pub const GL_INTERNALFORMAT_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8277, .hexadecimal);
pub const GL_INTERNALFORMAT_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8278, .hexadecimal);
pub const GL_INTERNALFORMAT_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8279, .hexadecimal);
pub const GL_INTERNALFORMAT_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827A, .hexadecimal);
pub const GL_INTERNALFORMAT_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827B, .hexadecimal);
pub const GL_INTERNALFORMAT_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827C, .hexadecimal);
pub const GL_INTERNALFORMAT_STENCIL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827D, .hexadecimal);
pub const GL_MAX_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827E, .hexadecimal);
pub const GL_MAX_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x827F, .hexadecimal);
pub const GL_MAX_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8280, .hexadecimal);
pub const GL_MAX_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8281, .hexadecimal);
pub const GL_MAX_COMBINED_DIMENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8282, .hexadecimal);
pub const GL_COLOR_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8283, .hexadecimal);
pub const GL_DEPTH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8284, .hexadecimal);
pub const GL_STENCIL_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8285, .hexadecimal);
pub const GL_COLOR_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8286, .hexadecimal);
pub const GL_DEPTH_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8287, .hexadecimal);
pub const GL_STENCIL_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8288, .hexadecimal);
pub const GL_FRAMEBUFFER_RENDERABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8289, .hexadecimal);
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828A, .hexadecimal);
pub const GL_FRAMEBUFFER_BLEND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828B, .hexadecimal);
pub const GL_READ_PIXELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828C, .hexadecimal);
pub const GL_READ_PIXELS_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828D, .hexadecimal);
pub const GL_READ_PIXELS_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828E, .hexadecimal);
pub const GL_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828F, .hexadecimal);
pub const GL_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8290, .hexadecimal);
pub const GL_GET_TEXTURE_IMAGE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8291, .hexadecimal);
pub const GL_GET_TEXTURE_IMAGE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8292, .hexadecimal);
pub const GL_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8293, .hexadecimal);
pub const GL_MANUAL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8294, .hexadecimal);
pub const GL_AUTO_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8295, .hexadecimal);
pub const GL_COLOR_ENCODING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8296, .hexadecimal);
pub const GL_SRGB_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8297, .hexadecimal);
pub const GL_SRGB_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8298, .hexadecimal);
pub const GL_SRGB_DECODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8299, .hexadecimal);
pub const GL_FILTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829A, .hexadecimal);
pub const GL_VERTEX_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829B, .hexadecimal);
pub const GL_TESS_CONTROL_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829C, .hexadecimal);
pub const GL_TESS_EVALUATION_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829D, .hexadecimal);
pub const GL_GEOMETRY_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829E, .hexadecimal);
pub const GL_FRAGMENT_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x829F, .hexadecimal);
pub const GL_COMPUTE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A0, .hexadecimal);
pub const GL_TEXTURE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A1, .hexadecimal);
pub const GL_TEXTURE_GATHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A2, .hexadecimal);
pub const GL_TEXTURE_GATHER_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A3, .hexadecimal);
pub const GL_SHADER_IMAGE_LOAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A4, .hexadecimal);
pub const GL_SHADER_IMAGE_STORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A5, .hexadecimal);
pub const GL_SHADER_IMAGE_ATOMIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A6, .hexadecimal);
pub const GL_IMAGE_TEXEL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A7, .hexadecimal);
pub const GL_IMAGE_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A8, .hexadecimal);
pub const GL_IMAGE_PIXEL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82A9, .hexadecimal);
pub const GL_IMAGE_PIXEL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AA, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AC, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AD, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AE, .hexadecimal);
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82AF, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B1, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B2, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B3, .hexadecimal);
pub const GL_CLEAR_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B4, .hexadecimal);
pub const GL_TEXTURE_VIEW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B5, .hexadecimal);
pub const GL_VIEW_COMPATIBILITY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B6, .hexadecimal);
pub const GL_FULL_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B7, .hexadecimal);
pub const GL_CAVEAT_SUPPORT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B8, .hexadecimal);
pub const GL_IMAGE_CLASS_4_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82B9, .hexadecimal);
pub const GL_IMAGE_CLASS_2_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BA, .hexadecimal);
pub const GL_IMAGE_CLASS_1_X_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BB, .hexadecimal);
pub const GL_IMAGE_CLASS_4_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BC, .hexadecimal);
pub const GL_IMAGE_CLASS_2_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BD, .hexadecimal);
pub const GL_IMAGE_CLASS_1_X_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BE, .hexadecimal);
pub const GL_IMAGE_CLASS_4_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82BF, .hexadecimal);
pub const GL_IMAGE_CLASS_2_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C0, .hexadecimal);
pub const GL_IMAGE_CLASS_1_X_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C1, .hexadecimal);
pub const GL_IMAGE_CLASS_11_11_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C2, .hexadecimal);
pub const GL_IMAGE_CLASS_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C3, .hexadecimal);
pub const GL_VIEW_CLASS_128_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C4, .hexadecimal);
pub const GL_VIEW_CLASS_96_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C5, .hexadecimal);
pub const GL_VIEW_CLASS_64_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C6, .hexadecimal);
pub const GL_VIEW_CLASS_48_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C7, .hexadecimal);
pub const GL_VIEW_CLASS_32_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C8, .hexadecimal);
pub const GL_VIEW_CLASS_24_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82C9, .hexadecimal);
pub const GL_VIEW_CLASS_16_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CA, .hexadecimal);
pub const GL_VIEW_CLASS_8_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CB, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CC, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CD, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CE, .hexadecimal);
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82CF, .hexadecimal);
pub const GL_VIEW_CLASS_RGTC1_RED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D0, .hexadecimal);
pub const GL_VIEW_CLASS_RGTC2_RG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D1, .hexadecimal);
pub const GL_VIEW_CLASS_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D2, .hexadecimal);
pub const GL_VIEW_CLASS_BPTC_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D3, .hexadecimal);
pub const GL_VERTEX_ATTRIB_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D4, .hexadecimal);
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D5, .hexadecimal);
pub const GL_VERTEX_BINDING_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D6, .hexadecimal);
pub const GL_VERTEX_BINDING_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D7, .hexadecimal);
pub const GL_VERTEX_BINDING_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D8, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82D9, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DA, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LEVELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LEVELS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hexadecimal);
pub const GL_TEXTURE_VIEW_MIN_LAYER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hexadecimal);
pub const GL_TEXTURE_VIEW_NUM_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hexadecimal);
pub const GL_TEXTURE_IMMUTABLE_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DF, .hexadecimal);
pub const GL_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E0, .hexadecimal);
pub const GL_BUFFER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E0, .hexadecimal);
pub const GL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E1, .hexadecimal);
pub const GL_SHADER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E1, .hexadecimal);
pub const GL_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E2, .hexadecimal);
pub const GL_PROGRAM_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E2, .hexadecimal);
pub const GL_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E3, .hexadecimal);
pub const GL_QUERY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E3, .hexadecimal);
pub const GL_PROGRAM_PIPELINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E4, .hexadecimal);
pub const GL_PROGRAM_PIPELINE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E4, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIB_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E5, .hexadecimal);
pub const GL_SAMPLER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E6, .hexadecimal);
pub const GL_SAMPLER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E6, .hexadecimal);
pub const GL_DISPLAY_LIST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E7, .hexadecimal);
pub const GL_MAX_LABEL_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E8, .hexadecimal);
pub const GL_MAX_LABEL_LENGTH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E8, .hexadecimal);
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E9, .hexadecimal);
pub const GL_QUERY_TARGET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EA, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EC, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82ED, .hexadecimal);
pub const GL_VERTICES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hexadecimal);
pub const GL_VERTICES_SUBMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EE, .hexadecimal);
pub const GL_PRIMITIVES_SUBMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hexadecimal);
pub const GL_PRIMITIVES_SUBMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82EF, .hexadecimal);
pub const GL_VERTEX_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hexadecimal);
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F0, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER_PATCHES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F1, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F2, .hexadecimal);
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hexadecimal);
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F3, .hexadecimal);
pub const GL_FRAGMENT_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hexadecimal);
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F4, .hexadecimal);
pub const GL_COMPUTE_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hexadecimal);
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F5, .hexadecimal);
pub const GL_CLIPPING_INPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hexadecimal);
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F6, .hexadecimal);
pub const GL_CLIPPING_OUTPUT_PRIMITIVES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hexadecimal);
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F7, .hexadecimal);
pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F8, .hexadecimal);
pub const GL_MAX_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F9, .hexadecimal);
pub const GL_MAX_CULL_DISTANCES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F9, .hexadecimal);
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FA, .hexadecimal);
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FA, .hexadecimal);
pub const GL_CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FB, .hexadecimal);
pub const GL_CONTEXT_RELEASE_BEHAVIOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FB, .hexadecimal);
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FC, .hexadecimal);
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FC, .hexadecimal);
pub const GL_ROBUST_GPU_TIMEOUT_MS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FD, .hexadecimal);
pub const GL_DEPTH_PASS_INSTRUMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8310, .hexadecimal);
pub const GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8311, .hexadecimal);
pub const GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8312, .hexadecimal);
pub const GL_FRAGMENTS_INSTRUMENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8313, .hexadecimal);
pub const GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8314, .hexadecimal);
pub const GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8315, .hexadecimal);
pub const GL_CONVOLUTION_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8316, .hexadecimal);
pub const GL_YCRCB_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8318, .hexadecimal);
pub const GL_YCRCBA_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8319, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_SIZE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831A, .hexadecimal);
pub const GL_PACK_MAX_COMPRESSED_SIZE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831B, .hexadecimal);
pub const GL_PACK_COMPRESSED_SIZE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831C, .hexadecimal);
pub const GL_SLIM8U_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831D, .hexadecimal);
pub const GL_SLIM10U_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831E, .hexadecimal);
pub const GL_SLIM12S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x831F, .hexadecimal);
pub const GL_ALPHA_MIN_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8320, .hexadecimal);
pub const GL_ALPHA_MAX_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8321, .hexadecimal);
pub const GL_SCALEBIAS_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8322, .hexadecimal);
pub const GL_ASYNC_MARKER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8329, .hexadecimal);
pub const GL_PIXEL_TEX_GEN_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832B, .hexadecimal);
pub const GL_ASYNC_HISTOGRAM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832C, .hexadecimal);
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x832D, .hexadecimal);
pub const GL_PIXEL_TRANSFORM_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8330, .hexadecimal);
pub const GL_PIXEL_MAG_FILTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8331, .hexadecimal);
pub const GL_PIXEL_MIN_FILTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8332, .hexadecimal);
pub const GL_PIXEL_CUBIC_WEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8333, .hexadecimal);
pub const GL_CUBIC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8334, .hexadecimal);
pub const GL_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8335, .hexadecimal);
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8336, .hexadecimal);
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8337, .hexadecimal);
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8338, .hexadecimal);
pub const GL_FRAGMENT_MATERIAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8349, .hexadecimal);
pub const GL_FRAGMENT_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834A, .hexadecimal);
pub const GL_FRAGMENT_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834C, .hexadecimal);
pub const GL_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834D, .hexadecimal);
pub const GL_SHADOW_ATTENUATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834E, .hexadecimal);
pub const GL_TEXTURE_APPLICATION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x834F, .hexadecimal);
pub const GL_TEXTURE_LIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8350, .hexadecimal);
pub const GL_TEXTURE_MATERIAL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8351, .hexadecimal);
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8352, .hexadecimal);
pub const GL_PIXEL_TEXTURE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8353, .hexadecimal);
pub const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8354, .hexadecimal);
pub const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8355, .hexadecimal);
pub const GL_PIXEL_GROUP_COLOR_SGIS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8356, .hexadecimal);
pub const GL_LINE_QUALITY_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835B, .hexadecimal);
pub const GL_ASYNC_TEX_IMAGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835C, .hexadecimal);
pub const GL_ASYNC_DRAW_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835D, .hexadecimal);
pub const GL_ASYNC_READ_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835E, .hexadecimal);
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x835F, .hexadecimal);
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8360, .hexadecimal);
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8361, .hexadecimal);
pub const GL_UNSIGNED_BYTE_2_3_3_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8362, .hexadecimal);
pub const GL_UNSIGNED_BYTE_2_3_3_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8362, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_6_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8363, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_6_5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8363, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_6_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8364, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_6_5_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8364, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hexadecimal);
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hexadecimal);
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8367, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8367, .hexadecimal);
pub const GL_UNSIGNED_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hexadecimal);
pub const GL_UNSIGNED_INT_2_10_10_10_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hexadecimal);
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8369, .hexadecimal);
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x836A, .hexadecimal);
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x836B, .hexadecimal);
pub const GL_MIRRORED_REPEAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GL_MIRRORED_REPEAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GL_MIRRORED_REPEAT_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GL_MIRRORED_REPEAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GL_RGB_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A0, .hexadecimal);
pub const GL_RGB4_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A1, .hexadecimal);
pub const GL_RGBA_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A2, .hexadecimal);
pub const GL_RGBA4_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A3, .hexadecimal);
pub const GL_RGBA_DXT5_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A4, .hexadecimal);
pub const GL_RGBA4_DXT5_S3TC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83A5, .hexadecimal);
pub const GL_VERTEX_PRECLIP_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83EE, .hexadecimal);
pub const GL_VERTEX_PRECLIP_HINT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83EF, .hexadecimal);
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hexadecimal);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hexadecimal);
pub const GL_PARALLEL_ARRAYS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F4, .hexadecimal);
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F5, .hexadecimal);
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F6, .hexadecimal);
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F7, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F8, .hexadecimal);
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F9, .hexadecimal);
pub const GL_PERFQUERY_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FA, .hexadecimal);
pub const GL_PERFQUERY_WAIT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FB, .hexadecimal);
pub const GL_BLACKHOLE_RENDER_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FC, .hexadecimal);
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FE, .hexadecimal);
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FF, .hexadecimal);
pub const GL_FRAGMENT_LIGHTING_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8400, .hexadecimal);
pub const GL_FRAGMENT_COLOR_MATERIAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8401, .hexadecimal);
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8402, .hexadecimal);
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8403, .hexadecimal);
pub const GL_MAX_FRAGMENT_LIGHTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8404, .hexadecimal);
pub const GL_MAX_ACTIVE_LIGHTS_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8405, .hexadecimal);
pub const GL_CURRENT_RASTER_NORMAL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8406, .hexadecimal);
pub const GL_LIGHT_ENV_MODE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8407, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8408, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8409, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840A, .hexadecimal);
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840B, .hexadecimal);
pub const GL_FRAGMENT_LIGHT0_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840C, .hexadecimal);
pub const GL_FRAGMENT_LIGHT1_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840D, .hexadecimal);
pub const GL_FRAGMENT_LIGHT2_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840E, .hexadecimal);
pub const GL_FRAGMENT_LIGHT3_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x840F, .hexadecimal);
pub const GL_FRAGMENT_LIGHT4_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8410, .hexadecimal);
pub const GL_FRAGMENT_LIGHT5_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8411, .hexadecimal);
pub const GL_FRAGMENT_LIGHT6_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8412, .hexadecimal);
pub const GL_FRAGMENT_LIGHT7_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8413, .hexadecimal);
pub const GL_PACK_RESAMPLE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x842E, .hexadecimal);
pub const GL_UNPACK_RESAMPLE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x842F, .hexadecimal);
pub const GL_RESAMPLE_DECIMATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8430, .hexadecimal);
pub const GL_RESAMPLE_REPLICATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8433, .hexadecimal);
pub const GL_RESAMPLE_ZERO_FILL_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8434, .hexadecimal);
pub const GL_TANGENT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8439, .hexadecimal);
pub const GL_BINORMAL_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843A, .hexadecimal);
pub const GL_CURRENT_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843B, .hexadecimal);
pub const GL_CURRENT_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843C, .hexadecimal);
pub const GL_TANGENT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843E, .hexadecimal);
pub const GL_TANGENT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x843F, .hexadecimal);
pub const GL_BINORMAL_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8440, .hexadecimal);
pub const GL_BINORMAL_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8441, .hexadecimal);
pub const GL_TANGENT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8442, .hexadecimal);
pub const GL_BINORMAL_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8443, .hexadecimal);
pub const GL_MAP1_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8444, .hexadecimal);
pub const GL_MAP2_TANGENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8445, .hexadecimal);
pub const GL_MAP1_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8446, .hexadecimal);
pub const GL_MAP2_BINORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8447, .hexadecimal);
pub const GL_NEAREST_CLIPMAP_NEAREST_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x844D, .hexadecimal);
pub const GL_NEAREST_CLIPMAP_LINEAR_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x844E, .hexadecimal);
pub const GL_LINEAR_CLIPMAP_NEAREST_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x844F, .hexadecimal);
pub const GL_FOG_COORDINATE_SOURCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hexadecimal);
pub const GL_FOG_COORDINATE_SOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hexadecimal);
pub const GL_FOG_COORD_SRC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hexadecimal);
pub const GL_FOG_COORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hexadecimal);
pub const GL_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hexadecimal);
pub const GL_FOG_COORDINATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hexadecimal);
pub const GL_FRAGMENT_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hexadecimal);
pub const GL_FRAGMENT_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hexadecimal);
pub const GL_CURRENT_FOG_COORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hexadecimal);
pub const GL_CURRENT_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hexadecimal);
pub const GL_CURRENT_FOG_COORDINATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hexadecimal);
pub const GL_FOG_COORD_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hexadecimal);
pub const GL_COLOR_SUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hexadecimal);
pub const GL_COLOR_SUM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hexadecimal);
pub const GL_COLOR_SUM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hexadecimal);
pub const GL_CURRENT_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hexadecimal);
pub const GL_CURRENT_SECONDARY_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hexadecimal);
pub const GL_CURRENT_RASTER_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845F, .hexadecimal);
pub const GL_ALIASED_POINT_SIZE_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846D, .hexadecimal);
pub const GL_ALIASED_LINE_WIDTH_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846E, .hexadecimal);
pub const GL_SCREEN_COORDINATES_REND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8490, .hexadecimal);
pub const GL_INVERTED_SCREEN_W_REND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8491, .hexadecimal);
pub const GL_TEXTURE0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hexadecimal);
pub const GL_TEXTURE0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hexadecimal);
pub const GL_TEXTURE1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hexadecimal);
pub const GL_TEXTURE1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hexadecimal);
pub const GL_TEXTURE2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hexadecimal);
pub const GL_TEXTURE2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hexadecimal);
pub const GL_TEXTURE3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hexadecimal);
pub const GL_TEXTURE3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hexadecimal);
pub const GL_TEXTURE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hexadecimal);
pub const GL_TEXTURE4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hexadecimal);
pub const GL_TEXTURE5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hexadecimal);
pub const GL_TEXTURE5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hexadecimal);
pub const GL_TEXTURE6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hexadecimal);
pub const GL_TEXTURE6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hexadecimal);
pub const GL_TEXTURE7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hexadecimal);
pub const GL_TEXTURE7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hexadecimal);
pub const GL_TEXTURE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hexadecimal);
pub const GL_TEXTURE8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hexadecimal);
pub const GL_TEXTURE9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hexadecimal);
pub const GL_TEXTURE9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hexadecimal);
pub const GL_TEXTURE10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hexadecimal);
pub const GL_TEXTURE10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hexadecimal);
pub const GL_TEXTURE11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hexadecimal);
pub const GL_TEXTURE11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hexadecimal);
pub const GL_TEXTURE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hexadecimal);
pub const GL_TEXTURE12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hexadecimal);
pub const GL_TEXTURE13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hexadecimal);
pub const GL_TEXTURE13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hexadecimal);
pub const GL_TEXTURE14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hexadecimal);
pub const GL_TEXTURE14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hexadecimal);
pub const GL_TEXTURE15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hexadecimal);
pub const GL_TEXTURE15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hexadecimal);
pub const GL_TEXTURE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hexadecimal);
pub const GL_TEXTURE16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hexadecimal);
pub const GL_TEXTURE17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hexadecimal);
pub const GL_TEXTURE17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hexadecimal);
pub const GL_TEXTURE18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hexadecimal);
pub const GL_TEXTURE18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hexadecimal);
pub const GL_TEXTURE19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hexadecimal);
pub const GL_TEXTURE19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hexadecimal);
pub const GL_TEXTURE20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hexadecimal);
pub const GL_TEXTURE20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hexadecimal);
pub const GL_TEXTURE21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hexadecimal);
pub const GL_TEXTURE21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hexadecimal);
pub const GL_TEXTURE22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hexadecimal);
pub const GL_TEXTURE22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hexadecimal);
pub const GL_TEXTURE23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hexadecimal);
pub const GL_TEXTURE23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hexadecimal);
pub const GL_TEXTURE24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hexadecimal);
pub const GL_TEXTURE24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hexadecimal);
pub const GL_TEXTURE25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hexadecimal);
pub const GL_TEXTURE25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hexadecimal);
pub const GL_TEXTURE26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hexadecimal);
pub const GL_TEXTURE26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hexadecimal);
pub const GL_TEXTURE27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hexadecimal);
pub const GL_TEXTURE27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hexadecimal);
pub const GL_TEXTURE28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hexadecimal);
pub const GL_TEXTURE28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hexadecimal);
pub const GL_TEXTURE29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hexadecimal);
pub const GL_TEXTURE29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hexadecimal);
pub const GL_TEXTURE30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hexadecimal);
pub const GL_TEXTURE30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hexadecimal);
pub const GL_TEXTURE31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hexadecimal);
pub const GL_TEXTURE31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hexadecimal);
pub const GL_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hexadecimal);
pub const GL_ACTIVE_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hexadecimal);
pub const GL_CLIENT_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hexadecimal);
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hexadecimal);
pub const GL_MAX_TEXTURE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hexadecimal);
pub const GL_MAX_TEXTURE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hexadecimal);
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hexadecimal);
pub const GL_TRANSPOSE_MODELVIEW_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hexadecimal);
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hexadecimal);
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hexadecimal);
pub const GL_TRANSPOSE_PROJECTION_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hexadecimal);
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hexadecimal);
pub const GL_TRANSPOSE_TEXTURE_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hexadecimal);
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hexadecimal);
pub const GL_TRANSPOSE_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hexadecimal);
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hexadecimal);
pub const GL_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hexadecimal);
pub const GL_SUBTRACT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hexadecimal);
pub const GL_MAX_RENDERBUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hexadecimal);
pub const GL_MAX_RENDERBUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hexadecimal);
pub const GL_MAX_RENDERBUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hexadecimal);
pub const GL_COMPRESSED_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hexadecimal);
pub const GL_COMPRESSED_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hexadecimal);
pub const GL_COMPRESSED_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hexadecimal);
pub const GL_COMPRESSED_INTENSITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hexadecimal);
pub const GL_COMPRESSED_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hexadecimal);
pub const GL_COMPRESSED_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hexadecimal);
pub const GL_COMPRESSED_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hexadecimal);
pub const GL_TEXTURE_COMPRESSION_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hexadecimal);
pub const GL_TEXTURE_COMPRESSION_HINT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F0, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F1, .hexadecimal);
pub const GL_ALL_COMPLETED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F2, .hexadecimal);
pub const GL_FENCE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F3, .hexadecimal);
pub const GL_FENCE_CONDITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F4, .hexadecimal);
pub const GL_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const GL_TEXTURE_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const GL_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F5, .hexadecimal);
pub const GL_TEXTURE_BINDING_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const GL_TEXTURE_BINDING_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F6, .hexadecimal);
pub const GL_PROXY_TEXTURE_RECTANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const GL_PROXY_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F7, .hexadecimal);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F8, .hexadecimal);
pub const GL_DEPTH_STENCIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_DEPTH_STENCIL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_DEPTH_STENCIL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_DEPTH_STENCIL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hexadecimal);
pub const GL_MAX_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hexadecimal);
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hexadecimal);
pub const GL_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hexadecimal);
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hexadecimal);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hexadecimal);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hexadecimal);
pub const GL_TEXTURE_FILTER_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hexadecimal);
pub const GL_TEXTURE_FILTER_CONTROL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hexadecimal);
pub const GL_MODELVIEW1_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8502, .hexadecimal);
pub const GL_COMBINE4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8503, .hexadecimal);
pub const GL_MAX_SHININESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8504, .hexadecimal);
pub const GL_MAX_SPOT_EXPONENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8505, .hexadecimal);
pub const GL_MODELVIEW1_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8506, .hexadecimal);
pub const GL_INCR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hexadecimal);
pub const GL_INCR_WRAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hexadecimal);
pub const GL_INCR_WRAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hexadecimal);
pub const GL_DECR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hexadecimal);
pub const GL_DECR_WRAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hexadecimal);
pub const GL_DECR_WRAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hexadecimal);
pub const GL_VERTEX_WEIGHTING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8509, .hexadecimal);
pub const GL_MODELVIEW1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850A, .hexadecimal);
pub const GL_MODELVIEW1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850A, .hexadecimal);
pub const GL_CURRENT_VERTEX_WEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850B, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850C, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850D, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850E, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x850F, .hexadecimal);
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8510, .hexadecimal);
pub const GL_NORMAL_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_NORMAL_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_NORMAL_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_NORMAL_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_NORMAL_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_REFLECTION_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_REFLECTION_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_REFLECTION_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_REFLECTION_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_REFLECTION_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851D, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851D, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851E, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851E, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851F, .hexadecimal);
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851F, .hexadecimal);
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8520, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8521, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8521, .hexadecimal);
pub const GL_REGISTER_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8522, .hexadecimal);
pub const GL_VARIABLE_A_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8523, .hexadecimal);
pub const GL_VARIABLE_B_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8524, .hexadecimal);
pub const GL_VARIABLE_C_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8525, .hexadecimal);
pub const GL_VARIABLE_D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8526, .hexadecimal);
pub const GL_VARIABLE_E_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8527, .hexadecimal);
pub const GL_VARIABLE_F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8528, .hexadecimal);
pub const GL_VARIABLE_G_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8529, .hexadecimal);
pub const GL_CONSTANT_COLOR0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852A, .hexadecimal);
pub const GL_CONSTANT_COLOR1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852B, .hexadecimal);
pub const GL_PRIMARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852C, .hexadecimal);
pub const GL_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852D, .hexadecimal);
pub const GL_SPARE0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852E, .hexadecimal);
pub const GL_SPARE1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x852F, .hexadecimal);
pub const GL_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8530, .hexadecimal);
pub const GL_E_TIMES_F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8531, .hexadecimal);
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8532, .hexadecimal);
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8533, .hexadecimal);
pub const GL_MULTISAMPLE_FILTER_HINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8534, .hexadecimal);
pub const GL_PER_STAGE_CONSTANTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8535, .hexadecimal);
pub const GL_UNSIGNED_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8536, .hexadecimal);
pub const GL_UNSIGNED_INVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8537, .hexadecimal);
pub const GL_EXPAND_NORMAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8538, .hexadecimal);
pub const GL_EXPAND_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8539, .hexadecimal);
pub const GL_HALF_BIAS_NORMAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853A, .hexadecimal);
pub const GL_HALF_BIAS_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853B, .hexadecimal);
pub const GL_SIGNED_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853C, .hexadecimal);
pub const GL_SIGNED_NEGATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853D, .hexadecimal);
pub const GL_SCALE_BY_TWO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853E, .hexadecimal);
pub const GL_SCALE_BY_FOUR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x853F, .hexadecimal);
pub const GL_SCALE_BY_ONE_HALF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8540, .hexadecimal);
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8541, .hexadecimal);
pub const GL_COMBINER_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8542, .hexadecimal);
pub const GL_COMBINER_MAPPING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8543, .hexadecimal);
pub const GL_COMBINER_COMPONENT_USAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8544, .hexadecimal);
pub const GL_COMBINER_AB_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8545, .hexadecimal);
pub const GL_COMBINER_CD_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8546, .hexadecimal);
pub const GL_COMBINER_MUX_SUM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8547, .hexadecimal);
pub const GL_COMBINER_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8548, .hexadecimal);
pub const GL_COMBINER_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8549, .hexadecimal);
pub const GL_COMBINER_AB_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854A, .hexadecimal);
pub const GL_COMBINER_CD_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854B, .hexadecimal);
pub const GL_COMBINER_SUM_OUTPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854C, .hexadecimal);
pub const GL_MAX_GENERAL_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854D, .hexadecimal);
pub const GL_NUM_GENERAL_COMBINERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854E, .hexadecimal);
pub const GL_COLOR_SUM_CLAMP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x854F, .hexadecimal);
pub const GL_COMBINER0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8550, .hexadecimal);
pub const GL_COMBINER1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8551, .hexadecimal);
pub const GL_COMBINER2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8552, .hexadecimal);
pub const GL_COMBINER3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8553, .hexadecimal);
pub const GL_COMBINER4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8554, .hexadecimal);
pub const GL_COMBINER5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8555, .hexadecimal);
pub const GL_COMBINER6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8556, .hexadecimal);
pub const GL_COMBINER7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8557, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8558, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_INDEX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8559, .hexadecimal);
pub const GL_FOG_DISTANCE_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855A, .hexadecimal);
pub const GL_EYE_RADIAL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855B, .hexadecimal);
pub const GL_EYE_PLANE_ABSOLUTE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855C, .hexadecimal);
pub const GL_EMBOSS_LIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855D, .hexadecimal);
pub const GL_EMBOSS_CONSTANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855E, .hexadecimal);
pub const GL_EMBOSS_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x855F, .hexadecimal);
pub const GL_RED_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8560, .hexadecimal);
pub const GL_GREEN_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8561, .hexadecimal);
pub const GL_BLUE_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8562, .hexadecimal);
pub const GL_ALPHA_MIN_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8563, .hexadecimal);
pub const GL_RED_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8564, .hexadecimal);
pub const GL_GREEN_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8565, .hexadecimal);
pub const GL_BLUE_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8566, .hexadecimal);
pub const GL_ALPHA_MAX_CLAMP_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8567, .hexadecimal);
pub const GL_INTERLACE_READ_INGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8568, .hexadecimal);
pub const GL_COMBINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hexadecimal);
pub const GL_COMBINE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hexadecimal);
pub const GL_COMBINE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hexadecimal);
pub const GL_COMBINE_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hexadecimal);
pub const GL_COMBINE_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hexadecimal);
pub const GL_COMBINE_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hexadecimal);
pub const GL_COMBINE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hexadecimal);
pub const GL_COMBINE_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hexadecimal);
pub const GL_COMBINE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hexadecimal);
pub const GL_RGB_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hexadecimal);
pub const GL_RGB_SCALE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hexadecimal);
pub const GL_RGB_SCALE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hexadecimal);
pub const GL_ADD_SIGNED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hexadecimal);
pub const GL_ADD_SIGNED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hexadecimal);
pub const GL_ADD_SIGNED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hexadecimal);
pub const GL_INTERPOLATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hexadecimal);
pub const GL_INTERPOLATE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hexadecimal);
pub const GL_INTERPOLATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hexadecimal);
pub const GL_CONSTANT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const GL_CONSTANT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const GL_CONSTANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const GL_CONSTANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const GL_PRIMARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hexadecimal);
pub const GL_PRIMARY_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hexadecimal);
pub const GL_PRIMARY_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hexadecimal);
pub const GL_PREVIOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hexadecimal);
pub const GL_PREVIOUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hexadecimal);
pub const GL_PREVIOUS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hexadecimal);
pub const GL_SOURCE0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SOURCE0_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SOURCE0_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SRC0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SOURCE1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SOURCE1_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SOURCE1_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SRC1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SOURCE2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SOURCE2_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SOURCE2_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SRC2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SOURCE3_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8583, .hexadecimal);
pub const GL_SOURCE0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SOURCE0_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SOURCE0_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SRC0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SOURCE1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SOURCE1_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SOURCE1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SRC1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SOURCE2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_SOURCE2_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_SOURCE2_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_SRC2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_SOURCE3_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858B, .hexadecimal);
pub const GL_OPERAND0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hexadecimal);
pub const GL_OPERAND0_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hexadecimal);
pub const GL_OPERAND0_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hexadecimal);
pub const GL_OPERAND1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hexadecimal);
pub const GL_OPERAND1_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hexadecimal);
pub const GL_OPERAND1_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hexadecimal);
pub const GL_OPERAND2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hexadecimal);
pub const GL_OPERAND2_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hexadecimal);
pub const GL_OPERAND2_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hexadecimal);
pub const GL_OPERAND3_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8593, .hexadecimal);
pub const GL_OPERAND0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hexadecimal);
pub const GL_OPERAND0_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hexadecimal);
pub const GL_OPERAND0_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hexadecimal);
pub const GL_OPERAND1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hexadecimal);
pub const GL_OPERAND1_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hexadecimal);
pub const GL_OPERAND1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hexadecimal);
pub const GL_OPERAND2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hexadecimal);
pub const GL_OPERAND2_ALPHA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hexadecimal);
pub const GL_OPERAND2_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hexadecimal);
pub const GL_OPERAND3_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859B, .hexadecimal);
pub const GL_PACK_SUBSAMPLE_RATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A0, .hexadecimal);
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A1, .hexadecimal);
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A2, .hexadecimal);
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A3, .hexadecimal);
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85A4, .hexadecimal);
pub const GL_PERTURB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AE, .hexadecimal);
pub const GL_TEXTURE_NORMAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85AF, .hexadecimal);
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B0, .hexadecimal);
pub const GL_TRANSFORM_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B1, .hexadecimal);
pub const GL_UNPACK_CLIENT_STORAGE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B2, .hexadecimal);
pub const GL_BUFFER_OBJECT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B3, .hexadecimal);
pub const GL_STORAGE_CLIENT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B4, .hexadecimal);
pub const GL_VERTEX_ARRAY_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hexadecimal);
pub const GL_VERTEX_ARRAY_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hexadecimal);
pub const GL_VERTEX_ARRAY_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hexadecimal);
pub const GL_TEXTURE_RANGE_LENGTH_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B7, .hexadecimal);
pub const GL_TEXTURE_RANGE_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B8, .hexadecimal);
pub const GL_YCBCR_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B9, .hexadecimal);
pub const GL_UNSIGNED_SHORT_8_8_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hexadecimal);
pub const GL_UNSIGNED_SHORT_8_8_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hexadecimal);
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hexadecimal);
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hexadecimal);
pub const GL_TEXTURE_STORAGE_HINT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BC, .hexadecimal);
pub const GL_STORAGE_PRIVATE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BD, .hexadecimal);
pub const GL_STORAGE_CACHED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BE, .hexadecimal);
pub const GL_STORAGE_SHARED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BF, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C0, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C1, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C2, .hexadecimal);
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C3, .hexadecimal);
pub const GL_R1UI_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C4, .hexadecimal);
pub const GL_R1UI_C4UB_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C5, .hexadecimal);
pub const GL_R1UI_C3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C6, .hexadecimal);
pub const GL_R1UI_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C7, .hexadecimal);
pub const GL_R1UI_C4F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C8, .hexadecimal);
pub const GL_R1UI_T2F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85C9, .hexadecimal);
pub const GL_R1UI_T2F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CA, .hexadecimal);
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CB, .hexadecimal);
pub const GL_SLICE_ACCUM_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85CC, .hexadecimal);
pub const GL_QUAD_MESH_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8614, .hexadecimal);
pub const GL_TRIANGLE_MESH_SUN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8615, .hexadecimal);
pub const GL_VERTEX_PROGRAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8620, .hexadecimal);
pub const GL_VERTEX_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8620, .hexadecimal);
pub const GL_VERTEX_STATE_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8621, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hexadecimal);
pub const GL_ATTRIB_ARRAY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const GL_ATTRIB_ARRAY_STRIDE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const GL_ATTRIB_ARRAY_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const GL_CURRENT_ATTRIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const GL_CURRENT_VERTEX_ATTRIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const GL_CURRENT_VERTEX_ATTRIB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const GL_PROGRAM_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8627, .hexadecimal);
pub const GL_PROGRAM_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8627, .hexadecimal);
pub const GL_PROGRAM_STRING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8628, .hexadecimal);
pub const GL_PROGRAM_STRING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8628, .hexadecimal);
pub const GL_MODELVIEW_PROJECTION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8629, .hexadecimal);
pub const GL_IDENTITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862A, .hexadecimal);
pub const GL_INVERSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862B, .hexadecimal);
pub const GL_TRANSPOSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862C, .hexadecimal);
pub const GL_INVERSE_TRANSPOSE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862D, .hexadecimal);
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862E, .hexadecimal);
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862E, .hexadecimal);
pub const GL_MAX_PROGRAM_MATRICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862F, .hexadecimal);
pub const GL_MAX_TRACK_MATRICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x862F, .hexadecimal);
pub const GL_MATRIX0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8630, .hexadecimal);
pub const GL_MATRIX1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8631, .hexadecimal);
pub const GL_MATRIX2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8632, .hexadecimal);
pub const GL_MATRIX3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8633, .hexadecimal);
pub const GL_MATRIX4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8634, .hexadecimal);
pub const GL_MATRIX5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8635, .hexadecimal);
pub const GL_MATRIX6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8636, .hexadecimal);
pub const GL_MATRIX7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8637, .hexadecimal);
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8640, .hexadecimal);
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8640, .hexadecimal);
pub const GL_CURRENT_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8641, .hexadecimal);
pub const GL_CURRENT_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8641, .hexadecimal);
pub const GL_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_PROGRAM_POINT_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_PROGRAM_POINT_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_TWO_SIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hexadecimal);
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hexadecimal);
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hexadecimal);
pub const GL_PROGRAM_PARAMETER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8644, .hexadecimal);
pub const GL_ATTRIB_ARRAY_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const GL_PROGRAM_TARGET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8646, .hexadecimal);
pub const GL_PROGRAM_RESIDENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8647, .hexadecimal);
pub const GL_TRACK_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8648, .hexadecimal);
pub const GL_TRACK_MATRIX_TRANSFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8649, .hexadecimal);
pub const GL_VERTEX_PROGRAM_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864A, .hexadecimal);
pub const GL_PROGRAM_ERROR_POSITION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864B, .hexadecimal);
pub const GL_PROGRAM_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864B, .hexadecimal);
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864C, .hexadecimal);
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864D, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864E, .hexadecimal);
pub const GL_DEPTH_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hexadecimal);
pub const GL_DEPTH_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hexadecimal);
pub const GL_DEPTH_CLAMP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8650, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8651, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8652, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8653, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8654, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8655, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8656, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8657, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8658, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8659, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865A, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865B, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865C, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865D, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865E, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x865F, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8660, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8661, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8662, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8663, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8664, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8665, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8666, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8667, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8668, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8669, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866A, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866B, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866C, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866D, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866E, .hexadecimal);
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x866F, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8670, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8671, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8672, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8673, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8674, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8675, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8676, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8677, .hexadecimal);
pub const GL_PROGRAM_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8677, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8678, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8679, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867A, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867B, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867C, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867D, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867E, .hexadecimal);
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x867F, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hexadecimal);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hexadecimal);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hexadecimal);
pub const GL_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hexadecimal);
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hexadecimal);
pub const GL_MAX_VERTEX_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A4, .hexadecimal);
pub const GL_MAX_VERTEX_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A4, .hexadecimal);
pub const GL_ACTIVE_VERTEX_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A5, .hexadecimal);
pub const GL_WEIGHT_SUM_UNITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A6, .hexadecimal);
pub const GL_VERTEX_BLEND_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A7, .hexadecimal);
pub const GL_CURRENT_WEIGHT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A8, .hexadecimal);
pub const GL_WEIGHT_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A9, .hexadecimal);
pub const GL_WEIGHT_ARRAY_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A9, .hexadecimal);
pub const GL_WEIGHT_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AA, .hexadecimal);
pub const GL_WEIGHT_ARRAY_STRIDE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AA, .hexadecimal);
pub const GL_WEIGHT_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AB, .hexadecimal);
pub const GL_WEIGHT_ARRAY_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AB, .hexadecimal);
pub const GL_WEIGHT_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AC, .hexadecimal);
pub const GL_WEIGHT_ARRAY_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AC, .hexadecimal);
pub const GL_WEIGHT_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AD, .hexadecimal);
pub const GL_WEIGHT_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AD, .hexadecimal);
pub const GL_DOT3_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hexadecimal);
pub const GL_DOT3_RGB_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hexadecimal);
pub const GL_DOT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hexadecimal);
pub const GL_DOT3_RGBA_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hexadecimal);
pub const GL_DOT3_RGBA_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hexadecimal);
pub const GL_COMPRESSED_RGB_FXT1_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_FXT1_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B1, .hexadecimal);
pub const GL_MULTISAMPLE_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B2, .hexadecimal);
pub const GL_SAMPLE_BUFFERS_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B3, .hexadecimal);
pub const GL_SAMPLES_3DFX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86B4, .hexadecimal);
pub const GL_EVAL_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C0, .hexadecimal);
pub const GL_EVAL_TRIANGULAR_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C1, .hexadecimal);
pub const GL_MAP_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C2, .hexadecimal);
pub const GL_MAP_ATTRIB_U_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C3, .hexadecimal);
pub const GL_MAP_ATTRIB_V_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C4, .hexadecimal);
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C5, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C6, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C7, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C8, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86C9, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CA, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CB, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CC, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CD, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CE, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86CF, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D0, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D1, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D2, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D3, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D4, .hexadecimal);
pub const GL_EVAL_VERTEX_ATTRIB15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D5, .hexadecimal);
pub const GL_MAX_MAP_TESSELLATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D6, .hexadecimal);
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D7, .hexadecimal);
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D8, .hexadecimal);
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86D9, .hexadecimal);
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DA, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DB, .hexadecimal);
pub const GL_DSDT_MAG_INTENSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DC, .hexadecimal);
pub const GL_SHADER_CONSISTENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DD, .hexadecimal);
pub const GL_TEXTURE_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DE, .hexadecimal);
pub const GL_SHADER_OPERATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86DF, .hexadecimal);
pub const GL_CULL_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E0, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E1, .hexadecimal);
pub const GL_OFFSET_TEXTURE_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E1, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E2, .hexadecimal);
pub const GL_OFFSET_TEXTURE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E2, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E3, .hexadecimal);
pub const GL_OFFSET_TEXTURE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E3, .hexadecimal);
pub const GL_PREVIOUS_TEXTURE_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E4, .hexadecimal);
pub const GL_CONST_EYE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E5, .hexadecimal);
pub const GL_PASS_THROUGH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E6, .hexadecimal);
pub const GL_CULL_FRAGMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E7, .hexadecimal);
pub const GL_OFFSET_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E8, .hexadecimal);
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86E9, .hexadecimal);
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EA, .hexadecimal);
pub const GL_SURFACE_STATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EB, .hexadecimal);
pub const GL_DOT_PRODUCT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EC, .hexadecimal);
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86ED, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EE, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86EF, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F0, .hexadecimal);
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F1, .hexadecimal);
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F2, .hexadecimal);
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F3, .hexadecimal);
pub const GL_HILO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F4, .hexadecimal);
pub const GL_DSDT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F5, .hexadecimal);
pub const GL_DSDT_MAG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F6, .hexadecimal);
pub const GL_DSDT_MAG_VIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F7, .hexadecimal);
pub const GL_HILO16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F8, .hexadecimal);
pub const GL_SIGNED_HILO_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86F9, .hexadecimal);
pub const GL_SIGNED_HILO16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FA, .hexadecimal);
pub const GL_SIGNED_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FB, .hexadecimal);
pub const GL_SIGNED_RGBA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FC, .hexadecimal);
pub const GL_SURFACE_REGISTERED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FD, .hexadecimal);
pub const GL_SIGNED_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FE, .hexadecimal);
pub const GL_SIGNED_RGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86FF, .hexadecimal);
pub const GL_SURFACE_MAPPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8700, .hexadecimal);
pub const GL_SIGNED_LUMINANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8701, .hexadecimal);
pub const GL_SIGNED_LUMINANCE8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8702, .hexadecimal);
pub const GL_SIGNED_LUMINANCE_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8703, .hexadecimal);
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8704, .hexadecimal);
pub const GL_SIGNED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8705, .hexadecimal);
pub const GL_SIGNED_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8706, .hexadecimal);
pub const GL_SIGNED_INTENSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8707, .hexadecimal);
pub const GL_SIGNED_INTENSITY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8708, .hexadecimal);
pub const GL_DSDT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8709, .hexadecimal);
pub const GL_DSDT8_MAG8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870A, .hexadecimal);
pub const GL_DSDT8_MAG8_INTENSITY8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870B, .hexadecimal);
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870C, .hexadecimal);
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870D, .hexadecimal);
pub const GL_HI_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870E, .hexadecimal);
pub const GL_LO_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x870F, .hexadecimal);
pub const GL_DS_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8710, .hexadecimal);
pub const GL_DT_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8711, .hexadecimal);
pub const GL_MAGNITUDE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8712, .hexadecimal);
pub const GL_VIBRANCE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8713, .hexadecimal);
pub const GL_HI_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8714, .hexadecimal);
pub const GL_LO_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8715, .hexadecimal);
pub const GL_DS_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8716, .hexadecimal);
pub const GL_DT_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8717, .hexadecimal);
pub const GL_MAGNITUDE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8718, .hexadecimal);
pub const GL_VIBRANCE_BIAS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8719, .hexadecimal);
pub const GL_TEXTURE_BORDER_VALUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871A, .hexadecimal);
pub const GL_TEXTURE_HI_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871B, .hexadecimal);
pub const GL_TEXTURE_LO_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871C, .hexadecimal);
pub const GL_TEXTURE_DS_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871D, .hexadecimal);
pub const GL_TEXTURE_DT_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871E, .hexadecimal);
pub const GL_TEXTURE_MAG_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x871F, .hexadecimal);
pub const GL_MODELVIEW2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8722, .hexadecimal);
pub const GL_MODELVIEW3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8723, .hexadecimal);
pub const GL_MODELVIEW4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8724, .hexadecimal);
pub const GL_MODELVIEW5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8725, .hexadecimal);
pub const GL_MODELVIEW6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8726, .hexadecimal);
pub const GL_MODELVIEW7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8727, .hexadecimal);
pub const GL_MODELVIEW8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8728, .hexadecimal);
pub const GL_MODELVIEW9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8729, .hexadecimal);
pub const GL_MODELVIEW10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872A, .hexadecimal);
pub const GL_MODELVIEW11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872B, .hexadecimal);
pub const GL_MODELVIEW12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872C, .hexadecimal);
pub const GL_MODELVIEW13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872D, .hexadecimal);
pub const GL_MODELVIEW14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872E, .hexadecimal);
pub const GL_MODELVIEW15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x872F, .hexadecimal);
pub const GL_MODELVIEW16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8730, .hexadecimal);
pub const GL_MODELVIEW17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8731, .hexadecimal);
pub const GL_MODELVIEW18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8732, .hexadecimal);
pub const GL_MODELVIEW19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8733, .hexadecimal);
pub const GL_MODELVIEW20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8734, .hexadecimal);
pub const GL_MODELVIEW21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8735, .hexadecimal);
pub const GL_MODELVIEW22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8736, .hexadecimal);
pub const GL_MODELVIEW23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8737, .hexadecimal);
pub const GL_MODELVIEW24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8738, .hexadecimal);
pub const GL_MODELVIEW25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8739, .hexadecimal);
pub const GL_MODELVIEW26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873A, .hexadecimal);
pub const GL_MODELVIEW27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873B, .hexadecimal);
pub const GL_MODELVIEW28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873C, .hexadecimal);
pub const GL_MODELVIEW29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873D, .hexadecimal);
pub const GL_MODELVIEW30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873E, .hexadecimal);
pub const GL_MODELVIEW31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x873F, .hexadecimal);
pub const GL_DOT3_RGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8740, .hexadecimal);
pub const GL_Z400_BINARY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8740, .hexadecimal);
pub const GL_DOT3_RGBA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hexadecimal);
pub const GL_PROGRAM_BINARY_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hexadecimal);
pub const GL_PROGRAM_BINARY_LENGTH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hexadecimal);
pub const GL_MIRROR_CLAMP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8742, .hexadecimal);
pub const GL_MIRROR_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8742, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hexadecimal);
pub const GL_MODULATE_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8744, .hexadecimal);
pub const GL_MODULATE_SIGNED_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8745, .hexadecimal);
pub const GL_MODULATE_SUBTRACT_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8746, .hexadecimal);
pub const GL_SET_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874A, .hexadecimal);
pub const GL_REPLACE_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874B, .hexadecimal);
pub const GL_STENCIL_OP_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874C, .hexadecimal);
pub const GL_STENCIL_BACK_OP_VALUE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874D, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_LONG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874E, .hexadecimal);
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x874F, .hexadecimal);
pub const GL_DEPTH_STENCIL_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8750, .hexadecimal);
pub const GL_UNSIGNED_INT_24_8_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8751, .hexadecimal);
pub const GL_UNSIGNED_INT_8_24_REV_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8752, .hexadecimal);
pub const GL_UNSIGNED_SHORT_15_1_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8753, .hexadecimal);
pub const GL_UNSIGNED_SHORT_1_15_REV_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8754, .hexadecimal);
pub const GL_TRACE_MASK_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8755, .hexadecimal);
pub const GL_TRACE_NAME_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8756, .hexadecimal);
pub const GL_YCBCR_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8757, .hexadecimal);
pub const GL_PACK_INVERT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8758, .hexadecimal);
pub const GL_DEBUG_OBJECT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8759, .hexadecimal);
pub const GL_TEXTURE_1D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8759, .hexadecimal);
pub const GL_DEBUG_PRINT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875A, .hexadecimal);
pub const GL_TEXTURE_2D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875A, .hexadecimal);
pub const GL_DEBUG_ASSERT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875B, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875B, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875C, .hexadecimal);
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875D, .hexadecimal);
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875E, .hexadecimal);
pub const GL_PROGRAM_BINARY_FORMAT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875F, .hexadecimal);
pub const GL_STATIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8760, .hexadecimal);
pub const GL_DYNAMIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8761, .hexadecimal);
pub const GL_PRESERVE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8762, .hexadecimal);
pub const GL_DISCARD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8763, .hexadecimal);
pub const GL_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const GL_BUFFER_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const GL_OBJECT_BUFFER_SIZE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const GL_BUFFER_USAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const GL_BUFFER_USAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const GL_OBJECT_BUFFER_USAGE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const GL_ARRAY_OBJECT_BUFFER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8766, .hexadecimal);
pub const GL_ARRAY_OBJECT_OFFSET_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8767, .hexadecimal);
pub const GL_ELEMENT_ARRAY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8768, .hexadecimal);
pub const GL_ELEMENT_ARRAY_TYPE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8769, .hexadecimal);
pub const GL_ELEMENT_ARRAY_POINTER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876A, .hexadecimal);
pub const GL_MAX_VERTEX_STREAMS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876B, .hexadecimal);
pub const GL_VERTEX_STREAM0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876C, .hexadecimal);
pub const GL_VERTEX_STREAM1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876D, .hexadecimal);
pub const GL_VERTEX_STREAM2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876E, .hexadecimal);
pub const GL_VERTEX_STREAM3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x876F, .hexadecimal);
pub const GL_VERTEX_STREAM4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8770, .hexadecimal);
pub const GL_VERTEX_STREAM5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8771, .hexadecimal);
pub const GL_VERTEX_STREAM6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8772, .hexadecimal);
pub const GL_VERTEX_STREAM7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8773, .hexadecimal);
pub const GL_VERTEX_SOURCE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8774, .hexadecimal);
pub const GL_BUMP_ROT_MATRIX_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8775, .hexadecimal);
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8776, .hexadecimal);
pub const GL_BUMP_NUM_TEX_UNITS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8777, .hexadecimal);
pub const GL_BUMP_TEX_UNITS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8778, .hexadecimal);
pub const GL_DUDV_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8779, .hexadecimal);
pub const GL_DU8DV8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877A, .hexadecimal);
pub const GL_BUMP_ENVMAP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877B, .hexadecimal);
pub const GL_BUMP_TARGET_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x877C, .hexadecimal);
pub const GL_VERTEX_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8780, .hexadecimal);
pub const GL_VERTEX_SHADER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8781, .hexadecimal);
pub const GL_OP_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8782, .hexadecimal);
pub const GL_OP_NEGATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8783, .hexadecimal);
pub const GL_OP_DOT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8784, .hexadecimal);
pub const GL_OP_DOT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8785, .hexadecimal);
pub const GL_OP_MUL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8786, .hexadecimal);
pub const GL_OP_ADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8787, .hexadecimal);
pub const GL_OP_MADD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8788, .hexadecimal);
pub const GL_OP_FRAC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8789, .hexadecimal);
pub const GL_OP_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878A, .hexadecimal);
pub const GL_OP_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878B, .hexadecimal);
pub const GL_OP_SET_GE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878C, .hexadecimal);
pub const GL_OP_SET_LT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878D, .hexadecimal);
pub const GL_OP_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878E, .hexadecimal);
pub const GL_OP_FLOOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x878F, .hexadecimal);
pub const GL_OP_ROUND_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8790, .hexadecimal);
pub const GL_OP_EXP_BASE_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8791, .hexadecimal);
pub const GL_OP_LOG_BASE_2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8792, .hexadecimal);
pub const GL_OP_POWER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8793, .hexadecimal);
pub const GL_OP_RECIP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8794, .hexadecimal);
pub const GL_OP_RECIP_SQRT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8795, .hexadecimal);
pub const GL_OP_SUB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8796, .hexadecimal);
pub const GL_OP_CROSS_PRODUCT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8797, .hexadecimal);
pub const GL_OP_MULTIPLY_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8798, .hexadecimal);
pub const GL_OP_MOV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8799, .hexadecimal);
pub const GL_OUTPUT_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879A, .hexadecimal);
pub const GL_OUTPUT_COLOR0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879B, .hexadecimal);
pub const GL_OUTPUT_COLOR1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879C, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879D, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879E, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x879F, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A0, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A1, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A2, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A3, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A4, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A5, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A6, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A7, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A8, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87A9, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AA, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AB, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AC, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AD, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD17_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AE, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD18_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87AF, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD19_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B0, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD20_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B1, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD21_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B2, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD22_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B3, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD23_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B4, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD24_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B5, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD25_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B6, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD26_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B7, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD27_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B8, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD28_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87B9, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD29_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BA, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD30_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BB, .hexadecimal);
pub const GL_OUTPUT_TEXTURE_COORD31_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BC, .hexadecimal);
pub const GL_OUTPUT_FOG_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BD, .hexadecimal);
pub const GL_SCALAR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BE, .hexadecimal);
pub const GL_VECTOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87BF, .hexadecimal);
pub const GL_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C0, .hexadecimal);
pub const GL_VARIANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C1, .hexadecimal);
pub const GL_INVARIANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C2, .hexadecimal);
pub const GL_LOCAL_CONSTANT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C3, .hexadecimal);
pub const GL_LOCAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C4, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C5, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C6, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C7, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C8, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87C9, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CA, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CB, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CC, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CD, .hexadecimal);
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CE, .hexadecimal);
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87CF, .hexadecimal);
pub const GL_VERTEX_SHADER_VARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D0, .hexadecimal);
pub const GL_VERTEX_SHADER_INVARIANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D1, .hexadecimal);
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D2, .hexadecimal);
pub const GL_VERTEX_SHADER_LOCALS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D3, .hexadecimal);
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D4, .hexadecimal);
pub const GL_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D5, .hexadecimal);
pub const GL_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D6, .hexadecimal);
pub const GL_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D7, .hexadecimal);
pub const GL_W_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D8, .hexadecimal);
pub const GL_NEGATIVE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87D9, .hexadecimal);
pub const GL_NEGATIVE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DA, .hexadecimal);
pub const GL_NEGATIVE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DB, .hexadecimal);
pub const GL_NEGATIVE_W_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DC, .hexadecimal);
pub const GL_ZERO_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DD, .hexadecimal);
pub const GL_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DE, .hexadecimal);
pub const GL_NEGATIVE_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87DF, .hexadecimal);
pub const GL_NORMALIZED_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E0, .hexadecimal);
pub const GL_FULL_RANGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E1, .hexadecimal);
pub const GL_CURRENT_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E2, .hexadecimal);
pub const GL_MVP_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E3, .hexadecimal);
pub const GL_VARIANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E4, .hexadecimal);
pub const GL_VARIANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E5, .hexadecimal);
pub const GL_VARIANT_ARRAY_STRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E6, .hexadecimal);
pub const GL_VARIANT_ARRAY_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E7, .hexadecimal);
pub const GL_VARIANT_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E8, .hexadecimal);
pub const GL_VARIANT_ARRAY_POINTER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87E9, .hexadecimal);
pub const GL_INVARIANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EA, .hexadecimal);
pub const GL_INVARIANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EB, .hexadecimal);
pub const GL_LOCAL_CONSTANT_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EC, .hexadecimal);
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87ED, .hexadecimal);
pub const GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EE, .hexadecimal);
pub const GL_PN_TRIANGLES_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F0, .hexadecimal);
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F1, .hexadecimal);
pub const GL_PN_TRIANGLES_POINT_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F2, .hexadecimal);
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F3, .hexadecimal);
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F4, .hexadecimal);
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F5, .hexadecimal);
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F6, .hexadecimal);
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F7, .hexadecimal);
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F8, .hexadecimal);
pub const GL_3DC_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F9, .hexadecimal);
pub const GL_3DC_XY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FA, .hexadecimal);
pub const GL_VBO_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FB, .hexadecimal);
pub const GL_TEXTURE_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FC, .hexadecimal);
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FD, .hexadecimal);
pub const GL_NUM_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FE, .hexadecimal);
pub const GL_NUM_PROGRAM_BINARY_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FE, .hexadecimal);
pub const GL_PROGRAM_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FF, .hexadecimal);
pub const GL_PROGRAM_BINARY_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FF, .hexadecimal);
pub const GL_STENCIL_BACK_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hexadecimal);
pub const GL_STENCIL_BACK_FUNC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hexadecimal);
pub const GL_STENCIL_BACK_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hexadecimal);
pub const GL_STENCIL_BACK_FAIL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8804, .hexadecimal);
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8805, .hexadecimal);
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8806, .hexadecimal);
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8807, .hexadecimal);
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8808, .hexadecimal);
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8809, .hexadecimal);
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880A, .hexadecimal);
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880B, .hexadecimal);
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880C, .hexadecimal);
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880D, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880E, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x880F, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8810, .hexadecimal);
pub const GL_RGBA32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGBA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGBA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGBA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGBA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hexadecimal);
pub const GL_RGB32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_RGB32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_RGB32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_RGB_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_RGB_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hexadecimal);
pub const GL_ALPHA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_ALPHA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_ALPHA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hexadecimal);
pub const GL_INTENSITY32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hexadecimal);
pub const GL_INTENSITY_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hexadecimal);
pub const GL_INTENSITY_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8817, .hexadecimal);
pub const GL_LUMINANCE32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hexadecimal);
pub const GL_RGBA16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGBA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGBA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGBA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGBA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hexadecimal);
pub const GL_RGB16F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_RGB16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_RGB16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_RGB_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_RGB_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hexadecimal);
pub const GL_ALPHA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_ALPHA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_ALPHA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hexadecimal);
pub const GL_INTENSITY16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hexadecimal);
pub const GL_INTENSITY_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hexadecimal);
pub const GL_INTENSITY_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881D, .hexadecimal);
pub const GL_LUMINANCE16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16F_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hexadecimal);
pub const GL_RGBA_FLOAT_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8820, .hexadecimal);
pub const GL_RGBA_FLOAT_MODE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8820, .hexadecimal);
pub const GL_WRITEONLY_RENDERING_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8823, .hexadecimal);
pub const GL_MAX_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_MAX_DRAW_BUFFERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_MAX_DRAW_BUFFERS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_MAX_DRAW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_MAX_DRAW_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_DRAW_BUFFER0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_DRAW_BUFFER15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_DRAW_BUFFER15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_DRAW_BUFFER15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_DRAW_BUFFER15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8835, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8837, .hexadecimal);
pub const GL_BLEND_EQUATION_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hexadecimal);
pub const GL_BLEND_EQUATION_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hexadecimal);
pub const GL_BLEND_EQUATION_ALPHA_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hexadecimal);
pub const GL_SUBSAMPLE_DISTANCE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883F, .hexadecimal);
pub const GL_MATRIX_PALETTE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8840, .hexadecimal);
pub const GL_MATRIX_PALETTE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8840, .hexadecimal);
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8841, .hexadecimal);
pub const GL_MAX_PALETTE_MATRICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8842, .hexadecimal);
pub const GL_MAX_PALETTE_MATRICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8842, .hexadecimal);
pub const GL_CURRENT_PALETTE_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8843, .hexadecimal);
pub const GL_CURRENT_PALETTE_MATRIX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8843, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8844, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8844, .hexadecimal);
pub const GL_CURRENT_MATRIX_INDEX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8845, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8846, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8846, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8847, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8847, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8848, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8848, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8849, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8849, .hexadecimal);
pub const GL_TEXTURE_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hexadecimal);
pub const GL_TEXTURE_DEPTH_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hexadecimal);
pub const GL_DEPTH_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hexadecimal);
pub const GL_DEPTH_TEXTURE_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hexadecimal);
pub const GL_TEXTURE_COMPARE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hexadecimal);
pub const GL_TEXTURE_COMPARE_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hexadecimal);
pub const GL_TEXTURE_COMPARE_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FUNC_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FUNC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hexadecimal);
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_COMPARE_REF_TO_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_COMPARE_REF_TO_TEXTURE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_COMPARE_R_TO_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_COMPARE_R_TO_TEXTURE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884F, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8850, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8851, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8852, .hexadecimal);
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8853, .hexadecimal);
pub const GL_OFFSET_HILO_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8854, .hexadecimal);
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8855, .hexadecimal);
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8856, .hexadecimal);
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8857, .hexadecimal);
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8858, .hexadecimal);
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8859, .hexadecimal);
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885A, .hexadecimal);
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885B, .hexadecimal);
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885C, .hexadecimal);
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885D, .hexadecimal);
pub const GL_HILO8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885E, .hexadecimal);
pub const GL_SIGNED_HILO8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x885F, .hexadecimal);
pub const GL_FORCE_BLUE_TO_ONE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8860, .hexadecimal);
pub const GL_POINT_SPRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_POINT_SPRITE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_POINT_SPRITE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_POINT_SPRITE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_COORD_REPLACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GL_COORD_REPLACE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GL_COORD_REPLACE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GL_COORD_REPLACE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GL_POINT_SPRITE_R_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8863, .hexadecimal);
pub const GL_PIXEL_COUNTER_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_QUERY_COUNTER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_QUERY_COUNTER_BITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_QUERY_COUNTER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_CURRENT_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_CURRENT_QUERY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_CURRENT_QUERY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_PIXEL_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_PIXEL_COUNT_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8868, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hexadecimal);
pub const GL_DEPTH_STENCIL_TO_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886E, .hexadecimal);
pub const GL_DEPTH_STENCIL_TO_BGRA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886F, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8870, .hexadecimal);
pub const GL_MAX_TEXTURE_COORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hexadecimal);
pub const GL_MAX_TEXTURE_COORDS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hexadecimal);
pub const GL_MAX_TEXTURE_COORDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hexadecimal);
pub const GL_MAX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8873, .hexadecimal);
pub const GL_PROGRAM_ERROR_STRING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8874, .hexadecimal);
pub const GL_PROGRAM_ERROR_STRING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8874, .hexadecimal);
pub const GL_PROGRAM_FORMAT_ASCII_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8875, .hexadecimal);
pub const GL_PROGRAM_FORMAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8876, .hexadecimal);
pub const GL_WRITE_PIXEL_DATA_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8878, .hexadecimal);
pub const GL_READ_PIXEL_DATA_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8879, .hexadecimal);
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887A, .hexadecimal);
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887B, .hexadecimal);
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887C, .hexadecimal);
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887D, .hexadecimal);
pub const GL_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hexadecimal);
pub const GL_GEOMETRY_SHADER_INVOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hexadecimal);
pub const GL_GEOMETRY_SHADER_INVOCATIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hexadecimal);
pub const GL_FLOAT_R_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8880, .hexadecimal);
pub const GL_FLOAT_RG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8881, .hexadecimal);
pub const GL_FLOAT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8882, .hexadecimal);
pub const GL_FLOAT_RGBA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8883, .hexadecimal);
pub const GL_FLOAT_R16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8884, .hexadecimal);
pub const GL_FLOAT_R32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8885, .hexadecimal);
pub const GL_FLOAT_RG16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8886, .hexadecimal);
pub const GL_FLOAT_RG32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8887, .hexadecimal);
pub const GL_FLOAT_RGB16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8888, .hexadecimal);
pub const GL_FLOAT_RGB32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8889, .hexadecimal);
pub const GL_FLOAT_RGBA16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888A, .hexadecimal);
pub const GL_FLOAT_RGBA32_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888B, .hexadecimal);
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888C, .hexadecimal);
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888D, .hexadecimal);
pub const GL_FLOAT_RGBA_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888E, .hexadecimal);
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x888F, .hexadecimal);
pub const GL_DEPTH_BOUNDS_TEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8890, .hexadecimal);
pub const GL_DEPTH_BOUNDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8891, .hexadecimal);
pub const GL_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hexadecimal);
pub const GL_ARRAY_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hexadecimal);
pub const GL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hexadecimal);
pub const GL_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hexadecimal);
pub const GL_VERTEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hexadecimal);
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hexadecimal);
pub const GL_NORMAL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hexadecimal);
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hexadecimal);
pub const GL_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hexadecimal);
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hexadecimal);
pub const GL_INDEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hexadecimal);
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hexadecimal);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hexadecimal);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hexadecimal);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hexadecimal);
pub const GL_PROGRAM_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A0, .hexadecimal);
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A1, .hexadecimal);
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A2, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A3, .hexadecimal);
pub const GL_PROGRAM_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A4, .hexadecimal);
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A5, .hexadecimal);
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A6, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A7, .hexadecimal);
pub const GL_PROGRAM_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A8, .hexadecimal);
pub const GL_MAX_PROGRAM_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88A9, .hexadecimal);
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AA, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AB, .hexadecimal);
pub const GL_PROGRAM_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AC, .hexadecimal);
pub const GL_MAX_PROGRAM_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AD, .hexadecimal);
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AE, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88AF, .hexadecimal);
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B0, .hexadecimal);
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B1, .hexadecimal);
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B2, .hexadecimal);
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B3, .hexadecimal);
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B4, .hexadecimal);
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B5, .hexadecimal);
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B6, .hexadecimal);
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B7, .hexadecimal);
pub const GL_READ_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hexadecimal);
pub const GL_READ_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hexadecimal);
pub const GL_WRITE_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hexadecimal);
pub const GL_WRITE_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hexadecimal);
pub const GL_WRITE_ONLY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hexadecimal);
pub const GL_READ_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hexadecimal);
pub const GL_READ_WRITE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hexadecimal);
pub const GL_BUFFER_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hexadecimal);
pub const GL_BUFFER_ACCESS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hexadecimal);
pub const GL_BUFFER_ACCESS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hexadecimal);
pub const GL_BUFFER_MAPPED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hexadecimal);
pub const GL_BUFFER_MAPPED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hexadecimal);
pub const GL_BUFFER_MAPPED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hexadecimal);
pub const GL_BUFFER_MAP_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hexadecimal);
pub const GL_BUFFER_MAP_POINTER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hexadecimal);
pub const GL_BUFFER_MAP_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hexadecimal);
pub const GL_WRITE_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BE, .hexadecimal);
pub const GL_TIME_ELAPSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hexadecimal);
pub const GL_TIME_ELAPSED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hexadecimal);
pub const GL_MATRIX0_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C0, .hexadecimal);
pub const GL_MATRIX1_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C1, .hexadecimal);
pub const GL_MATRIX2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C2, .hexadecimal);
pub const GL_MATRIX3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C3, .hexadecimal);
pub const GL_MATRIX4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C4, .hexadecimal);
pub const GL_MATRIX5_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C5, .hexadecimal);
pub const GL_MATRIX6_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C6, .hexadecimal);
pub const GL_MATRIX7_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C7, .hexadecimal);
pub const GL_MATRIX8_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C8, .hexadecimal);
pub const GL_MATRIX9_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88C9, .hexadecimal);
pub const GL_MATRIX10_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CA, .hexadecimal);
pub const GL_MATRIX11_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CB, .hexadecimal);
pub const GL_MATRIX12_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CC, .hexadecimal);
pub const GL_MATRIX13_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CD, .hexadecimal);
pub const GL_MATRIX14_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CE, .hexadecimal);
pub const GL_MATRIX15_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88CF, .hexadecimal);
pub const GL_MATRIX16_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D0, .hexadecimal);
pub const GL_MATRIX17_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D1, .hexadecimal);
pub const GL_MATRIX18_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D2, .hexadecimal);
pub const GL_MATRIX19_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D3, .hexadecimal);
pub const GL_MATRIX20_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D4, .hexadecimal);
pub const GL_MATRIX21_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D5, .hexadecimal);
pub const GL_MATRIX22_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D6, .hexadecimal);
pub const GL_MATRIX23_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D7, .hexadecimal);
pub const GL_MATRIX24_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D8, .hexadecimal);
pub const GL_MATRIX25_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88D9, .hexadecimal);
pub const GL_MATRIX26_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DA, .hexadecimal);
pub const GL_MATRIX27_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DB, .hexadecimal);
pub const GL_MATRIX28_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DC, .hexadecimal);
pub const GL_MATRIX29_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DD, .hexadecimal);
pub const GL_MATRIX30_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DE, .hexadecimal);
pub const GL_MATRIX31_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88DF, .hexadecimal);
pub const GL_STREAM_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hexadecimal);
pub const GL_STREAM_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hexadecimal);
pub const GL_STREAM_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hexadecimal);
pub const GL_STREAM_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hexadecimal);
pub const GL_STREAM_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hexadecimal);
pub const GL_STREAM_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hexadecimal);
pub const GL_STATIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hexadecimal);
pub const GL_STATIC_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hexadecimal);
pub const GL_STATIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hexadecimal);
pub const GL_STATIC_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hexadecimal);
pub const GL_STATIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hexadecimal);
pub const GL_STATIC_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hexadecimal);
pub const GL_DYNAMIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hexadecimal);
pub const GL_DYNAMIC_DRAW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hexadecimal);
pub const GL_DYNAMIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hexadecimal);
pub const GL_DYNAMIC_READ_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hexadecimal);
pub const GL_DYNAMIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hexadecimal);
pub const GL_DYNAMIC_COPY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_ETC1_SRGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EE, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GL_DEPTH24_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hexadecimal);
pub const GL_DEPTH24_STENCIL8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hexadecimal);
pub const GL_DEPTH24_STENCIL8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hexadecimal);
pub const GL_TEXTURE_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hexadecimal);
pub const GL_TEXTURE_STENCIL_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F1, .hexadecimal);
pub const GL_STENCIL_TAG_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F2, .hexadecimal);
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F3, .hexadecimal);
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F4, .hexadecimal);
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F5, .hexadecimal);
pub const GL_MAX_PROGRAM_IF_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F6, .hexadecimal);
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F7, .hexadecimal);
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F8, .hexadecimal);
pub const GL_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F9, .hexadecimal);
pub const GL_SRC1_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F9, .hexadecimal);
pub const GL_ONE_MINUS_SRC1_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FA, .hexadecimal);
pub const GL_ONE_MINUS_SRC1_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FA, .hexadecimal);
pub const GL_ONE_MINUS_SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FB, .hexadecimal);
pub const GL_ONE_MINUS_SRC1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FB, .hexadecimal);
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FC, .hexadecimal);
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FC, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FD, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hexadecimal);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hexadecimal);
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FF, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8904, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8905, .hexadecimal);
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8906, .hexadecimal);
pub const GL_PROGRAM_RESULT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8907, .hexadecimal);
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8908, .hexadecimal);
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8909, .hexadecimal);
pub const GL_STENCIL_TEST_TWO_SIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8910, .hexadecimal);
pub const GL_ACTIVE_STENCIL_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8911, .hexadecimal);
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8912, .hexadecimal);
pub const GL_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hexadecimal);
pub const GL_SAMPLES_PASSED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hexadecimal);
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hexadecimal);
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hexadecimal);
pub const GL_GEOMETRY_VERTICES_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hexadecimal);
pub const GL_GEOMETRY_INPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hexadecimal);
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hexadecimal);
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hexadecimal);
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hexadecimal);
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hexadecimal);
pub const GL_GEOMETRY_OUTPUT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hexadecimal);
pub const GL_SAMPLER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8919, .hexadecimal);
pub const GL_CLAMP_VERTEX_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891A, .hexadecimal);
pub const GL_CLAMP_VERTEX_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891A, .hexadecimal);
pub const GL_CLAMP_FRAGMENT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891B, .hexadecimal);
pub const GL_CLAMP_FRAGMENT_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891B, .hexadecimal);
pub const GL_CLAMP_READ_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hexadecimal);
pub const GL_CLAMP_READ_COLOR_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891C, .hexadecimal);
pub const GL_FIXED_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hexadecimal);
pub const GL_FIXED_ONLY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891D, .hexadecimal);
pub const GL_TESS_CONTROL_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891E, .hexadecimal);
pub const GL_TESS_EVALUATION_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x891F, .hexadecimal);
pub const GL_FRAGMENT_SHADER_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8920, .hexadecimal);
pub const GL_REG_0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8921, .hexadecimal);
pub const GL_REG_1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8922, .hexadecimal);
pub const GL_REG_2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8923, .hexadecimal);
pub const GL_REG_3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8924, .hexadecimal);
pub const GL_REG_4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8925, .hexadecimal);
pub const GL_REG_5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8926, .hexadecimal);
pub const GL_REG_6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8927, .hexadecimal);
pub const GL_REG_7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8928, .hexadecimal);
pub const GL_REG_8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8929, .hexadecimal);
pub const GL_REG_9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892A, .hexadecimal);
pub const GL_REG_10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892B, .hexadecimal);
pub const GL_REG_11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892C, .hexadecimal);
pub const GL_REG_12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892D, .hexadecimal);
pub const GL_REG_13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892E, .hexadecimal);
pub const GL_REG_14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x892F, .hexadecimal);
pub const GL_REG_15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8930, .hexadecimal);
pub const GL_REG_16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8931, .hexadecimal);
pub const GL_REG_17_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8932, .hexadecimal);
pub const GL_REG_18_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8933, .hexadecimal);
pub const GL_REG_19_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8934, .hexadecimal);
pub const GL_REG_20_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8935, .hexadecimal);
pub const GL_REG_21_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8936, .hexadecimal);
pub const GL_REG_22_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8937, .hexadecimal);
pub const GL_REG_23_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8938, .hexadecimal);
pub const GL_REG_24_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8939, .hexadecimal);
pub const GL_REG_25_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893A, .hexadecimal);
pub const GL_REG_26_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893B, .hexadecimal);
pub const GL_REG_27_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893C, .hexadecimal);
pub const GL_REG_28_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893D, .hexadecimal);
pub const GL_REG_29_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893E, .hexadecimal);
pub const GL_REG_30_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x893F, .hexadecimal);
pub const GL_REG_31_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8940, .hexadecimal);
pub const GL_CON_0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8941, .hexadecimal);
pub const GL_CON_1_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8942, .hexadecimal);
pub const GL_CON_2_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8943, .hexadecimal);
pub const GL_CON_3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8944, .hexadecimal);
pub const GL_CON_4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8945, .hexadecimal);
pub const GL_CON_5_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8946, .hexadecimal);
pub const GL_CON_6_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8947, .hexadecimal);
pub const GL_CON_7_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8948, .hexadecimal);
pub const GL_CON_8_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8949, .hexadecimal);
pub const GL_CON_9_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894A, .hexadecimal);
pub const GL_CON_10_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894B, .hexadecimal);
pub const GL_CON_11_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894C, .hexadecimal);
pub const GL_CON_12_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894D, .hexadecimal);
pub const GL_CON_13_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894E, .hexadecimal);
pub const GL_CON_14_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x894F, .hexadecimal);
pub const GL_CON_15_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8950, .hexadecimal);
pub const GL_CON_16_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8951, .hexadecimal);
pub const GL_CON_17_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8952, .hexadecimal);
pub const GL_CON_18_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8953, .hexadecimal);
pub const GL_CON_19_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8954, .hexadecimal);
pub const GL_CON_20_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8955, .hexadecimal);
pub const GL_CON_21_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8956, .hexadecimal);
pub const GL_CON_22_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8957, .hexadecimal);
pub const GL_CON_23_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8958, .hexadecimal);
pub const GL_CON_24_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8959, .hexadecimal);
pub const GL_CON_25_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895A, .hexadecimal);
pub const GL_CON_26_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895B, .hexadecimal);
pub const GL_CON_27_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895C, .hexadecimal);
pub const GL_CON_28_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895D, .hexadecimal);
pub const GL_CON_29_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895E, .hexadecimal);
pub const GL_CON_30_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x895F, .hexadecimal);
pub const GL_CON_31_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8960, .hexadecimal);
pub const GL_MOV_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8961, .hexadecimal);
pub const GL_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8963, .hexadecimal);
pub const GL_MUL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8964, .hexadecimal);
pub const GL_SUB_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8965, .hexadecimal);
pub const GL_DOT3_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8966, .hexadecimal);
pub const GL_DOT4_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8967, .hexadecimal);
pub const GL_MAD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8968, .hexadecimal);
pub const GL_LERP_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8969, .hexadecimal);
pub const GL_CND_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896A, .hexadecimal);
pub const GL_CND0_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896B, .hexadecimal);
pub const GL_DOT2_ADD_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896C, .hexadecimal);
pub const GL_SECONDARY_INTERPOLATOR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896D, .hexadecimal);
pub const GL_NUM_FRAGMENT_REGISTERS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896E, .hexadecimal);
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x896F, .hexadecimal);
pub const GL_NUM_PASSES_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8970, .hexadecimal);
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8971, .hexadecimal);
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8972, .hexadecimal);
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8973, .hexadecimal);
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8974, .hexadecimal);
pub const GL_COLOR_ALPHA_PAIRING_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8975, .hexadecimal);
pub const GL_SWIZZLE_STR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8976, .hexadecimal);
pub const GL_SWIZZLE_STQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8977, .hexadecimal);
pub const GL_SWIZZLE_STR_DR_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8978, .hexadecimal);
pub const GL_SWIZZLE_STQ_DQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8979, .hexadecimal);
pub const GL_SWIZZLE_STRQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x897A, .hexadecimal);
pub const GL_SWIZZLE_STRQ_DQ_ATI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x897B, .hexadecimal);
pub const GL_INTERLACE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8980, .hexadecimal);
pub const GL_INTERLACE_READ_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8981, .hexadecimal);
pub const GL_FORMAT_SUBSAMPLE_24_24_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8982, .hexadecimal);
pub const GL_FORMAT_SUBSAMPLE_244_244_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8983, .hexadecimal);
pub const GL_PACK_RESAMPLE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8984, .hexadecimal);
pub const GL_UNPACK_RESAMPLE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8985, .hexadecimal);
pub const GL_RESAMPLE_REPLICATE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8986, .hexadecimal);
pub const GL_RESAMPLE_ZERO_FILL_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8987, .hexadecimal);
pub const GL_RESAMPLE_AVERAGE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8988, .hexadecimal);
pub const GL_RESAMPLE_DECIMATE_OML = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8989, .hexadecimal);
pub const GL_POINT_SIZE_ARRAY_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898A, .hexadecimal);
pub const GL_POINT_SIZE_ARRAY_STRIDE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898B, .hexadecimal);
pub const GL_POINT_SIZE_ARRAY_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898C, .hexadecimal);
pub const GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898D, .hexadecimal);
pub const GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898E, .hexadecimal);
pub const GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x898F, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A00, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A01, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A02, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A03, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A04, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A05, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A06, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A07, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A08, .hexadecimal);
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A09, .hexadecimal);
pub const GL_DRAW_PIXELS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0A, .hexadecimal);
pub const GL_FENCE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0B, .hexadecimal);
pub const GL_ELEMENT_ARRAY_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0C, .hexadecimal);
pub const GL_ELEMENT_ARRAY_TYPE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0D, .hexadecimal);
pub const GL_ELEMENT_ARRAY_POINTER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0E, .hexadecimal);
pub const GL_COLOR_FLOAT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A0F, .hexadecimal);
pub const GL_UNIFORM_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A11, .hexadecimal);
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A12, .hexadecimal);
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A13, .hexadecimal);
pub const GL_AUX_DEPTH_STENCIL_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A14, .hexadecimal);
pub const GL_PACK_ROW_BYTES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A15, .hexadecimal);
pub const GL_UNPACK_ROW_BYTES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A16, .hexadecimal);
pub const GL_RELEASED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A19, .hexadecimal);
pub const GL_VOLATILE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1A, .hexadecimal);
pub const GL_RETAINED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1B, .hexadecimal);
pub const GL_UNDEFINED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1C, .hexadecimal);
pub const GL_PURGEABLE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1D, .hexadecimal);
pub const GL_RGB_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1F, .hexadecimal);
pub const GL_UNIFORM_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A28, .hexadecimal);
pub const GL_UNIFORM_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A29, .hexadecimal);
pub const GL_UNIFORM_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2A, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2B, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2D, .hexadecimal);
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2E, .hexadecimal);
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2F, .hexadecimal);
pub const GL_MAX_UNIFORM_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A30, .hexadecimal);
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A31, .hexadecimal);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hexadecimal);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hexadecimal);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hexadecimal);
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A33, .hexadecimal);
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A34, .hexadecimal);
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A35, .hexadecimal);
pub const GL_ACTIVE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A36, .hexadecimal);
pub const GL_UNIFORM_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A37, .hexadecimal);
pub const GL_UNIFORM_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A38, .hexadecimal);
pub const GL_UNIFORM_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A39, .hexadecimal);
pub const GL_UNIFORM_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3A, .hexadecimal);
pub const GL_UNIFORM_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3B, .hexadecimal);
pub const GL_UNIFORM_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3C, .hexadecimal);
pub const GL_UNIFORM_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3D, .hexadecimal);
pub const GL_UNIFORM_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3E, .hexadecimal);
pub const GL_UNIFORM_BLOCK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A3F, .hexadecimal);
pub const GL_UNIFORM_BLOCK_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A40, .hexadecimal);
pub const GL_UNIFORM_BLOCK_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A41, .hexadecimal);
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A42, .hexadecimal);
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A43, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A44, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A45, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A46, .hexadecimal);
pub const GL_TEXTURE_SRGB_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A48, .hexadecimal);
pub const GL_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A49, .hexadecimal);
pub const GL_SKIP_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4A, .hexadecimal);
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4F, .hexadecimal);
pub const GL_RGB_RAW_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A51, .hexadecimal);
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A52, .hexadecimal);
pub const GL_SYNC_OBJECT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A53, .hexadecimal);
pub const GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A54, .hexadecimal);
pub const GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A55, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A56, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A57, .hexadecimal);
pub const GL_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hexadecimal);
pub const GL_FRAGMENT_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hexadecimal);
pub const GL_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hexadecimal);
pub const GL_VERTEX_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hexadecimal);
pub const GL_PROGRAM_OBJECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hexadecimal);
pub const GL_PROGRAM_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hexadecimal);
pub const GL_SHADER_OBJECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hexadecimal);
pub const GL_SHADER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hexadecimal);
pub const GL_MAX_VARYING_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VARYING_FLOATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VARYING_FLOATS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hexadecimal);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hexadecimal);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hexadecimal);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hexadecimal);
pub const GL_OBJECT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4E, .hexadecimal);
pub const GL_OBJECT_SUBTYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hexadecimal);
pub const GL_SHADER_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hexadecimal);
pub const GL_FLOAT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hexadecimal);
pub const GL_FLOAT_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hexadecimal);
pub const GL_FLOAT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hexadecimal);
pub const GL_FLOAT_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hexadecimal);
pub const GL_FLOAT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hexadecimal);
pub const GL_FLOAT_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hexadecimal);
pub const GL_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hexadecimal);
pub const GL_INT_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hexadecimal);
pub const GL_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hexadecimal);
pub const GL_INT_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hexadecimal);
pub const GL_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hexadecimal);
pub const GL_INT_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hexadecimal);
pub const GL_BOOL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hexadecimal);
pub const GL_BOOL_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hexadecimal);
pub const GL_BOOL_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hexadecimal);
pub const GL_BOOL_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hexadecimal);
pub const GL_BOOL_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hexadecimal);
pub const GL_BOOL_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hexadecimal);
pub const GL_BOOL_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hexadecimal);
pub const GL_BOOL_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hexadecimal);
pub const GL_FLOAT_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hexadecimal);
pub const GL_FLOAT_MAT2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hexadecimal);
pub const GL_FLOAT_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hexadecimal);
pub const GL_FLOAT_MAT3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hexadecimal);
pub const GL_FLOAT_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hexadecimal);
pub const GL_FLOAT_MAT4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hexadecimal);
pub const GL_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hexadecimal);
pub const GL_SAMPLER_1D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hexadecimal);
pub const GL_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hexadecimal);
pub const GL_SAMPLER_2D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hexadecimal);
pub const GL_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hexadecimal);
pub const GL_SAMPLER_3D_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hexadecimal);
pub const GL_SAMPLER_3D_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hexadecimal);
pub const GL_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hexadecimal);
pub const GL_SAMPLER_CUBE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hexadecimal);
pub const GL_SAMPLER_1D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hexadecimal);
pub const GL_SAMPLER_1D_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hexadecimal);
pub const GL_SAMPLER_2D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hexadecimal);
pub const GL_SAMPLER_2D_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hexadecimal);
pub const GL_SAMPLER_2D_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hexadecimal);
pub const GL_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hexadecimal);
pub const GL_SAMPLER_2D_RECT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B63, .hexadecimal);
pub const GL_SAMPLER_2D_RECT_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hexadecimal);
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B64, .hexadecimal);
pub const GL_FLOAT_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hexadecimal);
pub const GL_FLOAT_MAT2x3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hexadecimal);
pub const GL_FLOAT_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hexadecimal);
pub const GL_FLOAT_MAT2x4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hexadecimal);
pub const GL_FLOAT_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hexadecimal);
pub const GL_FLOAT_MAT3x2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hexadecimal);
pub const GL_FLOAT_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hexadecimal);
pub const GL_FLOAT_MAT3x4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hexadecimal);
pub const GL_FLOAT_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hexadecimal);
pub const GL_FLOAT_MAT4x2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hexadecimal);
pub const GL_FLOAT_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hexadecimal);
pub const GL_FLOAT_MAT4x3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hexadecimal);
pub const GL_DELETE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hexadecimal);
pub const GL_OBJECT_DELETE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hexadecimal);
pub const GL_COMPILE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hexadecimal);
pub const GL_OBJECT_COMPILE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hexadecimal);
pub const GL_LINK_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hexadecimal);
pub const GL_OBJECT_LINK_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hexadecimal);
pub const GL_OBJECT_VALIDATE_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hexadecimal);
pub const GL_VALIDATE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hexadecimal);
pub const GL_INFO_LOG_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hexadecimal);
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hexadecimal);
pub const GL_ATTACHED_SHADERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hexadecimal);
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hexadecimal);
pub const GL_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hexadecimal);
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hexadecimal);
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hexadecimal);
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hexadecimal);
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hexadecimal);
pub const GL_SHADER_SOURCE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hexadecimal);
pub const GL_ACTIVE_ATTRIBUTES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hexadecimal);
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hexadecimal);
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hexadecimal);
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hexadecimal);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hexadecimal);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hexadecimal);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hexadecimal);
pub const GL_SHADING_LANGUAGE_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hexadecimal);
pub const GL_SHADING_LANGUAGE_VERSION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hexadecimal);
pub const GL_ACTIVE_PROGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hexadecimal);
pub const GL_CURRENT_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hexadecimal);
pub const GL_PALETTE4_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B90, .hexadecimal);
pub const GL_PALETTE4_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B91, .hexadecimal);
pub const GL_PALETTE4_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B92, .hexadecimal);
pub const GL_PALETTE4_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B93, .hexadecimal);
pub const GL_PALETTE4_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B94, .hexadecimal);
pub const GL_PALETTE8_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B95, .hexadecimal);
pub const GL_PALETTE8_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B96, .hexadecimal);
pub const GL_PALETTE8_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B97, .hexadecimal);
pub const GL_PALETTE8_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B98, .hexadecimal);
pub const GL_PALETTE8_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B99, .hexadecimal);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hexadecimal);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hexadecimal);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hexadecimal);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hexadecimal);
pub const GL_POINT_SIZE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9C, .hexadecimal);
pub const GL_TEXTURE_CROP_RECT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9D, .hexadecimal);
pub const GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9E, .hexadecimal);
pub const GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9F, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_POSITION_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB0, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_CALLBACK_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB1, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB2, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB3, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POSITION_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB4, .hexadecimal);
pub const GL_VERTEX_PROGRAM_CALLBACK_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB5, .hexadecimal);
pub const GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB6, .hexadecimal);
pub const GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB7, .hexadecimal);
pub const GL_TILE_RASTER_ORDER_FIXED_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB8, .hexadecimal);
pub const GL_TILE_RASTER_ORDER_INCREASING_X_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BB9, .hexadecimal);
pub const GL_TILE_RASTER_ORDER_INCREASING_Y_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBA, .hexadecimal);
pub const GL_FRAMEBUFFER_FLIP_Y_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBB, .hexadecimal);
pub const GL_COUNTER_TYPE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC0, .hexadecimal);
pub const GL_COUNTER_RANGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC1, .hexadecimal);
pub const GL_UNSIGNED_INT64_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC2, .hexadecimal);
pub const GL_PERCENTAGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC3, .hexadecimal);
pub const GL_PERFMON_RESULT_AVAILABLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC4, .hexadecimal);
pub const GL_PERFMON_RESULT_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC5, .hexadecimal);
pub const GL_PERFMON_RESULT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC6, .hexadecimal);
pub const GL_TEXTURE_WIDTH_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD2, .hexadecimal);
pub const GL_TEXTURE_HEIGHT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD3, .hexadecimal);
pub const GL_TEXTURE_DEPTH_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD4, .hexadecimal);
pub const GL_TEXTURE_INTERNAL_FORMAT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD5, .hexadecimal);
pub const GL_TEXTURE_FORMAT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD6, .hexadecimal);
pub const GL_TEXTURE_TYPE_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD7, .hexadecimal);
pub const GL_TEXTURE_IMAGE_VALID_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD8, .hexadecimal);
pub const GL_TEXTURE_NUM_LEVELS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD9, .hexadecimal);
pub const GL_TEXTURE_TARGET_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDA, .hexadecimal);
pub const GL_TEXTURE_OBJECT_VALID_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDB, .hexadecimal);
pub const GL_STATE_RESTORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDC, .hexadecimal);
pub const GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BE7, .hexadecimal);
pub const GL_TEXTURE_PROTECTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFA, .hexadecimal);
pub const GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFB, .hexadecimal);
pub const GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFC, .hexadecimal);
pub const GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFD, .hexadecimal);
pub const GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFE, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFF, .hexadecimal);
pub const GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C00, .hexadecimal);
pub const GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C01, .hexadecimal);
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C02, .hexadecimal);
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C03, .hexadecimal);
pub const GL_MODULATE_COLOR_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C04, .hexadecimal);
pub const GL_RECIP_ADD_SIGNED_ALPHA_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C05, .hexadecimal);
pub const GL_TEXTURE_ALPHA_MODULATE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C06, .hexadecimal);
pub const GL_FACTOR_ALPHA_MODULATE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C07, .hexadecimal);
pub const GL_FRAGMENT_ALPHA_MODULATE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C08, .hexadecimal);
pub const GL_ADD_BLEND_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C09, .hexadecimal);
pub const GL_SGX_BINARY_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C0A, .hexadecimal);
pub const GL_TEXTURE_RED_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hexadecimal);
pub const GL_TEXTURE_RED_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C10, .hexadecimal);
pub const GL_TEXTURE_GREEN_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hexadecimal);
pub const GL_TEXTURE_GREEN_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C11, .hexadecimal);
pub const GL_TEXTURE_BLUE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hexadecimal);
pub const GL_TEXTURE_BLUE_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C12, .hexadecimal);
pub const GL_TEXTURE_ALPHA_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hexadecimal);
pub const GL_TEXTURE_ALPHA_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C13, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C14, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C14, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C15, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C15, .hexadecimal);
pub const GL_TEXTURE_DEPTH_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hexadecimal);
pub const GL_TEXTURE_DEPTH_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C16, .hexadecimal);
pub const GL_UNSIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hexadecimal);
pub const GL_UNSIGNED_NORMALIZED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hexadecimal);
pub const GL_UNSIGNED_NORMALIZED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hexadecimal);
pub const GL_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hexadecimal);
pub const GL_TEXTURE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C18, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C19, .hexadecimal);
pub const GL_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hexadecimal);
pub const GL_TEXTURE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1B, .hexadecimal);
pub const GL_TEXTURE_BINDING_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hexadecimal);
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1C, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1D, .hexadecimal);
pub const GL_GEOMETRY_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C26, .hexadecimal);
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C27, .hexadecimal);
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C28, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hexadecimal);
pub const GL_TEXTURE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BINDING_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_FORMAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hexadecimal);
pub const GL_TEXTURE_BUFFER_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2E, .hexadecimal);
pub const GL_ANY_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2F, .hexadecimal);
pub const GL_ANY_SAMPLES_PASSED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2F, .hexadecimal);
pub const GL_SAMPLE_SHADING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hexadecimal);
pub const GL_SAMPLE_SHADING_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hexadecimal);
pub const GL_SAMPLE_SHADING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hexadecimal);
pub const GL_MIN_SAMPLE_SHADING_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hexadecimal);
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hexadecimal);
pub const GL_MIN_SAMPLE_SHADING_VALUE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hexadecimal);
pub const GL_R11F_G11F_B10F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hexadecimal);
pub const GL_R11F_G11F_B10F_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hexadecimal);
pub const GL_R11F_G11F_B10F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hexadecimal);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hexadecimal);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hexadecimal);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hexadecimal);
pub const GL_RGBA_SIGNED_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3C, .hexadecimal);
pub const GL_RGB9_E5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hexadecimal);
pub const GL_RGB9_E5_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hexadecimal);
pub const GL_RGB9_E5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hexadecimal);
pub const GL_UNSIGNED_INT_5_9_9_9_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hexadecimal);
pub const GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hexadecimal);
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hexadecimal);
pub const GL_TEXTURE_SHARED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hexadecimal);
pub const GL_TEXTURE_SHARED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3F, .hexadecimal);
pub const GL_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hexadecimal);
pub const GL_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hexadecimal);
pub const GL_SRGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hexadecimal);
pub const GL_SRGB8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hexadecimal);
pub const GL_SRGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hexadecimal);
pub const GL_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hexadecimal);
pub const GL_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hexadecimal);
pub const GL_SRGB8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hexadecimal);
pub const GL_SRGB8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hexadecimal);
pub const GL_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hexadecimal);
pub const GL_SLUMINANCE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hexadecimal);
pub const GL_SLUMINANCE_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hexadecimal);
pub const GL_SLUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hexadecimal);
pub const GL_SLUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hexadecimal);
pub const GL_SLUMINANCE8_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hexadecimal);
pub const GL_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hexadecimal);
pub const GL_SLUMINANCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hexadecimal);
pub const GL_SLUMINANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hexadecimal);
pub const GL_SLUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hexadecimal);
pub const GL_SLUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hexadecimal);
pub const GL_SLUMINANCE8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hexadecimal);
pub const GL_COMPRESSED_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hexadecimal);
pub const GL_COMPRESSED_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hexadecimal);
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4C, .hexadecimal);
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4C, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4D, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4D, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4E, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4E, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4F, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4F, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C70, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C71, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C72, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C73, .hexadecimal);
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C74, .hexadecimal);
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C75, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C76, .hexadecimal);
pub const GL_BACK_PRIMARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C77, .hexadecimal);
pub const GL_BACK_SECONDARY_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C78, .hexadecimal);
pub const GL_TEXTURE_COORD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C79, .hexadecimal);
pub const GL_CLIP_DISTANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7A, .hexadecimal);
pub const GL_VERTEX_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7B, .hexadecimal);
pub const GL_PRIMITIVE_ID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7C, .hexadecimal);
pub const GL_GENERIC_ATTRIB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7D, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C7F, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C80, .hexadecimal);
pub const GL_ACTIVE_VARYINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C81, .hexadecimal);
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C82, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C83, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C84, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C85, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C86, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_PRIMITIVES_GENERATED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C88, .hexadecimal);
pub const GL_RASTERIZER_DISCARD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hexadecimal);
pub const GL_RASTERIZER_DISCARD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hexadecimal);
pub const GL_RASTERIZER_DISCARD_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C89, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8A, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8B, .hexadecimal);
pub const GL_INTERLEAVED_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hexadecimal);
pub const GL_INTERLEAVED_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hexadecimal);
pub const GL_INTERLEAVED_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8C, .hexadecimal);
pub const GL_SEPARATE_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hexadecimal);
pub const GL_SEPARATE_ATTRIBS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hexadecimal);
pub const GL_SEPARATE_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8D, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8E, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C8F, .hexadecimal);
pub const GL_ATC_RGB_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C92, .hexadecimal);
pub const GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C93, .hexadecimal);
pub const GL_POINT_SPRITE_COORD_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA0, .hexadecimal);
pub const GL_LOWER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hexadecimal);
pub const GL_LOWER_LEFT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hexadecimal);
pub const GL_UPPER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hexadecimal);
pub const GL_UPPER_LEFT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hexadecimal);
pub const GL_STENCIL_BACK_REF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA3, .hexadecimal);
pub const GL_STENCIL_BACK_VALUE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA4, .hexadecimal);
pub const GL_STENCIL_BACK_WRITEMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA5, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_FRAMEBUFFER_BINDING_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_FRAMEBUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hexadecimal);
pub const GL_RENDERBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hexadecimal);
pub const GL_RENDERBUFFER_BINDING_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hexadecimal);
pub const GL_RENDERBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hexadecimal);
pub const GL_RENDERBUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hexadecimal);
pub const GL_READ_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_DRAW_FRAMEBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const GL_READ_FRAMEBUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hexadecimal);
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_RENDERBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_RENDERBUFFER_SAMPLES_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_RENDERBUFFER_SAMPLES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_RENDERBUFFER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_RENDERBUFFER_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hexadecimal);
pub const GL_DEPTH_COMPONENT32F = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAC, .hexadecimal);
pub const GL_DEPTH32F_STENCIL8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAD, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hexadecimal);
pub const GL_FRAMEBUFFER_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hexadecimal);
pub const GL_FRAMEBUFFER_COMPLETE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hexadecimal);
pub const GL_FRAMEBUFFER_COMPLETE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD9, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD9, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD9, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDA, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDA, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDB, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDC, .hexadecimal);
pub const GL_FRAMEBUFFER_UNSUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hexadecimal);
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hexadecimal);
pub const GL_FRAMEBUFFER_UNSUPPORTED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hexadecimal);
pub const GL_MAX_COLOR_ATTACHMENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hexadecimal);
pub const GL_MAX_COLOR_ATTACHMENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hexadecimal);
pub const GL_MAX_COLOR_ATTACHMENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hexadecimal);
pub const GL_COLOR_ATTACHMENT0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT0_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hexadecimal);
pub const GL_COLOR_ATTACHMENT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hexadecimal);
pub const GL_COLOR_ATTACHMENT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hexadecimal);
pub const GL_COLOR_ATTACHMENT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hexadecimal);
pub const GL_COLOR_ATTACHMENT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hexadecimal);
pub const GL_COLOR_ATTACHMENT2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hexadecimal);
pub const GL_COLOR_ATTACHMENT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hexadecimal);
pub const GL_COLOR_ATTACHMENT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hexadecimal);
pub const GL_COLOR_ATTACHMENT3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hexadecimal);
pub const GL_COLOR_ATTACHMENT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hexadecimal);
pub const GL_COLOR_ATTACHMENT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hexadecimal);
pub const GL_COLOR_ATTACHMENT4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hexadecimal);
pub const GL_COLOR_ATTACHMENT5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hexadecimal);
pub const GL_COLOR_ATTACHMENT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hexadecimal);
pub const GL_COLOR_ATTACHMENT5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hexadecimal);
pub const GL_COLOR_ATTACHMENT6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hexadecimal);
pub const GL_COLOR_ATTACHMENT6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hexadecimal);
pub const GL_COLOR_ATTACHMENT6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hexadecimal);
pub const GL_COLOR_ATTACHMENT7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hexadecimal);
pub const GL_COLOR_ATTACHMENT7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hexadecimal);
pub const GL_COLOR_ATTACHMENT7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hexadecimal);
pub const GL_COLOR_ATTACHMENT8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hexadecimal);
pub const GL_COLOR_ATTACHMENT8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hexadecimal);
pub const GL_COLOR_ATTACHMENT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hexadecimal);
pub const GL_COLOR_ATTACHMENT9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hexadecimal);
pub const GL_COLOR_ATTACHMENT9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hexadecimal);
pub const GL_COLOR_ATTACHMENT9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hexadecimal);
pub const GL_COLOR_ATTACHMENT10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hexadecimal);
pub const GL_COLOR_ATTACHMENT10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hexadecimal);
pub const GL_COLOR_ATTACHMENT10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hexadecimal);
pub const GL_COLOR_ATTACHMENT11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hexadecimal);
pub const GL_COLOR_ATTACHMENT11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hexadecimal);
pub const GL_COLOR_ATTACHMENT11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hexadecimal);
pub const GL_COLOR_ATTACHMENT12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hexadecimal);
pub const GL_COLOR_ATTACHMENT12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hexadecimal);
pub const GL_COLOR_ATTACHMENT12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hexadecimal);
pub const GL_COLOR_ATTACHMENT13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hexadecimal);
pub const GL_COLOR_ATTACHMENT13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hexadecimal);
pub const GL_COLOR_ATTACHMENT13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hexadecimal);
pub const GL_COLOR_ATTACHMENT14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hexadecimal);
pub const GL_COLOR_ATTACHMENT14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hexadecimal);
pub const GL_COLOR_ATTACHMENT14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hexadecimal);
pub const GL_COLOR_ATTACHMENT15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hexadecimal);
pub const GL_COLOR_ATTACHMENT15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hexadecimal);
pub const GL_COLOR_ATTACHMENT15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hexadecimal);
pub const GL_COLOR_ATTACHMENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF0, .hexadecimal);
pub const GL_COLOR_ATTACHMENT17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF1, .hexadecimal);
pub const GL_COLOR_ATTACHMENT18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF2, .hexadecimal);
pub const GL_COLOR_ATTACHMENT19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF3, .hexadecimal);
pub const GL_COLOR_ATTACHMENT20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF4, .hexadecimal);
pub const GL_COLOR_ATTACHMENT21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF5, .hexadecimal);
pub const GL_COLOR_ATTACHMENT22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF6, .hexadecimal);
pub const GL_COLOR_ATTACHMENT23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF7, .hexadecimal);
pub const GL_COLOR_ATTACHMENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF8, .hexadecimal);
pub const GL_COLOR_ATTACHMENT25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CF9, .hexadecimal);
pub const GL_COLOR_ATTACHMENT26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFA, .hexadecimal);
pub const GL_COLOR_ATTACHMENT27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFB, .hexadecimal);
pub const GL_COLOR_ATTACHMENT28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFC, .hexadecimal);
pub const GL_COLOR_ATTACHMENT29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFD, .hexadecimal);
pub const GL_COLOR_ATTACHMENT30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFE, .hexadecimal);
pub const GL_COLOR_ATTACHMENT31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CFF, .hexadecimal);
pub const GL_DEPTH_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hexadecimal);
pub const GL_DEPTH_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hexadecimal);
pub const GL_DEPTH_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hexadecimal);
pub const GL_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hexadecimal);
pub const GL_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hexadecimal);
pub const GL_STENCIL_ATTACHMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hexadecimal);
pub const GL_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hexadecimal);
pub const GL_FRAMEBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hexadecimal);
pub const GL_FRAMEBUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hexadecimal);
pub const GL_RENDERBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hexadecimal);
pub const GL_RENDERBUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hexadecimal);
pub const GL_RENDERBUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hexadecimal);
pub const GL_RENDERBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hexadecimal);
pub const GL_RENDERBUFFER_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hexadecimal);
pub const GL_RENDERBUFFER_WIDTH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hexadecimal);
pub const GL_RENDERBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hexadecimal);
pub const GL_RENDERBUFFER_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hexadecimal);
pub const GL_RENDERBUFFER_HEIGHT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hexadecimal);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hexadecimal);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hexadecimal);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hexadecimal);
pub const GL_STENCIL_INDEX1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hexadecimal);
pub const GL_STENCIL_INDEX1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hexadecimal);
pub const GL_STENCIL_INDEX1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hexadecimal);
pub const GL_STENCIL_INDEX4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hexadecimal);
pub const GL_STENCIL_INDEX4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hexadecimal);
pub const GL_STENCIL_INDEX4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hexadecimal);
pub const GL_STENCIL_INDEX8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hexadecimal);
pub const GL_STENCIL_INDEX8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hexadecimal);
pub const GL_STENCIL_INDEX8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hexadecimal);
pub const GL_STENCIL_INDEX16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hexadecimal);
pub const GL_STENCIL_INDEX16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D49, .hexadecimal);
pub const GL_RENDERBUFFER_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hexadecimal);
pub const GL_RENDERBUFFER_RED_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hexadecimal);
pub const GL_RENDERBUFFER_RED_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hexadecimal);
pub const GL_RENDERBUFFER_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hexadecimal);
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hexadecimal);
pub const GL_RENDERBUFFER_GREEN_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hexadecimal);
pub const GL_RENDERBUFFER_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hexadecimal);
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hexadecimal);
pub const GL_RENDERBUFFER_BLUE_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hexadecimal);
pub const GL_RENDERBUFFER_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hexadecimal);
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hexadecimal);
pub const GL_RENDERBUFFER_ALPHA_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hexadecimal);
pub const GL_RENDERBUFFER_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hexadecimal);
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hexadecimal);
pub const GL_RENDERBUFFER_DEPTH_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hexadecimal);
pub const GL_RENDERBUFFER_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hexadecimal);
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hexadecimal);
pub const GL_RENDERBUFFER_STENCIL_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hexadecimal);
pub const GL_MAX_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const GL_MAX_SAMPLES_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const GL_MAX_SAMPLES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const GL_MAX_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const GL_MAX_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hexadecimal);
pub const GL_TEXTURE_GEN_STR_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D60, .hexadecimal);
pub const GL_HALF_FLOAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D61, .hexadecimal);
pub const GL_RGB565 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hexadecimal);
pub const GL_RGB565_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hexadecimal);
pub const GL_ETC1_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D64, .hexadecimal);
pub const GL_TEXTURE_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D65, .hexadecimal);
pub const GL_SAMPLER_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D66, .hexadecimal);
pub const GL_TEXTURE_BINDING_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D67, .hexadecimal);
pub const GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D68, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D69, .hexadecimal);
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6A, .hexadecimal);
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6A, .hexadecimal);
pub const GL_MAX_ELEMENT_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6B, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6C, .hexadecimal);
pub const GL_RGBA32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hexadecimal);
pub const GL_RGBA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D70, .hexadecimal);
pub const GL_RGB32UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hexadecimal);
pub const GL_RGB32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D71, .hexadecimal);
pub const GL_ALPHA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D72, .hexadecimal);
pub const GL_INTENSITY32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D73, .hexadecimal);
pub const GL_LUMINANCE32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D74, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D75, .hexadecimal);
pub const GL_RGBA16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hexadecimal);
pub const GL_RGBA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D76, .hexadecimal);
pub const GL_RGB16UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hexadecimal);
pub const GL_RGB16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D77, .hexadecimal);
pub const GL_ALPHA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D78, .hexadecimal);
pub const GL_INTENSITY16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D79, .hexadecimal);
pub const GL_LUMINANCE16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7A, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7B, .hexadecimal);
pub const GL_RGBA8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hexadecimal);
pub const GL_RGBA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7C, .hexadecimal);
pub const GL_RGB8UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hexadecimal);
pub const GL_RGB8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7D, .hexadecimal);
pub const GL_ALPHA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7E, .hexadecimal);
pub const GL_INTENSITY8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D7F, .hexadecimal);
pub const GL_LUMINANCE8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D80, .hexadecimal);
pub const GL_LUMINANCE_ALPHA8UI_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D81, .hexadecimal);
pub const GL_RGBA32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hexadecimal);
pub const GL_RGBA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D82, .hexadecimal);
pub const GL_RGB32I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hexadecimal);
pub const GL_RGB32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D83, .hexadecimal);
pub const GL_ALPHA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D84, .hexadecimal);
pub const GL_INTENSITY32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D85, .hexadecimal);
pub const GL_LUMINANCE32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D86, .hexadecimal);
pub const GL_LUMINANCE_ALPHA32I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D87, .hexadecimal);
pub const GL_RGBA16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hexadecimal);
pub const GL_RGBA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D88, .hexadecimal);
pub const GL_RGB16I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hexadecimal);
pub const GL_RGB16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D89, .hexadecimal);
pub const GL_ALPHA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8A, .hexadecimal);
pub const GL_INTENSITY16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8B, .hexadecimal);
pub const GL_LUMINANCE16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8C, .hexadecimal);
pub const GL_LUMINANCE_ALPHA16I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8D, .hexadecimal);
pub const GL_RGBA8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hexadecimal);
pub const GL_RGBA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8E, .hexadecimal);
pub const GL_RGB8I = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hexadecimal);
pub const GL_RGB8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D8F, .hexadecimal);
pub const GL_ALPHA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D90, .hexadecimal);
pub const GL_INTENSITY8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D91, .hexadecimal);
pub const GL_LUMINANCE8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D92, .hexadecimal);
pub const GL_LUMINANCE_ALPHA8I_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D93, .hexadecimal);
pub const GL_RED_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hexadecimal);
pub const GL_RED_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D94, .hexadecimal);
pub const GL_GREEN_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hexadecimal);
pub const GL_GREEN_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D95, .hexadecimal);
pub const GL_BLUE_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hexadecimal);
pub const GL_BLUE_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D96, .hexadecimal);
pub const GL_ALPHA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D97, .hexadecimal);
pub const GL_ALPHA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D97, .hexadecimal);
pub const GL_RGB_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hexadecimal);
pub const GL_RGB_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D98, .hexadecimal);
pub const GL_RGBA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hexadecimal);
pub const GL_RGBA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D99, .hexadecimal);
pub const GL_BGR_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hexadecimal);
pub const GL_BGR_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9A, .hexadecimal);
pub const GL_BGRA_INTEGER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hexadecimal);
pub const GL_BGRA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9B, .hexadecimal);
pub const GL_LUMINANCE_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9C, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9D, .hexadecimal);
pub const GL_RGBA_INTEGER_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9E, .hexadecimal);
pub const GL_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D9F, .hexadecimal);
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA0, .hexadecimal);
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA1, .hexadecimal);
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA2, .hexadecimal);
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA3, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA4, .hexadecimal);
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA5, .hexadecimal);
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA6, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA9, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA9, .hexadecimal);
pub const GL_LAYER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAA, .hexadecimal);
pub const GL_DEPTH_COMPONENT32F_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAB, .hexadecimal);
pub const GL_DEPTH32F_STENCIL8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAC, .hexadecimal);
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hexadecimal);
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAD, .hexadecimal);
pub const GL_SHADER_INCLUDE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAE, .hexadecimal);
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DAF, .hexadecimal);
pub const GL_FRAMEBUFFER_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hexadecimal);
pub const GL_FRAMEBUFFER_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hexadecimal);
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBA, .hexadecimal);
pub const GL_COMPRESSED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hexadecimal);
pub const GL_COMPRESSED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hexadecimal);
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hexadecimal);
pub const GL_COMPRESSED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC0, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC1, .hexadecimal);
pub const GL_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hexadecimal);
pub const GL_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hexadecimal);
pub const GL_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hexadecimal);
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC3, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hexadecimal);
pub const GL_SAMPLER_2D_ARRAY_SHADOW_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hexadecimal);
pub const GL_SAMPLER_CUBE_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hexadecimal);
pub const GL_SAMPLER_CUBE_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hexadecimal);
pub const GL_SAMPLER_CUBE_SHADOW_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC6, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC7, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hexadecimal);
pub const GL_UNSIGNED_INT_VEC4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC8, .hexadecimal);
pub const GL_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hexadecimal);
pub const GL_INT_SAMPLER_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC9, .hexadecimal);
pub const GL_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hexadecimal);
pub const GL_INT_SAMPLER_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCA, .hexadecimal);
pub const GL_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hexadecimal);
pub const GL_INT_SAMPLER_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCB, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCC, .hexadecimal);
pub const GL_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hexadecimal);
pub const GL_INT_SAMPLER_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCD, .hexadecimal);
pub const GL_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hexadecimal);
pub const GL_INT_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCE, .hexadecimal);
pub const GL_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hexadecimal);
pub const GL_INT_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DCF, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD1, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD2, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD3, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD4, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD5, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD6, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD7, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hexadecimal);
pub const GL_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_GEOMETRY_SHADER_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_GEOMETRY_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_GEOMETRY_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hexadecimal);
pub const GL_GEOMETRY_VERTICES_OUT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDA, .hexadecimal);
pub const GL_GEOMETRY_VERTICES_OUT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDA, .hexadecimal);
pub const GL_GEOMETRY_INPUT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDB, .hexadecimal);
pub const GL_GEOMETRY_INPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDB, .hexadecimal);
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDC, .hexadecimal);
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDC, .hexadecimal);
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDD, .hexadecimal);
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDD, .hexadecimal);
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDE, .hexadecimal);
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDE, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hexadecimal);
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE2, .hexadecimal);
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE3, .hexadecimal);
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE4, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE5, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE6, .hexadecimal);
pub const GL_MAX_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE7, .hexadecimal);
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE8, .hexadecimal);
pub const GL_NAMED_STRING_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE9, .hexadecimal);
pub const GL_NAMED_STRING_TYPE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEA, .hexadecimal);
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DED, .hexadecimal);
pub const GL_UNIFORM_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEE, .hexadecimal);
pub const GL_UNIFORM_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DEF, .hexadecimal);
pub const GL_LOW_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF0, .hexadecimal);
pub const GL_MEDIUM_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF1, .hexadecimal);
pub const GL_HIGH_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF2, .hexadecimal);
pub const GL_LOW_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF3, .hexadecimal);
pub const GL_MEDIUM_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF4, .hexadecimal);
pub const GL_HIGH_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF5, .hexadecimal);
pub const GL_UNSIGNED_INT_10_10_10_2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF6, .hexadecimal);
pub const GL_INT_10_10_10_2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF7, .hexadecimal);
pub const GL_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF8, .hexadecimal);
pub const GL_NUM_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF9, .hexadecimal);
pub const GL_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFA, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFB, .hexadecimal);
pub const GL_MAX_VARYING_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFC, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFD, .hexadecimal);
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E10, .hexadecimal);
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E11, .hexadecimal);
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E12, .hexadecimal);
pub const GL_QUERY_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hexadecimal);
pub const GL_QUERY_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hexadecimal);
pub const GL_QUERY_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hexadecimal);
pub const GL_QUERY_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hexadecimal);
pub const GL_QUERY_BY_REGION_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hexadecimal);
pub const GL_QUERY_BY_REGION_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hexadecimal);
pub const GL_QUERY_BY_REGION_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hexadecimal);
pub const GL_QUERY_BY_REGION_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hexadecimal);
pub const GL_QUERY_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E17, .hexadecimal);
pub const GL_QUERY_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E18, .hexadecimal);
pub const GL_QUERY_BY_REGION_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E19, .hexadecimal);
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1A, .hexadecimal);
pub const GL_POLYGON_OFFSET_CLAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hexadecimal);
pub const GL_POLYGON_OFFSET_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hexadecimal);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hexadecimal);
pub const GL_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E20, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_PAUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E23, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E24, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E25, .hexadecimal);
pub const GL_FRAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E26, .hexadecimal);
pub const GL_FIELDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E27, .hexadecimal);
pub const GL_CURRENT_TIME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hexadecimal);
pub const GL_TIMESTAMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hexadecimal);
pub const GL_TIMESTAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hexadecimal);
pub const GL_NUM_FILL_STREAMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E29, .hexadecimal);
pub const GL_PRESENT_TIME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2A, .hexadecimal);
pub const GL_PRESENT_DURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2B, .hexadecimal);
pub const GL_DEPTH_COMPONENT16_NONLINEAR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2C, .hexadecimal);
pub const GL_PROGRAM_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2D, .hexadecimal);
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2E, .hexadecimal);
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2F, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_R_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E42, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_G = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_G_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E43, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_B = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_B_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E44, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_A = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_A_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E45, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hexadecimal);
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E46, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E47, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E48, .hexadecimal);
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E49, .hexadecimal);
pub const GL_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4A, .hexadecimal);
pub const GL_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4B, .hexadecimal);
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hexadecimal);
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4C, .hexadecimal);
pub const GL_FIRST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hexadecimal);
pub const GL_FIRST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hexadecimal);
pub const GL_FIRST_VERTEX_CONVENTION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hexadecimal);
pub const GL_LAST_VERTEX_CONVENTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hexadecimal);
pub const GL_LAST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hexadecimal);
pub const GL_LAST_VERTEX_CONVENTION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hexadecimal);
pub const GL_PROVOKING_VERTEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hexadecimal);
pub const GL_PROVOKING_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4F, .hexadecimal);
pub const GL_SAMPLE_LOCATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_POSITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hexadecimal);
pub const GL_SAMPLE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hexadecimal);
pub const GL_SAMPLE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E51, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hexadecimal);
pub const GL_SAMPLE_MASK_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E52, .hexadecimal);
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E53, .hexadecimal);
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E54, .hexadecimal);
pub const GL_TEXTURE_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E55, .hexadecimal);
pub const GL_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E56, .hexadecimal);
pub const GL_INT_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E57, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E58, .hexadecimal);
pub const GL_MAX_SAMPLE_MASK_WORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hexadecimal);
pub const GL_MAX_SAMPLE_MASK_WORDS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E59, .hexadecimal);
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hexadecimal);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hexadecimal);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hexadecimal);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hexadecimal);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hexadecimal);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hexadecimal);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hexadecimal);
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hexadecimal);
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hexadecimal);
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hexadecimal);
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5E, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5F, .hexadecimal);
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E60, .hexadecimal);
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E61, .hexadecimal);
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E62, .hexadecimal);
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E63, .hexadecimal);
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E64, .hexadecimal);
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E65, .hexadecimal);
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E66, .hexadecimal);
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E67, .hexadecimal);
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E68, .hexadecimal);
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E69, .hexadecimal);
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6A, .hexadecimal);
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6B, .hexadecimal);
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6C, .hexadecimal);
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6D, .hexadecimal);
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6E, .hexadecimal);
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6F, .hexadecimal);
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E70, .hexadecimal);
pub const GL_MAX_VERTEX_STREAMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E71, .hexadecimal);
pub const GL_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hexadecimal);
pub const GL_PATCH_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hexadecimal);
pub const GL_PATCH_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hexadecimal);
pub const GL_PATCH_DEFAULT_INNER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E73, .hexadecimal);
pub const GL_PATCH_DEFAULT_INNER_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E73, .hexadecimal);
pub const GL_PATCH_DEFAULT_OUTER_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E74, .hexadecimal);
pub const GL_PATCH_DEFAULT_OUTER_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E74, .hexadecimal);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hexadecimal);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hexadecimal);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hexadecimal);
pub const GL_TESS_GEN_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hexadecimal);
pub const GL_TESS_GEN_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hexadecimal);
pub const GL_TESS_GEN_MODE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hexadecimal);
pub const GL_TESS_GEN_SPACING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hexadecimal);
pub const GL_TESS_GEN_SPACING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hexadecimal);
pub const GL_TESS_GEN_SPACING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hexadecimal);
pub const GL_TESS_GEN_VERTEX_ORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hexadecimal);
pub const GL_TESS_GEN_VERTEX_ORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hexadecimal);
pub const GL_TESS_GEN_VERTEX_ORDER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hexadecimal);
pub const GL_TESS_GEN_POINT_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hexadecimal);
pub const GL_TESS_GEN_POINT_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hexadecimal);
pub const GL_TESS_GEN_POINT_MODE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hexadecimal);
pub const GL_ISOLINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hexadecimal);
pub const GL_ISOLINES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hexadecimal);
pub const GL_ISOLINES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hexadecimal);
pub const GL_FRACTIONAL_ODD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hexadecimal);
pub const GL_FRACTIONAL_ODD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hexadecimal);
pub const GL_FRACTIONAL_ODD_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hexadecimal);
pub const GL_FRACTIONAL_EVEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hexadecimal);
pub const GL_FRACTIONAL_EVEN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hexadecimal);
pub const GL_FRACTIONAL_EVEN_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hexadecimal);
pub const GL_MAX_PATCH_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hexadecimal);
pub const GL_MAX_PATCH_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hexadecimal);
pub const GL_MAX_PATCH_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hexadecimal);
pub const GL_MAX_TESS_GEN_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hexadecimal);
pub const GL_MAX_TESS_GEN_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hexadecimal);
pub const GL_MAX_TESS_GEN_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hexadecimal);
pub const GL_MAX_TESS_PATCH_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hexadecimal);
pub const GL_MAX_TESS_PATCH_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hexadecimal);
pub const GL_MAX_TESS_PATCH_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hexadecimal);
pub const GL_TESS_EVALUATION_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hexadecimal);
pub const GL_TESS_CONTROL_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hexadecimal);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hexadecimal);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hexadecimal);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hexadecimal);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hexadecimal);
pub const GL_COVERAGE_COMPONENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED0, .hexadecimal);
pub const GL_COVERAGE_COMPONENT4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED1, .hexadecimal);
pub const GL_COVERAGE_ATTACHMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED2, .hexadecimal);
pub const GL_COVERAGE_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED3, .hexadecimal);
pub const GL_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED4, .hexadecimal);
pub const GL_COVERAGE_ALL_FRAGMENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED5, .hexadecimal);
pub const GL_COVERAGE_EDGE_FRAGMENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED6, .hexadecimal);
pub const GL_COVERAGE_AUTOMATIC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED7, .hexadecimal);
pub const GL_INCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F10, .hexadecimal);
pub const GL_EXCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F11, .hexadecimal);
pub const GL_WINDOW_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F12, .hexadecimal);
pub const GL_WINDOW_RECTANGLE_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F13, .hexadecimal);
pub const GL_MAX_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F14, .hexadecimal);
pub const GL_NUM_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F15, .hexadecimal);
pub const GL_BUFFER_GPU_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1D, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1E, .hexadecimal);
pub const GL_ELEMENT_ARRAY_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F1F, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F20, .hexadecimal);
pub const GL_VERTEX_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F21, .hexadecimal);
pub const GL_NORMAL_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F22, .hexadecimal);
pub const GL_COLOR_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F23, .hexadecimal);
pub const GL_INDEX_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F24, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F25, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F26, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F27, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F28, .hexadecimal);
pub const GL_ELEMENT_ARRAY_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F29, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2A, .hexadecimal);
pub const GL_VERTEX_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2B, .hexadecimal);
pub const GL_NORMAL_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2C, .hexadecimal);
pub const GL_COLOR_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2D, .hexadecimal);
pub const GL_INDEX_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2E, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F2F, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F30, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F31, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F32, .hexadecimal);
pub const GL_ELEMENT_ARRAY_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F33, .hexadecimal);
pub const GL_GPU_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F34, .hexadecimal);
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F35, .hexadecimal);
pub const GL_COPY_READ_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hexadecimal);
pub const GL_COPY_READ_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hexadecimal);
pub const GL_COPY_READ_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hexadecimal);
pub const GL_COPY_WRITE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hexadecimal);
pub const GL_COPY_WRITE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hexadecimal);
pub const GL_COPY_WRITE_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hexadecimal);
pub const GL_MAX_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hexadecimal);
pub const GL_MAX_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F38, .hexadecimal);
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F39, .hexadecimal);
pub const GL_IMAGE_BINDING_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hexadecimal);
pub const GL_IMAGE_BINDING_NAME_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3A, .hexadecimal);
pub const GL_IMAGE_BINDING_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hexadecimal);
pub const GL_IMAGE_BINDING_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3B, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3C, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hexadecimal);
pub const GL_IMAGE_BINDING_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3D, .hexadecimal);
pub const GL_IMAGE_BINDING_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hexadecimal);
pub const GL_IMAGE_BINDING_ACCESS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3E, .hexadecimal);
pub const GL_DRAW_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F3F, .hexadecimal);
pub const GL_DRAW_INDIRECT_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F40, .hexadecimal);
pub const GL_DRAW_INDIRECT_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F41, .hexadecimal);
pub const GL_DRAW_INDIRECT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F42, .hexadecimal);
pub const GL_DRAW_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F43, .hexadecimal);
pub const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F44, .hexadecimal);
pub const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F45, .hexadecimal);
pub const GL_DOUBLE_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hexadecimal);
pub const GL_DOUBLE_MAT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F46, .hexadecimal);
pub const GL_DOUBLE_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hexadecimal);
pub const GL_DOUBLE_MAT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F47, .hexadecimal);
pub const GL_DOUBLE_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hexadecimal);
pub const GL_DOUBLE_MAT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F48, .hexadecimal);
pub const GL_DOUBLE_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hexadecimal);
pub const GL_DOUBLE_MAT2x3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F49, .hexadecimal);
pub const GL_DOUBLE_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hexadecimal);
pub const GL_DOUBLE_MAT2x4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4A, .hexadecimal);
pub const GL_DOUBLE_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hexadecimal);
pub const GL_DOUBLE_MAT3x2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4B, .hexadecimal);
pub const GL_DOUBLE_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hexadecimal);
pub const GL_DOUBLE_MAT3x4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4C, .hexadecimal);
pub const GL_DOUBLE_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hexadecimal);
pub const GL_DOUBLE_MAT4x2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4D, .hexadecimal);
pub const GL_DOUBLE_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hexadecimal);
pub const GL_DOUBLE_MAT4x3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4E, .hexadecimal);
pub const GL_VERTEX_BINDING_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F4F, .hexadecimal);
pub const GL_MALI_SHADER_BINARY_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F60, .hexadecimal);
pub const GL_MALI_PROGRAM_BINARY_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F61, .hexadecimal);
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F63, .hexadecimal);
pub const GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F64, .hexadecimal);
pub const GL_FETCH_PER_SAMPLE_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F65, .hexadecimal);
pub const GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F66, .hexadecimal);
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F67, .hexadecimal);
pub const GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F69, .hexadecimal);
pub const GL_RED_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F90, .hexadecimal);
pub const GL_RG_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F91, .hexadecimal);
pub const GL_RGB_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F92, .hexadecimal);
pub const GL_RGBA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F93, .hexadecimal);
pub const GL_R8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F94, .hexadecimal);
pub const GL_RG8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F95, .hexadecimal);
pub const GL_RGB8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F96, .hexadecimal);
pub const GL_RGBA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F97, .hexadecimal);
pub const GL_R16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F98, .hexadecimal);
pub const GL_R16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F98, .hexadecimal);
pub const GL_RG16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F99, .hexadecimal);
pub const GL_RG16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F99, .hexadecimal);
pub const GL_RGB16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9A, .hexadecimal);
pub const GL_RGB16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9A, .hexadecimal);
pub const GL_RGBA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9B, .hexadecimal);
pub const GL_RGBA16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9B, .hexadecimal);
pub const GL_SIGNED_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9C, .hexadecimal);
pub const GL_PRIMITIVE_RESTART = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9D, .hexadecimal);
pub const GL_PRIMITIVE_RESTART_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9E, .hexadecimal);
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9F, .hexadecimal);
pub const GL_PERFMON_GLOBAL_MODE_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FA0, .hexadecimal);
pub const GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FA1, .hexadecimal);
pub const GL_BINNING_CONTROL_HINT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB0, .hexadecimal);
pub const GL_CPU_OPTIMIZED_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB1, .hexadecimal);
pub const GL_GPU_OPTIMIZED_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB2, .hexadecimal);
pub const GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB3, .hexadecimal);
pub const GL_GPU_DISJOINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBB, .hexadecimal);
pub const GL_SR8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBD, .hexadecimal);
pub const GL_SRG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBE, .hexadecimal);
pub const GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBF, .hexadecimal);
pub const GL_SHADER_BINARY_VIV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FC4, .hexadecimal);
pub const GL_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE0, .hexadecimal);
pub const GL_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE1, .hexadecimal);
pub const GL_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE2, .hexadecimal);
pub const GL_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE3, .hexadecimal);
pub const GL_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE4, .hexadecimal);
pub const GL_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE5, .hexadecimal);
pub const GL_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE6, .hexadecimal);
pub const GL_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE7, .hexadecimal);
pub const GL_INT64_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hexadecimal);
pub const GL_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hexadecimal);
pub const GL_INT64_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hexadecimal);
pub const GL_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hexadecimal);
pub const GL_INT64_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hexadecimal);
pub const GL_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hexadecimal);
pub const GL_UNSIGNED_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEC, .hexadecimal);
pub const GL_UNSIGNED_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FED, .hexadecimal);
pub const GL_UNSIGNED_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEE, .hexadecimal);
pub const GL_UNSIGNED_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEF, .hexadecimal);
pub const GL_UNSIGNED_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF0, .hexadecimal);
pub const GL_UNSIGNED_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF1, .hexadecimal);
pub const GL_UNSIGNED_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF2, .hexadecimal);
pub const GL_UNSIGNED_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF3, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC2_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC3_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC4_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hexadecimal);
pub const GL_UNSIGNED_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hexadecimal);
pub const GL_FLOAT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF8, .hexadecimal);
pub const GL_FLOAT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF9, .hexadecimal);
pub const GL_FLOAT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFA, .hexadecimal);
pub const GL_FLOAT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFB, .hexadecimal);
pub const GL_DOUBLE_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hexadecimal);
pub const GL_DOUBLE_VEC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFC, .hexadecimal);
pub const GL_DOUBLE_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hexadecimal);
pub const GL_DOUBLE_VEC3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFD, .hexadecimal);
pub const GL_DOUBLE_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hexadecimal);
pub const GL_DOUBLE_VEC4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFE, .hexadecimal);
pub const GL_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9001, .hexadecimal);
pub const GL_INT_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9002, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9003, .hexadecimal);
pub const GL_TESSELLATION_MODE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9004, .hexadecimal);
pub const GL_TESSELLATION_FACTOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9005, .hexadecimal);
pub const GL_DISCRETE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9006, .hexadecimal);
pub const GL_CONTINUOUS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9007, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900B, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hexadecimal);
pub const GL_ALPHA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9010, .hexadecimal);
pub const GL_LUMINANCE_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9011, .hexadecimal);
pub const GL_LUMINANCE_ALPHA_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9012, .hexadecimal);
pub const GL_INTENSITY_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9013, .hexadecimal);
pub const GL_ALPHA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9014, .hexadecimal);
pub const GL_LUMINANCE8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9015, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9016, .hexadecimal);
pub const GL_INTENSITY8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9017, .hexadecimal);
pub const GL_ALPHA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9018, .hexadecimal);
pub const GL_LUMINANCE16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9019, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901A, .hexadecimal);
pub const GL_INTENSITY16_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901B, .hexadecimal);
pub const GL_FACTOR_MIN_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901C, .hexadecimal);
pub const GL_FACTOR_MAX_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901D, .hexadecimal);
pub const GL_DEPTH_CLAMP_NEAR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901E, .hexadecimal);
pub const GL_DEPTH_CLAMP_FAR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901F, .hexadecimal);
pub const GL_VIDEO_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9020, .hexadecimal);
pub const GL_VIDEO_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9021, .hexadecimal);
pub const GL_FIELD_UPPER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9022, .hexadecimal);
pub const GL_FIELD_LOWER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9023, .hexadecimal);
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9024, .hexadecimal);
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9025, .hexadecimal);
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9026, .hexadecimal);
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9027, .hexadecimal);
pub const GL_VIDEO_BUFFER_PITCH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9028, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9029, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902A, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902B, .hexadecimal);
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902C, .hexadecimal);
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902D, .hexadecimal);
pub const GL_PARTIAL_SUCCESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902E, .hexadecimal);
pub const GL_SUCCESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x902F, .hexadecimal);
pub const GL_FAILURE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9030, .hexadecimal);
pub const GL_YCBYCR8_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9031, .hexadecimal);
pub const GL_YCBAYCR8A_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9032, .hexadecimal);
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9033, .hexadecimal);
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9034, .hexadecimal);
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9035, .hexadecimal);
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9036, .hexadecimal);
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9037, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9038, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9039, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903A, .hexadecimal);
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903B, .hexadecimal);
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x903C, .hexadecimal);
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9045, .hexadecimal);
pub const GL_TEXTURE_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9046, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9047, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9048, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9049, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904A, .hexadecimal);
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904B, .hexadecimal);
pub const GL_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hexadecimal);
pub const GL_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904C, .hexadecimal);
pub const GL_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hexadecimal);
pub const GL_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904D, .hexadecimal);
pub const GL_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hexadecimal);
pub const GL_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904E, .hexadecimal);
pub const GL_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hexadecimal);
pub const GL_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x904F, .hexadecimal);
pub const GL_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hexadecimal);
pub const GL_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9050, .hexadecimal);
pub const GL_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hexadecimal);
pub const GL_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hexadecimal);
pub const GL_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hexadecimal);
pub const GL_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hexadecimal);
pub const GL_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9052, .hexadecimal);
pub const GL_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hexadecimal);
pub const GL_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9053, .hexadecimal);
pub const GL_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hexadecimal);
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hexadecimal);
pub const GL_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9055, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hexadecimal);
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9056, .hexadecimal);
pub const GL_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hexadecimal);
pub const GL_INT_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9057, .hexadecimal);
pub const GL_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hexadecimal);
pub const GL_INT_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9058, .hexadecimal);
pub const GL_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hexadecimal);
pub const GL_INT_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9059, .hexadecimal);
pub const GL_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hexadecimal);
pub const GL_INT_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905A, .hexadecimal);
pub const GL_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905B, .hexadecimal);
pub const GL_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hexadecimal);
pub const GL_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hexadecimal);
pub const GL_INT_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hexadecimal);
pub const GL_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hexadecimal);
pub const GL_INT_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905D, .hexadecimal);
pub const GL_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hexadecimal);
pub const GL_INT_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905E, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hexadecimal);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9060, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hexadecimal);
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9061, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9062, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9063, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9064, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9065, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9066, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9068, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9069, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906B, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hexadecimal);
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906C, .hexadecimal);
pub const GL_MAX_IMAGE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hexadecimal);
pub const GL_MAX_IMAGE_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906D, .hexadecimal);
pub const GL_IMAGE_BINDING_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hexadecimal);
pub const GL_IMAGE_BINDING_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906E, .hexadecimal);
pub const GL_RGB10_A2UI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906F, .hexadecimal);
pub const GL_PATH_FORMAT_SVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9070, .hexadecimal);
pub const GL_PATH_FORMAT_PS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9071, .hexadecimal);
pub const GL_STANDARD_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9072, .hexadecimal);
pub const GL_SYSTEM_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9073, .hexadecimal);
pub const GL_FILE_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9074, .hexadecimal);
pub const GL_PATH_STROKE_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9075, .hexadecimal);
pub const GL_PATH_END_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9076, .hexadecimal);
pub const GL_PATH_INITIAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9077, .hexadecimal);
pub const GL_PATH_TERMINAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9078, .hexadecimal);
pub const GL_PATH_JOIN_STYLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9079, .hexadecimal);
pub const GL_PATH_MITER_LIMIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907A, .hexadecimal);
pub const GL_PATH_DASH_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907B, .hexadecimal);
pub const GL_PATH_INITIAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907C, .hexadecimal);
pub const GL_PATH_TERMINAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907D, .hexadecimal);
pub const GL_PATH_DASH_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907E, .hexadecimal);
pub const GL_PATH_CLIENT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907F, .hexadecimal);
pub const GL_PATH_FILL_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9080, .hexadecimal);
pub const GL_PATH_FILL_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9081, .hexadecimal);
pub const GL_PATH_FILL_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9082, .hexadecimal);
pub const GL_PATH_STROKE_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9083, .hexadecimal);
pub const GL_PATH_STROKE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9084, .hexadecimal);
pub const GL_COUNT_UP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9088, .hexadecimal);
pub const GL_COUNT_DOWN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9089, .hexadecimal);
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908A, .hexadecimal);
pub const GL_CONVEX_HULL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908B, .hexadecimal);
pub const GL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908D, .hexadecimal);
pub const GL_TRANSLATE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908E, .hexadecimal);
pub const GL_TRANSLATE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908F, .hexadecimal);
pub const GL_TRANSLATE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9090, .hexadecimal);
pub const GL_TRANSLATE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9091, .hexadecimal);
pub const GL_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9092, .hexadecimal);
pub const GL_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9094, .hexadecimal);
pub const GL_TRANSPOSE_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9096, .hexadecimal);
pub const GL_TRANSPOSE_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9098, .hexadecimal);
pub const GL_UTF8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909A, .hexadecimal);
pub const GL_UTF16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909B, .hexadecimal);
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909C, .hexadecimal);
pub const GL_PATH_COMMAND_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909D, .hexadecimal);
pub const GL_PATH_COORD_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909E, .hexadecimal);
pub const GL_PATH_DASH_ARRAY_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909F, .hexadecimal);
pub const GL_PATH_COMPUTED_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A0, .hexadecimal);
pub const GL_PATH_FILL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A1, .hexadecimal);
pub const GL_PATH_STROKE_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A2, .hexadecimal);
pub const GL_SQUARE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A3, .hexadecimal);
pub const GL_ROUND_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A4, .hexadecimal);
pub const GL_TRIANGULAR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A5, .hexadecimal);
pub const GL_BEVEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A6, .hexadecimal);
pub const GL_MITER_REVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A7, .hexadecimal);
pub const GL_MITER_TRUNCATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A8, .hexadecimal);
pub const GL_SKIP_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A9, .hexadecimal);
pub const GL_USE_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AA, .hexadecimal);
pub const GL_PATH_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AB, .hexadecimal);
pub const GL_PATH_FOG_GEN_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AC, .hexadecimal);
pub const GL_ACCUM_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AD, .hexadecimal);
pub const GL_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AE, .hexadecimal);
pub const GL_FIRST_TO_REST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AF, .hexadecimal);
pub const GL_PATH_GEN_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B0, .hexadecimal);
pub const GL_PATH_GEN_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B1, .hexadecimal);
pub const GL_PATH_GEN_COLOR_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B2, .hexadecimal);
pub const GL_PATH_GEN_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B3, .hexadecimal);
pub const GL_PATH_DASH_OFFSET_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B4, .hexadecimal);
pub const GL_MOVE_TO_RESETS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B5, .hexadecimal);
pub const GL_MOVE_TO_CONTINUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B6, .hexadecimal);
pub const GL_PATH_STENCIL_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B7, .hexadecimal);
pub const GL_PATH_STENCIL_REF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B8, .hexadecimal);
pub const GL_PATH_STENCIL_VALUE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B9, .hexadecimal);
pub const GL_SCALED_RESOLVE_FASTEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BA, .hexadecimal);
pub const GL_SCALED_RESOLVE_NICEST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BB, .hexadecimal);
pub const GL_MIN_MAP_BUFFER_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BC, .hexadecimal);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BD, .hexadecimal);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BE, .hexadecimal);
pub const GL_PATH_COVER_DEPTH_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BF, .hexadecimal);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C7, .hexadecimal);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C8, .hexadecimal);
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90C9, .hexadecimal);
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CA, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hexadecimal);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hexadecimal);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hexadecimal);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hexadecimal);
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CE, .hexadecimal);
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CF, .hexadecimal);
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D0, .hexadecimal);
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D1, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D2, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D3, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D4, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D5, .hexadecimal);
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D6, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hexadecimal);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hexadecimal);
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DA, .hexadecimal);
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DB, .hexadecimal);
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DC, .hexadecimal);
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DD, .hexadecimal);
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DE, .hexadecimal);
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90DF, .hexadecimal);
pub const GL_SYNC_X11_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90E1, .hexadecimal);
pub const GL_DEPTH_STENCIL_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EA, .hexadecimal);
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hexadecimal);
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EB, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EC, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90ED, .hexadecimal);
pub const GL_DISPATCH_INDIRECT_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EE, .hexadecimal);
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90EF, .hexadecimal);
pub const GL_COLOR_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F0, .hexadecimal);
pub const GL_MULTIVIEW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F1, .hexadecimal);
pub const GL_MAX_MULTIVIEW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F2, .hexadecimal);
pub const GL_CONTEXT_ROBUST_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hexadecimal);
pub const GL_CONTEXT_ROBUST_ACCESS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hexadecimal);
pub const GL_CONTEXT_ROBUST_ACCESS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hexadecimal);
pub const GL_COMPUTE_PROGRAM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FB, .hexadecimal);
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90FC, .hexadecimal);
pub const GL_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9100, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9101, .hexadecimal);
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hexadecimal);
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9103, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9104, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9105, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9105, .hexadecimal);
pub const GL_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9106, .hexadecimal);
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9107, .hexadecimal);
pub const GL_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9108, .hexadecimal);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9109, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910A, .hexadecimal);
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910B, .hexadecimal);
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910B, .hexadecimal);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910C, .hexadecimal);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910C, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910D, .hexadecimal);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910D, .hexadecimal);
pub const GL_MAX_COLOR_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910E, .hexadecimal);
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910F, .hexadecimal);
pub const GL_MAX_INTEGER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9110, .hexadecimal);
pub const GL_MAX_SERVER_WAIT_TIMEOUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9111, .hexadecimal);
pub const GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9111, .hexadecimal);
pub const GL_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9112, .hexadecimal);
pub const GL_OBJECT_TYPE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9112, .hexadecimal);
pub const GL_SYNC_CONDITION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9113, .hexadecimal);
pub const GL_SYNC_CONDITION_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9113, .hexadecimal);
pub const GL_SYNC_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9114, .hexadecimal);
pub const GL_SYNC_STATUS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9114, .hexadecimal);
pub const GL_SYNC_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9115, .hexadecimal);
pub const GL_SYNC_FLAGS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9115, .hexadecimal);
pub const GL_SYNC_FENCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9116, .hexadecimal);
pub const GL_SYNC_FENCE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9116, .hexadecimal);
pub const GL_SYNC_GPU_COMMANDS_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9117, .hexadecimal);
pub const GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9117, .hexadecimal);
pub const GL_UNSIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9118, .hexadecimal);
pub const GL_UNSIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9118, .hexadecimal);
pub const GL_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9119, .hexadecimal);
pub const GL_SIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9119, .hexadecimal);
pub const GL_ALREADY_SIGNALED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911A, .hexadecimal);
pub const GL_ALREADY_SIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911A, .hexadecimal);
pub const GL_TIMEOUT_EXPIRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911B, .hexadecimal);
pub const GL_TIMEOUT_EXPIRED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911B, .hexadecimal);
pub const GL_CONDITION_SATISFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911C, .hexadecimal);
pub const GL_CONDITION_SATISFIED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911C, .hexadecimal);
pub const GL_WAIT_FAILED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911D, .hexadecimal);
pub const GL_WAIT_FAILED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911D, .hexadecimal);
pub const GL_BUFFER_ACCESS_FLAGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911F, .hexadecimal);
pub const GL_BUFFER_MAP_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9120, .hexadecimal);
pub const GL_BUFFER_MAP_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9121, .hexadecimal);
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9122, .hexadecimal);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hexadecimal);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hexadecimal);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hexadecimal);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hexadecimal);
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9125, .hexadecimal);
pub const GL_CONTEXT_PROFILE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9126, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9127, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9128, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9129, .hexadecimal);
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912A, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912B, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912C, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912D, .hexadecimal);
pub const GL_PACK_COMPRESSED_BLOCK_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912E, .hexadecimal);
pub const GL_TEXTURE_IMMUTABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hexadecimal);
pub const GL_TEXTURE_IMMUTABLE_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hexadecimal);
pub const GL_SGX_PROGRAM_BINARY_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9130, .hexadecimal);
pub const GL_RENDERBUFFER_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9133, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9134, .hexadecimal);
pub const GL_MAX_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9135, .hexadecimal);
pub const GL_TEXTURE_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9136, .hexadecimal);
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9137, .hexadecimal);
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9138, .hexadecimal);
pub const GL_CUBIC_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9139, .hexadecimal);
pub const GL_CUBIC_MIPMAP_NEAREST_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913A, .hexadecimal);
pub const GL_CUBIC_MIPMAP_LINEAR_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913B, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913C, .hexadecimal);
pub const GL_NUM_DOWNSAMPLE_SCALES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913D, .hexadecimal);
pub const GL_DOWNSAMPLE_SCALES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913E, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913F, .hexadecimal);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hexadecimal);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hexadecimal);
pub const GL_DEBUG_LOGGED_MESSAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const GL_DEBUG_LOGGED_MESSAGES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const GL_DEBUG_LOGGED_MESSAGES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const GL_DEBUG_LOGGED_MESSAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hexadecimal);
pub const GL_DEBUG_SEVERITY_HIGH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const GL_DEBUG_SEVERITY_HIGH_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const GL_DEBUG_SEVERITY_HIGH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const GL_DEBUG_SEVERITY_HIGH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hexadecimal);
pub const GL_DEBUG_SEVERITY_MEDIUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const GL_DEBUG_SEVERITY_MEDIUM_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hexadecimal);
pub const GL_DEBUG_SEVERITY_LOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const GL_DEBUG_SEVERITY_LOW_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const GL_DEBUG_SEVERITY_LOW_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const GL_DEBUG_SEVERITY_LOW_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hexadecimal);
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9149, .hexadecimal);
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914A, .hexadecimal);
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914B, .hexadecimal);
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914C, .hexadecimal);
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914D, .hexadecimal);
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914E, .hexadecimal);
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x914F, .hexadecimal);
pub const GL_DEBUG_CATEGORY_OTHER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9150, .hexadecimal);
pub const GL_BUFFER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hexadecimal);
pub const GL_DATA_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hexadecimal);
pub const GL_PERFORMANCE_MONITOR_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9152, .hexadecimal);
pub const GL_QUERY_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hexadecimal);
pub const GL_QUERY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hexadecimal);
pub const GL_VERTEX_ARRAY_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hexadecimal);
pub const GL_VERTEX_ARRAY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hexadecimal);
pub const GL_SAMPLER_OBJECT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9155, .hexadecimal);
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9160, .hexadecimal);
pub const GL_QUERY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hexadecimal);
pub const GL_QUERY_BUFFER_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9192, .hexadecimal);
pub const GL_QUERY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hexadecimal);
pub const GL_QUERY_BUFFER_BINDING_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9193, .hexadecimal);
pub const GL_QUERY_RESULT_NO_WAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hexadecimal);
pub const GL_QUERY_RESULT_NO_WAIT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9194, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hexadecimal);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hexadecimal);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hexadecimal);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hexadecimal);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hexadecimal);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hexadecimal);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hexadecimal);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hexadecimal);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hexadecimal);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hexadecimal);
pub const GL_MIN_SPARSE_LEVEL_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919B, .hexadecimal);
pub const GL_MIN_LOD_WARNING_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919C, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hexadecimal);
pub const GL_TEXTURE_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hexadecimal);
pub const GL_TEXTURE_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hexadecimal);
pub const GL_TEXTURE_BUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hexadecimal);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hexadecimal);
pub const GL_STREAM_RASTERIZATION_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A0, .hexadecimal);
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A4, .hexadecimal);
pub const GL_VERTEX_ID_SWIZZLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A5, .hexadecimal);
pub const GL_TEXTURE_SPARSE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A6, .hexadecimal);
pub const GL_TEXTURE_SPARSE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A6, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A7, .hexadecimal);
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A7, .hexadecimal);
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A8, .hexadecimal);
pub const GL_NUM_VIRTUAL_PAGE_SIZES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A8, .hexadecimal);
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A9, .hexadecimal);
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A9, .hexadecimal);
pub const GL_NUM_SPARSE_LEVELS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AA, .hexadecimal);
pub const GL_NUM_SPARSE_LEVELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AA, .hexadecimal);
pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AE, .hexadecimal);
pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AF, .hexadecimal);
pub const GL_MAX_SHADER_COMPILER_THREADS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hexadecimal);
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hexadecimal);
pub const GL_COMPLETION_STATUS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hexadecimal);
pub const GL_COMPLETION_STATUS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hexadecimal);
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B2, .hexadecimal);
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B3, .hexadecimal);
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B4, .hexadecimal);
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B5, .hexadecimal);
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B6, .hexadecimal);
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B7, .hexadecimal);
pub const GL_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B9, .hexadecimal);
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BB, .hexadecimal);
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BC, .hexadecimal);
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BD, .hexadecimal);
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BE, .hexadecimal);
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hexadecimal);
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91BF, .hexadecimal);
pub const GL_FLOAT16_MAT2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C5, .hexadecimal);
pub const GL_FLOAT16_MAT3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C6, .hexadecimal);
pub const GL_FLOAT16_MAT4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C7, .hexadecimal);
pub const GL_FLOAT16_MAT2x3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C8, .hexadecimal);
pub const GL_FLOAT16_MAT2x4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91C9, .hexadecimal);
pub const GL_FLOAT16_MAT3x2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CA, .hexadecimal);
pub const GL_FLOAT16_MAT3x4_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CB, .hexadecimal);
pub const GL_FLOAT16_MAT4x2_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CC, .hexadecimal);
pub const GL_FLOAT16_MAT4x3_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91CD, .hexadecimal);
pub const GL_UNPACK_FLIP_Y_WEBGL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9240, .hexadecimal);
pub const GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9241, .hexadecimal);
pub const GL_CONTEXT_LOST_WEBGL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9242, .hexadecimal);
pub const GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9243, .hexadecimal);
pub const GL_BROWSER_DEFAULT_WEBGL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9244, .hexadecimal);
pub const GL_SHADER_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9250, .hexadecimal);
pub const GL_SMAPHS30_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9251, .hexadecimal);
pub const GL_SMAPHS_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9252, .hexadecimal);
pub const GL_DMP_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9253, .hexadecimal);
pub const GL_GCCSO_SHADER_BINARY_FJ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9260, .hexadecimal);
pub const GL_COMPRESSED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9270, .hexadecimal);
pub const GL_COMPRESSED_R11_EAC_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9270, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_R11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9271, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_R11_EAC_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9271, .hexadecimal);
pub const GL_COMPRESSED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9272, .hexadecimal);
pub const GL_COMPRESSED_RG11_EAC_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9272, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RG11_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9273, .hexadecimal);
pub const GL_COMPRESSED_SIGNED_RG11_EAC_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9273, .hexadecimal);
pub const GL_COMPRESSED_RGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9274, .hexadecimal);
pub const GL_COMPRESSED_RGB8_ETC2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9274, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9275, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ETC2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9275, .hexadecimal);
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9276, .hexadecimal);
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9276, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9277, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9277, .hexadecimal);
pub const GL_COMPRESSED_RGBA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9278, .hexadecimal);
pub const GL_COMPRESSED_RGBA8_ETC2_EAC_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9278, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9279, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9279, .hexadecimal);
pub const GL_BLEND_PREMULTIPLIED_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9280, .hexadecimal);
pub const GL_BLEND_OVERLAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9281, .hexadecimal);
pub const GL_UNCORRELATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9282, .hexadecimal);
pub const GL_DISJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9283, .hexadecimal);
pub const GL_CONJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9284, .hexadecimal);
pub const GL_BLEND_ADVANCED_COHERENT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hexadecimal);
pub const GL_BLEND_ADVANCED_COHERENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hexadecimal);
pub const GL_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9286, .hexadecimal);
pub const GL_DST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9287, .hexadecimal);
pub const GL_SRC_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9288, .hexadecimal);
pub const GL_DST_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9289, .hexadecimal);
pub const GL_SRC_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928A, .hexadecimal);
pub const GL_DST_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928B, .hexadecimal);
pub const GL_SRC_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928C, .hexadecimal);
pub const GL_DST_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928D, .hexadecimal);
pub const GL_SRC_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928E, .hexadecimal);
pub const GL_DST_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928F, .hexadecimal);
pub const GL_PLUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9291, .hexadecimal);
pub const GL_PLUS_DARKER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9292, .hexadecimal);
pub const GL_MULTIPLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hexadecimal);
pub const GL_MULTIPLY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hexadecimal);
pub const GL_MULTIPLY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hexadecimal);
pub const GL_SCREEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hexadecimal);
pub const GL_SCREEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hexadecimal);
pub const GL_SCREEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hexadecimal);
pub const GL_OVERLAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hexadecimal);
pub const GL_OVERLAY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hexadecimal);
pub const GL_OVERLAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hexadecimal);
pub const GL_DARKEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hexadecimal);
pub const GL_DARKEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hexadecimal);
pub const GL_DARKEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hexadecimal);
pub const GL_LIGHTEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hexadecimal);
pub const GL_LIGHTEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hexadecimal);
pub const GL_LIGHTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hexadecimal);
pub const GL_COLORDODGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hexadecimal);
pub const GL_COLORDODGE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hexadecimal);
pub const GL_COLORDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hexadecimal);
pub const GL_COLORBURN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hexadecimal);
pub const GL_COLORBURN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hexadecimal);
pub const GL_COLORBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hexadecimal);
pub const GL_HARDLIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hexadecimal);
pub const GL_HARDLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hexadecimal);
pub const GL_HARDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hexadecimal);
pub const GL_SOFTLIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hexadecimal);
pub const GL_SOFTLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hexadecimal);
pub const GL_SOFTLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hexadecimal);
pub const GL_DIFFERENCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hexadecimal);
pub const GL_DIFFERENCE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hexadecimal);
pub const GL_DIFFERENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hexadecimal);
pub const GL_MINUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929F, .hexadecimal);
pub const GL_EXCLUSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hexadecimal);
pub const GL_EXCLUSION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hexadecimal);
pub const GL_EXCLUSION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hexadecimal);
pub const GL_CONTRAST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A1, .hexadecimal);
pub const GL_INVERT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A3, .hexadecimal);
pub const GL_LINEARDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A4, .hexadecimal);
pub const GL_LINEARBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A5, .hexadecimal);
pub const GL_VIVIDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A6, .hexadecimal);
pub const GL_LINEARLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A7, .hexadecimal);
pub const GL_PINLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A8, .hexadecimal);
pub const GL_HARDMIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A9, .hexadecimal);
pub const GL_HSL_HUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hexadecimal);
pub const GL_HSL_HUE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hexadecimal);
pub const GL_HSL_HUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hexadecimal);
pub const GL_HSL_SATURATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hexadecimal);
pub const GL_HSL_SATURATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hexadecimal);
pub const GL_HSL_SATURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hexadecimal);
pub const GL_HSL_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hexadecimal);
pub const GL_HSL_COLOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hexadecimal);
pub const GL_HSL_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hexadecimal);
pub const GL_HSL_LUMINOSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hexadecimal);
pub const GL_HSL_LUMINOSITY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hexadecimal);
pub const GL_HSL_LUMINOSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hexadecimal);
pub const GL_PLUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B1, .hexadecimal);
pub const GL_PLUS_CLAMPED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B2, .hexadecimal);
pub const GL_MINUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B3, .hexadecimal);
pub const GL_INVERT_OVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B4, .hexadecimal);
pub const GL_MAX_LGPU_GPUS_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BA, .hexadecimal);
pub const GL_MULTICAST_GPUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BA, .hexadecimal);
pub const GL_PURGED_CONTEXT_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BB, .hexadecimal);
pub const GL_PRIMITIVE_BOUNDING_BOX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hexadecimal);
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hexadecimal);
pub const GL_PRIMITIVE_BOUNDING_BOX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hexadecimal);
pub const GL_PRIMITIVE_BOUNDING_BOX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BF, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C0, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C1, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C2, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C3, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C4, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C5, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C6, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C7, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C8, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92C9, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CA, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CB, .hexadecimal);
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CC, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hexadecimal);
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D0, .hexadecimal);
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D1, .hexadecimal);
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D2, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hexadecimal);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hexadecimal);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hexadecimal);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hexadecimal);
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D6, .hexadecimal);
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D7, .hexadecimal);
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D8, .hexadecimal);
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D9, .hexadecimal);
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DA, .hexadecimal);
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DB, .hexadecimal);
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DC, .hexadecimal);
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DD, .hexadecimal);
pub const GL_FRAGMENT_COVERAGE_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DE, .hexadecimal);
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DF, .hexadecimal);
pub const GL_DEBUG_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E0, .hexadecimal);
pub const GL_DEBUG_OUTPUT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E0, .hexadecimal);
pub const GL_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E1, .hexadecimal);
pub const GL_UNIFORM_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E2, .hexadecimal);
pub const GL_PROGRAM_INPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E3, .hexadecimal);
pub const GL_PROGRAM_OUTPUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E4, .hexadecimal);
pub const GL_BUFFER_VARIABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E5, .hexadecimal);
pub const GL_SHADER_STORAGE_BLOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E6, .hexadecimal);
pub const GL_IS_PER_PATCH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hexadecimal);
pub const GL_IS_PER_PATCH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hexadecimal);
pub const GL_IS_PER_PATCH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hexadecimal);
pub const GL_VERTEX_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E8, .hexadecimal);
pub const GL_TESS_CONTROL_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E9, .hexadecimal);
pub const GL_TESS_EVALUATION_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EA, .hexadecimal);
pub const GL_GEOMETRY_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EB, .hexadecimal);
pub const GL_FRAGMENT_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EC, .hexadecimal);
pub const GL_COMPUTE_SUBROUTINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92ED, .hexadecimal);
pub const GL_VERTEX_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EE, .hexadecimal);
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92EF, .hexadecimal);
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F0, .hexadecimal);
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F1, .hexadecimal);
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F2, .hexadecimal);
pub const GL_COMPUTE_SUBROUTINE_UNIFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F3, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_VARYING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F4, .hexadecimal);
pub const GL_ACTIVE_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F5, .hexadecimal);
pub const GL_MAX_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F6, .hexadecimal);
pub const GL_MAX_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F7, .hexadecimal);
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F8, .hexadecimal);
pub const GL_NAME_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92F9, .hexadecimal);
pub const GL_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FA, .hexadecimal);
pub const GL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FB, .hexadecimal);
pub const GL_OFFSET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FC, .hexadecimal);
pub const GL_BLOCK_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FD, .hexadecimal);
pub const GL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FE, .hexadecimal);
pub const GL_MATRIX_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92FF, .hexadecimal);
pub const GL_IS_ROW_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9300, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9301, .hexadecimal);
pub const GL_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9302, .hexadecimal);
pub const GL_BUFFER_DATA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9303, .hexadecimal);
pub const GL_NUM_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9304, .hexadecimal);
pub const GL_ACTIVE_VARIABLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9305, .hexadecimal);
pub const GL_REFERENCED_BY_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9306, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hexadecimal);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hexadecimal);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hexadecimal);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hexadecimal);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hexadecimal);
pub const GL_REFERENCED_BY_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930A, .hexadecimal);
pub const GL_REFERENCED_BY_COMPUTE_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930B, .hexadecimal);
pub const GL_TOP_LEVEL_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930C, .hexadecimal);
pub const GL_TOP_LEVEL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930D, .hexadecimal);
pub const GL_LOCATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930E, .hexadecimal);
pub const GL_LOCATION_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930F, .hexadecimal);
pub const GL_LOCATION_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930F, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9310, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9311, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9313, .hexadecimal);
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9314, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9315, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9316, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_LAYERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hexadecimal);
pub const GL_MAX_FRAMEBUFFER_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9318, .hexadecimal);
pub const GL_RASTER_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9327, .hexadecimal);
pub const GL_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9328, .hexadecimal);
pub const GL_MAX_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9329, .hexadecimal);
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932A, .hexadecimal);
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932B, .hexadecimal);
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932C, .hexadecimal);
pub const GL_DEPTH_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932D, .hexadecimal);
pub const GL_STENCIL_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932E, .hexadecimal);
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932F, .hexadecimal);
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9330, .hexadecimal);
pub const GL_COVERAGE_MODULATION_TABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9331, .hexadecimal);
pub const GL_COVERAGE_MODULATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9332, .hexadecimal);
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9333, .hexadecimal);
pub const GL_WARP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9339, .hexadecimal);
pub const GL_WARPS_PER_SM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933A, .hexadecimal);
pub const GL_SM_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933B, .hexadecimal);
pub const GL_FILL_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933C, .hexadecimal);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hexadecimal);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hexadecimal);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hexadecimal);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hexadecimal);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hexadecimal);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hexadecimal);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hexadecimal);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hexadecimal);
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9344, .hexadecimal);
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9345, .hexadecimal);
pub const GL_CONSERVATIVE_RASTERIZATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9346, .hexadecimal);
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9347, .hexadecimal);
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9348, .hexadecimal);
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9349, .hexadecimal);
pub const GL_LOCATION_COMPONENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934A, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934B, .hexadecimal);
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934C, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934D, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934E, .hexadecimal);
pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x934F, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9350, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9351, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9352, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9353, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9354, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9355, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9356, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9357, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9358, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9359, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935A, .hexadecimal);
pub const GL_VIEWPORT_SWIZZLE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935B, .hexadecimal);
pub const GL_CLIP_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935C, .hexadecimal);
pub const GL_CLIP_ORIGIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935C, .hexadecimal);
pub const GL_CLIP_DEPTH_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935D, .hexadecimal);
pub const GL_CLIP_DEPTH_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935D, .hexadecimal);
pub const GL_NEGATIVE_ONE_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935E, .hexadecimal);
pub const GL_NEGATIVE_ONE_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935E, .hexadecimal);
pub const GL_ZERO_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935F, .hexadecimal);
pub const GL_ZERO_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935F, .hexadecimal);
pub const GL_CLEAR_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9365, .hexadecimal);
pub const GL_TEXTURE_REDUCTION_MODE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hexadecimal);
pub const GL_TEXTURE_REDUCTION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hexadecimal);
pub const GL_WEIGHTED_AVERAGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hexadecimal);
pub const GL_WEIGHTED_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hexadecimal);
pub const GL_FONT_GLYPHS_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9368, .hexadecimal);
pub const GL_FONT_TARGET_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9369, .hexadecimal);
pub const GL_FONT_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936A, .hexadecimal);
pub const GL_FONT_UNINTELLIGIBLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936B, .hexadecimal);
pub const GL_STANDARD_FONT_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936C, .hexadecimal);
pub const GL_FRAGMENT_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936D, .hexadecimal);
pub const GL_UNIFORM_BUFFER_UNIFIED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936E, .hexadecimal);
pub const GL_UNIFORM_BUFFER_ADDRESS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936F, .hexadecimal);
pub const GL_UNIFORM_BUFFER_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9370, .hexadecimal);
pub const GL_MULTISAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9371, .hexadecimal);
pub const GL_SUPERSAMPLE_SCALE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9372, .hexadecimal);
pub const GL_SUPERSAMPLE_SCALE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9373, .hexadecimal);
pub const GL_CONFORMANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9374, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_DILATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9379, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937A, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937B, .hexadecimal);
pub const GL_VIEWPORT_POSITION_W_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937C, .hexadecimal);
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937D, .hexadecimal);
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937E, .hexadecimal);
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937F, .hexadecimal);
pub const GL_NUM_SAMPLE_COUNTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9380, .hexadecimal);
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9381, .hexadecimal);
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9381, .hexadecimal);
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9382, .hexadecimal);
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9382, .hexadecimal);
pub const GL_VIEW_CLASS_EAC_R11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9383, .hexadecimal);
pub const GL_VIEW_CLASS_EAC_RG11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9384, .hexadecimal);
pub const GL_VIEW_CLASS_ETC2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9385, .hexadecimal);
pub const GL_VIEW_CLASS_ETC2_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9386, .hexadecimal);
pub const GL_VIEW_CLASS_ETC2_EAC_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9387, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_4x4_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9388, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_5x4_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9389, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_5x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938A, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_6x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938B, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_6x6_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938C, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_8x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938D, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_8x6_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938E, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_8x8_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x938F, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_10x5_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9390, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_10x6_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9391, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_10x8_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9392, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_10x10_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9393, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_12x10_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9394, .hexadecimal);
pub const GL_VIEW_CLASS_ASTC_12x12_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9395, .hexadecimal);
pub const GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A0, .hexadecimal);
pub const GL_BGRA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A1, .hexadecimal);
pub const GL_TEXTURE_USAGE_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A2, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A3, .hexadecimal);
pub const GL_PACK_REVERSE_ROW_ORDER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A4, .hexadecimal);
pub const GL_PROGRAM_BINARY_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A6, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_4x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B3, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B3, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B4, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B4, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B5, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B5, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B6, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B6, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B7, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B7, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B8, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B8, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B9, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B9, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BA, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BA, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BB, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BB, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_12x10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BC, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BC, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_12x12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BD, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BD, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C0, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C1, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C2, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C3, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C4, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C5, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C6, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C7, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C8, .hexadecimal);
pub const GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C9, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D0, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D0, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D1, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D1, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D2, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D2, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D3, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D3, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D4, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D4, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D5, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D5, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D6, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D6, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D7, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D7, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D8, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D8, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D9, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D9, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DA, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DA, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DB, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DB, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DC, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DC, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DD, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DD, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E0, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E1, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E2, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E3, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E4, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E5, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E6, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E7, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E8, .hexadecimal);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E9, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93F0, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93F1, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F0, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F1, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F2, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F3, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F4, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F5, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F8, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F9, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FA, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FB, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FC, .hexadecimal);
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FD, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FE, .hexadecimal);
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FF, .hexadecimal);
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9500, .hexadecimal);
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9530, .hexadecimal);
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9531, .hexadecimal);
pub const GL_SUBGROUP_SIZE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9532, .hexadecimal);
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9533, .hexadecimal);
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9534, .hexadecimal);
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9535, .hexadecimal);
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9536, .hexadecimal);
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9537, .hexadecimal);
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9538, .hexadecimal);
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9539, .hexadecimal);
pub const GL_MAX_TASK_OUTPUT_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953A, .hexadecimal);
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953B, .hexadecimal);
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953C, .hexadecimal);
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953D, .hexadecimal);
pub const GL_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953E, .hexadecimal);
pub const GL_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953F, .hexadecimal);
pub const GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9540, .hexadecimal);
pub const GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9542, .hexadecimal);
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9543, .hexadecimal);
pub const GL_QUERY_RESOURCE_SYS_RESERVED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9544, .hexadecimal);
pub const GL_QUERY_RESOURCE_TEXTURE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9545, .hexadecimal);
pub const GL_QUERY_RESOURCE_RENDERBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9546, .hexadecimal);
pub const GL_QUERY_RESOURCE_BUFFEROBJECT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9547, .hexadecimal);
pub const GL_PER_GPU_STORAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9548, .hexadecimal);
pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9549, .hexadecimal);
pub const GL_UPLOAD_GPU_MASK_NVX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954A, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954D, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954E, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954F, .hexadecimal);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9550, .hexadecimal);
pub const GL_SHADER_BINARY_FORMAT_SPIR_V = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hexadecimal);
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9551, .hexadecimal);
pub const GL_SPIR_V_BINARY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hexadecimal);
pub const GL_SPIR_V_BINARY_ARB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9552, .hexadecimal);
pub const GL_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9553, .hexadecimal);
pub const GL_NUM_SPIR_V_EXTENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9554, .hexadecimal);
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9555, .hexadecimal);
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9556, .hexadecimal);
pub const GL_MAX_MESH_VIEWS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9557, .hexadecimal);
pub const GL_RENDER_GPU_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9558, .hexadecimal);
pub const GL_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9559, .hexadecimal);
pub const GL_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955A, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955B, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955C, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955D, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955E, .hexadecimal);
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955F, .hexadecimal);
pub const GL_SHADING_RATE_IMAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9563, .hexadecimal);
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9564, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9565, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9566, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9567, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9568, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9569, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956A, .hexadecimal);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956B, .hexadecimal);
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956C, .hexadecimal);
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956D, .hexadecimal);
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956E, .hexadecimal);
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956F, .hexadecimal);
pub const GL_MESH_VERTICES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9579, .hexadecimal);
pub const GL_MESH_PRIMITIVES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957A, .hexadecimal);
pub const GL_MESH_OUTPUT_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957B, .hexadecimal);
pub const GL_MESH_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957C, .hexadecimal);
pub const GL_TASK_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957D, .hexadecimal);
pub const GL_MESH_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957E, .hexadecimal);
pub const GL_TASK_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957F, .hexadecimal);
pub const GL_TEXTURE_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9580, .hexadecimal);
pub const GL_DEDICATED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9581, .hexadecimal);
pub const GL_NUM_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9582, .hexadecimal);
pub const GL_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9583, .hexadecimal);
pub const GL_OPTIMAL_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9584, .hexadecimal);
pub const GL_LINEAR_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9585, .hexadecimal);
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9586, .hexadecimal);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9587, .hexadecimal);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9588, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9589, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958A, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958B, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958C, .hexadecimal);
pub const GL_LAYOUT_GENERAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958D, .hexadecimal);
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958E, .hexadecimal);
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958F, .hexadecimal);
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9590, .hexadecimal);
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9591, .hexadecimal);
pub const GL_LAYOUT_TRANSFER_SRC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9592, .hexadecimal);
pub const GL_LAYOUT_TRANSFER_DST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9593, .hexadecimal);
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9594, .hexadecimal);
pub const GL_D3D12_FENCE_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9595, .hexadecimal);
pub const GL_NUM_DEVICE_UUIDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9596, .hexadecimal);
pub const GL_DEVICE_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9597, .hexadecimal);
pub const GL_DRIVER_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9598, .hexadecimal);
pub const GL_DEVICE_LUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9599, .hexadecimal);
pub const GL_DEVICE_NODE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959A, .hexadecimal);
pub const GL_PROTECTED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959B, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959C, .hexadecimal);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959D, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959E, .hexadecimal);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959F, .hexadecimal);
pub const GL_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A0, .hexadecimal);
pub const GL_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A1, .hexadecimal);
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A2, .hexadecimal);
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A3, .hexadecimal);
pub const GL_ATTACHED_MEMORY_OBJECT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A4, .hexadecimal);
pub const GL_ATTACHED_MEMORY_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A5, .hexadecimal);
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A6, .hexadecimal);
pub const GL_MEMORY_ATTACHABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A7, .hexadecimal);
pub const GL_MEMORY_ATTACHABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A8, .hexadecimal);
pub const GL_DETACHED_MEMORY_INCARNATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A9, .hexadecimal);
pub const GL_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AA, .hexadecimal);
pub const GL_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AB, .hexadecimal);
pub const GL_MAX_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AC, .hexadecimal);
pub const GL_MAX_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AD, .hexadecimal);
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AE, .hexadecimal);
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AF, .hexadecimal);
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B0, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9630, .hexadecimal);
pub const GL_MAX_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9631, .hexadecimal);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9632, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9633, .hexadecimal);
pub const GL_GS_SHADER_BINARY_MTK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9640, .hexadecimal);
pub const GL_GS_PROGRAM_BINARY_MTK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9641, .hexadecimal);
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9650, .hexadecimal);
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9651, .hexadecimal);
pub const GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9652, .hexadecimal);
pub const GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A2, .hexadecimal);
pub const GL_VALIDATE_SHADER_BINARY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A3, .hexadecimal);
pub const GL_SHARED_EDGE_NV = @as(c_int, 0xC0);
pub const GL_ROUNDED_RECT_NV = @as(c_int, 0xE8);
pub const GL_RELATIVE_ROUNDED_RECT_NV = @as(c_int, 0xE9);
pub const GL_ROUNDED_RECT2_NV = @as(c_int, 0xEA);
pub const GL_RELATIVE_ROUNDED_RECT2_NV = @as(c_int, 0xEB);
pub const GL_ROUNDED_RECT4_NV = @as(c_int, 0xEC);
pub const GL_RELATIVE_ROUNDED_RECT4_NV = @as(c_int, 0xED);
pub const GL_ROUNDED_RECT8_NV = @as(c_int, 0xEE);
pub const GL_RELATIVE_ROUNDED_RECT8_NV = @as(c_int, 0xEF);
pub const GL_RESTART_PATH_NV = @as(c_int, 0xF0);
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF2);
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF4);
pub const GL_RECT_NV = @as(c_int, 0xF6);
pub const GL_RELATIVE_RECT_NV = @as(c_int, 0xF7);
pub const GL_CIRCULAR_CCW_ARC_TO_NV = @as(c_int, 0xF8);
pub const GL_CIRCULAR_CW_ARC_TO_NV = @as(c_int, 0xFA);
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV = @as(c_int, 0xFC);
pub const GL_ARC_TO_NV = @as(c_int, 0xFE);
pub const GL_RELATIVE_ARC_TO_NV = @as(c_int, 0xFF);
pub const GL_TRACE_ALL_BITS_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hexadecimal);
pub const GL_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_ALL_BARRIER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_ALL_BARRIER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_ALL_PIXELS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_ALL_SHADER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_ALL_SHADER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_CLIENT_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_INVALID_INDEX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_QUERY_ALL_EVENT_BITS_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hexadecimal);
pub const GL_TIMEOUT_IGNORED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFFFFFFFFFF, .hexadecimal);
pub const GL_TIMEOUT_IGNORED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFFFFFFFFFF, .hexadecimal);
pub const GL_LAYOUT_LINEAR_INTEL = @as(c_int, 1);
pub const GL_ONE = @as(c_int, 1);
pub const GL_TRUE = @as(c_int, 1);
pub const GL_VERSION_ES_CL_1_0 = @as(c_int, 1);
pub const GL_VERSION_ES_CL_1_1 = @as(c_int, 1);
pub const GL_VERSION_ES_CM_1_1 = @as(c_int, 1);
pub const GL_CULL_VERTEX_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103050, .decimal);
pub const GL_ALL_STATIC_DATA_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103060, .decimal);
pub const GL_STATIC_VERTEX_ARRAY_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103061, .decimal);
pub const GL_VERTEX_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103070, .decimal);
pub const GL_NORMAL_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103071, .decimal);
pub const GL_COLOR_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103072, .decimal);
pub const GL_INDEX_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103073, .decimal);
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103074, .decimal);
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103075, .decimal);
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103076, .decimal);
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103077, .decimal);
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103080, .decimal);
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103081, .decimal);
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103082, .decimal);
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103083, .decimal);
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103084, .decimal);
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103085, .decimal);
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103086, .decimal);
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 103087, .decimal);
pub const GL_UUID_SIZE_EXT = @as(c_int, 16);
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = @as(c_int, 2);
pub const GL_LUID_SIZE_EXT = @as(c_int, 8);
pub inline fn glAccum(arg_7: GLenum, arg_8: GLfloat) void {
    return epoxy_glAccum.?(arg_7, arg_8);
}
pub inline fn glAccumxOES(arg_9: GLenum, arg_10: GLfixed) void {
    return epoxy_glAccumxOES.?(arg_9, arg_10);
}
pub inline fn glAcquireKeyedMutexWin32EXT(arg_11: GLuint, arg_12: GLuint64, arg_13: GLuint) GLboolean {
    return epoxy_glAcquireKeyedMutexWin32EXT.?(arg_11, arg_12, arg_13);
}
pub inline fn glActiveProgramEXT(arg_14: GLuint) void {
    return epoxy_glActiveProgramEXT.?(arg_14);
}
pub inline fn glActiveShaderProgram(arg_15: GLuint, arg_16: GLuint) void {
    return epoxy_glActiveShaderProgram.?(arg_15, arg_16);
}
pub inline fn glActiveShaderProgramEXT(arg_17: GLuint, arg_18: GLuint) void {
    return epoxy_glActiveShaderProgramEXT.?(arg_17, arg_18);
}
pub inline fn glActiveStencilFaceEXT(arg_19: GLenum) void {
    return epoxy_glActiveStencilFaceEXT.?(arg_19);
}
pub inline fn glActiveTexture(arg_20: GLenum) void {
    return epoxy_glActiveTexture.?(arg_20);
}
pub inline fn glActiveTextureARB(arg_21: GLenum) void {
    return epoxy_glActiveTextureARB.?(arg_21);
}
pub inline fn glActiveVaryingNV(arg_22: GLuint, arg_23: [*c]const GLchar) void {
    return epoxy_glActiveVaryingNV.?(arg_22, arg_23);
}
pub inline fn glAlphaFragmentOp1ATI(arg_24: GLenum, arg_25: GLuint, arg_26: GLuint, arg_27: GLuint, arg_28: GLuint, arg_29: GLuint) void {
    return epoxy_glAlphaFragmentOp1ATI.?(arg_24, arg_25, arg_26, arg_27, arg_28, arg_29);
}
pub inline fn glAlphaFragmentOp2ATI(arg_30: GLenum, arg_31: GLuint, arg_32: GLuint, arg_33: GLuint, arg_34: GLuint, arg_35: GLuint, arg_36: GLuint, arg_37: GLuint, arg_38: GLuint) void {
    return epoxy_glAlphaFragmentOp2ATI.?(arg_30, arg_31, arg_32, arg_33, arg_34, arg_35, arg_36, arg_37, arg_38);
}
pub inline fn glAlphaFragmentOp3ATI(arg_39: GLenum, arg_40: GLuint, arg_41: GLuint, arg_42: GLuint, arg_43: GLuint, arg_44: GLuint, arg_45: GLuint, arg_46: GLuint, arg_47: GLuint, arg_48: GLuint, arg_49: GLuint, arg_50: GLuint) void {
    return epoxy_glAlphaFragmentOp3ATI.?(arg_39, arg_40, arg_41, arg_42, arg_43, arg_44, arg_45, arg_46, arg_47, arg_48, arg_49, arg_50);
}
pub inline fn glAlphaFunc(arg_51: GLenum, arg_52: GLfloat) void {
    return epoxy_glAlphaFunc.?(arg_51, arg_52);
}
pub inline fn glAlphaFuncQCOM(arg_53: GLenum, arg_54: GLclampf) void {
    return epoxy_glAlphaFuncQCOM.?(arg_53, arg_54);
}
pub inline fn glAlphaFuncx(arg_55: GLenum, arg_56: GLfixed) void {
    return epoxy_glAlphaFuncx.?(arg_55, arg_56);
}
pub inline fn glAlphaFuncxOES(arg_57: GLenum, arg_58: GLfixed) void {
    return epoxy_glAlphaFuncxOES.?(arg_57, arg_58);
}
pub inline fn glAlphaToCoverageDitherControlNV(arg_59: GLenum) void {
    return epoxy_glAlphaToCoverageDitherControlNV.?(arg_59);
}
pub inline fn glApplyFramebufferAttachmentCMAAINTEL() void {
    return epoxy_glApplyFramebufferAttachmentCMAAINTEL.?();
}
pub inline fn glApplyTextureEXT(arg_60: GLenum) void {
    return epoxy_glApplyTextureEXT.?(arg_60);
}
pub inline fn glAreProgramsResidentNV(arg_61: GLsizei, arg_62: [*c]const GLuint, arg_63: [*c]GLboolean) GLboolean {
    return epoxy_glAreProgramsResidentNV.?(arg_61, arg_62, arg_63);
}
pub inline fn glAreTexturesResident(arg_64: GLsizei, arg_65: [*c]const GLuint, arg_66: [*c]GLboolean) GLboolean {
    return epoxy_glAreTexturesResident.?(arg_64, arg_65, arg_66);
}
pub inline fn glAreTexturesResidentEXT(arg_67: GLsizei, arg_68: [*c]const GLuint, arg_69: [*c]GLboolean) GLboolean {
    return epoxy_glAreTexturesResidentEXT.?(arg_67, arg_68, arg_69);
}
pub inline fn glArrayElement(arg_70: GLint) void {
    return epoxy_glArrayElement.?(arg_70);
}
pub inline fn glArrayElementEXT(arg_71: GLint) void {
    return epoxy_glArrayElementEXT.?(arg_71);
}
pub inline fn glArrayObjectATI(arg_72: GLenum, arg_73: GLint, arg_74: GLenum, arg_75: GLsizei, arg_76: GLuint, arg_77: GLuint) void {
    return epoxy_glArrayObjectATI.?(arg_72, arg_73, arg_74, arg_75, arg_76, arg_77);
}
pub inline fn glAsyncCopyBufferSubDataNVX(arg_78: GLsizei, arg_79: [*c]const GLuint, arg_80: [*c]const GLuint64, arg_81: GLuint, arg_82: GLbitfield, arg_83: GLuint, arg_84: GLuint, arg_85: GLintptr, arg_86: GLintptr, arg_87: GLsizeiptr, arg_88: GLsizei, arg_89: [*c]const GLuint, arg_90: [*c]const GLuint64) GLuint {
    return epoxy_glAsyncCopyBufferSubDataNVX.?(arg_78, arg_79, arg_80, arg_81, arg_82, arg_83, arg_84, arg_85, arg_86, arg_87, arg_88, arg_89, arg_90);
}
pub inline fn glAsyncCopyImageSubDataNVX(arg_91: GLsizei, arg_92: [*c]const GLuint, arg_93: [*c]const GLuint64, arg_94: GLuint, arg_95: GLbitfield, arg_96: GLuint, arg_97: GLenum, arg_98: GLint, arg_99: GLint, arg_100: GLint, arg_101: GLint, arg_102: GLuint, arg_103: GLenum, arg_104: GLint, arg_105: GLint, arg_106: GLint, arg_107: GLint, arg_108: GLsizei, arg_109: GLsizei, arg_110: GLsizei, arg_111: GLsizei, arg_112: [*c]const GLuint, arg_113: [*c]const GLuint64) GLuint {
    return epoxy_glAsyncCopyImageSubDataNVX.?(arg_91, arg_92, arg_93, arg_94, arg_95, arg_96, arg_97, arg_98, arg_99, arg_100, arg_101, arg_102, arg_103, arg_104, arg_105, arg_106, arg_107, arg_108, arg_109, arg_110, arg_111, arg_112, arg_113);
}
pub inline fn glAsyncMarkerSGIX(arg_114: GLuint) void {
    return epoxy_glAsyncMarkerSGIX.?(arg_114);
}
pub inline fn glAttachObjectARB(arg_115: GLhandleARB, arg_116: GLhandleARB) void {
    return epoxy_glAttachObjectARB.?(arg_115, arg_116);
}
pub inline fn glAttachShader(arg_117: GLuint, arg_118: GLuint) void {
    return epoxy_glAttachShader.?(arg_117, arg_118);
}
pub inline fn glBegin(arg_119: GLenum) void {
    return epoxy_glBegin.?(arg_119);
}
pub inline fn glBeginConditionalRender(arg_120: GLuint, arg_121: GLenum) void {
    return epoxy_glBeginConditionalRender.?(arg_120, arg_121);
}
pub inline fn glBeginConditionalRenderNV(arg_122: GLuint, arg_123: GLenum) void {
    return epoxy_glBeginConditionalRenderNV.?(arg_122, arg_123);
}
pub inline fn glBeginConditionalRenderNVX(arg_124: GLuint) void {
    return epoxy_glBeginConditionalRenderNVX.?(arg_124);
}
pub inline fn glBeginFragmentShaderATI() void {
    return epoxy_glBeginFragmentShaderATI.?();
}
pub inline fn glBeginOcclusionQueryNV(arg_125: GLuint) void {
    return epoxy_glBeginOcclusionQueryNV.?(arg_125);
}
pub inline fn glBeginPerfMonitorAMD(arg_126: GLuint) void {
    return epoxy_glBeginPerfMonitorAMD.?(arg_126);
}
pub inline fn glBeginPerfQueryINTEL(arg_127: GLuint) void {
    return epoxy_glBeginPerfQueryINTEL.?(arg_127);
}
pub inline fn glBeginQuery(arg_128: GLenum, arg_129: GLuint) void {
    return epoxy_glBeginQuery.?(arg_128, arg_129);
}
pub inline fn glBeginQueryARB(arg_130: GLenum, arg_131: GLuint) void {
    return epoxy_glBeginQueryARB.?(arg_130, arg_131);
}
pub inline fn glBeginQueryEXT(arg_132: GLenum, arg_133: GLuint) void {
    return epoxy_glBeginQueryEXT.?(arg_132, arg_133);
}
pub inline fn glBeginQueryIndexed(arg_134: GLenum, arg_135: GLuint, arg_136: GLuint) void {
    return epoxy_glBeginQueryIndexed.?(arg_134, arg_135, arg_136);
}
pub inline fn glBeginTransformFeedback(arg_137: GLenum) void {
    return epoxy_glBeginTransformFeedback.?(arg_137);
}
pub inline fn glBeginTransformFeedbackEXT(arg_138: GLenum) void {
    return epoxy_glBeginTransformFeedbackEXT.?(arg_138);
}
pub inline fn glBeginTransformFeedbackNV(arg_139: GLenum) void {
    return epoxy_glBeginTransformFeedbackNV.?(arg_139);
}
pub inline fn glBeginVertexShaderEXT() void {
    return epoxy_glBeginVertexShaderEXT.?();
}
pub inline fn glBeginVideoCaptureNV(arg_140: GLuint) void {
    return epoxy_glBeginVideoCaptureNV.?(arg_140);
}
pub inline fn glBindAttribLocation(arg_141: GLuint, arg_142: GLuint, arg_143: [*c]const GLchar) void {
    return epoxy_glBindAttribLocation.?(arg_141, arg_142, arg_143);
}
pub inline fn glBindAttribLocationARB(arg_144: GLhandleARB, arg_145: GLuint, arg_146: [*c]const GLcharARB) void {
    return epoxy_glBindAttribLocationARB.?(arg_144, arg_145, arg_146);
}
pub inline fn glBindBuffer(arg_147: GLenum, arg_148: GLuint) void {
    return epoxy_glBindBuffer.?(arg_147, arg_148);
}
pub inline fn glBindBufferARB(arg_149: GLenum, arg_150: GLuint) void {
    return epoxy_glBindBufferARB.?(arg_149, arg_150);
}
pub inline fn glBindBufferBase(arg_151: GLenum, arg_152: GLuint, arg_153: GLuint) void {
    return epoxy_glBindBufferBase.?(arg_151, arg_152, arg_153);
}
pub inline fn glBindBufferBaseEXT(arg_154: GLenum, arg_155: GLuint, arg_156: GLuint) void {
    return epoxy_glBindBufferBaseEXT.?(arg_154, arg_155, arg_156);
}
pub inline fn glBindBufferBaseNV(arg_157: GLenum, arg_158: GLuint, arg_159: GLuint) void {
    return epoxy_glBindBufferBaseNV.?(arg_157, arg_158, arg_159);
}
pub inline fn glBindBufferOffsetEXT(arg_160: GLenum, arg_161: GLuint, arg_162: GLuint, arg_163: GLintptr) void {
    return epoxy_glBindBufferOffsetEXT.?(arg_160, arg_161, arg_162, arg_163);
}
pub inline fn glBindBufferOffsetNV(arg_164: GLenum, arg_165: GLuint, arg_166: GLuint, arg_167: GLintptr) void {
    return epoxy_glBindBufferOffsetNV.?(arg_164, arg_165, arg_166, arg_167);
}
pub inline fn glBindBufferRange(arg_168: GLenum, arg_169: GLuint, arg_170: GLuint, arg_171: GLintptr, arg_172: GLsizeiptr) void {
    return epoxy_glBindBufferRange.?(arg_168, arg_169, arg_170, arg_171, arg_172);
}
pub inline fn glBindBufferRangeEXT(arg_173: GLenum, arg_174: GLuint, arg_175: GLuint, arg_176: GLintptr, arg_177: GLsizeiptr) void {
    return epoxy_glBindBufferRangeEXT.?(arg_173, arg_174, arg_175, arg_176, arg_177);
}
pub inline fn glBindBufferRangeNV(arg_178: GLenum, arg_179: GLuint, arg_180: GLuint, arg_181: GLintptr, arg_182: GLsizeiptr) void {
    return epoxy_glBindBufferRangeNV.?(arg_178, arg_179, arg_180, arg_181, arg_182);
}
pub inline fn glBindBuffersBase(arg_183: GLenum, arg_184: GLuint, arg_185: GLsizei, arg_186: [*c]const GLuint) void {
    return epoxy_glBindBuffersBase.?(arg_183, arg_184, arg_185, arg_186);
}
pub inline fn glBindBuffersRange(arg_187: GLenum, arg_188: GLuint, arg_189: GLsizei, arg_190: [*c]const GLuint, arg_191: [*c]const GLintptr, arg_192: [*c]const GLsizeiptr) void {
    return epoxy_glBindBuffersRange.?(arg_187, arg_188, arg_189, arg_190, arg_191, arg_192);
}
pub inline fn glBindFragDataLocation(arg_193: GLuint, arg_194: GLuint, arg_195: [*c]const GLchar) void {
    return epoxy_glBindFragDataLocation.?(arg_193, arg_194, arg_195);
}
pub inline fn glBindFragDataLocationEXT(arg_196: GLuint, arg_197: GLuint, arg_198: [*c]const GLchar) void {
    return epoxy_glBindFragDataLocationEXT.?(arg_196, arg_197, arg_198);
}
pub inline fn glBindFragDataLocationIndexed(arg_199: GLuint, arg_200: GLuint, arg_201: GLuint, arg_202: [*c]const GLchar) void {
    return epoxy_glBindFragDataLocationIndexed.?(arg_199, arg_200, arg_201, arg_202);
}
pub inline fn glBindFragDataLocationIndexedEXT(arg_203: GLuint, arg_204: GLuint, arg_205: GLuint, arg_206: [*c]const GLchar) void {
    return epoxy_glBindFragDataLocationIndexedEXT.?(arg_203, arg_204, arg_205, arg_206);
}
pub inline fn glBindFragmentShaderATI(arg_207: GLuint) void {
    return epoxy_glBindFragmentShaderATI.?(arg_207);
}
pub inline fn glBindFramebuffer(arg_208: GLenum, arg_209: GLuint) void {
    return epoxy_glBindFramebuffer.?(arg_208, arg_209);
}
pub inline fn glBindFramebufferEXT(arg_210: GLenum, arg_211: GLuint) void {
    return epoxy_glBindFramebufferEXT.?(arg_210, arg_211);
}
pub inline fn glBindFramebufferOES(arg_212: GLenum, arg_213: GLuint) void {
    return epoxy_glBindFramebufferOES.?(arg_212, arg_213);
}
pub inline fn glBindImageTexture(arg_214: GLuint, arg_215: GLuint, arg_216: GLint, arg_217: GLboolean, arg_218: GLint, arg_219: GLenum, arg_220: GLenum) void {
    return epoxy_glBindImageTexture.?(arg_214, arg_215, arg_216, arg_217, arg_218, arg_219, arg_220);
}
pub inline fn glBindImageTextureEXT(arg_221: GLuint, arg_222: GLuint, arg_223: GLint, arg_224: GLboolean, arg_225: GLint, arg_226: GLenum, arg_227: GLint) void {
    return epoxy_glBindImageTextureEXT.?(arg_221, arg_222, arg_223, arg_224, arg_225, arg_226, arg_227);
}
pub inline fn glBindImageTextures(arg_228: GLuint, arg_229: GLsizei, arg_230: [*c]const GLuint) void {
    return epoxy_glBindImageTextures.?(arg_228, arg_229, arg_230);
}
pub inline fn glBindLightParameterEXT(arg_231: GLenum, arg_232: GLenum) GLuint {
    return epoxy_glBindLightParameterEXT.?(arg_231, arg_232);
}
pub inline fn glBindMaterialParameterEXT(arg_233: GLenum, arg_234: GLenum) GLuint {
    return epoxy_glBindMaterialParameterEXT.?(arg_233, arg_234);
}
pub inline fn glBindMultiTextureEXT(arg_235: GLenum, arg_236: GLenum, arg_237: GLuint) void {
    return epoxy_glBindMultiTextureEXT.?(arg_235, arg_236, arg_237);
}
pub inline fn glBindParameterEXT(arg_238: GLenum) GLuint {
    return epoxy_glBindParameterEXT.?(arg_238);
}
pub inline fn glBindProgramARB(arg_239: GLenum, arg_240: GLuint) void {
    return epoxy_glBindProgramARB.?(arg_239, arg_240);
}
pub inline fn glBindProgramNV(arg_241: GLenum, arg_242: GLuint) void {
    return epoxy_glBindProgramNV.?(arg_241, arg_242);
}
pub inline fn glBindProgramPipeline(arg_243: GLuint) void {
    return epoxy_glBindProgramPipeline.?(arg_243);
}
pub inline fn glBindProgramPipelineEXT(arg_244: GLuint) void {
    return epoxy_glBindProgramPipelineEXT.?(arg_244);
}
pub inline fn glBindRenderbuffer(arg_245: GLenum, arg_246: GLuint) void {
    return epoxy_glBindRenderbuffer.?(arg_245, arg_246);
}
pub inline fn glBindRenderbufferEXT(arg_247: GLenum, arg_248: GLuint) void {
    return epoxy_glBindRenderbufferEXT.?(arg_247, arg_248);
}
pub inline fn glBindRenderbufferOES(arg_249: GLenum, arg_250: GLuint) void {
    return epoxy_glBindRenderbufferOES.?(arg_249, arg_250);
}
pub inline fn glBindSampler(arg_251: GLuint, arg_252: GLuint) void {
    return epoxy_glBindSampler.?(arg_251, arg_252);
}
pub inline fn glBindSamplers(arg_253: GLuint, arg_254: GLsizei, arg_255: [*c]const GLuint) void {
    return epoxy_glBindSamplers.?(arg_253, arg_254, arg_255);
}
pub inline fn glBindShadingRateImageNV(arg_256: GLuint) void {
    return epoxy_glBindShadingRateImageNV.?(arg_256);
}
pub inline fn glBindTexGenParameterEXT(arg_257: GLenum, arg_258: GLenum, arg_259: GLenum) GLuint {
    return epoxy_glBindTexGenParameterEXT.?(arg_257, arg_258, arg_259);
}
pub inline fn glBindTexture(arg_260: GLenum, arg_261: GLuint) void {
    return epoxy_glBindTexture.?(arg_260, arg_261);
}
pub inline fn glBindTextureEXT(arg_262: GLenum, arg_263: GLuint) void {
    return epoxy_glBindTextureEXT.?(arg_262, arg_263);
}
pub inline fn glBindTextureUnit(arg_264: GLuint, arg_265: GLuint) void {
    return epoxy_glBindTextureUnit.?(arg_264, arg_265);
}
pub inline fn glBindTextureUnitParameterEXT(arg_266: GLenum, arg_267: GLenum) GLuint {
    return epoxy_glBindTextureUnitParameterEXT.?(arg_266, arg_267);
}
pub inline fn glBindTextures(arg_268: GLuint, arg_269: GLsizei, arg_270: [*c]const GLuint) void {
    return epoxy_glBindTextures.?(arg_268, arg_269, arg_270);
}
pub inline fn glBindTransformFeedback(arg_271: GLenum, arg_272: GLuint) void {
    return epoxy_glBindTransformFeedback.?(arg_271, arg_272);
}
pub inline fn glBindTransformFeedbackNV(arg_273: GLenum, arg_274: GLuint) void {
    return epoxy_glBindTransformFeedbackNV.?(arg_273, arg_274);
}
pub inline fn glBindVertexArray(arg_275: GLuint) void {
    return epoxy_glBindVertexArray.?(arg_275);
}
pub inline fn glBindVertexArrayAPPLE(arg_276: GLuint) void {
    return epoxy_glBindVertexArrayAPPLE.?(arg_276);
}
pub inline fn glBindVertexArrayOES(arg_277: GLuint) void {
    return epoxy_glBindVertexArrayOES.?(arg_277);
}
pub inline fn glBindVertexBuffer(arg_278: GLuint, arg_279: GLuint, arg_280: GLintptr, arg_281: GLsizei) void {
    return epoxy_glBindVertexBuffer.?(arg_278, arg_279, arg_280, arg_281);
}
pub inline fn glBindVertexBuffers(arg_282: GLuint, arg_283: GLsizei, arg_284: [*c]const GLuint, arg_285: [*c]const GLintptr, arg_286: [*c]const GLsizei) void {
    return epoxy_glBindVertexBuffers.?(arg_282, arg_283, arg_284, arg_285, arg_286);
}
pub inline fn glBindVertexShaderEXT(arg_287: GLuint) void {
    return epoxy_glBindVertexShaderEXT.?(arg_287);
}
pub inline fn glBindVideoCaptureStreamBufferNV(arg_288: GLuint, arg_289: GLuint, arg_290: GLenum, arg_291: GLintptrARB) void {
    return epoxy_glBindVideoCaptureStreamBufferNV.?(arg_288, arg_289, arg_290, arg_291);
}
pub inline fn glBindVideoCaptureStreamTextureNV(arg_292: GLuint, arg_293: GLuint, arg_294: GLenum, arg_295: GLenum, arg_296: GLuint) void {
    return epoxy_glBindVideoCaptureStreamTextureNV.?(arg_292, arg_293, arg_294, arg_295, arg_296);
}
pub inline fn glBinormal3bEXT(arg_297: GLbyte, arg_298: GLbyte, arg_299: GLbyte) void {
    return epoxy_glBinormal3bEXT.?(arg_297, arg_298, arg_299);
}
pub inline fn glBinormal3bvEXT(arg_300: [*c]const GLbyte) void {
    return epoxy_glBinormal3bvEXT.?(arg_300);
}
pub inline fn glBinormal3dEXT(arg_301: GLdouble, arg_302: GLdouble, arg_303: GLdouble) void {
    return epoxy_glBinormal3dEXT.?(arg_301, arg_302, arg_303);
}
pub inline fn glBinormal3dvEXT(arg_304: [*c]const GLdouble) void {
    return epoxy_glBinormal3dvEXT.?(arg_304);
}
pub inline fn glBinormal3fEXT(arg_305: GLfloat, arg_306: GLfloat, arg_307: GLfloat) void {
    return epoxy_glBinormal3fEXT.?(arg_305, arg_306, arg_307);
}
pub inline fn glBinormal3fvEXT(arg_308: [*c]const GLfloat) void {
    return epoxy_glBinormal3fvEXT.?(arg_308);
}
pub inline fn glBinormal3iEXT(arg_309: GLint, arg_310: GLint, arg_311: GLint) void {
    return epoxy_glBinormal3iEXT.?(arg_309, arg_310, arg_311);
}
pub inline fn glBinormal3ivEXT(arg_312: [*c]const GLint) void {
    return epoxy_glBinormal3ivEXT.?(arg_312);
}
pub inline fn glBinormal3sEXT(arg_313: GLshort, arg_314: GLshort, arg_315: GLshort) void {
    return epoxy_glBinormal3sEXT.?(arg_313, arg_314, arg_315);
}
pub inline fn glBinormal3svEXT(arg_316: [*c]const GLshort) void {
    return epoxy_glBinormal3svEXT.?(arg_316);
}
pub inline fn glBinormalPointerEXT(arg_317: GLenum, arg_318: GLsizei, arg_319: ?*const anyopaque) void {
    return epoxy_glBinormalPointerEXT.?(arg_317, arg_318, arg_319);
}
pub inline fn glBitmap(arg_320: GLsizei, arg_321: GLsizei, arg_322: GLfloat, arg_323: GLfloat, arg_324: GLfloat, arg_325: GLfloat, arg_326: [*c]const GLubyte) void {
    return epoxy_glBitmap.?(arg_320, arg_321, arg_322, arg_323, arg_324, arg_325, arg_326);
}
pub inline fn glBitmapxOES(arg_327: GLsizei, arg_328: GLsizei, arg_329: GLfixed, arg_330: GLfixed, arg_331: GLfixed, arg_332: GLfixed, arg_333: [*c]const GLubyte) void {
    return epoxy_glBitmapxOES.?(arg_327, arg_328, arg_329, arg_330, arg_331, arg_332, arg_333);
}
pub inline fn glBlendBarrier() void {
    return epoxy_glBlendBarrier.?();
}
pub inline fn glBlendBarrierKHR() void {
    return epoxy_glBlendBarrierKHR.?();
}
pub inline fn glBlendBarrierNV() void {
    return epoxy_glBlendBarrierNV.?();
}
pub inline fn glBlendColor(arg_334: GLfloat, arg_335: GLfloat, arg_336: GLfloat, arg_337: GLfloat) void {
    return epoxy_glBlendColor.?(arg_334, arg_335, arg_336, arg_337);
}
pub inline fn glBlendColorEXT(arg_338: GLfloat, arg_339: GLfloat, arg_340: GLfloat, arg_341: GLfloat) void {
    return epoxy_glBlendColorEXT.?(arg_338, arg_339, arg_340, arg_341);
}
pub inline fn glBlendColorxOES(arg_342: GLfixed, arg_343: GLfixed, arg_344: GLfixed, arg_345: GLfixed) void {
    return epoxy_glBlendColorxOES.?(arg_342, arg_343, arg_344, arg_345);
}
pub inline fn glBlendEquation(arg_346: GLenum) void {
    return epoxy_glBlendEquation.?(arg_346);
}
pub inline fn glBlendEquationEXT(arg_347: GLenum) void {
    return epoxy_glBlendEquationEXT.?(arg_347);
}
pub inline fn glBlendEquationIndexedAMD(arg_348: GLuint, arg_349: GLenum) void {
    return epoxy_glBlendEquationIndexedAMD.?(arg_348, arg_349);
}
pub inline fn glBlendEquationOES(arg_350: GLenum) void {
    return epoxy_glBlendEquationOES.?(arg_350);
}
pub inline fn glBlendEquationSeparate(arg_351: GLenum, arg_352: GLenum) void {
    return epoxy_glBlendEquationSeparate.?(arg_351, arg_352);
}
pub inline fn glBlendEquationSeparateEXT(arg_353: GLenum, arg_354: GLenum) void {
    return epoxy_glBlendEquationSeparateEXT.?(arg_353, arg_354);
}
pub inline fn glBlendEquationSeparateIndexedAMD(arg_355: GLuint, arg_356: GLenum, arg_357: GLenum) void {
    return epoxy_glBlendEquationSeparateIndexedAMD.?(arg_355, arg_356, arg_357);
}
pub inline fn glBlendEquationSeparateOES(arg_358: GLenum, arg_359: GLenum) void {
    return epoxy_glBlendEquationSeparateOES.?(arg_358, arg_359);
}
pub inline fn glBlendEquationSeparatei(arg_360: GLuint, arg_361: GLenum, arg_362: GLenum) void {
    return epoxy_glBlendEquationSeparatei.?(arg_360, arg_361, arg_362);
}
pub inline fn glBlendEquationSeparateiARB(arg_363: GLuint, arg_364: GLenum, arg_365: GLenum) void {
    return epoxy_glBlendEquationSeparateiARB.?(arg_363, arg_364, arg_365);
}
pub inline fn glBlendEquationSeparateiEXT(arg_366: GLuint, arg_367: GLenum, arg_368: GLenum) void {
    return epoxy_glBlendEquationSeparateiEXT.?(arg_366, arg_367, arg_368);
}
pub inline fn glBlendEquationSeparateiOES(arg_369: GLuint, arg_370: GLenum, arg_371: GLenum) void {
    return epoxy_glBlendEquationSeparateiOES.?(arg_369, arg_370, arg_371);
}
pub inline fn glBlendEquationi(arg_372: GLuint, arg_373: GLenum) void {
    return epoxy_glBlendEquationi.?(arg_372, arg_373);
}
pub inline fn glBlendEquationiARB(arg_374: GLuint, arg_375: GLenum) void {
    return epoxy_glBlendEquationiARB.?(arg_374, arg_375);
}
pub inline fn glBlendEquationiEXT(arg_376: GLuint, arg_377: GLenum) void {
    return epoxy_glBlendEquationiEXT.?(arg_376, arg_377);
}
pub inline fn glBlendEquationiOES(arg_378: GLuint, arg_379: GLenum) void {
    return epoxy_glBlendEquationiOES.?(arg_378, arg_379);
}
pub inline fn glBlendFunc(arg_380: GLenum, arg_381: GLenum) void {
    return epoxy_glBlendFunc.?(arg_380, arg_381);
}
pub inline fn glBlendFuncIndexedAMD(arg_382: GLuint, arg_383: GLenum, arg_384: GLenum) void {
    return epoxy_glBlendFuncIndexedAMD.?(arg_382, arg_383, arg_384);
}
pub inline fn glBlendFuncSeparate(arg_385: GLenum, arg_386: GLenum, arg_387: GLenum, arg_388: GLenum) void {
    return epoxy_glBlendFuncSeparate.?(arg_385, arg_386, arg_387, arg_388);
}
pub inline fn glBlendFuncSeparateEXT(arg_389: GLenum, arg_390: GLenum, arg_391: GLenum, arg_392: GLenum) void {
    return epoxy_glBlendFuncSeparateEXT.?(arg_389, arg_390, arg_391, arg_392);
}
pub inline fn glBlendFuncSeparateINGR(arg_393: GLenum, arg_394: GLenum, arg_395: GLenum, arg_396: GLenum) void {
    return epoxy_glBlendFuncSeparateINGR.?(arg_393, arg_394, arg_395, arg_396);
}
pub inline fn glBlendFuncSeparateIndexedAMD(arg_397: GLuint, arg_398: GLenum, arg_399: GLenum, arg_400: GLenum, arg_401: GLenum) void {
    return epoxy_glBlendFuncSeparateIndexedAMD.?(arg_397, arg_398, arg_399, arg_400, arg_401);
}
pub inline fn glBlendFuncSeparateOES(arg_402: GLenum, arg_403: GLenum, arg_404: GLenum, arg_405: GLenum) void {
    return epoxy_glBlendFuncSeparateOES.?(arg_402, arg_403, arg_404, arg_405);
}
pub inline fn glBlendFuncSeparatei(arg_406: GLuint, arg_407: GLenum, arg_408: GLenum, arg_409: GLenum, arg_410: GLenum) void {
    return epoxy_glBlendFuncSeparatei.?(arg_406, arg_407, arg_408, arg_409, arg_410);
}
pub inline fn glBlendFuncSeparateiARB(arg_411: GLuint, arg_412: GLenum, arg_413: GLenum, arg_414: GLenum, arg_415: GLenum) void {
    return epoxy_glBlendFuncSeparateiARB.?(arg_411, arg_412, arg_413, arg_414, arg_415);
}
pub inline fn glBlendFuncSeparateiEXT(arg_416: GLuint, arg_417: GLenum, arg_418: GLenum, arg_419: GLenum, arg_420: GLenum) void {
    return epoxy_glBlendFuncSeparateiEXT.?(arg_416, arg_417, arg_418, arg_419, arg_420);
}
pub inline fn glBlendFuncSeparateiOES(arg_421: GLuint, arg_422: GLenum, arg_423: GLenum, arg_424: GLenum, arg_425: GLenum) void {
    return epoxy_glBlendFuncSeparateiOES.?(arg_421, arg_422, arg_423, arg_424, arg_425);
}
pub inline fn glBlendFunci(arg_426: GLuint, arg_427: GLenum, arg_428: GLenum) void {
    return epoxy_glBlendFunci.?(arg_426, arg_427, arg_428);
}
pub inline fn glBlendFunciARB(arg_429: GLuint, arg_430: GLenum, arg_431: GLenum) void {
    return epoxy_glBlendFunciARB.?(arg_429, arg_430, arg_431);
}
pub inline fn glBlendFunciEXT(arg_432: GLuint, arg_433: GLenum, arg_434: GLenum) void {
    return epoxy_glBlendFunciEXT.?(arg_432, arg_433, arg_434);
}
pub inline fn glBlendFunciOES(arg_435: GLuint, arg_436: GLenum, arg_437: GLenum) void {
    return epoxy_glBlendFunciOES.?(arg_435, arg_436, arg_437);
}
pub inline fn glBlendParameteriNV(arg_438: GLenum, arg_439: GLint) void {
    return epoxy_glBlendParameteriNV.?(arg_438, arg_439);
}
pub inline fn glBlitFramebuffer(arg_440: GLint, arg_441: GLint, arg_442: GLint, arg_443: GLint, arg_444: GLint, arg_445: GLint, arg_446: GLint, arg_447: GLint, arg_448: GLbitfield, arg_449: GLenum) void {
    return epoxy_glBlitFramebuffer.?(arg_440, arg_441, arg_442, arg_443, arg_444, arg_445, arg_446, arg_447, arg_448, arg_449);
}
pub inline fn glBlitFramebufferANGLE(arg_450: GLint, arg_451: GLint, arg_452: GLint, arg_453: GLint, arg_454: GLint, arg_455: GLint, arg_456: GLint, arg_457: GLint, arg_458: GLbitfield, arg_459: GLenum) void {
    return epoxy_glBlitFramebufferANGLE.?(arg_450, arg_451, arg_452, arg_453, arg_454, arg_455, arg_456, arg_457, arg_458, arg_459);
}
pub inline fn glBlitFramebufferEXT(arg_460: GLint, arg_461: GLint, arg_462: GLint, arg_463: GLint, arg_464: GLint, arg_465: GLint, arg_466: GLint, arg_467: GLint, arg_468: GLbitfield, arg_469: GLenum) void {
    return epoxy_glBlitFramebufferEXT.?(arg_460, arg_461, arg_462, arg_463, arg_464, arg_465, arg_466, arg_467, arg_468, arg_469);
}
pub inline fn glBlitFramebufferNV(arg_470: GLint, arg_471: GLint, arg_472: GLint, arg_473: GLint, arg_474: GLint, arg_475: GLint, arg_476: GLint, arg_477: GLint, arg_478: GLbitfield, arg_479: GLenum) void {
    return epoxy_glBlitFramebufferNV.?(arg_470, arg_471, arg_472, arg_473, arg_474, arg_475, arg_476, arg_477, arg_478, arg_479);
}
pub inline fn glBlitNamedFramebuffer(arg_480: GLuint, arg_481: GLuint, arg_482: GLint, arg_483: GLint, arg_484: GLint, arg_485: GLint, arg_486: GLint, arg_487: GLint, arg_488: GLint, arg_489: GLint, arg_490: GLbitfield, arg_491: GLenum) void {
    return epoxy_glBlitNamedFramebuffer.?(arg_480, arg_481, arg_482, arg_483, arg_484, arg_485, arg_486, arg_487, arg_488, arg_489, arg_490, arg_491);
}
pub inline fn glBufferAddressRangeNV(arg_492: GLenum, arg_493: GLuint, arg_494: GLuint64EXT, arg_495: GLsizeiptr) void {
    return epoxy_glBufferAddressRangeNV.?(arg_492, arg_493, arg_494, arg_495);
}
pub inline fn glBufferAttachMemoryNV(arg_496: GLenum, arg_497: GLuint, arg_498: GLuint64) void {
    return epoxy_glBufferAttachMemoryNV.?(arg_496, arg_497, arg_498);
}
pub inline fn glBufferData(arg_499: GLenum, arg_500: GLsizeiptr, arg_501: ?*const anyopaque, arg_502: GLenum) void {
    return epoxy_glBufferData.?(arg_499, arg_500, arg_501, arg_502);
}
pub inline fn glBufferDataARB(arg_503: GLenum, arg_504: GLsizeiptrARB, arg_505: ?*const anyopaque, arg_506: GLenum) void {
    return epoxy_glBufferDataARB.?(arg_503, arg_504, arg_505, arg_506);
}
pub inline fn glBufferPageCommitmentARB(arg_507: GLenum, arg_508: GLintptr, arg_509: GLsizeiptr, arg_510: GLboolean) void {
    return epoxy_glBufferPageCommitmentARB.?(arg_507, arg_508, arg_509, arg_510);
}
pub inline fn glBufferParameteriAPPLE(arg_511: GLenum, arg_512: GLenum, arg_513: GLint) void {
    return epoxy_glBufferParameteriAPPLE.?(arg_511, arg_512, arg_513);
}
pub inline fn glBufferStorage(arg_514: GLenum, arg_515: GLsizeiptr, arg_516: ?*const anyopaque, arg_517: GLbitfield) void {
    return epoxy_glBufferStorage.?(arg_514, arg_515, arg_516, arg_517);
}
pub inline fn glBufferStorageEXT(arg_518: GLenum, arg_519: GLsizeiptr, arg_520: ?*const anyopaque, arg_521: GLbitfield) void {
    return epoxy_glBufferStorageEXT.?(arg_518, arg_519, arg_520, arg_521);
}
pub inline fn glBufferStorageExternalEXT(arg_522: GLenum, arg_523: GLintptr, arg_524: GLsizeiptr, arg_525: GLeglClientBufferEXT, arg_526: GLbitfield) void {
    return epoxy_glBufferStorageExternalEXT.?(arg_522, arg_523, arg_524, arg_525, arg_526);
}
pub inline fn glBufferStorageMemEXT(arg_527: GLenum, arg_528: GLsizeiptr, arg_529: GLuint, arg_530: GLuint64) void {
    return epoxy_glBufferStorageMemEXT.?(arg_527, arg_528, arg_529, arg_530);
}
pub inline fn glBufferSubData(arg_531: GLenum, arg_532: GLintptr, arg_533: GLsizeiptr, arg_534: ?*const anyopaque) void {
    return epoxy_glBufferSubData.?(arg_531, arg_532, arg_533, arg_534);
}
pub inline fn glBufferSubDataARB(arg_535: GLenum, arg_536: GLintptrARB, arg_537: GLsizeiptrARB, arg_538: ?*const anyopaque) void {
    return epoxy_glBufferSubDataARB.?(arg_535, arg_536, arg_537, arg_538);
}
pub inline fn glCallCommandListNV(arg_539: GLuint) void {
    return epoxy_glCallCommandListNV.?(arg_539);
}
pub inline fn glCallList(arg_540: GLuint) void {
    return epoxy_glCallList.?(arg_540);
}
pub inline fn glCallLists(arg_541: GLsizei, arg_542: GLenum, arg_543: ?*const anyopaque) void {
    return epoxy_glCallLists.?(arg_541, arg_542, arg_543);
}
pub inline fn glCheckFramebufferStatus(arg_544: GLenum) GLenum {
    return epoxy_glCheckFramebufferStatus.?(arg_544);
}
pub inline fn glCheckFramebufferStatusEXT(arg_545: GLenum) GLenum {
    return epoxy_glCheckFramebufferStatusEXT.?(arg_545);
}
pub inline fn glCheckFramebufferStatusOES(arg_546: GLenum) GLenum {
    return epoxy_glCheckFramebufferStatusOES.?(arg_546);
}
pub inline fn glCheckNamedFramebufferStatus(arg_547: GLuint, arg_548: GLenum) GLenum {
    return epoxy_glCheckNamedFramebufferStatus.?(arg_547, arg_548);
}
pub inline fn glCheckNamedFramebufferStatusEXT(arg_549: GLuint, arg_550: GLenum) GLenum {
    return epoxy_glCheckNamedFramebufferStatusEXT.?(arg_549, arg_550);
}
pub inline fn glClampColor(arg_551: GLenum, arg_552: GLenum) void {
    return epoxy_glClampColor.?(arg_551, arg_552);
}
pub inline fn glClampColorARB(arg_553: GLenum, arg_554: GLenum) void {
    return epoxy_glClampColorARB.?(arg_553, arg_554);
}
pub inline fn glClear(arg_555: GLbitfield) void {
    return epoxy_glClear.?(arg_555);
}
pub inline fn glClearAccum(arg_556: GLfloat, arg_557: GLfloat, arg_558: GLfloat, arg_559: GLfloat) void {
    return epoxy_glClearAccum.?(arg_556, arg_557, arg_558, arg_559);
}
pub inline fn glClearAccumxOES(arg_560: GLfixed, arg_561: GLfixed, arg_562: GLfixed, arg_563: GLfixed) void {
    return epoxy_glClearAccumxOES.?(arg_560, arg_561, arg_562, arg_563);
}
pub inline fn glClearBufferData(arg_564: GLenum, arg_565: GLenum, arg_566: GLenum, arg_567: GLenum, arg_568: ?*const anyopaque) void {
    return epoxy_glClearBufferData.?(arg_564, arg_565, arg_566, arg_567, arg_568);
}
pub inline fn glClearBufferSubData(arg_569: GLenum, arg_570: GLenum, arg_571: GLintptr, arg_572: GLsizeiptr, arg_573: GLenum, arg_574: GLenum, arg_575: ?*const anyopaque) void {
    return epoxy_glClearBufferSubData.?(arg_569, arg_570, arg_571, arg_572, arg_573, arg_574, arg_575);
}
pub inline fn glClearBufferfi(arg_576: GLenum, arg_577: GLint, arg_578: GLfloat, arg_579: GLint) void {
    return epoxy_glClearBufferfi.?(arg_576, arg_577, arg_578, arg_579);
}
pub inline fn glClearBufferfv(arg_580: GLenum, arg_581: GLint, arg_582: [*c]const GLfloat) void {
    return epoxy_glClearBufferfv.?(arg_580, arg_581, arg_582);
}
pub inline fn glClearBufferiv(arg_583: GLenum, arg_584: GLint, arg_585: [*c]const GLint) void {
    return epoxy_glClearBufferiv.?(arg_583, arg_584, arg_585);
}
pub inline fn glClearBufferuiv(arg_586: GLenum, arg_587: GLint, arg_588: [*c]const GLuint) void {
    return epoxy_glClearBufferuiv.?(arg_586, arg_587, arg_588);
}
pub inline fn glClearColor(arg_589: GLfloat, arg_590: GLfloat, arg_591: GLfloat, arg_592: GLfloat) void {
    return epoxy_glClearColor.?(arg_589, arg_590, arg_591, arg_592);
}
pub inline fn glClearColorIiEXT(arg_593: GLint, arg_594: GLint, arg_595: GLint, arg_596: GLint) void {
    return epoxy_glClearColorIiEXT.?(arg_593, arg_594, arg_595, arg_596);
}
pub inline fn glClearColorIuiEXT(arg_597: GLuint, arg_598: GLuint, arg_599: GLuint, arg_600: GLuint) void {
    return epoxy_glClearColorIuiEXT.?(arg_597, arg_598, arg_599, arg_600);
}
pub inline fn glClearColorx(arg_601: GLfixed, arg_602: GLfixed, arg_603: GLfixed, arg_604: GLfixed) void {
    return epoxy_glClearColorx.?(arg_601, arg_602, arg_603, arg_604);
}
pub inline fn glClearColorxOES(arg_605: GLfixed, arg_606: GLfixed, arg_607: GLfixed, arg_608: GLfixed) void {
    return epoxy_glClearColorxOES.?(arg_605, arg_606, arg_607, arg_608);
}
pub inline fn glClearDepth(arg_609: GLdouble) void {
    return epoxy_glClearDepth.?(arg_609);
}
pub inline fn glClearDepthdNV(arg_610: GLdouble) void {
    return epoxy_glClearDepthdNV.?(arg_610);
}
pub inline fn glClearDepthf(arg_611: GLfloat) void {
    return epoxy_glClearDepthf.?(arg_611);
}
pub inline fn glClearDepthfOES(arg_612: GLclampf) void {
    return epoxy_glClearDepthfOES.?(arg_612);
}
pub inline fn glClearDepthx(arg_613: GLfixed) void {
    return epoxy_glClearDepthx.?(arg_613);
}
pub inline fn glClearDepthxOES(arg_614: GLfixed) void {
    return epoxy_glClearDepthxOES.?(arg_614);
}
pub inline fn glClearIndex(arg_615: GLfloat) void {
    return epoxy_glClearIndex.?(arg_615);
}
pub inline fn glClearNamedBufferData(arg_616: GLuint, arg_617: GLenum, arg_618: GLenum, arg_619: GLenum, arg_620: ?*const anyopaque) void {
    return epoxy_glClearNamedBufferData.?(arg_616, arg_617, arg_618, arg_619, arg_620);
}
pub inline fn glClearNamedBufferDataEXT(arg_621: GLuint, arg_622: GLenum, arg_623: GLenum, arg_624: GLenum, arg_625: ?*const anyopaque) void {
    return epoxy_glClearNamedBufferDataEXT.?(arg_621, arg_622, arg_623, arg_624, arg_625);
}
pub inline fn glClearNamedBufferSubData(arg_626: GLuint, arg_627: GLenum, arg_628: GLintptr, arg_629: GLsizeiptr, arg_630: GLenum, arg_631: GLenum, arg_632: ?*const anyopaque) void {
    return epoxy_glClearNamedBufferSubData.?(arg_626, arg_627, arg_628, arg_629, arg_630, arg_631, arg_632);
}
pub inline fn glClearNamedBufferSubDataEXT(arg_633: GLuint, arg_634: GLenum, arg_635: GLsizeiptr, arg_636: GLsizeiptr, arg_637: GLenum, arg_638: GLenum, arg_639: ?*const anyopaque) void {
    return epoxy_glClearNamedBufferSubDataEXT.?(arg_633, arg_634, arg_635, arg_636, arg_637, arg_638, arg_639);
}
pub inline fn glClearNamedFramebufferfi(arg_640: GLuint, arg_641: GLenum, arg_642: GLint, arg_643: GLfloat, arg_644: GLint) void {
    return epoxy_glClearNamedFramebufferfi.?(arg_640, arg_641, arg_642, arg_643, arg_644);
}
pub inline fn glClearNamedFramebufferfv(arg_645: GLuint, arg_646: GLenum, arg_647: GLint, arg_648: [*c]const GLfloat) void {
    return epoxy_glClearNamedFramebufferfv.?(arg_645, arg_646, arg_647, arg_648);
}
pub inline fn glClearNamedFramebufferiv(arg_649: GLuint, arg_650: GLenum, arg_651: GLint, arg_652: [*c]const GLint) void {
    return epoxy_glClearNamedFramebufferiv.?(arg_649, arg_650, arg_651, arg_652);
}
pub inline fn glClearNamedFramebufferuiv(arg_653: GLuint, arg_654: GLenum, arg_655: GLint, arg_656: [*c]const GLuint) void {
    return epoxy_glClearNamedFramebufferuiv.?(arg_653, arg_654, arg_655, arg_656);
}
pub inline fn glClearPixelLocalStorageuiEXT(arg_657: GLsizei, arg_658: GLsizei, arg_659: [*c]const GLuint) void {
    return epoxy_glClearPixelLocalStorageuiEXT.?(arg_657, arg_658, arg_659);
}
pub inline fn glClearStencil(arg_660: GLint) void {
    return epoxy_glClearStencil.?(arg_660);
}
pub inline fn glClearTexImage(arg_661: GLuint, arg_662: GLint, arg_663: GLenum, arg_664: GLenum, arg_665: ?*const anyopaque) void {
    return epoxy_glClearTexImage.?(arg_661, arg_662, arg_663, arg_664, arg_665);
}
pub inline fn glClearTexImageEXT(arg_666: GLuint, arg_667: GLint, arg_668: GLenum, arg_669: GLenum, arg_670: ?*const anyopaque) void {
    return epoxy_glClearTexImageEXT.?(arg_666, arg_667, arg_668, arg_669, arg_670);
}
pub inline fn glClearTexSubImage(arg_671: GLuint, arg_672: GLint, arg_673: GLint, arg_674: GLint, arg_675: GLint, arg_676: GLsizei, arg_677: GLsizei, arg_678: GLsizei, arg_679: GLenum, arg_680: GLenum, arg_681: ?*const anyopaque) void {
    return epoxy_glClearTexSubImage.?(arg_671, arg_672, arg_673, arg_674, arg_675, arg_676, arg_677, arg_678, arg_679, arg_680, arg_681);
}
pub inline fn glClearTexSubImageEXT(arg_682: GLuint, arg_683: GLint, arg_684: GLint, arg_685: GLint, arg_686: GLint, arg_687: GLsizei, arg_688: GLsizei, arg_689: GLsizei, arg_690: GLenum, arg_691: GLenum, arg_692: ?*const anyopaque) void {
    return epoxy_glClearTexSubImageEXT.?(arg_682, arg_683, arg_684, arg_685, arg_686, arg_687, arg_688, arg_689, arg_690, arg_691, arg_692);
}
pub inline fn glClientActiveTexture(arg_693: GLenum) void {
    return epoxy_glClientActiveTexture.?(arg_693);
}
pub inline fn glClientActiveTextureARB(arg_694: GLenum) void {
    return epoxy_glClientActiveTextureARB.?(arg_694);
}
pub inline fn glClientActiveVertexStreamATI(arg_695: GLenum) void {
    return epoxy_glClientActiveVertexStreamATI.?(arg_695);
}
pub inline fn glClientAttribDefaultEXT(arg_696: GLbitfield) void {
    return epoxy_glClientAttribDefaultEXT.?(arg_696);
}
pub inline fn glClientWaitSemaphoreui64NVX(arg_697: GLsizei, arg_698: [*c]const GLuint, arg_699: [*c]const GLuint64) void {
    return epoxy_glClientWaitSemaphoreui64NVX.?(arg_697, arg_698, arg_699);
}
pub inline fn glClientWaitSync(arg_700: GLsync, arg_701: GLbitfield, arg_702: GLuint64) GLenum {
    return epoxy_glClientWaitSync.?(arg_700, arg_701, arg_702);
}
pub inline fn glClientWaitSyncAPPLE(arg_703: GLsync, arg_704: GLbitfield, arg_705: GLuint64) GLenum {
    return epoxy_glClientWaitSyncAPPLE.?(arg_703, arg_704, arg_705);
}
pub inline fn glClipControl(arg_706: GLenum, arg_707: GLenum) void {
    return epoxy_glClipControl.?(arg_706, arg_707);
}
pub inline fn glClipControlEXT(arg_708: GLenum, arg_709: GLenum) void {
    return epoxy_glClipControlEXT.?(arg_708, arg_709);
}
pub inline fn glClipPlane(arg_710: GLenum, arg_711: [*c]const GLdouble) void {
    return epoxy_glClipPlane.?(arg_710, arg_711);
}
pub inline fn glClipPlanef(arg_712: GLenum, arg_713: [*c]const GLfloat) void {
    return epoxy_glClipPlanef.?(arg_712, arg_713);
}
pub inline fn glClipPlanefIMG(arg_714: GLenum, arg_715: [*c]const GLfloat) void {
    return epoxy_glClipPlanefIMG.?(arg_714, arg_715);
}
pub inline fn glClipPlanefOES(arg_716: GLenum, arg_717: [*c]const GLfloat) void {
    return epoxy_glClipPlanefOES.?(arg_716, arg_717);
}
pub inline fn glClipPlanex(arg_718: GLenum, arg_719: [*c]const GLfixed) void {
    return epoxy_glClipPlanex.?(arg_718, arg_719);
}
pub inline fn glClipPlanexIMG(arg_720: GLenum, arg_721: [*c]const GLfixed) void {
    return epoxy_glClipPlanexIMG.?(arg_720, arg_721);
}
pub inline fn glClipPlanexOES(arg_722: GLenum, arg_723: [*c]const GLfixed) void {
    return epoxy_glClipPlanexOES.?(arg_722, arg_723);
}
pub inline fn glColor3b(arg_724: GLbyte, arg_725: GLbyte, arg_726: GLbyte) void {
    return epoxy_glColor3b.?(arg_724, arg_725, arg_726);
}
pub inline fn glColor3bv(arg_727: [*c]const GLbyte) void {
    return epoxy_glColor3bv.?(arg_727);
}
pub inline fn glColor3d(arg_728: GLdouble, arg_729: GLdouble, arg_730: GLdouble) void {
    return epoxy_glColor3d.?(arg_728, arg_729, arg_730);
}
pub inline fn glColor3dv(arg_731: [*c]const GLdouble) void {
    return epoxy_glColor3dv.?(arg_731);
}
pub inline fn glColor3f(arg_732: GLfloat, arg_733: GLfloat, arg_734: GLfloat) void {
    return epoxy_glColor3f.?(arg_732, arg_733, arg_734);
}
pub inline fn glColor3fVertex3fSUN(arg_735: GLfloat, arg_736: GLfloat, arg_737: GLfloat, arg_738: GLfloat, arg_739: GLfloat, arg_740: GLfloat) void {
    return epoxy_glColor3fVertex3fSUN.?(arg_735, arg_736, arg_737, arg_738, arg_739, arg_740);
}
pub inline fn glColor3fVertex3fvSUN(arg_741: [*c]const GLfloat, arg_742: [*c]const GLfloat) void {
    return epoxy_glColor3fVertex3fvSUN.?(arg_741, arg_742);
}
pub inline fn glColor3fv(arg_743: [*c]const GLfloat) void {
    return epoxy_glColor3fv.?(arg_743);
}
pub inline fn glColor3hNV(arg_744: GLhalfNV, arg_745: GLhalfNV, arg_746: GLhalfNV) void {
    return epoxy_glColor3hNV.?(arg_744, arg_745, arg_746);
}
pub inline fn glColor3hvNV(arg_747: [*c]const GLhalfNV) void {
    return epoxy_glColor3hvNV.?(arg_747);
}
pub inline fn glColor3i(arg_748: GLint, arg_749: GLint, arg_750: GLint) void {
    return epoxy_glColor3i.?(arg_748, arg_749, arg_750);
}
pub inline fn glColor3iv(arg_751: [*c]const GLint) void {
    return epoxy_glColor3iv.?(arg_751);
}
pub inline fn glColor3s(arg_752: GLshort, arg_753: GLshort, arg_754: GLshort) void {
    return epoxy_glColor3s.?(arg_752, arg_753, arg_754);
}
pub inline fn glColor3sv(arg_755: [*c]const GLshort) void {
    return epoxy_glColor3sv.?(arg_755);
}
pub inline fn glColor3ub(arg_756: GLubyte, arg_757: GLubyte, arg_758: GLubyte) void {
    return epoxy_glColor3ub.?(arg_756, arg_757, arg_758);
}
pub inline fn glColor3ubv(arg_759: [*c]const GLubyte) void {
    return epoxy_glColor3ubv.?(arg_759);
}
pub inline fn glColor3ui(arg_760: GLuint, arg_761: GLuint, arg_762: GLuint) void {
    return epoxy_glColor3ui.?(arg_760, arg_761, arg_762);
}
pub inline fn glColor3uiv(arg_763: [*c]const GLuint) void {
    return epoxy_glColor3uiv.?(arg_763);
}
pub inline fn glColor3us(arg_764: GLushort, arg_765: GLushort, arg_766: GLushort) void {
    return epoxy_glColor3us.?(arg_764, arg_765, arg_766);
}
pub inline fn glColor3usv(arg_767: [*c]const GLushort) void {
    return epoxy_glColor3usv.?(arg_767);
}
pub inline fn glColor3xOES(arg_768: GLfixed, arg_769: GLfixed, arg_770: GLfixed) void {
    return epoxy_glColor3xOES.?(arg_768, arg_769, arg_770);
}
pub inline fn glColor3xvOES(arg_771: [*c]const GLfixed) void {
    return epoxy_glColor3xvOES.?(arg_771);
}
pub inline fn glColor4b(arg_772: GLbyte, arg_773: GLbyte, arg_774: GLbyte, arg_775: GLbyte) void {
    return epoxy_glColor4b.?(arg_772, arg_773, arg_774, arg_775);
}
pub inline fn glColor4bv(arg_776: [*c]const GLbyte) void {
    return epoxy_glColor4bv.?(arg_776);
}
pub inline fn glColor4d(arg_777: GLdouble, arg_778: GLdouble, arg_779: GLdouble, arg_780: GLdouble) void {
    return epoxy_glColor4d.?(arg_777, arg_778, arg_779, arg_780);
}
pub inline fn glColor4dv(arg_781: [*c]const GLdouble) void {
    return epoxy_glColor4dv.?(arg_781);
}
pub inline fn glColor4f(arg_782: GLfloat, arg_783: GLfloat, arg_784: GLfloat, arg_785: GLfloat) void {
    return epoxy_glColor4f.?(arg_782, arg_783, arg_784, arg_785);
}
pub inline fn glColor4fNormal3fVertex3fSUN(arg_786: GLfloat, arg_787: GLfloat, arg_788: GLfloat, arg_789: GLfloat, arg_790: GLfloat, arg_791: GLfloat, arg_792: GLfloat, arg_793: GLfloat, arg_794: GLfloat, arg_795: GLfloat) void {
    return epoxy_glColor4fNormal3fVertex3fSUN.?(arg_786, arg_787, arg_788, arg_789, arg_790, arg_791, arg_792, arg_793, arg_794, arg_795);
}
pub inline fn glColor4fNormal3fVertex3fvSUN(arg_796: [*c]const GLfloat, arg_797: [*c]const GLfloat, arg_798: [*c]const GLfloat) void {
    return epoxy_glColor4fNormal3fVertex3fvSUN.?(arg_796, arg_797, arg_798);
}
pub inline fn glColor4fv(arg_799: [*c]const GLfloat) void {
    return epoxy_glColor4fv.?(arg_799);
}
pub inline fn glColor4hNV(arg_800: GLhalfNV, arg_801: GLhalfNV, arg_802: GLhalfNV, arg_803: GLhalfNV) void {
    return epoxy_glColor4hNV.?(arg_800, arg_801, arg_802, arg_803);
}
pub inline fn glColor4hvNV(arg_804: [*c]const GLhalfNV) void {
    return epoxy_glColor4hvNV.?(arg_804);
}
pub inline fn glColor4i(arg_805: GLint, arg_806: GLint, arg_807: GLint, arg_808: GLint) void {
    return epoxy_glColor4i.?(arg_805, arg_806, arg_807, arg_808);
}
pub inline fn glColor4iv(arg_809: [*c]const GLint) void {
    return epoxy_glColor4iv.?(arg_809);
}
pub inline fn glColor4s(arg_810: GLshort, arg_811: GLshort, arg_812: GLshort, arg_813: GLshort) void {
    return epoxy_glColor4s.?(arg_810, arg_811, arg_812, arg_813);
}
pub inline fn glColor4sv(arg_814: [*c]const GLshort) void {
    return epoxy_glColor4sv.?(arg_814);
}
pub inline fn glColor4ub(arg_815: GLubyte, arg_816: GLubyte, arg_817: GLubyte, arg_818: GLubyte) void {
    return epoxy_glColor4ub.?(arg_815, arg_816, arg_817, arg_818);
}
pub inline fn glColor4ubVertex2fSUN(arg_819: GLubyte, arg_820: GLubyte, arg_821: GLubyte, arg_822: GLubyte, arg_823: GLfloat, arg_824: GLfloat) void {
    return epoxy_glColor4ubVertex2fSUN.?(arg_819, arg_820, arg_821, arg_822, arg_823, arg_824);
}
pub inline fn glColor4ubVertex2fvSUN(arg_825: [*c]const GLubyte, arg_826: [*c]const GLfloat) void {
    return epoxy_glColor4ubVertex2fvSUN.?(arg_825, arg_826);
}
pub inline fn glColor4ubVertex3fSUN(arg_827: GLubyte, arg_828: GLubyte, arg_829: GLubyte, arg_830: GLubyte, arg_831: GLfloat, arg_832: GLfloat, arg_833: GLfloat) void {
    return epoxy_glColor4ubVertex3fSUN.?(arg_827, arg_828, arg_829, arg_830, arg_831, arg_832, arg_833);
}
pub inline fn glColor4ubVertex3fvSUN(arg_834: [*c]const GLubyte, arg_835: [*c]const GLfloat) void {
    return epoxy_glColor4ubVertex3fvSUN.?(arg_834, arg_835);
}
pub inline fn glColor4ubv(arg_836: [*c]const GLubyte) void {
    return epoxy_glColor4ubv.?(arg_836);
}
pub inline fn glColor4ui(arg_837: GLuint, arg_838: GLuint, arg_839: GLuint, arg_840: GLuint) void {
    return epoxy_glColor4ui.?(arg_837, arg_838, arg_839, arg_840);
}
pub inline fn glColor4uiv(arg_841: [*c]const GLuint) void {
    return epoxy_glColor4uiv.?(arg_841);
}
pub inline fn glColor4us(arg_842: GLushort, arg_843: GLushort, arg_844: GLushort, arg_845: GLushort) void {
    return epoxy_glColor4us.?(arg_842, arg_843, arg_844, arg_845);
}
pub inline fn glColor4usv(arg_846: [*c]const GLushort) void {
    return epoxy_glColor4usv.?(arg_846);
}
pub inline fn glColor4x(arg_847: GLfixed, arg_848: GLfixed, arg_849: GLfixed, arg_850: GLfixed) void {
    return epoxy_glColor4x.?(arg_847, arg_848, arg_849, arg_850);
}
pub inline fn glColor4xOES(arg_851: GLfixed, arg_852: GLfixed, arg_853: GLfixed, arg_854: GLfixed) void {
    return epoxy_glColor4xOES.?(arg_851, arg_852, arg_853, arg_854);
}
pub inline fn glColor4xvOES(arg_855: [*c]const GLfixed) void {
    return epoxy_glColor4xvOES.?(arg_855);
}
pub inline fn glColorFormatNV(arg_856: GLint, arg_857: GLenum, arg_858: GLsizei) void {
    return epoxy_glColorFormatNV.?(arg_856, arg_857, arg_858);
}
pub inline fn glColorFragmentOp1ATI(arg_859: GLenum, arg_860: GLuint, arg_861: GLuint, arg_862: GLuint, arg_863: GLuint, arg_864: GLuint, arg_865: GLuint) void {
    return epoxy_glColorFragmentOp1ATI.?(arg_859, arg_860, arg_861, arg_862, arg_863, arg_864, arg_865);
}
pub inline fn glColorFragmentOp2ATI(arg_866: GLenum, arg_867: GLuint, arg_868: GLuint, arg_869: GLuint, arg_870: GLuint, arg_871: GLuint, arg_872: GLuint, arg_873: GLuint, arg_874: GLuint, arg_875: GLuint) void {
    return epoxy_glColorFragmentOp2ATI.?(arg_866, arg_867, arg_868, arg_869, arg_870, arg_871, arg_872, arg_873, arg_874, arg_875);
}
pub inline fn glColorFragmentOp3ATI(arg_876: GLenum, arg_877: GLuint, arg_878: GLuint, arg_879: GLuint, arg_880: GLuint, arg_881: GLuint, arg_882: GLuint, arg_883: GLuint, arg_884: GLuint, arg_885: GLuint, arg_886: GLuint, arg_887: GLuint, arg_888: GLuint) void {
    return epoxy_glColorFragmentOp3ATI.?(arg_876, arg_877, arg_878, arg_879, arg_880, arg_881, arg_882, arg_883, arg_884, arg_885, arg_886, arg_887, arg_888);
}
pub inline fn glColorMask(arg_889: GLboolean, arg_890: GLboolean, arg_891: GLboolean, arg_892: GLboolean) void {
    return epoxy_glColorMask.?(arg_889, arg_890, arg_891, arg_892);
}
pub inline fn glColorMaskIndexedEXT(arg_893: GLuint, arg_894: GLboolean, arg_895: GLboolean, arg_896: GLboolean, arg_897: GLboolean) void {
    return epoxy_glColorMaskIndexedEXT.?(arg_893, arg_894, arg_895, arg_896, arg_897);
}
pub inline fn glColorMaski(arg_898: GLuint, arg_899: GLboolean, arg_900: GLboolean, arg_901: GLboolean, arg_902: GLboolean) void {
    return epoxy_glColorMaski.?(arg_898, arg_899, arg_900, arg_901, arg_902);
}
pub inline fn glColorMaskiEXT(arg_903: GLuint, arg_904: GLboolean, arg_905: GLboolean, arg_906: GLboolean, arg_907: GLboolean) void {
    return epoxy_glColorMaskiEXT.?(arg_903, arg_904, arg_905, arg_906, arg_907);
}
pub inline fn glColorMaskiOES(arg_908: GLuint, arg_909: GLboolean, arg_910: GLboolean, arg_911: GLboolean, arg_912: GLboolean) void {
    return epoxy_glColorMaskiOES.?(arg_908, arg_909, arg_910, arg_911, arg_912);
}
pub inline fn glColorMaterial(arg_913: GLenum, arg_914: GLenum) void {
    return epoxy_glColorMaterial.?(arg_913, arg_914);
}
pub inline fn glColorP3ui(arg_915: GLenum, arg_916: GLuint) void {
    return epoxy_glColorP3ui.?(arg_915, arg_916);
}
pub inline fn glColorP3uiv(arg_917: GLenum, arg_918: [*c]const GLuint) void {
    return epoxy_glColorP3uiv.?(arg_917, arg_918);
}
pub inline fn glColorP4ui(arg_919: GLenum, arg_920: GLuint) void {
    return epoxy_glColorP4ui.?(arg_919, arg_920);
}
pub inline fn glColorP4uiv(arg_921: GLenum, arg_922: [*c]const GLuint) void {
    return epoxy_glColorP4uiv.?(arg_921, arg_922);
}
pub inline fn glColorPointer(arg_923: GLint, arg_924: GLenum, arg_925: GLsizei, arg_926: ?*const anyopaque) void {
    return epoxy_glColorPointer.?(arg_923, arg_924, arg_925, arg_926);
}
pub inline fn glColorPointerEXT(arg_927: GLint, arg_928: GLenum, arg_929: GLsizei, arg_930: GLsizei, arg_931: ?*const anyopaque) void {
    return epoxy_glColorPointerEXT.?(arg_927, arg_928, arg_929, arg_930, arg_931);
}
pub inline fn glColorPointerListIBM(arg_932: GLint, arg_933: GLenum, arg_934: GLint, arg_935: [*c]?*const anyopaque, arg_936: GLint) void {
    return epoxy_glColorPointerListIBM.?(arg_932, arg_933, arg_934, arg_935, arg_936);
}
pub inline fn glColorPointervINTEL(arg_937: GLint, arg_938: GLenum, arg_939: [*c]?*const anyopaque) void {
    return epoxy_glColorPointervINTEL.?(arg_937, arg_938, arg_939);
}
pub inline fn glColorSubTable(arg_940: GLenum, arg_941: GLsizei, arg_942: GLsizei, arg_943: GLenum, arg_944: GLenum, arg_945: ?*const anyopaque) void {
    return epoxy_glColorSubTable.?(arg_940, arg_941, arg_942, arg_943, arg_944, arg_945);
}
pub inline fn glColorSubTableEXT(arg_946: GLenum, arg_947: GLsizei, arg_948: GLsizei, arg_949: GLenum, arg_950: GLenum, arg_951: ?*const anyopaque) void {
    return epoxy_glColorSubTableEXT.?(arg_946, arg_947, arg_948, arg_949, arg_950, arg_951);
}
pub inline fn glColorTable(arg_952: GLenum, arg_953: GLenum, arg_954: GLsizei, arg_955: GLenum, arg_956: GLenum, arg_957: ?*const anyopaque) void {
    return epoxy_glColorTable.?(arg_952, arg_953, arg_954, arg_955, arg_956, arg_957);
}
pub inline fn glColorTableEXT(arg_958: GLenum, arg_959: GLenum, arg_960: GLsizei, arg_961: GLenum, arg_962: GLenum, arg_963: ?*const anyopaque) void {
    return epoxy_glColorTableEXT.?(arg_958, arg_959, arg_960, arg_961, arg_962, arg_963);
}
pub inline fn glColorTableParameterfv(arg_964: GLenum, arg_965: GLenum, arg_966: [*c]const GLfloat) void {
    return epoxy_glColorTableParameterfv.?(arg_964, arg_965, arg_966);
}
pub inline fn glColorTableParameterfvSGI(arg_967: GLenum, arg_968: GLenum, arg_969: [*c]const GLfloat) void {
    return epoxy_glColorTableParameterfvSGI.?(arg_967, arg_968, arg_969);
}
pub inline fn glColorTableParameteriv(arg_970: GLenum, arg_971: GLenum, arg_972: [*c]const GLint) void {
    return epoxy_glColorTableParameteriv.?(arg_970, arg_971, arg_972);
}
pub inline fn glColorTableParameterivSGI(arg_973: GLenum, arg_974: GLenum, arg_975: [*c]const GLint) void {
    return epoxy_glColorTableParameterivSGI.?(arg_973, arg_974, arg_975);
}
pub inline fn glColorTableSGI(arg_976: GLenum, arg_977: GLenum, arg_978: GLsizei, arg_979: GLenum, arg_980: GLenum, arg_981: ?*const anyopaque) void {
    return epoxy_glColorTableSGI.?(arg_976, arg_977, arg_978, arg_979, arg_980, arg_981);
}
pub inline fn glCombinerInputNV(arg_982: GLenum, arg_983: GLenum, arg_984: GLenum, arg_985: GLenum, arg_986: GLenum, arg_987: GLenum) void {
    return epoxy_glCombinerInputNV.?(arg_982, arg_983, arg_984, arg_985, arg_986, arg_987);
}
pub inline fn glCombinerOutputNV(arg_988: GLenum, arg_989: GLenum, arg_990: GLenum, arg_991: GLenum, arg_992: GLenum, arg_993: GLenum, arg_994: GLenum, arg_995: GLboolean, arg_996: GLboolean, arg_997: GLboolean) void {
    return epoxy_glCombinerOutputNV.?(arg_988, arg_989, arg_990, arg_991, arg_992, arg_993, arg_994, arg_995, arg_996, arg_997);
}
pub inline fn glCombinerParameterfNV(arg_998: GLenum, arg_999: GLfloat) void {
    return epoxy_glCombinerParameterfNV.?(arg_998, arg_999);
}
pub inline fn glCombinerParameterfvNV(arg_1000: GLenum, arg_1001: [*c]const GLfloat) void {
    return epoxy_glCombinerParameterfvNV.?(arg_1000, arg_1001);
}
pub inline fn glCombinerParameteriNV(arg_1002: GLenum, arg_1003: GLint) void {
    return epoxy_glCombinerParameteriNV.?(arg_1002, arg_1003);
}
pub inline fn glCombinerParameterivNV(arg_1004: GLenum, arg_1005: [*c]const GLint) void {
    return epoxy_glCombinerParameterivNV.?(arg_1004, arg_1005);
}
pub inline fn glCombinerStageParameterfvNV(arg_1006: GLenum, arg_1007: GLenum, arg_1008: [*c]const GLfloat) void {
    return epoxy_glCombinerStageParameterfvNV.?(arg_1006, arg_1007, arg_1008);
}
pub inline fn glCommandListSegmentsNV(arg_1009: GLuint, arg_1010: GLuint) void {
    return epoxy_glCommandListSegmentsNV.?(arg_1009, arg_1010);
}
pub inline fn glCompileCommandListNV(arg_1011: GLuint) void {
    return epoxy_glCompileCommandListNV.?(arg_1011);
}
pub inline fn glCompileShader(arg_1012: GLuint) void {
    return epoxy_glCompileShader.?(arg_1012);
}
pub inline fn glCompileShaderARB(arg_1013: GLhandleARB) void {
    return epoxy_glCompileShaderARB.?(arg_1013);
}
pub inline fn glCompileShaderIncludeARB(arg_1014: GLuint, arg_1015: GLsizei, arg_1016: [*c]const [*c]const GLchar, arg_1017: [*c]const GLint) void {
    return epoxy_glCompileShaderIncludeARB.?(arg_1014, arg_1015, arg_1016, arg_1017);
}
pub inline fn glCompressedMultiTexImage1DEXT(arg_1018: GLenum, arg_1019: GLenum, arg_1020: GLint, arg_1021: GLenum, arg_1022: GLsizei, arg_1023: GLint, arg_1024: GLsizei, arg_1025: ?*const anyopaque) void {
    return epoxy_glCompressedMultiTexImage1DEXT.?(arg_1018, arg_1019, arg_1020, arg_1021, arg_1022, arg_1023, arg_1024, arg_1025);
}
pub inline fn glCompressedMultiTexImage2DEXT(arg_1026: GLenum, arg_1027: GLenum, arg_1028: GLint, arg_1029: GLenum, arg_1030: GLsizei, arg_1031: GLsizei, arg_1032: GLint, arg_1033: GLsizei, arg_1034: ?*const anyopaque) void {
    return epoxy_glCompressedMultiTexImage2DEXT.?(arg_1026, arg_1027, arg_1028, arg_1029, arg_1030, arg_1031, arg_1032, arg_1033, arg_1034);
}
pub inline fn glCompressedMultiTexImage3DEXT(arg_1035: GLenum, arg_1036: GLenum, arg_1037: GLint, arg_1038: GLenum, arg_1039: GLsizei, arg_1040: GLsizei, arg_1041: GLsizei, arg_1042: GLint, arg_1043: GLsizei, arg_1044: ?*const anyopaque) void {
    return epoxy_glCompressedMultiTexImage3DEXT.?(arg_1035, arg_1036, arg_1037, arg_1038, arg_1039, arg_1040, arg_1041, arg_1042, arg_1043, arg_1044);
}
pub inline fn glCompressedMultiTexSubImage1DEXT(arg_1045: GLenum, arg_1046: GLenum, arg_1047: GLint, arg_1048: GLint, arg_1049: GLsizei, arg_1050: GLenum, arg_1051: GLsizei, arg_1052: ?*const anyopaque) void {
    return epoxy_glCompressedMultiTexSubImage1DEXT.?(arg_1045, arg_1046, arg_1047, arg_1048, arg_1049, arg_1050, arg_1051, arg_1052);
}
pub inline fn glCompressedMultiTexSubImage2DEXT(arg_1053: GLenum, arg_1054: GLenum, arg_1055: GLint, arg_1056: GLint, arg_1057: GLint, arg_1058: GLsizei, arg_1059: GLsizei, arg_1060: GLenum, arg_1061: GLsizei, arg_1062: ?*const anyopaque) void {
    return epoxy_glCompressedMultiTexSubImage2DEXT.?(arg_1053, arg_1054, arg_1055, arg_1056, arg_1057, arg_1058, arg_1059, arg_1060, arg_1061, arg_1062);
}
pub inline fn glCompressedMultiTexSubImage3DEXT(arg_1063: GLenum, arg_1064: GLenum, arg_1065: GLint, arg_1066: GLint, arg_1067: GLint, arg_1068: GLint, arg_1069: GLsizei, arg_1070: GLsizei, arg_1071: GLsizei, arg_1072: GLenum, arg_1073: GLsizei, arg_1074: ?*const anyopaque) void {
    return epoxy_glCompressedMultiTexSubImage3DEXT.?(arg_1063, arg_1064, arg_1065, arg_1066, arg_1067, arg_1068, arg_1069, arg_1070, arg_1071, arg_1072, arg_1073, arg_1074);
}
pub inline fn glCompressedTexImage1D(arg_1075: GLenum, arg_1076: GLint, arg_1077: GLenum, arg_1078: GLsizei, arg_1079: GLint, arg_1080: GLsizei, arg_1081: ?*const anyopaque) void {
    return epoxy_glCompressedTexImage1D.?(arg_1075, arg_1076, arg_1077, arg_1078, arg_1079, arg_1080, arg_1081);
}
pub inline fn glCompressedTexImage1DARB(arg_1082: GLenum, arg_1083: GLint, arg_1084: GLenum, arg_1085: GLsizei, arg_1086: GLint, arg_1087: GLsizei, arg_1088: ?*const anyopaque) void {
    return epoxy_glCompressedTexImage1DARB.?(arg_1082, arg_1083, arg_1084, arg_1085, arg_1086, arg_1087, arg_1088);
}
pub inline fn glCompressedTexImage2D(arg_1089: GLenum, arg_1090: GLint, arg_1091: GLenum, arg_1092: GLsizei, arg_1093: GLsizei, arg_1094: GLint, arg_1095: GLsizei, arg_1096: ?*const anyopaque) void {
    return epoxy_glCompressedTexImage2D.?(arg_1089, arg_1090, arg_1091, arg_1092, arg_1093, arg_1094, arg_1095, arg_1096);
}
pub inline fn glCompressedTexImage2DARB(arg_1097: GLenum, arg_1098: GLint, arg_1099: GLenum, arg_1100: GLsizei, arg_1101: GLsizei, arg_1102: GLint, arg_1103: GLsizei, arg_1104: ?*const anyopaque) void {
    return epoxy_glCompressedTexImage2DARB.?(arg_1097, arg_1098, arg_1099, arg_1100, arg_1101, arg_1102, arg_1103, arg_1104);
}
pub inline fn glCompressedTexImage3D(arg_1105: GLenum, arg_1106: GLint, arg_1107: GLenum, arg_1108: GLsizei, arg_1109: GLsizei, arg_1110: GLsizei, arg_1111: GLint, arg_1112: GLsizei, arg_1113: ?*const anyopaque) void {
    return epoxy_glCompressedTexImage3D.?(arg_1105, arg_1106, arg_1107, arg_1108, arg_1109, arg_1110, arg_1111, arg_1112, arg_1113);
}
pub inline fn glCompressedTexImage3DARB(arg_1114: GLenum, arg_1115: GLint, arg_1116: GLenum, arg_1117: GLsizei, arg_1118: GLsizei, arg_1119: GLsizei, arg_1120: GLint, arg_1121: GLsizei, arg_1122: ?*const anyopaque) void {
    return epoxy_glCompressedTexImage3DARB.?(arg_1114, arg_1115, arg_1116, arg_1117, arg_1118, arg_1119, arg_1120, arg_1121, arg_1122);
}
pub inline fn glCompressedTexImage3DOES(arg_1123: GLenum, arg_1124: GLint, arg_1125: GLenum, arg_1126: GLsizei, arg_1127: GLsizei, arg_1128: GLsizei, arg_1129: GLint, arg_1130: GLsizei, arg_1131: ?*const anyopaque) void {
    return epoxy_glCompressedTexImage3DOES.?(arg_1123, arg_1124, arg_1125, arg_1126, arg_1127, arg_1128, arg_1129, arg_1130, arg_1131);
}
pub inline fn glCompressedTexSubImage1D(arg_1132: GLenum, arg_1133: GLint, arg_1134: GLint, arg_1135: GLsizei, arg_1136: GLenum, arg_1137: GLsizei, arg_1138: ?*const anyopaque) void {
    return epoxy_glCompressedTexSubImage1D.?(arg_1132, arg_1133, arg_1134, arg_1135, arg_1136, arg_1137, arg_1138);
}
pub inline fn glCompressedTexSubImage1DARB(arg_1139: GLenum, arg_1140: GLint, arg_1141: GLint, arg_1142: GLsizei, arg_1143: GLenum, arg_1144: GLsizei, arg_1145: ?*const anyopaque) void {
    return epoxy_glCompressedTexSubImage1DARB.?(arg_1139, arg_1140, arg_1141, arg_1142, arg_1143, arg_1144, arg_1145);
}
pub inline fn glCompressedTexSubImage2D(arg_1146: GLenum, arg_1147: GLint, arg_1148: GLint, arg_1149: GLint, arg_1150: GLsizei, arg_1151: GLsizei, arg_1152: GLenum, arg_1153: GLsizei, arg_1154: ?*const anyopaque) void {
    return epoxy_glCompressedTexSubImage2D.?(arg_1146, arg_1147, arg_1148, arg_1149, arg_1150, arg_1151, arg_1152, arg_1153, arg_1154);
}
pub inline fn glCompressedTexSubImage2DARB(arg_1155: GLenum, arg_1156: GLint, arg_1157: GLint, arg_1158: GLint, arg_1159: GLsizei, arg_1160: GLsizei, arg_1161: GLenum, arg_1162: GLsizei, arg_1163: ?*const anyopaque) void {
    return epoxy_glCompressedTexSubImage2DARB.?(arg_1155, arg_1156, arg_1157, arg_1158, arg_1159, arg_1160, arg_1161, arg_1162, arg_1163);
}
pub inline fn glCompressedTexSubImage3D(arg_1164: GLenum, arg_1165: GLint, arg_1166: GLint, arg_1167: GLint, arg_1168: GLint, arg_1169: GLsizei, arg_1170: GLsizei, arg_1171: GLsizei, arg_1172: GLenum, arg_1173: GLsizei, arg_1174: ?*const anyopaque) void {
    return epoxy_glCompressedTexSubImage3D.?(arg_1164, arg_1165, arg_1166, arg_1167, arg_1168, arg_1169, arg_1170, arg_1171, arg_1172, arg_1173, arg_1174);
}
pub inline fn glCompressedTexSubImage3DARB(arg_1175: GLenum, arg_1176: GLint, arg_1177: GLint, arg_1178: GLint, arg_1179: GLint, arg_1180: GLsizei, arg_1181: GLsizei, arg_1182: GLsizei, arg_1183: GLenum, arg_1184: GLsizei, arg_1185: ?*const anyopaque) void {
    return epoxy_glCompressedTexSubImage3DARB.?(arg_1175, arg_1176, arg_1177, arg_1178, arg_1179, arg_1180, arg_1181, arg_1182, arg_1183, arg_1184, arg_1185);
}
pub inline fn glCompressedTexSubImage3DOES(arg_1186: GLenum, arg_1187: GLint, arg_1188: GLint, arg_1189: GLint, arg_1190: GLint, arg_1191: GLsizei, arg_1192: GLsizei, arg_1193: GLsizei, arg_1194: GLenum, arg_1195: GLsizei, arg_1196: ?*const anyopaque) void {
    return epoxy_glCompressedTexSubImage3DOES.?(arg_1186, arg_1187, arg_1188, arg_1189, arg_1190, arg_1191, arg_1192, arg_1193, arg_1194, arg_1195, arg_1196);
}
pub inline fn glCompressedTextureImage1DEXT(arg_1197: GLuint, arg_1198: GLenum, arg_1199: GLint, arg_1200: GLenum, arg_1201: GLsizei, arg_1202: GLint, arg_1203: GLsizei, arg_1204: ?*const anyopaque) void {
    return epoxy_glCompressedTextureImage1DEXT.?(arg_1197, arg_1198, arg_1199, arg_1200, arg_1201, arg_1202, arg_1203, arg_1204);
}
pub inline fn glCompressedTextureImage2DEXT(arg_1205: GLuint, arg_1206: GLenum, arg_1207: GLint, arg_1208: GLenum, arg_1209: GLsizei, arg_1210: GLsizei, arg_1211: GLint, arg_1212: GLsizei, arg_1213: ?*const anyopaque) void {
    return epoxy_glCompressedTextureImage2DEXT.?(arg_1205, arg_1206, arg_1207, arg_1208, arg_1209, arg_1210, arg_1211, arg_1212, arg_1213);
}
pub inline fn glCompressedTextureImage3DEXT(arg_1214: GLuint, arg_1215: GLenum, arg_1216: GLint, arg_1217: GLenum, arg_1218: GLsizei, arg_1219: GLsizei, arg_1220: GLsizei, arg_1221: GLint, arg_1222: GLsizei, arg_1223: ?*const anyopaque) void {
    return epoxy_glCompressedTextureImage3DEXT.?(arg_1214, arg_1215, arg_1216, arg_1217, arg_1218, arg_1219, arg_1220, arg_1221, arg_1222, arg_1223);
}
pub inline fn glCompressedTextureSubImage1D(arg_1224: GLuint, arg_1225: GLint, arg_1226: GLint, arg_1227: GLsizei, arg_1228: GLenum, arg_1229: GLsizei, arg_1230: ?*const anyopaque) void {
    return epoxy_glCompressedTextureSubImage1D.?(arg_1224, arg_1225, arg_1226, arg_1227, arg_1228, arg_1229, arg_1230);
}
pub inline fn glCompressedTextureSubImage1DEXT(arg_1231: GLuint, arg_1232: GLenum, arg_1233: GLint, arg_1234: GLint, arg_1235: GLsizei, arg_1236: GLenum, arg_1237: GLsizei, arg_1238: ?*const anyopaque) void {
    return epoxy_glCompressedTextureSubImage1DEXT.?(arg_1231, arg_1232, arg_1233, arg_1234, arg_1235, arg_1236, arg_1237, arg_1238);
}
pub inline fn glCompressedTextureSubImage2D(arg_1239: GLuint, arg_1240: GLint, arg_1241: GLint, arg_1242: GLint, arg_1243: GLsizei, arg_1244: GLsizei, arg_1245: GLenum, arg_1246: GLsizei, arg_1247: ?*const anyopaque) void {
    return epoxy_glCompressedTextureSubImage2D.?(arg_1239, arg_1240, arg_1241, arg_1242, arg_1243, arg_1244, arg_1245, arg_1246, arg_1247);
}
pub inline fn glCompressedTextureSubImage2DEXT(arg_1248: GLuint, arg_1249: GLenum, arg_1250: GLint, arg_1251: GLint, arg_1252: GLint, arg_1253: GLsizei, arg_1254: GLsizei, arg_1255: GLenum, arg_1256: GLsizei, arg_1257: ?*const anyopaque) void {
    return epoxy_glCompressedTextureSubImage2DEXT.?(arg_1248, arg_1249, arg_1250, arg_1251, arg_1252, arg_1253, arg_1254, arg_1255, arg_1256, arg_1257);
}
pub inline fn glCompressedTextureSubImage3D(arg_1258: GLuint, arg_1259: GLint, arg_1260: GLint, arg_1261: GLint, arg_1262: GLint, arg_1263: GLsizei, arg_1264: GLsizei, arg_1265: GLsizei, arg_1266: GLenum, arg_1267: GLsizei, arg_1268: ?*const anyopaque) void {
    return epoxy_glCompressedTextureSubImage3D.?(arg_1258, arg_1259, arg_1260, arg_1261, arg_1262, arg_1263, arg_1264, arg_1265, arg_1266, arg_1267, arg_1268);
}
pub inline fn glCompressedTextureSubImage3DEXT(arg_1269: GLuint, arg_1270: GLenum, arg_1271: GLint, arg_1272: GLint, arg_1273: GLint, arg_1274: GLint, arg_1275: GLsizei, arg_1276: GLsizei, arg_1277: GLsizei, arg_1278: GLenum, arg_1279: GLsizei, arg_1280: ?*const anyopaque) void {
    return epoxy_glCompressedTextureSubImage3DEXT.?(arg_1269, arg_1270, arg_1271, arg_1272, arg_1273, arg_1274, arg_1275, arg_1276, arg_1277, arg_1278, arg_1279, arg_1280);
}
pub inline fn glConservativeRasterParameterfNV(arg_1281: GLenum, arg_1282: GLfloat) void {
    return epoxy_glConservativeRasterParameterfNV.?(arg_1281, arg_1282);
}
pub inline fn glConservativeRasterParameteriNV(arg_1283: GLenum, arg_1284: GLint) void {
    return epoxy_glConservativeRasterParameteriNV.?(arg_1283, arg_1284);
}
pub inline fn glConvolutionFilter1D(arg_1285: GLenum, arg_1286: GLenum, arg_1287: GLsizei, arg_1288: GLenum, arg_1289: GLenum, arg_1290: ?*const anyopaque) void {
    return epoxy_glConvolutionFilter1D.?(arg_1285, arg_1286, arg_1287, arg_1288, arg_1289, arg_1290);
}
pub inline fn glConvolutionFilter1DEXT(arg_1291: GLenum, arg_1292: GLenum, arg_1293: GLsizei, arg_1294: GLenum, arg_1295: GLenum, arg_1296: ?*const anyopaque) void {
    return epoxy_glConvolutionFilter1DEXT.?(arg_1291, arg_1292, arg_1293, arg_1294, arg_1295, arg_1296);
}
pub inline fn glConvolutionFilter2D(arg_1297: GLenum, arg_1298: GLenum, arg_1299: GLsizei, arg_1300: GLsizei, arg_1301: GLenum, arg_1302: GLenum, arg_1303: ?*const anyopaque) void {
    return epoxy_glConvolutionFilter2D.?(arg_1297, arg_1298, arg_1299, arg_1300, arg_1301, arg_1302, arg_1303);
}
pub inline fn glConvolutionFilter2DEXT(arg_1304: GLenum, arg_1305: GLenum, arg_1306: GLsizei, arg_1307: GLsizei, arg_1308: GLenum, arg_1309: GLenum, arg_1310: ?*const anyopaque) void {
    return epoxy_glConvolutionFilter2DEXT.?(arg_1304, arg_1305, arg_1306, arg_1307, arg_1308, arg_1309, arg_1310);
}
pub inline fn glConvolutionParameterf(arg_1311: GLenum, arg_1312: GLenum, arg_1313: GLfloat) void {
    return epoxy_glConvolutionParameterf.?(arg_1311, arg_1312, arg_1313);
}
pub inline fn glConvolutionParameterfEXT(arg_1314: GLenum, arg_1315: GLenum, arg_1316: GLfloat) void {
    return epoxy_glConvolutionParameterfEXT.?(arg_1314, arg_1315, arg_1316);
}
pub inline fn glConvolutionParameterfv(arg_1317: GLenum, arg_1318: GLenum, arg_1319: [*c]const GLfloat) void {
    return epoxy_glConvolutionParameterfv.?(arg_1317, arg_1318, arg_1319);
}
pub inline fn glConvolutionParameterfvEXT(arg_1320: GLenum, arg_1321: GLenum, arg_1322: [*c]const GLfloat) void {
    return epoxy_glConvolutionParameterfvEXT.?(arg_1320, arg_1321, arg_1322);
}
pub inline fn glConvolutionParameteri(arg_1323: GLenum, arg_1324: GLenum, arg_1325: GLint) void {
    return epoxy_glConvolutionParameteri.?(arg_1323, arg_1324, arg_1325);
}
pub inline fn glConvolutionParameteriEXT(arg_1326: GLenum, arg_1327: GLenum, arg_1328: GLint) void {
    return epoxy_glConvolutionParameteriEXT.?(arg_1326, arg_1327, arg_1328);
}
pub inline fn glConvolutionParameteriv(arg_1329: GLenum, arg_1330: GLenum, arg_1331: [*c]const GLint) void {
    return epoxy_glConvolutionParameteriv.?(arg_1329, arg_1330, arg_1331);
}
pub inline fn glConvolutionParameterivEXT(arg_1332: GLenum, arg_1333: GLenum, arg_1334: [*c]const GLint) void {
    return epoxy_glConvolutionParameterivEXT.?(arg_1332, arg_1333, arg_1334);
}
pub inline fn glConvolutionParameterxOES(arg_1335: GLenum, arg_1336: GLenum, arg_1337: GLfixed) void {
    return epoxy_glConvolutionParameterxOES.?(arg_1335, arg_1336, arg_1337);
}
pub inline fn glConvolutionParameterxvOES(arg_1338: GLenum, arg_1339: GLenum, arg_1340: [*c]const GLfixed) void {
    return epoxy_glConvolutionParameterxvOES.?(arg_1338, arg_1339, arg_1340);
}
pub inline fn glCopyBufferSubData(arg_1341: GLenum, arg_1342: GLenum, arg_1343: GLintptr, arg_1344: GLintptr, arg_1345: GLsizeiptr) void {
    return epoxy_glCopyBufferSubData.?(arg_1341, arg_1342, arg_1343, arg_1344, arg_1345);
}
pub inline fn glCopyBufferSubDataNV(arg_1346: GLenum, arg_1347: GLenum, arg_1348: GLintptr, arg_1349: GLintptr, arg_1350: GLsizeiptr) void {
    return epoxy_glCopyBufferSubDataNV.?(arg_1346, arg_1347, arg_1348, arg_1349, arg_1350);
}
pub inline fn glCopyColorSubTable(arg_1351: GLenum, arg_1352: GLsizei, arg_1353: GLint, arg_1354: GLint, arg_1355: GLsizei) void {
    return epoxy_glCopyColorSubTable.?(arg_1351, arg_1352, arg_1353, arg_1354, arg_1355);
}
pub inline fn glCopyColorSubTableEXT(arg_1356: GLenum, arg_1357: GLsizei, arg_1358: GLint, arg_1359: GLint, arg_1360: GLsizei) void {
    return epoxy_glCopyColorSubTableEXT.?(arg_1356, arg_1357, arg_1358, arg_1359, arg_1360);
}
pub inline fn glCopyColorTable(arg_1361: GLenum, arg_1362: GLenum, arg_1363: GLint, arg_1364: GLint, arg_1365: GLsizei) void {
    return epoxy_glCopyColorTable.?(arg_1361, arg_1362, arg_1363, arg_1364, arg_1365);
}
pub inline fn glCopyColorTableSGI(arg_1366: GLenum, arg_1367: GLenum, arg_1368: GLint, arg_1369: GLint, arg_1370: GLsizei) void {
    return epoxy_glCopyColorTableSGI.?(arg_1366, arg_1367, arg_1368, arg_1369, arg_1370);
}
pub inline fn glCopyConvolutionFilter1D(arg_1371: GLenum, arg_1372: GLenum, arg_1373: GLint, arg_1374: GLint, arg_1375: GLsizei) void {
    return epoxy_glCopyConvolutionFilter1D.?(arg_1371, arg_1372, arg_1373, arg_1374, arg_1375);
}
pub inline fn glCopyConvolutionFilter1DEXT(arg_1376: GLenum, arg_1377: GLenum, arg_1378: GLint, arg_1379: GLint, arg_1380: GLsizei) void {
    return epoxy_glCopyConvolutionFilter1DEXT.?(arg_1376, arg_1377, arg_1378, arg_1379, arg_1380);
}
pub inline fn glCopyConvolutionFilter2D(arg_1381: GLenum, arg_1382: GLenum, arg_1383: GLint, arg_1384: GLint, arg_1385: GLsizei, arg_1386: GLsizei) void {
    return epoxy_glCopyConvolutionFilter2D.?(arg_1381, arg_1382, arg_1383, arg_1384, arg_1385, arg_1386);
}
pub inline fn glCopyConvolutionFilter2DEXT(arg_1387: GLenum, arg_1388: GLenum, arg_1389: GLint, arg_1390: GLint, arg_1391: GLsizei, arg_1392: GLsizei) void {
    return epoxy_glCopyConvolutionFilter2DEXT.?(arg_1387, arg_1388, arg_1389, arg_1390, arg_1391, arg_1392);
}
pub inline fn glCopyImageSubData(arg_1393: GLuint, arg_1394: GLenum, arg_1395: GLint, arg_1396: GLint, arg_1397: GLint, arg_1398: GLint, arg_1399: GLuint, arg_1400: GLenum, arg_1401: GLint, arg_1402: GLint, arg_1403: GLint, arg_1404: GLint, arg_1405: GLsizei, arg_1406: GLsizei, arg_1407: GLsizei) void {
    return epoxy_glCopyImageSubData.?(arg_1393, arg_1394, arg_1395, arg_1396, arg_1397, arg_1398, arg_1399, arg_1400, arg_1401, arg_1402, arg_1403, arg_1404, arg_1405, arg_1406, arg_1407);
}
pub inline fn glCopyImageSubDataEXT(arg_1408: GLuint, arg_1409: GLenum, arg_1410: GLint, arg_1411: GLint, arg_1412: GLint, arg_1413: GLint, arg_1414: GLuint, arg_1415: GLenum, arg_1416: GLint, arg_1417: GLint, arg_1418: GLint, arg_1419: GLint, arg_1420: GLsizei, arg_1421: GLsizei, arg_1422: GLsizei) void {
    return epoxy_glCopyImageSubDataEXT.?(arg_1408, arg_1409, arg_1410, arg_1411, arg_1412, arg_1413, arg_1414, arg_1415, arg_1416, arg_1417, arg_1418, arg_1419, arg_1420, arg_1421, arg_1422);
}
pub inline fn glCopyImageSubDataNV(arg_1423: GLuint, arg_1424: GLenum, arg_1425: GLint, arg_1426: GLint, arg_1427: GLint, arg_1428: GLint, arg_1429: GLuint, arg_1430: GLenum, arg_1431: GLint, arg_1432: GLint, arg_1433: GLint, arg_1434: GLint, arg_1435: GLsizei, arg_1436: GLsizei, arg_1437: GLsizei) void {
    return epoxy_glCopyImageSubDataNV.?(arg_1423, arg_1424, arg_1425, arg_1426, arg_1427, arg_1428, arg_1429, arg_1430, arg_1431, arg_1432, arg_1433, arg_1434, arg_1435, arg_1436, arg_1437);
}
pub inline fn glCopyImageSubDataOES(arg_1438: GLuint, arg_1439: GLenum, arg_1440: GLint, arg_1441: GLint, arg_1442: GLint, arg_1443: GLint, arg_1444: GLuint, arg_1445: GLenum, arg_1446: GLint, arg_1447: GLint, arg_1448: GLint, arg_1449: GLint, arg_1450: GLsizei, arg_1451: GLsizei, arg_1452: GLsizei) void {
    return epoxy_glCopyImageSubDataOES.?(arg_1438, arg_1439, arg_1440, arg_1441, arg_1442, arg_1443, arg_1444, arg_1445, arg_1446, arg_1447, arg_1448, arg_1449, arg_1450, arg_1451, arg_1452);
}
pub inline fn glCopyMultiTexImage1DEXT(arg_1453: GLenum, arg_1454: GLenum, arg_1455: GLint, arg_1456: GLenum, arg_1457: GLint, arg_1458: GLint, arg_1459: GLsizei, arg_1460: GLint) void {
    return epoxy_glCopyMultiTexImage1DEXT.?(arg_1453, arg_1454, arg_1455, arg_1456, arg_1457, arg_1458, arg_1459, arg_1460);
}
pub inline fn glCopyMultiTexImage2DEXT(arg_1461: GLenum, arg_1462: GLenum, arg_1463: GLint, arg_1464: GLenum, arg_1465: GLint, arg_1466: GLint, arg_1467: GLsizei, arg_1468: GLsizei, arg_1469: GLint) void {
    return epoxy_glCopyMultiTexImage2DEXT.?(arg_1461, arg_1462, arg_1463, arg_1464, arg_1465, arg_1466, arg_1467, arg_1468, arg_1469);
}
pub inline fn glCopyMultiTexSubImage1DEXT(arg_1470: GLenum, arg_1471: GLenum, arg_1472: GLint, arg_1473: GLint, arg_1474: GLint, arg_1475: GLint, arg_1476: GLsizei) void {
    return epoxy_glCopyMultiTexSubImage1DEXT.?(arg_1470, arg_1471, arg_1472, arg_1473, arg_1474, arg_1475, arg_1476);
}
pub inline fn glCopyMultiTexSubImage2DEXT(arg_1477: GLenum, arg_1478: GLenum, arg_1479: GLint, arg_1480: GLint, arg_1481: GLint, arg_1482: GLint, arg_1483: GLint, arg_1484: GLsizei, arg_1485: GLsizei) void {
    return epoxy_glCopyMultiTexSubImage2DEXT.?(arg_1477, arg_1478, arg_1479, arg_1480, arg_1481, arg_1482, arg_1483, arg_1484, arg_1485);
}
pub inline fn glCopyMultiTexSubImage3DEXT(arg_1486: GLenum, arg_1487: GLenum, arg_1488: GLint, arg_1489: GLint, arg_1490: GLint, arg_1491: GLint, arg_1492: GLint, arg_1493: GLint, arg_1494: GLsizei, arg_1495: GLsizei) void {
    return epoxy_glCopyMultiTexSubImage3DEXT.?(arg_1486, arg_1487, arg_1488, arg_1489, arg_1490, arg_1491, arg_1492, arg_1493, arg_1494, arg_1495);
}
pub inline fn glCopyNamedBufferSubData(arg_1496: GLuint, arg_1497: GLuint, arg_1498: GLintptr, arg_1499: GLintptr, arg_1500: GLsizeiptr) void {
    return epoxy_glCopyNamedBufferSubData.?(arg_1496, arg_1497, arg_1498, arg_1499, arg_1500);
}
pub inline fn glCopyPathNV(arg_1501: GLuint, arg_1502: GLuint) void {
    return epoxy_glCopyPathNV.?(arg_1501, arg_1502);
}
pub inline fn glCopyPixels(arg_1503: GLint, arg_1504: GLint, arg_1505: GLsizei, arg_1506: GLsizei, arg_1507: GLenum) void {
    return epoxy_glCopyPixels.?(arg_1503, arg_1504, arg_1505, arg_1506, arg_1507);
}
pub inline fn glCopyTexImage1D(arg_1508: GLenum, arg_1509: GLint, arg_1510: GLenum, arg_1511: GLint, arg_1512: GLint, arg_1513: GLsizei, arg_1514: GLint) void {
    return epoxy_glCopyTexImage1D.?(arg_1508, arg_1509, arg_1510, arg_1511, arg_1512, arg_1513, arg_1514);
}
pub inline fn glCopyTexImage1DEXT(arg_1515: GLenum, arg_1516: GLint, arg_1517: GLenum, arg_1518: GLint, arg_1519: GLint, arg_1520: GLsizei, arg_1521: GLint) void {
    return epoxy_glCopyTexImage1DEXT.?(arg_1515, arg_1516, arg_1517, arg_1518, arg_1519, arg_1520, arg_1521);
}
pub inline fn glCopyTexImage2D(arg_1522: GLenum, arg_1523: GLint, arg_1524: GLenum, arg_1525: GLint, arg_1526: GLint, arg_1527: GLsizei, arg_1528: GLsizei, arg_1529: GLint) void {
    return epoxy_glCopyTexImage2D.?(arg_1522, arg_1523, arg_1524, arg_1525, arg_1526, arg_1527, arg_1528, arg_1529);
}
pub inline fn glCopyTexImage2DEXT(arg_1530: GLenum, arg_1531: GLint, arg_1532: GLenum, arg_1533: GLint, arg_1534: GLint, arg_1535: GLsizei, arg_1536: GLsizei, arg_1537: GLint) void {
    return epoxy_glCopyTexImage2DEXT.?(arg_1530, arg_1531, arg_1532, arg_1533, arg_1534, arg_1535, arg_1536, arg_1537);
}
pub inline fn glCopyTexSubImage1D(arg_1538: GLenum, arg_1539: GLint, arg_1540: GLint, arg_1541: GLint, arg_1542: GLint, arg_1543: GLsizei) void {
    return epoxy_glCopyTexSubImage1D.?(arg_1538, arg_1539, arg_1540, arg_1541, arg_1542, arg_1543);
}
pub inline fn glCopyTexSubImage1DEXT(arg_1544: GLenum, arg_1545: GLint, arg_1546: GLint, arg_1547: GLint, arg_1548: GLint, arg_1549: GLsizei) void {
    return epoxy_glCopyTexSubImage1DEXT.?(arg_1544, arg_1545, arg_1546, arg_1547, arg_1548, arg_1549);
}
pub inline fn glCopyTexSubImage2D(arg_1550: GLenum, arg_1551: GLint, arg_1552: GLint, arg_1553: GLint, arg_1554: GLint, arg_1555: GLint, arg_1556: GLsizei, arg_1557: GLsizei) void {
    return epoxy_glCopyTexSubImage2D.?(arg_1550, arg_1551, arg_1552, arg_1553, arg_1554, arg_1555, arg_1556, arg_1557);
}
pub inline fn glCopyTexSubImage2DEXT(arg_1558: GLenum, arg_1559: GLint, arg_1560: GLint, arg_1561: GLint, arg_1562: GLint, arg_1563: GLint, arg_1564: GLsizei, arg_1565: GLsizei) void {
    return epoxy_glCopyTexSubImage2DEXT.?(arg_1558, arg_1559, arg_1560, arg_1561, arg_1562, arg_1563, arg_1564, arg_1565);
}
pub inline fn glCopyTexSubImage3D(arg_1566: GLenum, arg_1567: GLint, arg_1568: GLint, arg_1569: GLint, arg_1570: GLint, arg_1571: GLint, arg_1572: GLint, arg_1573: GLsizei, arg_1574: GLsizei) void {
    return epoxy_glCopyTexSubImage3D.?(arg_1566, arg_1567, arg_1568, arg_1569, arg_1570, arg_1571, arg_1572, arg_1573, arg_1574);
}
pub inline fn glCopyTexSubImage3DEXT(arg_1575: GLenum, arg_1576: GLint, arg_1577: GLint, arg_1578: GLint, arg_1579: GLint, arg_1580: GLint, arg_1581: GLint, arg_1582: GLsizei, arg_1583: GLsizei) void {
    return epoxy_glCopyTexSubImage3DEXT.?(arg_1575, arg_1576, arg_1577, arg_1578, arg_1579, arg_1580, arg_1581, arg_1582, arg_1583);
}
pub inline fn glCopyTexSubImage3DOES(arg_1584: GLenum, arg_1585: GLint, arg_1586: GLint, arg_1587: GLint, arg_1588: GLint, arg_1589: GLint, arg_1590: GLint, arg_1591: GLsizei, arg_1592: GLsizei) void {
    return epoxy_glCopyTexSubImage3DOES.?(arg_1584, arg_1585, arg_1586, arg_1587, arg_1588, arg_1589, arg_1590, arg_1591, arg_1592);
}
pub inline fn glCopyTextureImage1DEXT(arg_1593: GLuint, arg_1594: GLenum, arg_1595: GLint, arg_1596: GLenum, arg_1597: GLint, arg_1598: GLint, arg_1599: GLsizei, arg_1600: GLint) void {
    return epoxy_glCopyTextureImage1DEXT.?(arg_1593, arg_1594, arg_1595, arg_1596, arg_1597, arg_1598, arg_1599, arg_1600);
}
pub inline fn glCopyTextureImage2DEXT(arg_1601: GLuint, arg_1602: GLenum, arg_1603: GLint, arg_1604: GLenum, arg_1605: GLint, arg_1606: GLint, arg_1607: GLsizei, arg_1608: GLsizei, arg_1609: GLint) void {
    return epoxy_glCopyTextureImage2DEXT.?(arg_1601, arg_1602, arg_1603, arg_1604, arg_1605, arg_1606, arg_1607, arg_1608, arg_1609);
}
pub inline fn glCopyTextureLevelsAPPLE(arg_1610: GLuint, arg_1611: GLuint, arg_1612: GLint, arg_1613: GLsizei) void {
    return epoxy_glCopyTextureLevelsAPPLE.?(arg_1610, arg_1611, arg_1612, arg_1613);
}
pub inline fn glCopyTextureSubImage1D(arg_1614: GLuint, arg_1615: GLint, arg_1616: GLint, arg_1617: GLint, arg_1618: GLint, arg_1619: GLsizei) void {
    return epoxy_glCopyTextureSubImage1D.?(arg_1614, arg_1615, arg_1616, arg_1617, arg_1618, arg_1619);
}
pub inline fn glCopyTextureSubImage1DEXT(arg_1620: GLuint, arg_1621: GLenum, arg_1622: GLint, arg_1623: GLint, arg_1624: GLint, arg_1625: GLint, arg_1626: GLsizei) void {
    return epoxy_glCopyTextureSubImage1DEXT.?(arg_1620, arg_1621, arg_1622, arg_1623, arg_1624, arg_1625, arg_1626);
}
pub inline fn glCopyTextureSubImage2D(arg_1627: GLuint, arg_1628: GLint, arg_1629: GLint, arg_1630: GLint, arg_1631: GLint, arg_1632: GLint, arg_1633: GLsizei, arg_1634: GLsizei) void {
    return epoxy_glCopyTextureSubImage2D.?(arg_1627, arg_1628, arg_1629, arg_1630, arg_1631, arg_1632, arg_1633, arg_1634);
}
pub inline fn glCopyTextureSubImage2DEXT(arg_1635: GLuint, arg_1636: GLenum, arg_1637: GLint, arg_1638: GLint, arg_1639: GLint, arg_1640: GLint, arg_1641: GLint, arg_1642: GLsizei, arg_1643: GLsizei) void {
    return epoxy_glCopyTextureSubImage2DEXT.?(arg_1635, arg_1636, arg_1637, arg_1638, arg_1639, arg_1640, arg_1641, arg_1642, arg_1643);
}
pub inline fn glCopyTextureSubImage3D(arg_1644: GLuint, arg_1645: GLint, arg_1646: GLint, arg_1647: GLint, arg_1648: GLint, arg_1649: GLint, arg_1650: GLint, arg_1651: GLsizei, arg_1652: GLsizei) void {
    return epoxy_glCopyTextureSubImage3D.?(arg_1644, arg_1645, arg_1646, arg_1647, arg_1648, arg_1649, arg_1650, arg_1651, arg_1652);
}
pub inline fn glCopyTextureSubImage3DEXT(arg_1653: GLuint, arg_1654: GLenum, arg_1655: GLint, arg_1656: GLint, arg_1657: GLint, arg_1658: GLint, arg_1659: GLint, arg_1660: GLint, arg_1661: GLsizei, arg_1662: GLsizei) void {
    return epoxy_glCopyTextureSubImage3DEXT.?(arg_1653, arg_1654, arg_1655, arg_1656, arg_1657, arg_1658, arg_1659, arg_1660, arg_1661, arg_1662);
}
pub inline fn glCoverFillPathInstancedNV(arg_1663: GLsizei, arg_1664: GLenum, arg_1665: ?*const anyopaque, arg_1666: GLuint, arg_1667: GLenum, arg_1668: GLenum, arg_1669: [*c]const GLfloat) void {
    return epoxy_glCoverFillPathInstancedNV.?(arg_1663, arg_1664, arg_1665, arg_1666, arg_1667, arg_1668, arg_1669);
}
pub inline fn glCoverFillPathNV(arg_1670: GLuint, arg_1671: GLenum) void {
    return epoxy_glCoverFillPathNV.?(arg_1670, arg_1671);
}
pub inline fn glCoverStrokePathInstancedNV(arg_1672: GLsizei, arg_1673: GLenum, arg_1674: ?*const anyopaque, arg_1675: GLuint, arg_1676: GLenum, arg_1677: GLenum, arg_1678: [*c]const GLfloat) void {
    return epoxy_glCoverStrokePathInstancedNV.?(arg_1672, arg_1673, arg_1674, arg_1675, arg_1676, arg_1677, arg_1678);
}
pub inline fn glCoverStrokePathNV(arg_1679: GLuint, arg_1680: GLenum) void {
    return epoxy_glCoverStrokePathNV.?(arg_1679, arg_1680);
}
pub inline fn glCoverageMaskNV(arg_1681: GLboolean) void {
    return epoxy_glCoverageMaskNV.?(arg_1681);
}
pub inline fn glCoverageModulationNV(arg_1682: GLenum) void {
    return epoxy_glCoverageModulationNV.?(arg_1682);
}
pub inline fn glCoverageModulationTableNV(arg_1683: GLsizei, arg_1684: [*c]const GLfloat) void {
    return epoxy_glCoverageModulationTableNV.?(arg_1683, arg_1684);
}
pub inline fn glCoverageOperationNV(arg_1685: GLenum) void {
    return epoxy_glCoverageOperationNV.?(arg_1685);
}
pub inline fn glCreateBuffers(arg_1686: GLsizei, arg_1687: [*c]GLuint) void {
    return epoxy_glCreateBuffers.?(arg_1686, arg_1687);
}
pub inline fn glCreateCommandListsNV(arg_1688: GLsizei, arg_1689: [*c]GLuint) void {
    return epoxy_glCreateCommandListsNV.?(arg_1688, arg_1689);
}
pub inline fn glCreateFramebuffers(arg_1690: GLsizei, arg_1691: [*c]GLuint) void {
    return epoxy_glCreateFramebuffers.?(arg_1690, arg_1691);
}
pub inline fn glCreateMemoryObjectsEXT(arg_1692: GLsizei, arg_1693: [*c]GLuint) void {
    return epoxy_glCreateMemoryObjectsEXT.?(arg_1692, arg_1693);
}
pub inline fn glCreatePerfQueryINTEL(arg_1694: GLuint, arg_1695: [*c]GLuint) void {
    return epoxy_glCreatePerfQueryINTEL.?(arg_1694, arg_1695);
}
pub inline fn glCreateProgram() GLuint {
    return epoxy_glCreateProgram.?();
}
pub inline fn glCreateProgramObjectARB() GLhandleARB {
    return epoxy_glCreateProgramObjectARB.?();
}
pub inline fn glCreateProgramPipelines(arg_1696: GLsizei, arg_1697: [*c]GLuint) void {
    return epoxy_glCreateProgramPipelines.?(arg_1696, arg_1697);
}
pub inline fn glCreateProgressFenceNVX() GLuint {
    return epoxy_glCreateProgressFenceNVX.?();
}
pub inline fn glCreateQueries(arg_1698: GLenum, arg_1699: GLsizei, arg_1700: [*c]GLuint) void {
    return epoxy_glCreateQueries.?(arg_1698, arg_1699, arg_1700);
}
pub inline fn glCreateRenderbuffers(arg_1701: GLsizei, arg_1702: [*c]GLuint) void {
    return epoxy_glCreateRenderbuffers.?(arg_1701, arg_1702);
}
pub inline fn glCreateSamplers(arg_1703: GLsizei, arg_1704: [*c]GLuint) void {
    return epoxy_glCreateSamplers.?(arg_1703, arg_1704);
}
pub inline fn glCreateShader(arg_1705: GLenum) GLuint {
    return epoxy_glCreateShader.?(arg_1705);
}
pub inline fn glCreateShaderObjectARB(arg_1706: GLenum) GLhandleARB {
    return epoxy_glCreateShaderObjectARB.?(arg_1706);
}
pub inline fn glCreateShaderProgramEXT(arg_1707: GLenum, arg_1708: [*c]const GLchar) GLuint {
    return epoxy_glCreateShaderProgramEXT.?(arg_1707, arg_1708);
}
pub inline fn glCreateShaderProgramv(arg_1709: GLenum, arg_1710: GLsizei, arg_1711: [*c]const [*c]const GLchar) GLuint {
    return epoxy_glCreateShaderProgramv.?(arg_1709, arg_1710, arg_1711);
}
pub inline fn glCreateShaderProgramvEXT(arg_1712: GLenum, arg_1713: GLsizei, arg_1714: [*c][*c]const GLchar) GLuint {
    return epoxy_glCreateShaderProgramvEXT.?(arg_1712, arg_1713, arg_1714);
}
pub inline fn glCreateStatesNV(arg_1715: GLsizei, arg_1716: [*c]GLuint) void {
    return epoxy_glCreateStatesNV.?(arg_1715, arg_1716);
}
pub inline fn glCreateSyncFromCLeventARB(arg_1717: ?*struct__cl_context, arg_1718: ?*struct__cl_event, arg_1719: GLbitfield) GLsync {
    return epoxy_glCreateSyncFromCLeventARB.?(arg_1717, arg_1718, arg_1719);
}
pub inline fn glCreateTextures(arg_1720: GLenum, arg_1721: GLsizei, arg_1722: [*c]GLuint) void {
    return epoxy_glCreateTextures.?(arg_1720, arg_1721, arg_1722);
}
pub inline fn glCreateTransformFeedbacks(arg_1723: GLsizei, arg_1724: [*c]GLuint) void {
    return epoxy_glCreateTransformFeedbacks.?(arg_1723, arg_1724);
}
pub inline fn glCreateVertexArrays(arg_1725: GLsizei, arg_1726: [*c]GLuint) void {
    return epoxy_glCreateVertexArrays.?(arg_1725, arg_1726);
}
pub inline fn glCullFace(arg_1727: GLenum) void {
    return epoxy_glCullFace.?(arg_1727);
}
pub inline fn glCullParameterdvEXT(arg_1728: GLenum, arg_1729: [*c]GLdouble) void {
    return epoxy_glCullParameterdvEXT.?(arg_1728, arg_1729);
}
pub inline fn glCullParameterfvEXT(arg_1730: GLenum, arg_1731: [*c]GLfloat) void {
    return epoxy_glCullParameterfvEXT.?(arg_1730, arg_1731);
}
pub inline fn glCurrentPaletteMatrixARB(arg_1732: GLint) void {
    return epoxy_glCurrentPaletteMatrixARB.?(arg_1732);
}
pub inline fn glCurrentPaletteMatrixOES(arg_1733: GLuint) void {
    return epoxy_glCurrentPaletteMatrixOES.?(arg_1733);
}
pub inline fn glDebugMessageCallback(arg_1734: GLDEBUGPROC, arg_1735: ?*const anyopaque) void {
    return epoxy_glDebugMessageCallback.?(arg_1734, arg_1735);
}
pub inline fn glDebugMessageCallbackAMD(arg_1736: GLDEBUGPROCAMD, arg_1737: ?*anyopaque) void {
    return epoxy_glDebugMessageCallbackAMD.?(arg_1736, arg_1737);
}
pub inline fn glDebugMessageCallbackARB(arg_1738: GLDEBUGPROCARB, arg_1739: ?*const anyopaque) void {
    return epoxy_glDebugMessageCallbackARB.?(arg_1738, arg_1739);
}
pub inline fn glDebugMessageCallbackKHR(arg_1740: GLDEBUGPROCKHR, arg_1741: ?*const anyopaque) void {
    return epoxy_glDebugMessageCallbackKHR.?(arg_1740, arg_1741);
}
pub inline fn glDebugMessageControl(arg_1742: GLenum, arg_1743: GLenum, arg_1744: GLenum, arg_1745: GLsizei, arg_1746: [*c]const GLuint, arg_1747: GLboolean) void {
    return epoxy_glDebugMessageControl.?(arg_1742, arg_1743, arg_1744, arg_1745, arg_1746, arg_1747);
}
pub inline fn glDebugMessageControlARB(arg_1748: GLenum, arg_1749: GLenum, arg_1750: GLenum, arg_1751: GLsizei, arg_1752: [*c]const GLuint, arg_1753: GLboolean) void {
    return epoxy_glDebugMessageControlARB.?(arg_1748, arg_1749, arg_1750, arg_1751, arg_1752, arg_1753);
}
pub inline fn glDebugMessageControlKHR(arg_1754: GLenum, arg_1755: GLenum, arg_1756: GLenum, arg_1757: GLsizei, arg_1758: [*c]const GLuint, arg_1759: GLboolean) void {
    return epoxy_glDebugMessageControlKHR.?(arg_1754, arg_1755, arg_1756, arg_1757, arg_1758, arg_1759);
}
pub inline fn glDebugMessageEnableAMD(arg_1760: GLenum, arg_1761: GLenum, arg_1762: GLsizei, arg_1763: [*c]const GLuint, arg_1764: GLboolean) void {
    return epoxy_glDebugMessageEnableAMD.?(arg_1760, arg_1761, arg_1762, arg_1763, arg_1764);
}
pub inline fn glDebugMessageInsert(arg_1765: GLenum, arg_1766: GLenum, arg_1767: GLuint, arg_1768: GLenum, arg_1769: GLsizei, arg_1770: [*c]const GLchar) void {
    return epoxy_glDebugMessageInsert.?(arg_1765, arg_1766, arg_1767, arg_1768, arg_1769, arg_1770);
}
pub inline fn glDebugMessageInsertAMD(arg_1771: GLenum, arg_1772: GLenum, arg_1773: GLuint, arg_1774: GLsizei, arg_1775: [*c]const GLchar) void {
    return epoxy_glDebugMessageInsertAMD.?(arg_1771, arg_1772, arg_1773, arg_1774, arg_1775);
}
pub inline fn glDebugMessageInsertARB(arg_1776: GLenum, arg_1777: GLenum, arg_1778: GLuint, arg_1779: GLenum, arg_1780: GLsizei, arg_1781: [*c]const GLchar) void {
    return epoxy_glDebugMessageInsertARB.?(arg_1776, arg_1777, arg_1778, arg_1779, arg_1780, arg_1781);
}
pub inline fn glDebugMessageInsertKHR(arg_1782: GLenum, arg_1783: GLenum, arg_1784: GLuint, arg_1785: GLenum, arg_1786: GLsizei, arg_1787: [*c]const GLchar) void {
    return epoxy_glDebugMessageInsertKHR.?(arg_1782, arg_1783, arg_1784, arg_1785, arg_1786, arg_1787);
}
pub inline fn glDeformSGIX(arg_1788: GLbitfield) void {
    return epoxy_glDeformSGIX.?(arg_1788);
}
pub inline fn glDeformationMap3dSGIX(arg_1789: GLenum, arg_1790: GLdouble, arg_1791: GLdouble, arg_1792: GLint, arg_1793: GLint, arg_1794: GLdouble, arg_1795: GLdouble, arg_1796: GLint, arg_1797: GLint, arg_1798: GLdouble, arg_1799: GLdouble, arg_1800: GLint, arg_1801: GLint, arg_1802: [*c]const GLdouble) void {
    return epoxy_glDeformationMap3dSGIX.?(arg_1789, arg_1790, arg_1791, arg_1792, arg_1793, arg_1794, arg_1795, arg_1796, arg_1797, arg_1798, arg_1799, arg_1800, arg_1801, arg_1802);
}
pub inline fn glDeformationMap3fSGIX(arg_1803: GLenum, arg_1804: GLfloat, arg_1805: GLfloat, arg_1806: GLint, arg_1807: GLint, arg_1808: GLfloat, arg_1809: GLfloat, arg_1810: GLint, arg_1811: GLint, arg_1812: GLfloat, arg_1813: GLfloat, arg_1814: GLint, arg_1815: GLint, arg_1816: [*c]const GLfloat) void {
    return epoxy_glDeformationMap3fSGIX.?(arg_1803, arg_1804, arg_1805, arg_1806, arg_1807, arg_1808, arg_1809, arg_1810, arg_1811, arg_1812, arg_1813, arg_1814, arg_1815, arg_1816);
}
pub inline fn glDeleteAsyncMarkersSGIX(arg_1817: GLuint, arg_1818: GLsizei) void {
    return epoxy_glDeleteAsyncMarkersSGIX.?(arg_1817, arg_1818);
}
pub inline fn glDeleteBuffers(arg_1819: GLsizei, arg_1820: [*c]const GLuint) void {
    return epoxy_glDeleteBuffers.?(arg_1819, arg_1820);
}
pub inline fn glDeleteBuffersARB(arg_1821: GLsizei, arg_1822: [*c]const GLuint) void {
    return epoxy_glDeleteBuffersARB.?(arg_1821, arg_1822);
}
pub inline fn glDeleteCommandListsNV(arg_1823: GLsizei, arg_1824: [*c]const GLuint) void {
    return epoxy_glDeleteCommandListsNV.?(arg_1823, arg_1824);
}
pub inline fn glDeleteFencesAPPLE(arg_1825: GLsizei, arg_1826: [*c]const GLuint) void {
    return epoxy_glDeleteFencesAPPLE.?(arg_1825, arg_1826);
}
pub inline fn glDeleteFencesNV(arg_1827: GLsizei, arg_1828: [*c]const GLuint) void {
    return epoxy_glDeleteFencesNV.?(arg_1827, arg_1828);
}
pub inline fn glDeleteFragmentShaderATI(arg_1829: GLuint) void {
    return epoxy_glDeleteFragmentShaderATI.?(arg_1829);
}
pub inline fn glDeleteFramebuffers(arg_1830: GLsizei, arg_1831: [*c]const GLuint) void {
    return epoxy_glDeleteFramebuffers.?(arg_1830, arg_1831);
}
pub inline fn glDeleteFramebuffersEXT(arg_1832: GLsizei, arg_1833: [*c]const GLuint) void {
    return epoxy_glDeleteFramebuffersEXT.?(arg_1832, arg_1833);
}
pub inline fn glDeleteFramebuffersOES(arg_1834: GLsizei, arg_1835: [*c]const GLuint) void {
    return epoxy_glDeleteFramebuffersOES.?(arg_1834, arg_1835);
}
pub inline fn glDeleteLists(arg_1836: GLuint, arg_1837: GLsizei) void {
    return epoxy_glDeleteLists.?(arg_1836, arg_1837);
}
pub inline fn glDeleteMemoryObjectsEXT(arg_1838: GLsizei, arg_1839: [*c]const GLuint) void {
    return epoxy_glDeleteMemoryObjectsEXT.?(arg_1838, arg_1839);
}
pub inline fn glDeleteNamedStringARB(arg_1840: GLint, arg_1841: [*c]const GLchar) void {
    return epoxy_glDeleteNamedStringARB.?(arg_1840, arg_1841);
}
pub inline fn glDeleteNamesAMD(arg_1842: GLenum, arg_1843: GLuint, arg_1844: [*c]const GLuint) void {
    return epoxy_glDeleteNamesAMD.?(arg_1842, arg_1843, arg_1844);
}
pub inline fn glDeleteObjectARB(arg_1845: GLhandleARB) void {
    return epoxy_glDeleteObjectARB.?(arg_1845);
}
pub inline fn glDeleteOcclusionQueriesNV(arg_1846: GLsizei, arg_1847: [*c]const GLuint) void {
    return epoxy_glDeleteOcclusionQueriesNV.?(arg_1846, arg_1847);
}
pub inline fn glDeletePathsNV(arg_1848: GLuint, arg_1849: GLsizei) void {
    return epoxy_glDeletePathsNV.?(arg_1848, arg_1849);
}
pub inline fn glDeletePerfMonitorsAMD(arg_1850: GLsizei, arg_1851: [*c]GLuint) void {
    return epoxy_glDeletePerfMonitorsAMD.?(arg_1850, arg_1851);
}
pub inline fn glDeletePerfQueryINTEL(arg_1852: GLuint) void {
    return epoxy_glDeletePerfQueryINTEL.?(arg_1852);
}
pub inline fn glDeleteProgram(arg_1853: GLuint) void {
    return epoxy_glDeleteProgram.?(arg_1853);
}
pub inline fn glDeleteProgramPipelines(arg_1854: GLsizei, arg_1855: [*c]const GLuint) void {
    return epoxy_glDeleteProgramPipelines.?(arg_1854, arg_1855);
}
pub inline fn glDeleteProgramPipelinesEXT(arg_1856: GLsizei, arg_1857: [*c]const GLuint) void {
    return epoxy_glDeleteProgramPipelinesEXT.?(arg_1856, arg_1857);
}
pub inline fn glDeleteProgramsARB(arg_1858: GLsizei, arg_1859: [*c]const GLuint) void {
    return epoxy_glDeleteProgramsARB.?(arg_1858, arg_1859);
}
pub inline fn glDeleteProgramsNV(arg_1860: GLsizei, arg_1861: [*c]const GLuint) void {
    return epoxy_glDeleteProgramsNV.?(arg_1860, arg_1861);
}
pub inline fn glDeleteQueries(arg_1862: GLsizei, arg_1863: [*c]const GLuint) void {
    return epoxy_glDeleteQueries.?(arg_1862, arg_1863);
}
pub inline fn glDeleteQueriesARB(arg_1864: GLsizei, arg_1865: [*c]const GLuint) void {
    return epoxy_glDeleteQueriesARB.?(arg_1864, arg_1865);
}
pub inline fn glDeleteQueriesEXT(arg_1866: GLsizei, arg_1867: [*c]const GLuint) void {
    return epoxy_glDeleteQueriesEXT.?(arg_1866, arg_1867);
}
pub inline fn glDeleteQueryResourceTagNV(arg_1868: GLsizei, arg_1869: [*c]const GLint) void {
    return epoxy_glDeleteQueryResourceTagNV.?(arg_1868, arg_1869);
}
pub inline fn glDeleteRenderbuffers(arg_1870: GLsizei, arg_1871: [*c]const GLuint) void {
    return epoxy_glDeleteRenderbuffers.?(arg_1870, arg_1871);
}
pub inline fn glDeleteRenderbuffersEXT(arg_1872: GLsizei, arg_1873: [*c]const GLuint) void {
    return epoxy_glDeleteRenderbuffersEXT.?(arg_1872, arg_1873);
}
pub inline fn glDeleteRenderbuffersOES(arg_1874: GLsizei, arg_1875: [*c]const GLuint) void {
    return epoxy_glDeleteRenderbuffersOES.?(arg_1874, arg_1875);
}
pub inline fn glDeleteSamplers(arg_1876: GLsizei, arg_1877: [*c]const GLuint) void {
    return epoxy_glDeleteSamplers.?(arg_1876, arg_1877);
}
pub inline fn glDeleteSemaphoresEXT(arg_1878: GLsizei, arg_1879: [*c]const GLuint) void {
    return epoxy_glDeleteSemaphoresEXT.?(arg_1878, arg_1879);
}
pub inline fn glDeleteShader(arg_1880: GLuint) void {
    return epoxy_glDeleteShader.?(arg_1880);
}
pub inline fn glDeleteStatesNV(arg_1881: GLsizei, arg_1882: [*c]const GLuint) void {
    return epoxy_glDeleteStatesNV.?(arg_1881, arg_1882);
}
pub inline fn glDeleteSync(arg_1883: GLsync) void {
    return epoxy_glDeleteSync.?(arg_1883);
}
pub inline fn glDeleteSyncAPPLE(arg_1884: GLsync) void {
    return epoxy_glDeleteSyncAPPLE.?(arg_1884);
}
pub inline fn glDeleteTextures(arg_1885: GLsizei, arg_1886: [*c]const GLuint) void {
    return epoxy_glDeleteTextures.?(arg_1885, arg_1886);
}
pub inline fn glDeleteTexturesEXT(arg_1887: GLsizei, arg_1888: [*c]const GLuint) void {
    return epoxy_glDeleteTexturesEXT.?(arg_1887, arg_1888);
}
pub inline fn glDeleteTransformFeedbacks(arg_1889: GLsizei, arg_1890: [*c]const GLuint) void {
    return epoxy_glDeleteTransformFeedbacks.?(arg_1889, arg_1890);
}
pub inline fn glDeleteTransformFeedbacksNV(arg_1891: GLsizei, arg_1892: [*c]const GLuint) void {
    return epoxy_glDeleteTransformFeedbacksNV.?(arg_1891, arg_1892);
}
pub inline fn glDeleteVertexArrays(arg_1893: GLsizei, arg_1894: [*c]const GLuint) void {
    return epoxy_glDeleteVertexArrays.?(arg_1893, arg_1894);
}
pub inline fn glDeleteVertexArraysAPPLE(arg_1895: GLsizei, arg_1896: [*c]const GLuint) void {
    return epoxy_glDeleteVertexArraysAPPLE.?(arg_1895, arg_1896);
}
pub inline fn glDeleteVertexArraysOES(arg_1897: GLsizei, arg_1898: [*c]const GLuint) void {
    return epoxy_glDeleteVertexArraysOES.?(arg_1897, arg_1898);
}
pub inline fn glDeleteVertexShaderEXT(arg_1899: GLuint) void {
    return epoxy_glDeleteVertexShaderEXT.?(arg_1899);
}
pub inline fn glDepthBoundsEXT(arg_1900: GLclampd, arg_1901: GLclampd) void {
    return epoxy_glDepthBoundsEXT.?(arg_1900, arg_1901);
}
pub inline fn glDepthBoundsdNV(arg_1902: GLdouble, arg_1903: GLdouble) void {
    return epoxy_glDepthBoundsdNV.?(arg_1902, arg_1903);
}
pub inline fn glDepthFunc(arg_1904: GLenum) void {
    return epoxy_glDepthFunc.?(arg_1904);
}
pub inline fn glDepthMask(arg_1905: GLboolean) void {
    return epoxy_glDepthMask.?(arg_1905);
}
pub inline fn glDepthRange(arg_1906: GLdouble, arg_1907: GLdouble) void {
    return epoxy_glDepthRange.?(arg_1906, arg_1907);
}
pub inline fn glDepthRangeArrayfvNV(arg_1908: GLuint, arg_1909: GLsizei, arg_1910: [*c]const GLfloat) void {
    return epoxy_glDepthRangeArrayfvNV.?(arg_1908, arg_1909, arg_1910);
}
pub inline fn glDepthRangeArrayfvOES(arg_1911: GLuint, arg_1912: GLsizei, arg_1913: [*c]const GLfloat) void {
    return epoxy_glDepthRangeArrayfvOES.?(arg_1911, arg_1912, arg_1913);
}
pub inline fn glDepthRangeArrayv(arg_1914: GLuint, arg_1915: GLsizei, arg_1916: [*c]const GLdouble) void {
    return epoxy_glDepthRangeArrayv.?(arg_1914, arg_1915, arg_1916);
}
pub inline fn glDepthRangeIndexed(arg_1917: GLuint, arg_1918: GLdouble, arg_1919: GLdouble) void {
    return epoxy_glDepthRangeIndexed.?(arg_1917, arg_1918, arg_1919);
}
pub inline fn glDepthRangeIndexedfNV(arg_1920: GLuint, arg_1921: GLfloat, arg_1922: GLfloat) void {
    return epoxy_glDepthRangeIndexedfNV.?(arg_1920, arg_1921, arg_1922);
}
pub inline fn glDepthRangeIndexedfOES(arg_1923: GLuint, arg_1924: GLfloat, arg_1925: GLfloat) void {
    return epoxy_glDepthRangeIndexedfOES.?(arg_1923, arg_1924, arg_1925);
}
pub inline fn glDepthRangedNV(arg_1926: GLdouble, arg_1927: GLdouble) void {
    return epoxy_glDepthRangedNV.?(arg_1926, arg_1927);
}
pub inline fn glDepthRangef(arg_1928: GLfloat, arg_1929: GLfloat) void {
    return epoxy_glDepthRangef.?(arg_1928, arg_1929);
}
pub inline fn glDepthRangefOES(arg_1930: GLclampf, arg_1931: GLclampf) void {
    return epoxy_glDepthRangefOES.?(arg_1930, arg_1931);
}
pub inline fn glDepthRangex(arg_1932: GLfixed, arg_1933: GLfixed) void {
    return epoxy_glDepthRangex.?(arg_1932, arg_1933);
}
pub inline fn glDepthRangexOES(arg_1934: GLfixed, arg_1935: GLfixed) void {
    return epoxy_glDepthRangexOES.?(arg_1934, arg_1935);
}
pub inline fn glDetachObjectARB(arg_1936: GLhandleARB, arg_1937: GLhandleARB) void {
    return epoxy_glDetachObjectARB.?(arg_1936, arg_1937);
}
pub inline fn glDetachShader(arg_1938: GLuint, arg_1939: GLuint) void {
    return epoxy_glDetachShader.?(arg_1938, arg_1939);
}
pub inline fn glDetailTexFuncSGIS(arg_1940: GLenum, arg_1941: GLsizei, arg_1942: [*c]const GLfloat) void {
    return epoxy_glDetailTexFuncSGIS.?(arg_1940, arg_1941, arg_1942);
}
pub inline fn glDisable(arg_1943: GLenum) void {
    return epoxy_glDisable.?(arg_1943);
}
pub inline fn glDisableClientState(arg_1944: GLenum) void {
    return epoxy_glDisableClientState.?(arg_1944);
}
pub inline fn glDisableClientStateIndexedEXT(arg_1945: GLenum, arg_1946: GLuint) void {
    return epoxy_glDisableClientStateIndexedEXT.?(arg_1945, arg_1946);
}
pub inline fn glDisableClientStateiEXT(arg_1947: GLenum, arg_1948: GLuint) void {
    return epoxy_glDisableClientStateiEXT.?(arg_1947, arg_1948);
}
pub inline fn glDisableDriverControlQCOM(arg_1949: GLuint) void {
    return epoxy_glDisableDriverControlQCOM.?(arg_1949);
}
pub inline fn glDisableIndexedEXT(arg_1950: GLenum, arg_1951: GLuint) void {
    return epoxy_glDisableIndexedEXT.?(arg_1950, arg_1951);
}
pub inline fn glDisableVariantClientStateEXT(arg_1952: GLuint) void {
    return epoxy_glDisableVariantClientStateEXT.?(arg_1952);
}
pub inline fn glDisableVertexArrayAttrib(arg_1953: GLuint, arg_1954: GLuint) void {
    return epoxy_glDisableVertexArrayAttrib.?(arg_1953, arg_1954);
}
pub inline fn glDisableVertexArrayAttribEXT(arg_1955: GLuint, arg_1956: GLuint) void {
    return epoxy_glDisableVertexArrayAttribEXT.?(arg_1955, arg_1956);
}
pub inline fn glDisableVertexArrayEXT(arg_1957: GLuint, arg_1958: GLenum) void {
    return epoxy_glDisableVertexArrayEXT.?(arg_1957, arg_1958);
}
pub inline fn glDisableVertexAttribAPPLE(arg_1959: GLuint, arg_1960: GLenum) void {
    return epoxy_glDisableVertexAttribAPPLE.?(arg_1959, arg_1960);
}
pub inline fn glDisableVertexAttribArray(arg_1961: GLuint) void {
    return epoxy_glDisableVertexAttribArray.?(arg_1961);
}
pub inline fn glDisableVertexAttribArrayARB(arg_1962: GLuint) void {
    return epoxy_glDisableVertexAttribArrayARB.?(arg_1962);
}
pub inline fn glDisablei(arg_1963: GLenum, arg_1964: GLuint) void {
    return epoxy_glDisablei.?(arg_1963, arg_1964);
}
pub inline fn glDisableiEXT(arg_1965: GLenum, arg_1966: GLuint) void {
    return epoxy_glDisableiEXT.?(arg_1965, arg_1966);
}
pub inline fn glDisableiNV(arg_1967: GLenum, arg_1968: GLuint) void {
    return epoxy_glDisableiNV.?(arg_1967, arg_1968);
}
pub inline fn glDisableiOES(arg_1969: GLenum, arg_1970: GLuint) void {
    return epoxy_glDisableiOES.?(arg_1969, arg_1970);
}
pub inline fn glDiscardFramebufferEXT(arg_1971: GLenum, arg_1972: GLsizei, arg_1973: [*c]const GLenum) void {
    return epoxy_glDiscardFramebufferEXT.?(arg_1971, arg_1972, arg_1973);
}
pub inline fn glDispatchCompute(arg_1974: GLuint, arg_1975: GLuint, arg_1976: GLuint) void {
    return epoxy_glDispatchCompute.?(arg_1974, arg_1975, arg_1976);
}
pub inline fn glDispatchComputeGroupSizeARB(arg_1977: GLuint, arg_1978: GLuint, arg_1979: GLuint, arg_1980: GLuint, arg_1981: GLuint, arg_1982: GLuint) void {
    return epoxy_glDispatchComputeGroupSizeARB.?(arg_1977, arg_1978, arg_1979, arg_1980, arg_1981, arg_1982);
}
pub inline fn glDispatchComputeIndirect(arg_1983: GLintptr) void {
    return epoxy_glDispatchComputeIndirect.?(arg_1983);
}
pub inline fn glDrawArrays(arg_1984: GLenum, arg_1985: GLint, arg_1986: GLsizei) void {
    return epoxy_glDrawArrays.?(arg_1984, arg_1985, arg_1986);
}
pub inline fn glDrawArraysEXT(arg_1987: GLenum, arg_1988: GLint, arg_1989: GLsizei) void {
    return epoxy_glDrawArraysEXT.?(arg_1987, arg_1988, arg_1989);
}
pub inline fn glDrawArraysIndirect(arg_1990: GLenum, arg_1991: ?*const anyopaque) void {
    return epoxy_glDrawArraysIndirect.?(arg_1990, arg_1991);
}
pub inline fn glDrawArraysInstanced(arg_1992: GLenum, arg_1993: GLint, arg_1994: GLsizei, arg_1995: GLsizei) void {
    return epoxy_glDrawArraysInstanced.?(arg_1992, arg_1993, arg_1994, arg_1995);
}
pub inline fn glDrawArraysInstancedANGLE(arg_1996: GLenum, arg_1997: GLint, arg_1998: GLsizei, arg_1999: GLsizei) void {
    return epoxy_glDrawArraysInstancedANGLE.?(arg_1996, arg_1997, arg_1998, arg_1999);
}
pub inline fn glDrawArraysInstancedARB(arg_2000: GLenum, arg_2001: GLint, arg_2002: GLsizei, arg_2003: GLsizei) void {
    return epoxy_glDrawArraysInstancedARB.?(arg_2000, arg_2001, arg_2002, arg_2003);
}
pub inline fn glDrawArraysInstancedBaseInstance(arg_2004: GLenum, arg_2005: GLint, arg_2006: GLsizei, arg_2007: GLsizei, arg_2008: GLuint) void {
    return epoxy_glDrawArraysInstancedBaseInstance.?(arg_2004, arg_2005, arg_2006, arg_2007, arg_2008);
}
pub inline fn glDrawArraysInstancedBaseInstanceEXT(arg_2009: GLenum, arg_2010: GLint, arg_2011: GLsizei, arg_2012: GLsizei, arg_2013: GLuint) void {
    return epoxy_glDrawArraysInstancedBaseInstanceEXT.?(arg_2009, arg_2010, arg_2011, arg_2012, arg_2013);
}
pub inline fn glDrawArraysInstancedEXT(arg_2014: GLenum, arg_2015: GLint, arg_2016: GLsizei, arg_2017: GLsizei) void {
    return epoxy_glDrawArraysInstancedEXT.?(arg_2014, arg_2015, arg_2016, arg_2017);
}
pub inline fn glDrawArraysInstancedNV(arg_2018: GLenum, arg_2019: GLint, arg_2020: GLsizei, arg_2021: GLsizei) void {
    return epoxy_glDrawArraysInstancedNV.?(arg_2018, arg_2019, arg_2020, arg_2021);
}
pub inline fn glDrawBuffer(arg_2022: GLenum) void {
    return epoxy_glDrawBuffer.?(arg_2022);
}
pub inline fn glDrawBuffers(arg_2023: GLsizei, arg_2024: [*c]const GLenum) void {
    return epoxy_glDrawBuffers.?(arg_2023, arg_2024);
}
pub inline fn glDrawBuffersARB(arg_2025: GLsizei, arg_2026: [*c]const GLenum) void {
    return epoxy_glDrawBuffersARB.?(arg_2025, arg_2026);
}
pub inline fn glDrawBuffersATI(arg_2027: GLsizei, arg_2028: [*c]const GLenum) void {
    return epoxy_glDrawBuffersATI.?(arg_2027, arg_2028);
}
pub inline fn glDrawBuffersEXT(arg_2029: GLsizei, arg_2030: [*c]const GLenum) void {
    return epoxy_glDrawBuffersEXT.?(arg_2029, arg_2030);
}
pub inline fn glDrawBuffersIndexedEXT(arg_2031: GLint, arg_2032: [*c]const GLenum, arg_2033: [*c]const GLint) void {
    return epoxy_glDrawBuffersIndexedEXT.?(arg_2031, arg_2032, arg_2033);
}
pub inline fn glDrawBuffersNV(arg_2034: GLsizei, arg_2035: [*c]const GLenum) void {
    return epoxy_glDrawBuffersNV.?(arg_2034, arg_2035);
}
pub inline fn glDrawCommandsAddressNV(arg_2036: GLenum, arg_2037: [*c]const GLuint64, arg_2038: [*c]const GLsizei, arg_2039: GLuint) void {
    return epoxy_glDrawCommandsAddressNV.?(arg_2036, arg_2037, arg_2038, arg_2039);
}
pub inline fn glDrawCommandsNV(arg_2040: GLenum, arg_2041: GLuint, arg_2042: [*c]const GLintptr, arg_2043: [*c]const GLsizei, arg_2044: GLuint) void {
    return epoxy_glDrawCommandsNV.?(arg_2040, arg_2041, arg_2042, arg_2043, arg_2044);
}
pub inline fn glDrawCommandsStatesAddressNV(arg_2045: [*c]const GLuint64, arg_2046: [*c]const GLsizei, arg_2047: [*c]const GLuint, arg_2048: [*c]const GLuint, arg_2049: GLuint) void {
    return epoxy_glDrawCommandsStatesAddressNV.?(arg_2045, arg_2046, arg_2047, arg_2048, arg_2049);
}
pub inline fn glDrawCommandsStatesNV(arg_2050: GLuint, arg_2051: [*c]const GLintptr, arg_2052: [*c]const GLsizei, arg_2053: [*c]const GLuint, arg_2054: [*c]const GLuint, arg_2055: GLuint) void {
    return epoxy_glDrawCommandsStatesNV.?(arg_2050, arg_2051, arg_2052, arg_2053, arg_2054, arg_2055);
}
pub inline fn glDrawElementArrayAPPLE(arg_2056: GLenum, arg_2057: GLint, arg_2058: GLsizei) void {
    return epoxy_glDrawElementArrayAPPLE.?(arg_2056, arg_2057, arg_2058);
}
pub inline fn glDrawElementArrayATI(arg_2059: GLenum, arg_2060: GLsizei) void {
    return epoxy_glDrawElementArrayATI.?(arg_2059, arg_2060);
}
pub inline fn glDrawElements(arg_2061: GLenum, arg_2062: GLsizei, arg_2063: GLenum, arg_2064: ?*const anyopaque) void {
    return epoxy_glDrawElements.?(arg_2061, arg_2062, arg_2063, arg_2064);
}
pub inline fn glDrawElementsBaseVertex(arg_2065: GLenum, arg_2066: GLsizei, arg_2067: GLenum, arg_2068: ?*const anyopaque, arg_2069: GLint) void {
    return epoxy_glDrawElementsBaseVertex.?(arg_2065, arg_2066, arg_2067, arg_2068, arg_2069);
}
pub inline fn glDrawElementsBaseVertexEXT(arg_2070: GLenum, arg_2071: GLsizei, arg_2072: GLenum, arg_2073: ?*const anyopaque, arg_2074: GLint) void {
    return epoxy_glDrawElementsBaseVertexEXT.?(arg_2070, arg_2071, arg_2072, arg_2073, arg_2074);
}
pub inline fn glDrawElementsBaseVertexOES(arg_2075: GLenum, arg_2076: GLsizei, arg_2077: GLenum, arg_2078: ?*const anyopaque, arg_2079: GLint) void {
    return epoxy_glDrawElementsBaseVertexOES.?(arg_2075, arg_2076, arg_2077, arg_2078, arg_2079);
}
pub inline fn glDrawElementsIndirect(arg_2080: GLenum, arg_2081: GLenum, arg_2082: ?*const anyopaque) void {
    return epoxy_glDrawElementsIndirect.?(arg_2080, arg_2081, arg_2082);
}
pub inline fn glDrawElementsInstanced(arg_2083: GLenum, arg_2084: GLsizei, arg_2085: GLenum, arg_2086: ?*const anyopaque, arg_2087: GLsizei) void {
    return epoxy_glDrawElementsInstanced.?(arg_2083, arg_2084, arg_2085, arg_2086, arg_2087);
}
pub inline fn glDrawElementsInstancedANGLE(arg_2088: GLenum, arg_2089: GLsizei, arg_2090: GLenum, arg_2091: ?*const anyopaque, arg_2092: GLsizei) void {
    return epoxy_glDrawElementsInstancedANGLE.?(arg_2088, arg_2089, arg_2090, arg_2091, arg_2092);
}
pub inline fn glDrawElementsInstancedARB(arg_2093: GLenum, arg_2094: GLsizei, arg_2095: GLenum, arg_2096: ?*const anyopaque, arg_2097: GLsizei) void {
    return epoxy_glDrawElementsInstancedARB.?(arg_2093, arg_2094, arg_2095, arg_2096, arg_2097);
}
pub inline fn glDrawElementsInstancedBaseInstance(arg_2098: GLenum, arg_2099: GLsizei, arg_2100: GLenum, arg_2101: ?*const anyopaque, arg_2102: GLsizei, arg_2103: GLuint) void {
    return epoxy_glDrawElementsInstancedBaseInstance.?(arg_2098, arg_2099, arg_2100, arg_2101, arg_2102, arg_2103);
}
pub inline fn glDrawElementsInstancedBaseInstanceEXT(arg_2104: GLenum, arg_2105: GLsizei, arg_2106: GLenum, arg_2107: ?*const anyopaque, arg_2108: GLsizei, arg_2109: GLuint) void {
    return epoxy_glDrawElementsInstancedBaseInstanceEXT.?(arg_2104, arg_2105, arg_2106, arg_2107, arg_2108, arg_2109);
}
pub inline fn glDrawElementsInstancedBaseVertex(arg_2110: GLenum, arg_2111: GLsizei, arg_2112: GLenum, arg_2113: ?*const anyopaque, arg_2114: GLsizei, arg_2115: GLint) void {
    return epoxy_glDrawElementsInstancedBaseVertex.?(arg_2110, arg_2111, arg_2112, arg_2113, arg_2114, arg_2115);
}
pub inline fn glDrawElementsInstancedBaseVertexBaseInstance(arg_2116: GLenum, arg_2117: GLsizei, arg_2118: GLenum, arg_2119: ?*const anyopaque, arg_2120: GLsizei, arg_2121: GLint, arg_2122: GLuint) void {
    return epoxy_glDrawElementsInstancedBaseVertexBaseInstance.?(arg_2116, arg_2117, arg_2118, arg_2119, arg_2120, arg_2121, arg_2122);
}
pub inline fn glDrawElementsInstancedBaseVertexBaseInstanceEXT(arg_2123: GLenum, arg_2124: GLsizei, arg_2125: GLenum, arg_2126: ?*const anyopaque, arg_2127: GLsizei, arg_2128: GLint, arg_2129: GLuint) void {
    return epoxy_glDrawElementsInstancedBaseVertexBaseInstanceEXT.?(arg_2123, arg_2124, arg_2125, arg_2126, arg_2127, arg_2128, arg_2129);
}
pub inline fn glDrawElementsInstancedBaseVertexEXT(arg_2130: GLenum, arg_2131: GLsizei, arg_2132: GLenum, arg_2133: ?*const anyopaque, arg_2134: GLsizei, arg_2135: GLint) void {
    return epoxy_glDrawElementsInstancedBaseVertexEXT.?(arg_2130, arg_2131, arg_2132, arg_2133, arg_2134, arg_2135);
}
pub inline fn glDrawElementsInstancedBaseVertexOES(arg_2136: GLenum, arg_2137: GLsizei, arg_2138: GLenum, arg_2139: ?*const anyopaque, arg_2140: GLsizei, arg_2141: GLint) void {
    return epoxy_glDrawElementsInstancedBaseVertexOES.?(arg_2136, arg_2137, arg_2138, arg_2139, arg_2140, arg_2141);
}
pub inline fn glDrawElementsInstancedEXT(arg_2142: GLenum, arg_2143: GLsizei, arg_2144: GLenum, arg_2145: ?*const anyopaque, arg_2146: GLsizei) void {
    return epoxy_glDrawElementsInstancedEXT.?(arg_2142, arg_2143, arg_2144, arg_2145, arg_2146);
}
pub inline fn glDrawElementsInstancedNV(arg_2147: GLenum, arg_2148: GLsizei, arg_2149: GLenum, arg_2150: ?*const anyopaque, arg_2151: GLsizei) void {
    return epoxy_glDrawElementsInstancedNV.?(arg_2147, arg_2148, arg_2149, arg_2150, arg_2151);
}
pub inline fn glDrawMeshArraysSUN(arg_2152: GLenum, arg_2153: GLint, arg_2154: GLsizei, arg_2155: GLsizei) void {
    return epoxy_glDrawMeshArraysSUN.?(arg_2152, arg_2153, arg_2154, arg_2155);
}
pub inline fn glDrawMeshTasksIndirectNV(arg_2156: GLintptr) void {
    return epoxy_glDrawMeshTasksIndirectNV.?(arg_2156);
}
pub inline fn glDrawMeshTasksNV(arg_2157: GLuint, arg_2158: GLuint) void {
    return epoxy_glDrawMeshTasksNV.?(arg_2157, arg_2158);
}
pub inline fn glDrawPixels(arg_2159: GLsizei, arg_2160: GLsizei, arg_2161: GLenum, arg_2162: GLenum, arg_2163: ?*const anyopaque) void {
    return epoxy_glDrawPixels.?(arg_2159, arg_2160, arg_2161, arg_2162, arg_2163);
}
pub inline fn glDrawRangeElementArrayAPPLE(arg_2164: GLenum, arg_2165: GLuint, arg_2166: GLuint, arg_2167: GLint, arg_2168: GLsizei) void {
    return epoxy_glDrawRangeElementArrayAPPLE.?(arg_2164, arg_2165, arg_2166, arg_2167, arg_2168);
}
pub inline fn glDrawRangeElementArrayATI(arg_2169: GLenum, arg_2170: GLuint, arg_2171: GLuint, arg_2172: GLsizei) void {
    return epoxy_glDrawRangeElementArrayATI.?(arg_2169, arg_2170, arg_2171, arg_2172);
}
pub inline fn glDrawRangeElements(arg_2173: GLenum, arg_2174: GLuint, arg_2175: GLuint, arg_2176: GLsizei, arg_2177: GLenum, arg_2178: ?*const anyopaque) void {
    return epoxy_glDrawRangeElements.?(arg_2173, arg_2174, arg_2175, arg_2176, arg_2177, arg_2178);
}
pub inline fn glDrawRangeElementsBaseVertex(arg_2179: GLenum, arg_2180: GLuint, arg_2181: GLuint, arg_2182: GLsizei, arg_2183: GLenum, arg_2184: ?*const anyopaque, arg_2185: GLint) void {
    return epoxy_glDrawRangeElementsBaseVertex.?(arg_2179, arg_2180, arg_2181, arg_2182, arg_2183, arg_2184, arg_2185);
}
pub inline fn glDrawRangeElementsBaseVertexEXT(arg_2186: GLenum, arg_2187: GLuint, arg_2188: GLuint, arg_2189: GLsizei, arg_2190: GLenum, arg_2191: ?*const anyopaque, arg_2192: GLint) void {
    return epoxy_glDrawRangeElementsBaseVertexEXT.?(arg_2186, arg_2187, arg_2188, arg_2189, arg_2190, arg_2191, arg_2192);
}
pub inline fn glDrawRangeElementsBaseVertexOES(arg_2193: GLenum, arg_2194: GLuint, arg_2195: GLuint, arg_2196: GLsizei, arg_2197: GLenum, arg_2198: ?*const anyopaque, arg_2199: GLint) void {
    return epoxy_glDrawRangeElementsBaseVertexOES.?(arg_2193, arg_2194, arg_2195, arg_2196, arg_2197, arg_2198, arg_2199);
}
pub inline fn glDrawRangeElementsEXT(arg_2200: GLenum, arg_2201: GLuint, arg_2202: GLuint, arg_2203: GLsizei, arg_2204: GLenum, arg_2205: ?*const anyopaque) void {
    return epoxy_glDrawRangeElementsEXT.?(arg_2200, arg_2201, arg_2202, arg_2203, arg_2204, arg_2205);
}
pub inline fn glDrawTexfOES(arg_2206: GLfloat, arg_2207: GLfloat, arg_2208: GLfloat, arg_2209: GLfloat, arg_2210: GLfloat) void {
    return epoxy_glDrawTexfOES.?(arg_2206, arg_2207, arg_2208, arg_2209, arg_2210);
}
pub inline fn glDrawTexfvOES(arg_2211: [*c]const GLfloat) void {
    return epoxy_glDrawTexfvOES.?(arg_2211);
}
pub inline fn glDrawTexiOES(arg_2212: GLint, arg_2213: GLint, arg_2214: GLint, arg_2215: GLint, arg_2216: GLint) void {
    return epoxy_glDrawTexiOES.?(arg_2212, arg_2213, arg_2214, arg_2215, arg_2216);
}
pub inline fn glDrawTexivOES(arg_2217: [*c]const GLint) void {
    return epoxy_glDrawTexivOES.?(arg_2217);
}
pub inline fn glDrawTexsOES(arg_2218: GLshort, arg_2219: GLshort, arg_2220: GLshort, arg_2221: GLshort, arg_2222: GLshort) void {
    return epoxy_glDrawTexsOES.?(arg_2218, arg_2219, arg_2220, arg_2221, arg_2222);
}
pub inline fn glDrawTexsvOES(arg_2223: [*c]const GLshort) void {
    return epoxy_glDrawTexsvOES.?(arg_2223);
}
pub inline fn glDrawTextureNV(arg_2224: GLuint, arg_2225: GLuint, arg_2226: GLfloat, arg_2227: GLfloat, arg_2228: GLfloat, arg_2229: GLfloat, arg_2230: GLfloat, arg_2231: GLfloat, arg_2232: GLfloat, arg_2233: GLfloat, arg_2234: GLfloat) void {
    return epoxy_glDrawTextureNV.?(arg_2224, arg_2225, arg_2226, arg_2227, arg_2228, arg_2229, arg_2230, arg_2231, arg_2232, arg_2233, arg_2234);
}
pub inline fn glDrawTexxOES(arg_2235: GLfixed, arg_2236: GLfixed, arg_2237: GLfixed, arg_2238: GLfixed, arg_2239: GLfixed) void {
    return epoxy_glDrawTexxOES.?(arg_2235, arg_2236, arg_2237, arg_2238, arg_2239);
}
pub inline fn glDrawTexxvOES(arg_2240: [*c]const GLfixed) void {
    return epoxy_glDrawTexxvOES.?(arg_2240);
}
pub inline fn glDrawTransformFeedback(arg_2241: GLenum, arg_2242: GLuint) void {
    return epoxy_glDrawTransformFeedback.?(arg_2241, arg_2242);
}
pub inline fn glDrawTransformFeedbackEXT(arg_2243: GLenum, arg_2244: GLuint) void {
    return epoxy_glDrawTransformFeedbackEXT.?(arg_2243, arg_2244);
}
pub inline fn glDrawTransformFeedbackInstanced(arg_2245: GLenum, arg_2246: GLuint, arg_2247: GLsizei) void {
    return epoxy_glDrawTransformFeedbackInstanced.?(arg_2245, arg_2246, arg_2247);
}
pub inline fn glDrawTransformFeedbackInstancedEXT(arg_2248: GLenum, arg_2249: GLuint, arg_2250: GLsizei) void {
    return epoxy_glDrawTransformFeedbackInstancedEXT.?(arg_2248, arg_2249, arg_2250);
}
pub inline fn glDrawTransformFeedbackNV(arg_2251: GLenum, arg_2252: GLuint) void {
    return epoxy_glDrawTransformFeedbackNV.?(arg_2251, arg_2252);
}
pub inline fn glDrawTransformFeedbackStream(arg_2253: GLenum, arg_2254: GLuint, arg_2255: GLuint) void {
    return epoxy_glDrawTransformFeedbackStream.?(arg_2253, arg_2254, arg_2255);
}
pub inline fn glDrawTransformFeedbackStreamInstanced(arg_2256: GLenum, arg_2257: GLuint, arg_2258: GLuint, arg_2259: GLsizei) void {
    return epoxy_glDrawTransformFeedbackStreamInstanced.?(arg_2256, arg_2257, arg_2258, arg_2259);
}
pub inline fn glDrawVkImageNV(arg_2260: GLuint64, arg_2261: GLuint, arg_2262: GLfloat, arg_2263: GLfloat, arg_2264: GLfloat, arg_2265: GLfloat, arg_2266: GLfloat, arg_2267: GLfloat, arg_2268: GLfloat, arg_2269: GLfloat, arg_2270: GLfloat) void {
    return epoxy_glDrawVkImageNV.?(arg_2260, arg_2261, arg_2262, arg_2263, arg_2264, arg_2265, arg_2266, arg_2267, arg_2268, arg_2269, arg_2270);
}
pub inline fn glEGLImageTargetRenderbufferStorageOES(arg_2271: GLenum, arg_2272: GLeglImageOES) void {
    return epoxy_glEGLImageTargetRenderbufferStorageOES.?(arg_2271, arg_2272);
}
pub inline fn glEGLImageTargetTexStorageEXT(arg_2273: GLenum, arg_2274: GLeglImageOES, arg_2275: [*c]const GLint) void {
    return epoxy_glEGLImageTargetTexStorageEXT.?(arg_2273, arg_2274, arg_2275);
}
pub inline fn glEGLImageTargetTexture2DOES(arg_2276: GLenum, arg_2277: GLeglImageOES) void {
    return epoxy_glEGLImageTargetTexture2DOES.?(arg_2276, arg_2277);
}
pub inline fn glEGLImageTargetTextureStorageEXT(arg_2278: GLuint, arg_2279: GLeglImageOES, arg_2280: [*c]const GLint) void {
    return epoxy_glEGLImageTargetTextureStorageEXT.?(arg_2278, arg_2279, arg_2280);
}
pub inline fn glEdgeFlag(arg_2281: GLboolean) void {
    return epoxy_glEdgeFlag.?(arg_2281);
}
pub inline fn glEdgeFlagFormatNV(arg_2282: GLsizei) void {
    return epoxy_glEdgeFlagFormatNV.?(arg_2282);
}
pub inline fn glEdgeFlagPointer(arg_2283: GLsizei, arg_2284: ?*const anyopaque) void {
    return epoxy_glEdgeFlagPointer.?(arg_2283, arg_2284);
}
pub inline fn glEdgeFlagPointerEXT(arg_2285: GLsizei, arg_2286: GLsizei, arg_2287: [*c]const GLboolean) void {
    return epoxy_glEdgeFlagPointerEXT.?(arg_2285, arg_2286, arg_2287);
}
pub inline fn glEdgeFlagPointerListIBM(arg_2288: GLint, arg_2289: [*c][*c]const GLboolean, arg_2290: GLint) void {
    return epoxy_glEdgeFlagPointerListIBM.?(arg_2288, arg_2289, arg_2290);
}
pub inline fn glEdgeFlagv(arg_2291: [*c]const GLboolean) void {
    return epoxy_glEdgeFlagv.?(arg_2291);
}
pub inline fn glElementPointerAPPLE(arg_2292: GLenum, arg_2293: ?*const anyopaque) void {
    return epoxy_glElementPointerAPPLE.?(arg_2292, arg_2293);
}
pub inline fn glElementPointerATI(arg_2294: GLenum, arg_2295: ?*const anyopaque) void {
    return epoxy_glElementPointerATI.?(arg_2294, arg_2295);
}
pub inline fn glEnable(arg_2296: GLenum) void {
    return epoxy_glEnable.?(arg_2296);
}
pub inline fn glEnableClientState(arg_2297: GLenum) void {
    return epoxy_glEnableClientState.?(arg_2297);
}
pub inline fn glEnableClientStateIndexedEXT(arg_2298: GLenum, arg_2299: GLuint) void {
    return epoxy_glEnableClientStateIndexedEXT.?(arg_2298, arg_2299);
}
pub inline fn glEnableClientStateiEXT(arg_2300: GLenum, arg_2301: GLuint) void {
    return epoxy_glEnableClientStateiEXT.?(arg_2300, arg_2301);
}
pub inline fn glEnableDriverControlQCOM(arg_2302: GLuint) void {
    return epoxy_glEnableDriverControlQCOM.?(arg_2302);
}
pub inline fn glEnableIndexedEXT(arg_2303: GLenum, arg_2304: GLuint) void {
    return epoxy_glEnableIndexedEXT.?(arg_2303, arg_2304);
}
pub inline fn glEnableVariantClientStateEXT(arg_2305: GLuint) void {
    return epoxy_glEnableVariantClientStateEXT.?(arg_2305);
}
pub inline fn glEnableVertexArrayAttrib(arg_2306: GLuint, arg_2307: GLuint) void {
    return epoxy_glEnableVertexArrayAttrib.?(arg_2306, arg_2307);
}
pub inline fn glEnableVertexArrayAttribEXT(arg_2308: GLuint, arg_2309: GLuint) void {
    return epoxy_glEnableVertexArrayAttribEXT.?(arg_2308, arg_2309);
}
pub inline fn glEnableVertexArrayEXT(arg_2310: GLuint, arg_2311: GLenum) void {
    return epoxy_glEnableVertexArrayEXT.?(arg_2310, arg_2311);
}
pub inline fn glEnableVertexAttribAPPLE(arg_2312: GLuint, arg_2313: GLenum) void {
    return epoxy_glEnableVertexAttribAPPLE.?(arg_2312, arg_2313);
}
pub inline fn glEnableVertexAttribArray(arg_2314: GLuint) void {
    return epoxy_glEnableVertexAttribArray.?(arg_2314);
}
pub inline fn glEnableVertexAttribArrayARB(arg_2315: GLuint) void {
    return epoxy_glEnableVertexAttribArrayARB.?(arg_2315);
}
pub inline fn glEnablei(arg_2316: GLenum, arg_2317: GLuint) void {
    return epoxy_glEnablei.?(arg_2316, arg_2317);
}
pub inline fn glEnableiEXT(arg_2318: GLenum, arg_2319: GLuint) void {
    return epoxy_glEnableiEXT.?(arg_2318, arg_2319);
}
pub inline fn glEnableiNV(arg_2320: GLenum, arg_2321: GLuint) void {
    return epoxy_glEnableiNV.?(arg_2320, arg_2321);
}
pub inline fn glEnableiOES(arg_2322: GLenum, arg_2323: GLuint) void {
    return epoxy_glEnableiOES.?(arg_2322, arg_2323);
}
pub inline fn glEnd() void {
    return epoxy_glEnd.?();
}
pub inline fn glEndConditionalRender() void {
    return epoxy_glEndConditionalRender.?();
}
pub inline fn glEndConditionalRenderNV() void {
    return epoxy_glEndConditionalRenderNV.?();
}
pub inline fn glEndConditionalRenderNVX() void {
    return epoxy_glEndConditionalRenderNVX.?();
}
pub inline fn glEndFragmentShaderATI() void {
    return epoxy_glEndFragmentShaderATI.?();
}
pub inline fn glEndList() void {
    return epoxy_glEndList.?();
}
pub inline fn glEndOcclusionQueryNV() void {
    return epoxy_glEndOcclusionQueryNV.?();
}
pub inline fn glEndPerfMonitorAMD(arg_2324: GLuint) void {
    return epoxy_glEndPerfMonitorAMD.?(arg_2324);
}
pub inline fn glEndPerfQueryINTEL(arg_2325: GLuint) void {
    return epoxy_glEndPerfQueryINTEL.?(arg_2325);
}
pub inline fn glEndQuery(arg_2326: GLenum) void {
    return epoxy_glEndQuery.?(arg_2326);
}
pub inline fn glEndQueryARB(arg_2327: GLenum) void {
    return epoxy_glEndQueryARB.?(arg_2327);
}
pub inline fn glEndQueryEXT(arg_2328: GLenum) void {
    return epoxy_glEndQueryEXT.?(arg_2328);
}
pub inline fn glEndQueryIndexed(arg_2329: GLenum, arg_2330: GLuint) void {
    return epoxy_glEndQueryIndexed.?(arg_2329, arg_2330);
}
pub inline fn glEndTilingQCOM(arg_2331: GLbitfield) void {
    return epoxy_glEndTilingQCOM.?(arg_2331);
}
pub inline fn glEndTransformFeedback() void {
    return epoxy_glEndTransformFeedback.?();
}
pub inline fn glEndTransformFeedbackEXT() void {
    return epoxy_glEndTransformFeedbackEXT.?();
}
pub inline fn glEndTransformFeedbackNV() void {
    return epoxy_glEndTransformFeedbackNV.?();
}
pub inline fn glEndVertexShaderEXT() void {
    return epoxy_glEndVertexShaderEXT.?();
}
pub inline fn glEndVideoCaptureNV(arg_2332: GLuint) void {
    return epoxy_glEndVideoCaptureNV.?(arg_2332);
}
pub inline fn glEvalCoord1d(arg_2333: GLdouble) void {
    return epoxy_glEvalCoord1d.?(arg_2333);
}
pub inline fn glEvalCoord1dv(arg_2334: [*c]const GLdouble) void {
    return epoxy_glEvalCoord1dv.?(arg_2334);
}
pub inline fn glEvalCoord1f(arg_2335: GLfloat) void {
    return epoxy_glEvalCoord1f.?(arg_2335);
}
pub inline fn glEvalCoord1fv(arg_2336: [*c]const GLfloat) void {
    return epoxy_glEvalCoord1fv.?(arg_2336);
}
pub inline fn glEvalCoord1xOES(arg_2337: GLfixed) void {
    return epoxy_glEvalCoord1xOES.?(arg_2337);
}
pub inline fn glEvalCoord1xvOES(arg_2338: [*c]const GLfixed) void {
    return epoxy_glEvalCoord1xvOES.?(arg_2338);
}
pub inline fn glEvalCoord2d(arg_2339: GLdouble, arg_2340: GLdouble) void {
    return epoxy_glEvalCoord2d.?(arg_2339, arg_2340);
}
pub inline fn glEvalCoord2dv(arg_2341: [*c]const GLdouble) void {
    return epoxy_glEvalCoord2dv.?(arg_2341);
}
pub inline fn glEvalCoord2f(arg_2342: GLfloat, arg_2343: GLfloat) void {
    return epoxy_glEvalCoord2f.?(arg_2342, arg_2343);
}
pub inline fn glEvalCoord2fv(arg_2344: [*c]const GLfloat) void {
    return epoxy_glEvalCoord2fv.?(arg_2344);
}
pub inline fn glEvalCoord2xOES(arg_2345: GLfixed, arg_2346: GLfixed) void {
    return epoxy_glEvalCoord2xOES.?(arg_2345, arg_2346);
}
pub inline fn glEvalCoord2xvOES(arg_2347: [*c]const GLfixed) void {
    return epoxy_glEvalCoord2xvOES.?(arg_2347);
}
pub inline fn glEvalMapsNV(arg_2348: GLenum, arg_2349: GLenum) void {
    return epoxy_glEvalMapsNV.?(arg_2348, arg_2349);
}
pub inline fn glEvalMesh1(arg_2350: GLenum, arg_2351: GLint, arg_2352: GLint) void {
    return epoxy_glEvalMesh1.?(arg_2350, arg_2351, arg_2352);
}
pub inline fn glEvalMesh2(arg_2353: GLenum, arg_2354: GLint, arg_2355: GLint, arg_2356: GLint, arg_2357: GLint) void {
    return epoxy_glEvalMesh2.?(arg_2353, arg_2354, arg_2355, arg_2356, arg_2357);
}
pub inline fn glEvalPoint1(arg_2358: GLint) void {
    return epoxy_glEvalPoint1.?(arg_2358);
}
pub inline fn glEvalPoint2(arg_2359: GLint, arg_2360: GLint) void {
    return epoxy_glEvalPoint2.?(arg_2359, arg_2360);
}
pub inline fn glEvaluateDepthValuesARB() void {
    return epoxy_glEvaluateDepthValuesARB.?();
}
pub inline fn glExecuteProgramNV(arg_2361: GLenum, arg_2362: GLuint, arg_2363: [*c]const GLfloat) void {
    return epoxy_glExecuteProgramNV.?(arg_2361, arg_2362, arg_2363);
}
pub inline fn glExtGetBufferPointervQCOM(arg_2364: GLenum, arg_2365: [*c]?*anyopaque) void {
    return epoxy_glExtGetBufferPointervQCOM.?(arg_2364, arg_2365);
}
pub inline fn glExtGetBuffersQCOM(arg_2366: [*c]GLuint, arg_2367: GLint, arg_2368: [*c]GLint) void {
    return epoxy_glExtGetBuffersQCOM.?(arg_2366, arg_2367, arg_2368);
}
pub inline fn glExtGetFramebuffersQCOM(arg_2369: [*c]GLuint, arg_2370: GLint, arg_2371: [*c]GLint) void {
    return epoxy_glExtGetFramebuffersQCOM.?(arg_2369, arg_2370, arg_2371);
}
pub inline fn glExtGetProgramBinarySourceQCOM(arg_2372: GLuint, arg_2373: GLenum, arg_2374: [*c]GLchar, arg_2375: [*c]GLint) void {
    return epoxy_glExtGetProgramBinarySourceQCOM.?(arg_2372, arg_2373, arg_2374, arg_2375);
}
pub inline fn glExtGetProgramsQCOM(arg_2376: [*c]GLuint, arg_2377: GLint, arg_2378: [*c]GLint) void {
    return epoxy_glExtGetProgramsQCOM.?(arg_2376, arg_2377, arg_2378);
}
pub inline fn glExtGetRenderbuffersQCOM(arg_2379: [*c]GLuint, arg_2380: GLint, arg_2381: [*c]GLint) void {
    return epoxy_glExtGetRenderbuffersQCOM.?(arg_2379, arg_2380, arg_2381);
}
pub inline fn glExtGetShadersQCOM(arg_2382: [*c]GLuint, arg_2383: GLint, arg_2384: [*c]GLint) void {
    return epoxy_glExtGetShadersQCOM.?(arg_2382, arg_2383, arg_2384);
}
pub inline fn glExtGetTexLevelParameterivQCOM(arg_2385: GLuint, arg_2386: GLenum, arg_2387: GLint, arg_2388: GLenum, arg_2389: [*c]GLint) void {
    return epoxy_glExtGetTexLevelParameterivQCOM.?(arg_2385, arg_2386, arg_2387, arg_2388, arg_2389);
}
pub inline fn glExtGetTexSubImageQCOM(arg_2390: GLenum, arg_2391: GLint, arg_2392: GLint, arg_2393: GLint, arg_2394: GLint, arg_2395: GLsizei, arg_2396: GLsizei, arg_2397: GLsizei, arg_2398: GLenum, arg_2399: GLenum, arg_2400: ?*anyopaque) void {
    return epoxy_glExtGetTexSubImageQCOM.?(arg_2390, arg_2391, arg_2392, arg_2393, arg_2394, arg_2395, arg_2396, arg_2397, arg_2398, arg_2399, arg_2400);
}
pub inline fn glExtGetTexturesQCOM(arg_2401: [*c]GLuint, arg_2402: GLint, arg_2403: [*c]GLint) void {
    return epoxy_glExtGetTexturesQCOM.?(arg_2401, arg_2402, arg_2403);
}
pub inline fn glExtIsProgramBinaryQCOM(arg_2404: GLuint) GLboolean {
    return epoxy_glExtIsProgramBinaryQCOM.?(arg_2404);
}
pub inline fn glExtTexObjectStateOverrideiQCOM(arg_2405: GLenum, arg_2406: GLenum, arg_2407: GLint) void {
    return epoxy_glExtTexObjectStateOverrideiQCOM.?(arg_2405, arg_2406, arg_2407);
}
pub inline fn glExtractComponentEXT(arg_2408: GLuint, arg_2409: GLuint, arg_2410: GLuint) void {
    return epoxy_glExtractComponentEXT.?(arg_2408, arg_2409, arg_2410);
}
pub inline fn glFeedbackBuffer(arg_2411: GLsizei, arg_2412: GLenum, arg_2413: [*c]GLfloat) void {
    return epoxy_glFeedbackBuffer.?(arg_2411, arg_2412, arg_2413);
}
pub inline fn glFeedbackBufferxOES(arg_2414: GLsizei, arg_2415: GLenum, arg_2416: [*c]const GLfixed) void {
    return epoxy_glFeedbackBufferxOES.?(arg_2414, arg_2415, arg_2416);
}
pub inline fn glFenceSync(arg_2417: GLenum, arg_2418: GLbitfield) GLsync {
    return epoxy_glFenceSync.?(arg_2417, arg_2418);
}
pub inline fn glFenceSyncAPPLE(arg_2419: GLenum, arg_2420: GLbitfield) GLsync {
    return epoxy_glFenceSyncAPPLE.?(arg_2419, arg_2420);
}
pub inline fn glFinalCombinerInputNV(arg_2421: GLenum, arg_2422: GLenum, arg_2423: GLenum, arg_2424: GLenum) void {
    return epoxy_glFinalCombinerInputNV.?(arg_2421, arg_2422, arg_2423, arg_2424);
}
pub inline fn glFinish() void {
    return epoxy_glFinish.?();
}
pub inline fn glFinishAsyncSGIX(arg_2425: [*c]GLuint) GLint {
    return epoxy_glFinishAsyncSGIX.?(arg_2425);
}
pub inline fn glFinishFenceAPPLE(arg_2426: GLuint) void {
    return epoxy_glFinishFenceAPPLE.?(arg_2426);
}
pub inline fn glFinishFenceNV(arg_2427: GLuint) void {
    return epoxy_glFinishFenceNV.?(arg_2427);
}
pub inline fn glFinishObjectAPPLE(arg_2428: GLenum, arg_2429: GLint) void {
    return epoxy_glFinishObjectAPPLE.?(arg_2428, arg_2429);
}
pub inline fn glFinishTextureSUNX() void {
    return epoxy_glFinishTextureSUNX.?();
}
pub inline fn glFlush() void {
    return epoxy_glFlush.?();
}
pub inline fn glFlushMappedBufferRange(arg_2430: GLenum, arg_2431: GLintptr, arg_2432: GLsizeiptr) void {
    return epoxy_glFlushMappedBufferRange.?(arg_2430, arg_2431, arg_2432);
}
pub inline fn glFlushMappedBufferRangeAPPLE(arg_2433: GLenum, arg_2434: GLintptr, arg_2435: GLsizeiptr) void {
    return epoxy_glFlushMappedBufferRangeAPPLE.?(arg_2433, arg_2434, arg_2435);
}
pub inline fn glFlushMappedBufferRangeEXT(arg_2436: GLenum, arg_2437: GLintptr, arg_2438: GLsizeiptr) void {
    return epoxy_glFlushMappedBufferRangeEXT.?(arg_2436, arg_2437, arg_2438);
}
pub inline fn glFlushMappedNamedBufferRange(arg_2439: GLuint, arg_2440: GLintptr, arg_2441: GLsizeiptr) void {
    return epoxy_glFlushMappedNamedBufferRange.?(arg_2439, arg_2440, arg_2441);
}
pub inline fn glFlushMappedNamedBufferRangeEXT(arg_2442: GLuint, arg_2443: GLintptr, arg_2444: GLsizeiptr) void {
    return epoxy_glFlushMappedNamedBufferRangeEXT.?(arg_2442, arg_2443, arg_2444);
}
pub inline fn glFlushPixelDataRangeNV(arg_2445: GLenum) void {
    return epoxy_glFlushPixelDataRangeNV.?(arg_2445);
}
pub inline fn glFlushRasterSGIX() void {
    return epoxy_glFlushRasterSGIX.?();
}
pub inline fn glFlushStaticDataIBM(arg_2446: GLenum) void {
    return epoxy_glFlushStaticDataIBM.?(arg_2446);
}
pub inline fn glFlushVertexArrayRangeAPPLE(arg_2447: GLsizei, arg_2448: ?*anyopaque) void {
    return epoxy_glFlushVertexArrayRangeAPPLE.?(arg_2447, arg_2448);
}
pub inline fn glFlushVertexArrayRangeNV() void {
    return epoxy_glFlushVertexArrayRangeNV.?();
}
pub inline fn glFogCoordFormatNV(arg_2449: GLenum, arg_2450: GLsizei) void {
    return epoxy_glFogCoordFormatNV.?(arg_2449, arg_2450);
}
pub inline fn glFogCoordPointer(arg_2451: GLenum, arg_2452: GLsizei, arg_2453: ?*const anyopaque) void {
    return epoxy_glFogCoordPointer.?(arg_2451, arg_2452, arg_2453);
}
pub inline fn glFogCoordPointerEXT(arg_2454: GLenum, arg_2455: GLsizei, arg_2456: ?*const anyopaque) void {
    return epoxy_glFogCoordPointerEXT.?(arg_2454, arg_2455, arg_2456);
}
pub inline fn glFogCoordPointerListIBM(arg_2457: GLenum, arg_2458: GLint, arg_2459: [*c]?*const anyopaque, arg_2460: GLint) void {
    return epoxy_glFogCoordPointerListIBM.?(arg_2457, arg_2458, arg_2459, arg_2460);
}
pub inline fn glFogCoordd(arg_2461: GLdouble) void {
    return epoxy_glFogCoordd.?(arg_2461);
}
pub inline fn glFogCoorddEXT(arg_2462: GLdouble) void {
    return epoxy_glFogCoorddEXT.?(arg_2462);
}
pub inline fn glFogCoorddv(arg_2463: [*c]const GLdouble) void {
    return epoxy_glFogCoorddv.?(arg_2463);
}
pub inline fn glFogCoorddvEXT(arg_2464: [*c]const GLdouble) void {
    return epoxy_glFogCoorddvEXT.?(arg_2464);
}
pub inline fn glFogCoordf(arg_2465: GLfloat) void {
    return epoxy_glFogCoordf.?(arg_2465);
}
pub inline fn glFogCoordfEXT(arg_2466: GLfloat) void {
    return epoxy_glFogCoordfEXT.?(arg_2466);
}
pub inline fn glFogCoordfv(arg_2467: [*c]const GLfloat) void {
    return epoxy_glFogCoordfv.?(arg_2467);
}
pub inline fn glFogCoordfvEXT(arg_2468: [*c]const GLfloat) void {
    return epoxy_glFogCoordfvEXT.?(arg_2468);
}
pub inline fn glFogCoordhNV(arg_2469: GLhalfNV) void {
    return epoxy_glFogCoordhNV.?(arg_2469);
}
pub inline fn glFogCoordhvNV(arg_2470: [*c]const GLhalfNV) void {
    return epoxy_glFogCoordhvNV.?(arg_2470);
}
pub inline fn glFogFuncSGIS(arg_2471: GLsizei, arg_2472: [*c]const GLfloat) void {
    return epoxy_glFogFuncSGIS.?(arg_2471, arg_2472);
}
pub inline fn glFogf(arg_2473: GLenum, arg_2474: GLfloat) void {
    return epoxy_glFogf.?(arg_2473, arg_2474);
}
pub inline fn glFogfv(arg_2475: GLenum, arg_2476: [*c]const GLfloat) void {
    return epoxy_glFogfv.?(arg_2475, arg_2476);
}
pub inline fn glFogi(arg_2477: GLenum, arg_2478: GLint) void {
    return epoxy_glFogi.?(arg_2477, arg_2478);
}
pub inline fn glFogiv(arg_2479: GLenum, arg_2480: [*c]const GLint) void {
    return epoxy_glFogiv.?(arg_2479, arg_2480);
}
pub inline fn glFogx(arg_2481: GLenum, arg_2482: GLfixed) void {
    return epoxy_glFogx.?(arg_2481, arg_2482);
}
pub inline fn glFogxOES(arg_2483: GLenum, arg_2484: GLfixed) void {
    return epoxy_glFogxOES.?(arg_2483, arg_2484);
}
pub inline fn glFogxv(arg_2485: GLenum, arg_2486: [*c]const GLfixed) void {
    return epoxy_glFogxv.?(arg_2485, arg_2486);
}
pub inline fn glFogxvOES(arg_2487: GLenum, arg_2488: [*c]const GLfixed) void {
    return epoxy_glFogxvOES.?(arg_2487, arg_2488);
}
pub inline fn glFragmentColorMaterialSGIX(arg_2489: GLenum, arg_2490: GLenum) void {
    return epoxy_glFragmentColorMaterialSGIX.?(arg_2489, arg_2490);
}
pub inline fn glFragmentCoverageColorNV(arg_2491: GLuint) void {
    return epoxy_glFragmentCoverageColorNV.?(arg_2491);
}
pub inline fn glFragmentLightModelfSGIX(arg_2492: GLenum, arg_2493: GLfloat) void {
    return epoxy_glFragmentLightModelfSGIX.?(arg_2492, arg_2493);
}
pub inline fn glFragmentLightModelfvSGIX(arg_2494: GLenum, arg_2495: [*c]const GLfloat) void {
    return epoxy_glFragmentLightModelfvSGIX.?(arg_2494, arg_2495);
}
pub inline fn glFragmentLightModeliSGIX(arg_2496: GLenum, arg_2497: GLint) void {
    return epoxy_glFragmentLightModeliSGIX.?(arg_2496, arg_2497);
}
pub inline fn glFragmentLightModelivSGIX(arg_2498: GLenum, arg_2499: [*c]const GLint) void {
    return epoxy_glFragmentLightModelivSGIX.?(arg_2498, arg_2499);
}
pub inline fn glFragmentLightfSGIX(arg_2500: GLenum, arg_2501: GLenum, arg_2502: GLfloat) void {
    return epoxy_glFragmentLightfSGIX.?(arg_2500, arg_2501, arg_2502);
}
pub inline fn glFragmentLightfvSGIX(arg_2503: GLenum, arg_2504: GLenum, arg_2505: [*c]const GLfloat) void {
    return epoxy_glFragmentLightfvSGIX.?(arg_2503, arg_2504, arg_2505);
}
pub inline fn glFragmentLightiSGIX(arg_2506: GLenum, arg_2507: GLenum, arg_2508: GLint) void {
    return epoxy_glFragmentLightiSGIX.?(arg_2506, arg_2507, arg_2508);
}
pub inline fn glFragmentLightivSGIX(arg_2509: GLenum, arg_2510: GLenum, arg_2511: [*c]const GLint) void {
    return epoxy_glFragmentLightivSGIX.?(arg_2509, arg_2510, arg_2511);
}
pub inline fn glFragmentMaterialfSGIX(arg_2512: GLenum, arg_2513: GLenum, arg_2514: GLfloat) void {
    return epoxy_glFragmentMaterialfSGIX.?(arg_2512, arg_2513, arg_2514);
}
pub inline fn glFragmentMaterialfvSGIX(arg_2515: GLenum, arg_2516: GLenum, arg_2517: [*c]const GLfloat) void {
    return epoxy_glFragmentMaterialfvSGIX.?(arg_2515, arg_2516, arg_2517);
}
pub inline fn glFragmentMaterialiSGIX(arg_2518: GLenum, arg_2519: GLenum, arg_2520: GLint) void {
    return epoxy_glFragmentMaterialiSGIX.?(arg_2518, arg_2519, arg_2520);
}
pub inline fn glFragmentMaterialivSGIX(arg_2521: GLenum, arg_2522: GLenum, arg_2523: [*c]const GLint) void {
    return epoxy_glFragmentMaterialivSGIX.?(arg_2521, arg_2522, arg_2523);
}
pub inline fn glFrameTerminatorGREMEDY() void {
    return epoxy_glFrameTerminatorGREMEDY.?();
}
pub inline fn glFrameZoomSGIX(arg_2524: GLint) void {
    return epoxy_glFrameZoomSGIX.?(arg_2524);
}
pub inline fn glFramebufferDrawBufferEXT(arg_2525: GLuint, arg_2526: GLenum) void {
    return epoxy_glFramebufferDrawBufferEXT.?(arg_2525, arg_2526);
}
pub inline fn glFramebufferDrawBuffersEXT(arg_2527: GLuint, arg_2528: GLsizei, arg_2529: [*c]const GLenum) void {
    return epoxy_glFramebufferDrawBuffersEXT.?(arg_2527, arg_2528, arg_2529);
}
pub inline fn glFramebufferFetchBarrierEXT() void {
    return epoxy_glFramebufferFetchBarrierEXT.?();
}
pub inline fn glFramebufferFetchBarrierQCOM() void {
    return epoxy_glFramebufferFetchBarrierQCOM.?();
}
pub inline fn glFramebufferFoveationConfigQCOM(arg_2530: GLuint, arg_2531: GLuint, arg_2532: GLuint, arg_2533: GLuint, arg_2534: [*c]GLuint) void {
    return epoxy_glFramebufferFoveationConfigQCOM.?(arg_2530, arg_2531, arg_2532, arg_2533, arg_2534);
}
pub inline fn glFramebufferFoveationParametersQCOM(arg_2535: GLuint, arg_2536: GLuint, arg_2537: GLuint, arg_2538: GLfloat, arg_2539: GLfloat, arg_2540: GLfloat, arg_2541: GLfloat, arg_2542: GLfloat) void {
    return epoxy_glFramebufferFoveationParametersQCOM.?(arg_2535, arg_2536, arg_2537, arg_2538, arg_2539, arg_2540, arg_2541, arg_2542);
}
pub inline fn glFramebufferParameteri(arg_2543: GLenum, arg_2544: GLenum, arg_2545: GLint) void {
    return epoxy_glFramebufferParameteri.?(arg_2543, arg_2544, arg_2545);
}
pub inline fn glFramebufferParameteriMESA(arg_2546: GLenum, arg_2547: GLenum, arg_2548: GLint) void {
    return epoxy_glFramebufferParameteriMESA.?(arg_2546, arg_2547, arg_2548);
}
pub inline fn glFramebufferPixelLocalStorageSizeEXT(arg_2549: GLuint, arg_2550: GLsizei) void {
    return epoxy_glFramebufferPixelLocalStorageSizeEXT.?(arg_2549, arg_2550);
}
pub inline fn glFramebufferReadBufferEXT(arg_2551: GLuint, arg_2552: GLenum) void {
    return epoxy_glFramebufferReadBufferEXT.?(arg_2551, arg_2552);
}
pub inline fn glFramebufferRenderbuffer(arg_2553: GLenum, arg_2554: GLenum, arg_2555: GLenum, arg_2556: GLuint) void {
    return epoxy_glFramebufferRenderbuffer.?(arg_2553, arg_2554, arg_2555, arg_2556);
}
pub inline fn glFramebufferRenderbufferEXT(arg_2557: GLenum, arg_2558: GLenum, arg_2559: GLenum, arg_2560: GLuint) void {
    return epoxy_glFramebufferRenderbufferEXT.?(arg_2557, arg_2558, arg_2559, arg_2560);
}
pub inline fn glFramebufferRenderbufferOES(arg_2561: GLenum, arg_2562: GLenum, arg_2563: GLenum, arg_2564: GLuint) void {
    return epoxy_glFramebufferRenderbufferOES.?(arg_2561, arg_2562, arg_2563, arg_2564);
}
pub inline fn glFramebufferSampleLocationsfvARB(arg_2565: GLenum, arg_2566: GLuint, arg_2567: GLsizei, arg_2568: [*c]const GLfloat) void {
    return epoxy_glFramebufferSampleLocationsfvARB.?(arg_2565, arg_2566, arg_2567, arg_2568);
}
pub inline fn glFramebufferSampleLocationsfvNV(arg_2569: GLenum, arg_2570: GLuint, arg_2571: GLsizei, arg_2572: [*c]const GLfloat) void {
    return epoxy_glFramebufferSampleLocationsfvNV.?(arg_2569, arg_2570, arg_2571, arg_2572);
}
pub inline fn glFramebufferSamplePositionsfvAMD(arg_2573: GLenum, arg_2574: GLuint, arg_2575: GLuint, arg_2576: [*c]const GLfloat) void {
    return epoxy_glFramebufferSamplePositionsfvAMD.?(arg_2573, arg_2574, arg_2575, arg_2576);
}
pub inline fn glFramebufferTexture(arg_2577: GLenum, arg_2578: GLenum, arg_2579: GLuint, arg_2580: GLint) void {
    return epoxy_glFramebufferTexture.?(arg_2577, arg_2578, arg_2579, arg_2580);
}
pub inline fn glFramebufferTexture1D(arg_2581: GLenum, arg_2582: GLenum, arg_2583: GLenum, arg_2584: GLuint, arg_2585: GLint) void {
    return epoxy_glFramebufferTexture1D.?(arg_2581, arg_2582, arg_2583, arg_2584, arg_2585);
}
pub inline fn glFramebufferTexture1DEXT(arg_2586: GLenum, arg_2587: GLenum, arg_2588: GLenum, arg_2589: GLuint, arg_2590: GLint) void {
    return epoxy_glFramebufferTexture1DEXT.?(arg_2586, arg_2587, arg_2588, arg_2589, arg_2590);
}
pub inline fn glFramebufferTexture2D(arg_2591: GLenum, arg_2592: GLenum, arg_2593: GLenum, arg_2594: GLuint, arg_2595: GLint) void {
    return epoxy_glFramebufferTexture2D.?(arg_2591, arg_2592, arg_2593, arg_2594, arg_2595);
}
pub inline fn glFramebufferTexture2DDownsampleIMG(arg_2596: GLenum, arg_2597: GLenum, arg_2598: GLenum, arg_2599: GLuint, arg_2600: GLint, arg_2601: GLint, arg_2602: GLint) void {
    return epoxy_glFramebufferTexture2DDownsampleIMG.?(arg_2596, arg_2597, arg_2598, arg_2599, arg_2600, arg_2601, arg_2602);
}
pub inline fn glFramebufferTexture2DEXT(arg_2603: GLenum, arg_2604: GLenum, arg_2605: GLenum, arg_2606: GLuint, arg_2607: GLint) void {
    return epoxy_glFramebufferTexture2DEXT.?(arg_2603, arg_2604, arg_2605, arg_2606, arg_2607);
}
pub inline fn glFramebufferTexture2DMultisampleEXT(arg_2608: GLenum, arg_2609: GLenum, arg_2610: GLenum, arg_2611: GLuint, arg_2612: GLint, arg_2613: GLsizei) void {
    return epoxy_glFramebufferTexture2DMultisampleEXT.?(arg_2608, arg_2609, arg_2610, arg_2611, arg_2612, arg_2613);
}
pub inline fn glFramebufferTexture2DMultisampleIMG(arg_2614: GLenum, arg_2615: GLenum, arg_2616: GLenum, arg_2617: GLuint, arg_2618: GLint, arg_2619: GLsizei) void {
    return epoxy_glFramebufferTexture2DMultisampleIMG.?(arg_2614, arg_2615, arg_2616, arg_2617, arg_2618, arg_2619);
}
pub inline fn glFramebufferTexture2DOES(arg_2620: GLenum, arg_2621: GLenum, arg_2622: GLenum, arg_2623: GLuint, arg_2624: GLint) void {
    return epoxy_glFramebufferTexture2DOES.?(arg_2620, arg_2621, arg_2622, arg_2623, arg_2624);
}
pub inline fn glFramebufferTexture3D(arg_2625: GLenum, arg_2626: GLenum, arg_2627: GLenum, arg_2628: GLuint, arg_2629: GLint, arg_2630: GLint) void {
    return epoxy_glFramebufferTexture3D.?(arg_2625, arg_2626, arg_2627, arg_2628, arg_2629, arg_2630);
}
pub inline fn glFramebufferTexture3DEXT(arg_2631: GLenum, arg_2632: GLenum, arg_2633: GLenum, arg_2634: GLuint, arg_2635: GLint, arg_2636: GLint) void {
    return epoxy_glFramebufferTexture3DEXT.?(arg_2631, arg_2632, arg_2633, arg_2634, arg_2635, arg_2636);
}
pub inline fn glFramebufferTexture3DOES(arg_2637: GLenum, arg_2638: GLenum, arg_2639: GLenum, arg_2640: GLuint, arg_2641: GLint, arg_2642: GLint) void {
    return epoxy_glFramebufferTexture3DOES.?(arg_2637, arg_2638, arg_2639, arg_2640, arg_2641, arg_2642);
}
pub inline fn glFramebufferTextureARB(arg_2643: GLenum, arg_2644: GLenum, arg_2645: GLuint, arg_2646: GLint) void {
    return epoxy_glFramebufferTextureARB.?(arg_2643, arg_2644, arg_2645, arg_2646);
}
pub inline fn glFramebufferTextureEXT(arg_2647: GLenum, arg_2648: GLenum, arg_2649: GLuint, arg_2650: GLint) void {
    return epoxy_glFramebufferTextureEXT.?(arg_2647, arg_2648, arg_2649, arg_2650);
}
pub inline fn glFramebufferTextureFaceARB(arg_2651: GLenum, arg_2652: GLenum, arg_2653: GLuint, arg_2654: GLint, arg_2655: GLenum) void {
    return epoxy_glFramebufferTextureFaceARB.?(arg_2651, arg_2652, arg_2653, arg_2654, arg_2655);
}
pub inline fn glFramebufferTextureFaceEXT(arg_2656: GLenum, arg_2657: GLenum, arg_2658: GLuint, arg_2659: GLint, arg_2660: GLenum) void {
    return epoxy_glFramebufferTextureFaceEXT.?(arg_2656, arg_2657, arg_2658, arg_2659, arg_2660);
}
pub inline fn glFramebufferTextureLayer(arg_2661: GLenum, arg_2662: GLenum, arg_2663: GLuint, arg_2664: GLint, arg_2665: GLint) void {
    return epoxy_glFramebufferTextureLayer.?(arg_2661, arg_2662, arg_2663, arg_2664, arg_2665);
}
pub inline fn glFramebufferTextureLayerARB(arg_2666: GLenum, arg_2667: GLenum, arg_2668: GLuint, arg_2669: GLint, arg_2670: GLint) void {
    return epoxy_glFramebufferTextureLayerARB.?(arg_2666, arg_2667, arg_2668, arg_2669, arg_2670);
}
pub inline fn glFramebufferTextureLayerDownsampleIMG(arg_2671: GLenum, arg_2672: GLenum, arg_2673: GLuint, arg_2674: GLint, arg_2675: GLint, arg_2676: GLint, arg_2677: GLint) void {
    return epoxy_glFramebufferTextureLayerDownsampleIMG.?(arg_2671, arg_2672, arg_2673, arg_2674, arg_2675, arg_2676, arg_2677);
}
pub inline fn glFramebufferTextureLayerEXT(arg_2678: GLenum, arg_2679: GLenum, arg_2680: GLuint, arg_2681: GLint, arg_2682: GLint) void {
    return epoxy_glFramebufferTextureLayerEXT.?(arg_2678, arg_2679, arg_2680, arg_2681, arg_2682);
}
pub inline fn glFramebufferTextureMultisampleMultiviewOVR(arg_2683: GLenum, arg_2684: GLenum, arg_2685: GLuint, arg_2686: GLint, arg_2687: GLsizei, arg_2688: GLint, arg_2689: GLsizei) void {
    return epoxy_glFramebufferTextureMultisampleMultiviewOVR.?(arg_2683, arg_2684, arg_2685, arg_2686, arg_2687, arg_2688, arg_2689);
}
pub inline fn glFramebufferTextureMultiviewOVR(arg_2690: GLenum, arg_2691: GLenum, arg_2692: GLuint, arg_2693: GLint, arg_2694: GLint, arg_2695: GLsizei) void {
    return epoxy_glFramebufferTextureMultiviewOVR.?(arg_2690, arg_2691, arg_2692, arg_2693, arg_2694, arg_2695);
}
pub inline fn glFramebufferTextureOES(arg_2696: GLenum, arg_2697: GLenum, arg_2698: GLuint, arg_2699: GLint) void {
    return epoxy_glFramebufferTextureOES.?(arg_2696, arg_2697, arg_2698, arg_2699);
}
pub inline fn glFreeObjectBufferATI(arg_2700: GLuint) void {
    return epoxy_glFreeObjectBufferATI.?(arg_2700);
}
pub inline fn glFrontFace(arg_2701: GLenum) void {
    return epoxy_glFrontFace.?(arg_2701);
}
pub inline fn glFrustum(arg_2702: GLdouble, arg_2703: GLdouble, arg_2704: GLdouble, arg_2705: GLdouble, arg_2706: GLdouble, arg_2707: GLdouble) void {
    return epoxy_glFrustum.?(arg_2702, arg_2703, arg_2704, arg_2705, arg_2706, arg_2707);
}
pub inline fn glFrustumf(arg_2708: GLfloat, arg_2709: GLfloat, arg_2710: GLfloat, arg_2711: GLfloat, arg_2712: GLfloat, arg_2713: GLfloat) void {
    return epoxy_glFrustumf.?(arg_2708, arg_2709, arg_2710, arg_2711, arg_2712, arg_2713);
}
pub inline fn glFrustumfOES(arg_2714: GLfloat, arg_2715: GLfloat, arg_2716: GLfloat, arg_2717: GLfloat, arg_2718: GLfloat, arg_2719: GLfloat) void {
    return epoxy_glFrustumfOES.?(arg_2714, arg_2715, arg_2716, arg_2717, arg_2718, arg_2719);
}
pub inline fn glFrustumx(arg_2720: GLfixed, arg_2721: GLfixed, arg_2722: GLfixed, arg_2723: GLfixed, arg_2724: GLfixed, arg_2725: GLfixed) void {
    return epoxy_glFrustumx.?(arg_2720, arg_2721, arg_2722, arg_2723, arg_2724, arg_2725);
}
pub inline fn glFrustumxOES(arg_2726: GLfixed, arg_2727: GLfixed, arg_2728: GLfixed, arg_2729: GLfixed, arg_2730: GLfixed, arg_2731: GLfixed) void {
    return epoxy_glFrustumxOES.?(arg_2726, arg_2727, arg_2728, arg_2729, arg_2730, arg_2731);
}
pub inline fn glGenAsyncMarkersSGIX(arg_2732: GLsizei) GLuint {
    return epoxy_glGenAsyncMarkersSGIX.?(arg_2732);
}
pub inline fn glGenBuffers(arg_2733: GLsizei, arg_2734: [*c]GLuint) void {
    return epoxy_glGenBuffers.?(arg_2733, arg_2734);
}
pub inline fn glGenBuffersARB(arg_2735: GLsizei, arg_2736: [*c]GLuint) void {
    return epoxy_glGenBuffersARB.?(arg_2735, arg_2736);
}
pub inline fn glGenFencesAPPLE(arg_2737: GLsizei, arg_2738: [*c]GLuint) void {
    return epoxy_glGenFencesAPPLE.?(arg_2737, arg_2738);
}
pub inline fn glGenFencesNV(arg_2739: GLsizei, arg_2740: [*c]GLuint) void {
    return epoxy_glGenFencesNV.?(arg_2739, arg_2740);
}
pub inline fn glGenFragmentShadersATI(arg_2741: GLuint) GLuint {
    return epoxy_glGenFragmentShadersATI.?(arg_2741);
}
pub inline fn glGenFramebuffers(arg_2742: GLsizei, arg_2743: [*c]GLuint) void {
    return epoxy_glGenFramebuffers.?(arg_2742, arg_2743);
}
pub inline fn glGenFramebuffersEXT(arg_2744: GLsizei, arg_2745: [*c]GLuint) void {
    return epoxy_glGenFramebuffersEXT.?(arg_2744, arg_2745);
}
pub inline fn glGenFramebuffersOES(arg_2746: GLsizei, arg_2747: [*c]GLuint) void {
    return epoxy_glGenFramebuffersOES.?(arg_2746, arg_2747);
}
pub inline fn glGenLists(arg_2748: GLsizei) GLuint {
    return epoxy_glGenLists.?(arg_2748);
}
pub inline fn glGenNamesAMD(arg_2749: GLenum, arg_2750: GLuint, arg_2751: [*c]GLuint) void {
    return epoxy_glGenNamesAMD.?(arg_2749, arg_2750, arg_2751);
}
pub inline fn glGenOcclusionQueriesNV(arg_2752: GLsizei, arg_2753: [*c]GLuint) void {
    return epoxy_glGenOcclusionQueriesNV.?(arg_2752, arg_2753);
}
pub inline fn glGenPathsNV(arg_2754: GLsizei) GLuint {
    return epoxy_glGenPathsNV.?(arg_2754);
}
pub inline fn glGenPerfMonitorsAMD(arg_2755: GLsizei, arg_2756: [*c]GLuint) void {
    return epoxy_glGenPerfMonitorsAMD.?(arg_2755, arg_2756);
}
pub inline fn glGenProgramPipelines(arg_2757: GLsizei, arg_2758: [*c]GLuint) void {
    return epoxy_glGenProgramPipelines.?(arg_2757, arg_2758);
}
pub inline fn glGenProgramPipelinesEXT(arg_2759: GLsizei, arg_2760: [*c]GLuint) void {
    return epoxy_glGenProgramPipelinesEXT.?(arg_2759, arg_2760);
}
pub inline fn glGenProgramsARB(arg_2761: GLsizei, arg_2762: [*c]GLuint) void {
    return epoxy_glGenProgramsARB.?(arg_2761, arg_2762);
}
pub inline fn glGenProgramsNV(arg_2763: GLsizei, arg_2764: [*c]GLuint) void {
    return epoxy_glGenProgramsNV.?(arg_2763, arg_2764);
}
pub inline fn glGenQueries(arg_2765: GLsizei, arg_2766: [*c]GLuint) void {
    return epoxy_glGenQueries.?(arg_2765, arg_2766);
}
pub inline fn glGenQueriesARB(arg_2767: GLsizei, arg_2768: [*c]GLuint) void {
    return epoxy_glGenQueriesARB.?(arg_2767, arg_2768);
}
pub inline fn glGenQueriesEXT(arg_2769: GLsizei, arg_2770: [*c]GLuint) void {
    return epoxy_glGenQueriesEXT.?(arg_2769, arg_2770);
}
pub inline fn glGenQueryResourceTagNV(arg_2771: GLsizei, arg_2772: [*c]GLint) void {
    return epoxy_glGenQueryResourceTagNV.?(arg_2771, arg_2772);
}
pub inline fn glGenRenderbuffers(arg_2773: GLsizei, arg_2774: [*c]GLuint) void {
    return epoxy_glGenRenderbuffers.?(arg_2773, arg_2774);
}
pub inline fn glGenRenderbuffersEXT(arg_2775: GLsizei, arg_2776: [*c]GLuint) void {
    return epoxy_glGenRenderbuffersEXT.?(arg_2775, arg_2776);
}
pub inline fn glGenRenderbuffersOES(arg_2777: GLsizei, arg_2778: [*c]GLuint) void {
    return epoxy_glGenRenderbuffersOES.?(arg_2777, arg_2778);
}
pub inline fn glGenSamplers(arg_2779: GLsizei, arg_2780: [*c]GLuint) void {
    return epoxy_glGenSamplers.?(arg_2779, arg_2780);
}
pub inline fn glGenSemaphoresEXT(arg_2781: GLsizei, arg_2782: [*c]GLuint) void {
    return epoxy_glGenSemaphoresEXT.?(arg_2781, arg_2782);
}
pub inline fn glGenSymbolsEXT(arg_2783: GLenum, arg_2784: GLenum, arg_2785: GLenum, arg_2786: GLuint) GLuint {
    return epoxy_glGenSymbolsEXT.?(arg_2783, arg_2784, arg_2785, arg_2786);
}
pub inline fn glGenTextures(arg_2787: GLsizei, arg_2788: [*c]GLuint) void {
    return epoxy_glGenTextures.?(arg_2787, arg_2788);
}
pub inline fn glGenTexturesEXT(arg_2789: GLsizei, arg_2790: [*c]GLuint) void {
    return epoxy_glGenTexturesEXT.?(arg_2789, arg_2790);
}
pub inline fn glGenTransformFeedbacks(arg_2791: GLsizei, arg_2792: [*c]GLuint) void {
    return epoxy_glGenTransformFeedbacks.?(arg_2791, arg_2792);
}
pub inline fn glGenTransformFeedbacksNV(arg_2793: GLsizei, arg_2794: [*c]GLuint) void {
    return epoxy_glGenTransformFeedbacksNV.?(arg_2793, arg_2794);
}
pub inline fn glGenVertexArrays(arg_2795: GLsizei, arg_2796: [*c]GLuint) void {
    return epoxy_glGenVertexArrays.?(arg_2795, arg_2796);
}
pub inline fn glGenVertexArraysAPPLE(arg_2797: GLsizei, arg_2798: [*c]GLuint) void {
    return epoxy_glGenVertexArraysAPPLE.?(arg_2797, arg_2798);
}
pub inline fn glGenVertexArraysOES(arg_2799: GLsizei, arg_2800: [*c]GLuint) void {
    return epoxy_glGenVertexArraysOES.?(arg_2799, arg_2800);
}
pub inline fn glGenVertexShadersEXT(arg_2801: GLuint) GLuint {
    return epoxy_glGenVertexShadersEXT.?(arg_2801);
}
pub inline fn glGenerateMipmap(arg_2802: GLenum) void {
    return epoxy_glGenerateMipmap.?(arg_2802);
}
pub inline fn glGenerateMipmapEXT(arg_2803: GLenum) void {
    return epoxy_glGenerateMipmapEXT.?(arg_2803);
}
pub inline fn glGenerateMipmapOES(arg_2804: GLenum) void {
    return epoxy_glGenerateMipmapOES.?(arg_2804);
}
pub inline fn glGenerateMultiTexMipmapEXT(arg_2805: GLenum, arg_2806: GLenum) void {
    return epoxy_glGenerateMultiTexMipmapEXT.?(arg_2805, arg_2806);
}
pub inline fn glGenerateTextureMipmap(arg_2807: GLuint) void {
    return epoxy_glGenerateTextureMipmap.?(arg_2807);
}
pub inline fn glGenerateTextureMipmapEXT(arg_2808: GLuint, arg_2809: GLenum) void {
    return epoxy_glGenerateTextureMipmapEXT.?(arg_2808, arg_2809);
}
pub inline fn glGetActiveAtomicCounterBufferiv(arg_2810: GLuint, arg_2811: GLuint, arg_2812: GLenum, arg_2813: [*c]GLint) void {
    return epoxy_glGetActiveAtomicCounterBufferiv.?(arg_2810, arg_2811, arg_2812, arg_2813);
}
pub inline fn glGetActiveAttrib(arg_2814: GLuint, arg_2815: GLuint, arg_2816: GLsizei, arg_2817: [*c]GLsizei, arg_2818: [*c]GLint, arg_2819: [*c]GLenum, arg_2820: [*c]GLchar) void {
    return epoxy_glGetActiveAttrib.?(arg_2814, arg_2815, arg_2816, arg_2817, arg_2818, arg_2819, arg_2820);
}
pub inline fn glGetActiveAttribARB(arg_2821: GLhandleARB, arg_2822: GLuint, arg_2823: GLsizei, arg_2824: [*c]GLsizei, arg_2825: [*c]GLint, arg_2826: [*c]GLenum, arg_2827: [*c]GLcharARB) void {
    return epoxy_glGetActiveAttribARB.?(arg_2821, arg_2822, arg_2823, arg_2824, arg_2825, arg_2826, arg_2827);
}
pub inline fn glGetActiveSubroutineName(arg_2828: GLuint, arg_2829: GLenum, arg_2830: GLuint, arg_2831: GLsizei, arg_2832: [*c]GLsizei, arg_2833: [*c]GLchar) void {
    return epoxy_glGetActiveSubroutineName.?(arg_2828, arg_2829, arg_2830, arg_2831, arg_2832, arg_2833);
}
pub inline fn glGetActiveSubroutineUniformName(arg_2834: GLuint, arg_2835: GLenum, arg_2836: GLuint, arg_2837: GLsizei, arg_2838: [*c]GLsizei, arg_2839: [*c]GLchar) void {
    return epoxy_glGetActiveSubroutineUniformName.?(arg_2834, arg_2835, arg_2836, arg_2837, arg_2838, arg_2839);
}
pub inline fn glGetActiveSubroutineUniformiv(arg_2840: GLuint, arg_2841: GLenum, arg_2842: GLuint, arg_2843: GLenum, arg_2844: [*c]GLint) void {
    return epoxy_glGetActiveSubroutineUniformiv.?(arg_2840, arg_2841, arg_2842, arg_2843, arg_2844);
}
pub inline fn glGetActiveUniform(arg_2845: GLuint, arg_2846: GLuint, arg_2847: GLsizei, arg_2848: [*c]GLsizei, arg_2849: [*c]GLint, arg_2850: [*c]GLenum, arg_2851: [*c]GLchar) void {
    return epoxy_glGetActiveUniform.?(arg_2845, arg_2846, arg_2847, arg_2848, arg_2849, arg_2850, arg_2851);
}
pub inline fn glGetActiveUniformARB(arg_2852: GLhandleARB, arg_2853: GLuint, arg_2854: GLsizei, arg_2855: [*c]GLsizei, arg_2856: [*c]GLint, arg_2857: [*c]GLenum, arg_2858: [*c]GLcharARB) void {
    return epoxy_glGetActiveUniformARB.?(arg_2852, arg_2853, arg_2854, arg_2855, arg_2856, arg_2857, arg_2858);
}
pub inline fn glGetActiveUniformBlockName(arg_2859: GLuint, arg_2860: GLuint, arg_2861: GLsizei, arg_2862: [*c]GLsizei, arg_2863: [*c]GLchar) void {
    return epoxy_glGetActiveUniformBlockName.?(arg_2859, arg_2860, arg_2861, arg_2862, arg_2863);
}
pub inline fn glGetActiveUniformBlockiv(arg_2864: GLuint, arg_2865: GLuint, arg_2866: GLenum, arg_2867: [*c]GLint) void {
    return epoxy_glGetActiveUniformBlockiv.?(arg_2864, arg_2865, arg_2866, arg_2867);
}
pub inline fn glGetActiveUniformName(arg_2868: GLuint, arg_2869: GLuint, arg_2870: GLsizei, arg_2871: [*c]GLsizei, arg_2872: [*c]GLchar) void {
    return epoxy_glGetActiveUniformName.?(arg_2868, arg_2869, arg_2870, arg_2871, arg_2872);
}
pub inline fn glGetActiveUniformsiv(arg_2873: GLuint, arg_2874: GLsizei, arg_2875: [*c]const GLuint, arg_2876: GLenum, arg_2877: [*c]GLint) void {
    return epoxy_glGetActiveUniformsiv.?(arg_2873, arg_2874, arg_2875, arg_2876, arg_2877);
}
pub inline fn glGetActiveVaryingNV(arg_2878: GLuint, arg_2879: GLuint, arg_2880: GLsizei, arg_2881: [*c]GLsizei, arg_2882: [*c]GLsizei, arg_2883: [*c]GLenum, arg_2884: [*c]GLchar) void {
    return epoxy_glGetActiveVaryingNV.?(arg_2878, arg_2879, arg_2880, arg_2881, arg_2882, arg_2883, arg_2884);
}
pub inline fn glGetArrayObjectfvATI(arg_2885: GLenum, arg_2886: GLenum, arg_2887: [*c]GLfloat) void {
    return epoxy_glGetArrayObjectfvATI.?(arg_2885, arg_2886, arg_2887);
}
pub inline fn glGetArrayObjectivATI(arg_2888: GLenum, arg_2889: GLenum, arg_2890: [*c]GLint) void {
    return epoxy_glGetArrayObjectivATI.?(arg_2888, arg_2889, arg_2890);
}
pub inline fn glGetAttachedObjectsARB(arg_2891: GLhandleARB, arg_2892: GLsizei, arg_2893: [*c]GLsizei, arg_2894: [*c]GLhandleARB) void {
    return epoxy_glGetAttachedObjectsARB.?(arg_2891, arg_2892, arg_2893, arg_2894);
}
pub inline fn glGetAttachedShaders(arg_2895: GLuint, arg_2896: GLsizei, arg_2897: [*c]GLsizei, arg_2898: [*c]GLuint) void {
    return epoxy_glGetAttachedShaders.?(arg_2895, arg_2896, arg_2897, arg_2898);
}
pub inline fn glGetAttribLocation(arg_2899: GLuint, arg_2900: [*c]const GLchar) GLint {
    return epoxy_glGetAttribLocation.?(arg_2899, arg_2900);
}
pub inline fn glGetAttribLocationARB(arg_2901: GLhandleARB, arg_2902: [*c]const GLcharARB) GLint {
    return epoxy_glGetAttribLocationARB.?(arg_2901, arg_2902);
}
pub inline fn glGetBooleanIndexedvEXT(arg_2903: GLenum, arg_2904: GLuint, arg_2905: [*c]GLboolean) void {
    return epoxy_glGetBooleanIndexedvEXT.?(arg_2903, arg_2904, arg_2905);
}
pub inline fn glGetBooleani_v(arg_2906: GLenum, arg_2907: GLuint, arg_2908: [*c]GLboolean) void {
    return epoxy_glGetBooleani_v.?(arg_2906, arg_2907, arg_2908);
}
pub inline fn glGetBooleanv(arg_2909: GLenum, arg_2910: [*c]GLboolean) void {
    return epoxy_glGetBooleanv.?(arg_2909, arg_2910);
}
pub inline fn glGetBufferParameteri64v(arg_2911: GLenum, arg_2912: GLenum, arg_2913: [*c]GLint64) void {
    return epoxy_glGetBufferParameteri64v.?(arg_2911, arg_2912, arg_2913);
}
pub inline fn glGetBufferParameteriv(arg_2914: GLenum, arg_2915: GLenum, arg_2916: [*c]GLint) void {
    return epoxy_glGetBufferParameteriv.?(arg_2914, arg_2915, arg_2916);
}
pub inline fn glGetBufferParameterivARB(arg_2917: GLenum, arg_2918: GLenum, arg_2919: [*c]GLint) void {
    return epoxy_glGetBufferParameterivARB.?(arg_2917, arg_2918, arg_2919);
}
pub inline fn glGetBufferParameterui64vNV(arg_2920: GLenum, arg_2921: GLenum, arg_2922: [*c]GLuint64EXT) void {
    return epoxy_glGetBufferParameterui64vNV.?(arg_2920, arg_2921, arg_2922);
}
pub inline fn glGetBufferPointerv(arg_2923: GLenum, arg_2924: GLenum, arg_2925: [*c]?*anyopaque) void {
    return epoxy_glGetBufferPointerv.?(arg_2923, arg_2924, arg_2925);
}
pub inline fn glGetBufferPointervARB(arg_2926: GLenum, arg_2927: GLenum, arg_2928: [*c]?*anyopaque) void {
    return epoxy_glGetBufferPointervARB.?(arg_2926, arg_2927, arg_2928);
}
pub inline fn glGetBufferPointervOES(arg_2929: GLenum, arg_2930: GLenum, arg_2931: [*c]?*anyopaque) void {
    return epoxy_glGetBufferPointervOES.?(arg_2929, arg_2930, arg_2931);
}
pub inline fn glGetBufferSubData(arg_2932: GLenum, arg_2933: GLintptr, arg_2934: GLsizeiptr, arg_2935: ?*anyopaque) void {
    return epoxy_glGetBufferSubData.?(arg_2932, arg_2933, arg_2934, arg_2935);
}
pub inline fn glGetBufferSubDataARB(arg_2936: GLenum, arg_2937: GLintptrARB, arg_2938: GLsizeiptrARB, arg_2939: ?*anyopaque) void {
    return epoxy_glGetBufferSubDataARB.?(arg_2936, arg_2937, arg_2938, arg_2939);
}
pub inline fn glGetClipPlane(arg_2940: GLenum, arg_2941: [*c]GLdouble) void {
    return epoxy_glGetClipPlane.?(arg_2940, arg_2941);
}
pub inline fn glGetClipPlanef(arg_2942: GLenum, arg_2943: [*c]GLfloat) void {
    return epoxy_glGetClipPlanef.?(arg_2942, arg_2943);
}
pub inline fn glGetClipPlanefOES(arg_2944: GLenum, arg_2945: [*c]GLfloat) void {
    return epoxy_glGetClipPlanefOES.?(arg_2944, arg_2945);
}
pub inline fn glGetClipPlanex(arg_2946: GLenum, arg_2947: [*c]GLfixed) void {
    return epoxy_glGetClipPlanex.?(arg_2946, arg_2947);
}
pub inline fn glGetClipPlanexOES(arg_2948: GLenum, arg_2949: [*c]GLfixed) void {
    return epoxy_glGetClipPlanexOES.?(arg_2948, arg_2949);
}
pub inline fn glGetColorTable(arg_2950: GLenum, arg_2951: GLenum, arg_2952: GLenum, arg_2953: ?*anyopaque) void {
    return epoxy_glGetColorTable.?(arg_2950, arg_2951, arg_2952, arg_2953);
}
pub inline fn glGetColorTableEXT(arg_2954: GLenum, arg_2955: GLenum, arg_2956: GLenum, arg_2957: ?*anyopaque) void {
    return epoxy_glGetColorTableEXT.?(arg_2954, arg_2955, arg_2956, arg_2957);
}
pub inline fn glGetColorTableParameterfv(arg_2958: GLenum, arg_2959: GLenum, arg_2960: [*c]GLfloat) void {
    return epoxy_glGetColorTableParameterfv.?(arg_2958, arg_2959, arg_2960);
}
pub inline fn glGetColorTableParameterfvEXT(arg_2961: GLenum, arg_2962: GLenum, arg_2963: [*c]GLfloat) void {
    return epoxy_glGetColorTableParameterfvEXT.?(arg_2961, arg_2962, arg_2963);
}
pub inline fn glGetColorTableParameterfvSGI(arg_2964: GLenum, arg_2965: GLenum, arg_2966: [*c]GLfloat) void {
    return epoxy_glGetColorTableParameterfvSGI.?(arg_2964, arg_2965, arg_2966);
}
pub inline fn glGetColorTableParameteriv(arg_2967: GLenum, arg_2968: GLenum, arg_2969: [*c]GLint) void {
    return epoxy_glGetColorTableParameteriv.?(arg_2967, arg_2968, arg_2969);
}
pub inline fn glGetColorTableParameterivEXT(arg_2970: GLenum, arg_2971: GLenum, arg_2972: [*c]GLint) void {
    return epoxy_glGetColorTableParameterivEXT.?(arg_2970, arg_2971, arg_2972);
}
pub inline fn glGetColorTableParameterivSGI(arg_2973: GLenum, arg_2974: GLenum, arg_2975: [*c]GLint) void {
    return epoxy_glGetColorTableParameterivSGI.?(arg_2973, arg_2974, arg_2975);
}
pub inline fn glGetColorTableSGI(arg_2976: GLenum, arg_2977: GLenum, arg_2978: GLenum, arg_2979: ?*anyopaque) void {
    return epoxy_glGetColorTableSGI.?(arg_2976, arg_2977, arg_2978, arg_2979);
}
pub inline fn glGetCombinerInputParameterfvNV(arg_2980: GLenum, arg_2981: GLenum, arg_2982: GLenum, arg_2983: GLenum, arg_2984: [*c]GLfloat) void {
    return epoxy_glGetCombinerInputParameterfvNV.?(arg_2980, arg_2981, arg_2982, arg_2983, arg_2984);
}
pub inline fn glGetCombinerInputParameterivNV(arg_2985: GLenum, arg_2986: GLenum, arg_2987: GLenum, arg_2988: GLenum, arg_2989: [*c]GLint) void {
    return epoxy_glGetCombinerInputParameterivNV.?(arg_2985, arg_2986, arg_2987, arg_2988, arg_2989);
}
pub inline fn glGetCombinerOutputParameterfvNV(arg_2990: GLenum, arg_2991: GLenum, arg_2992: GLenum, arg_2993: [*c]GLfloat) void {
    return epoxy_glGetCombinerOutputParameterfvNV.?(arg_2990, arg_2991, arg_2992, arg_2993);
}
pub inline fn glGetCombinerOutputParameterivNV(arg_2994: GLenum, arg_2995: GLenum, arg_2996: GLenum, arg_2997: [*c]GLint) void {
    return epoxy_glGetCombinerOutputParameterivNV.?(arg_2994, arg_2995, arg_2996, arg_2997);
}
pub inline fn glGetCombinerStageParameterfvNV(arg_2998: GLenum, arg_2999: GLenum, arg_3000: [*c]GLfloat) void {
    return epoxy_glGetCombinerStageParameterfvNV.?(arg_2998, arg_2999, arg_3000);
}
pub inline fn glGetCommandHeaderNV(arg_3001: GLenum, arg_3002: GLuint) GLuint {
    return epoxy_glGetCommandHeaderNV.?(arg_3001, arg_3002);
}
pub inline fn glGetCompressedMultiTexImageEXT(arg_3003: GLenum, arg_3004: GLenum, arg_3005: GLint, arg_3006: ?*anyopaque) void {
    return epoxy_glGetCompressedMultiTexImageEXT.?(arg_3003, arg_3004, arg_3005, arg_3006);
}
pub inline fn glGetCompressedTexImage(arg_3007: GLenum, arg_3008: GLint, arg_3009: ?*anyopaque) void {
    return epoxy_glGetCompressedTexImage.?(arg_3007, arg_3008, arg_3009);
}
pub inline fn glGetCompressedTexImageARB(arg_3010: GLenum, arg_3011: GLint, arg_3012: ?*anyopaque) void {
    return epoxy_glGetCompressedTexImageARB.?(arg_3010, arg_3011, arg_3012);
}
pub inline fn glGetCompressedTextureImage(arg_3013: GLuint, arg_3014: GLint, arg_3015: GLsizei, arg_3016: ?*anyopaque) void {
    return epoxy_glGetCompressedTextureImage.?(arg_3013, arg_3014, arg_3015, arg_3016);
}
pub inline fn glGetCompressedTextureImageEXT(arg_3017: GLuint, arg_3018: GLenum, arg_3019: GLint, arg_3020: ?*anyopaque) void {
    return epoxy_glGetCompressedTextureImageEXT.?(arg_3017, arg_3018, arg_3019, arg_3020);
}
pub inline fn glGetCompressedTextureSubImage(arg_3021: GLuint, arg_3022: GLint, arg_3023: GLint, arg_3024: GLint, arg_3025: GLint, arg_3026: GLsizei, arg_3027: GLsizei, arg_3028: GLsizei, arg_3029: GLsizei, arg_3030: ?*anyopaque) void {
    return epoxy_glGetCompressedTextureSubImage.?(arg_3021, arg_3022, arg_3023, arg_3024, arg_3025, arg_3026, arg_3027, arg_3028, arg_3029, arg_3030);
}
pub inline fn glGetConvolutionFilter(arg_3031: GLenum, arg_3032: GLenum, arg_3033: GLenum, arg_3034: ?*anyopaque) void {
    return epoxy_glGetConvolutionFilter.?(arg_3031, arg_3032, arg_3033, arg_3034);
}
pub inline fn glGetConvolutionFilterEXT(arg_3035: GLenum, arg_3036: GLenum, arg_3037: GLenum, arg_3038: ?*anyopaque) void {
    return epoxy_glGetConvolutionFilterEXT.?(arg_3035, arg_3036, arg_3037, arg_3038);
}
pub inline fn glGetConvolutionParameterfv(arg_3039: GLenum, arg_3040: GLenum, arg_3041: [*c]GLfloat) void {
    return epoxy_glGetConvolutionParameterfv.?(arg_3039, arg_3040, arg_3041);
}
pub inline fn glGetConvolutionParameterfvEXT(arg_3042: GLenum, arg_3043: GLenum, arg_3044: [*c]GLfloat) void {
    return epoxy_glGetConvolutionParameterfvEXT.?(arg_3042, arg_3043, arg_3044);
}
pub inline fn glGetConvolutionParameteriv(arg_3045: GLenum, arg_3046: GLenum, arg_3047: [*c]GLint) void {
    return epoxy_glGetConvolutionParameteriv.?(arg_3045, arg_3046, arg_3047);
}
pub inline fn glGetConvolutionParameterivEXT(arg_3048: GLenum, arg_3049: GLenum, arg_3050: [*c]GLint) void {
    return epoxy_glGetConvolutionParameterivEXT.?(arg_3048, arg_3049, arg_3050);
}
pub inline fn glGetConvolutionParameterxvOES(arg_3051: GLenum, arg_3052: GLenum, arg_3053: [*c]GLfixed) void {
    return epoxy_glGetConvolutionParameterxvOES.?(arg_3051, arg_3052, arg_3053);
}
pub inline fn glGetCoverageModulationTableNV(arg_3054: GLsizei, arg_3055: [*c]GLfloat) void {
    return epoxy_glGetCoverageModulationTableNV.?(arg_3054, arg_3055);
}
pub inline fn glGetDebugMessageLog(arg_3056: GLuint, arg_3057: GLsizei, arg_3058: [*c]GLenum, arg_3059: [*c]GLenum, arg_3060: [*c]GLuint, arg_3061: [*c]GLenum, arg_3062: [*c]GLsizei, arg_3063: [*c]GLchar) GLuint {
    return epoxy_glGetDebugMessageLog.?(arg_3056, arg_3057, arg_3058, arg_3059, arg_3060, arg_3061, arg_3062, arg_3063);
}
pub inline fn glGetDebugMessageLogAMD(arg_3064: GLuint, arg_3065: GLsizei, arg_3066: [*c]GLenum, arg_3067: [*c]GLuint, arg_3068: [*c]GLuint, arg_3069: [*c]GLsizei, arg_3070: [*c]GLchar) GLuint {
    return epoxy_glGetDebugMessageLogAMD.?(arg_3064, arg_3065, arg_3066, arg_3067, arg_3068, arg_3069, arg_3070);
}
pub inline fn glGetDebugMessageLogARB(arg_3071: GLuint, arg_3072: GLsizei, arg_3073: [*c]GLenum, arg_3074: [*c]GLenum, arg_3075: [*c]GLuint, arg_3076: [*c]GLenum, arg_3077: [*c]GLsizei, arg_3078: [*c]GLchar) GLuint {
    return epoxy_glGetDebugMessageLogARB.?(arg_3071, arg_3072, arg_3073, arg_3074, arg_3075, arg_3076, arg_3077, arg_3078);
}
pub inline fn glGetDebugMessageLogKHR(arg_3079: GLuint, arg_3080: GLsizei, arg_3081: [*c]GLenum, arg_3082: [*c]GLenum, arg_3083: [*c]GLuint, arg_3084: [*c]GLenum, arg_3085: [*c]GLsizei, arg_3086: [*c]GLchar) GLuint {
    return epoxy_glGetDebugMessageLogKHR.?(arg_3079, arg_3080, arg_3081, arg_3082, arg_3083, arg_3084, arg_3085, arg_3086);
}
pub inline fn glGetDetailTexFuncSGIS(arg_3087: GLenum, arg_3088: [*c]GLfloat) void {
    return epoxy_glGetDetailTexFuncSGIS.?(arg_3087, arg_3088);
}
pub inline fn glGetDoubleIndexedvEXT(arg_3089: GLenum, arg_3090: GLuint, arg_3091: [*c]GLdouble) void {
    return epoxy_glGetDoubleIndexedvEXT.?(arg_3089, arg_3090, arg_3091);
}
pub inline fn glGetDoublei_v(arg_3092: GLenum, arg_3093: GLuint, arg_3094: [*c]GLdouble) void {
    return epoxy_glGetDoublei_v.?(arg_3092, arg_3093, arg_3094);
}
pub inline fn glGetDoublei_vEXT(arg_3095: GLenum, arg_3096: GLuint, arg_3097: [*c]GLdouble) void {
    return epoxy_glGetDoublei_vEXT.?(arg_3095, arg_3096, arg_3097);
}
pub inline fn glGetDoublev(arg_3098: GLenum, arg_3099: [*c]GLdouble) void {
    return epoxy_glGetDoublev.?(arg_3098, arg_3099);
}
pub inline fn glGetDriverControlStringQCOM(arg_3100: GLuint, arg_3101: GLsizei, arg_3102: [*c]GLsizei, arg_3103: [*c]GLchar) void {
    return epoxy_glGetDriverControlStringQCOM.?(arg_3100, arg_3101, arg_3102, arg_3103);
}
pub inline fn glGetDriverControlsQCOM(arg_3104: [*c]GLint, arg_3105: GLsizei, arg_3106: [*c]GLuint) void {
    return epoxy_glGetDriverControlsQCOM.?(arg_3104, arg_3105, arg_3106);
}
pub inline fn glGetError() GLenum {
    return epoxy_glGetError.?();
}
pub inline fn glGetFenceivNV(arg_3107: GLuint, arg_3108: GLenum, arg_3109: [*c]GLint) void {
    return epoxy_glGetFenceivNV.?(arg_3107, arg_3108, arg_3109);
}
pub inline fn glGetFinalCombinerInputParameterfvNV(arg_3110: GLenum, arg_3111: GLenum, arg_3112: [*c]GLfloat) void {
    return epoxy_glGetFinalCombinerInputParameterfvNV.?(arg_3110, arg_3111, arg_3112);
}
pub inline fn glGetFinalCombinerInputParameterivNV(arg_3113: GLenum, arg_3114: GLenum, arg_3115: [*c]GLint) void {
    return epoxy_glGetFinalCombinerInputParameterivNV.?(arg_3113, arg_3114, arg_3115);
}
pub inline fn glGetFirstPerfQueryIdINTEL(arg_3116: [*c]GLuint) void {
    return epoxy_glGetFirstPerfQueryIdINTEL.?(arg_3116);
}
pub inline fn glGetFixedv(arg_3117: GLenum, arg_3118: [*c]GLfixed) void {
    return epoxy_glGetFixedv.?(arg_3117, arg_3118);
}
pub inline fn glGetFixedvOES(arg_3119: GLenum, arg_3120: [*c]GLfixed) void {
    return epoxy_glGetFixedvOES.?(arg_3119, arg_3120);
}
pub inline fn glGetFloatIndexedvEXT(arg_3121: GLenum, arg_3122: GLuint, arg_3123: [*c]GLfloat) void {
    return epoxy_glGetFloatIndexedvEXT.?(arg_3121, arg_3122, arg_3123);
}
pub inline fn glGetFloati_v(arg_3124: GLenum, arg_3125: GLuint, arg_3126: [*c]GLfloat) void {
    return epoxy_glGetFloati_v.?(arg_3124, arg_3125, arg_3126);
}
pub inline fn glGetFloati_vEXT(arg_3127: GLenum, arg_3128: GLuint, arg_3129: [*c]GLfloat) void {
    return epoxy_glGetFloati_vEXT.?(arg_3127, arg_3128, arg_3129);
}
pub inline fn glGetFloati_vNV(arg_3130: GLenum, arg_3131: GLuint, arg_3132: [*c]GLfloat) void {
    return epoxy_glGetFloati_vNV.?(arg_3130, arg_3131, arg_3132);
}
pub inline fn glGetFloati_vOES(arg_3133: GLenum, arg_3134: GLuint, arg_3135: [*c]GLfloat) void {
    return epoxy_glGetFloati_vOES.?(arg_3133, arg_3134, arg_3135);
}
pub inline fn glGetFloatv(arg_3136: GLenum, arg_3137: [*c]GLfloat) void {
    return epoxy_glGetFloatv.?(arg_3136, arg_3137);
}
pub inline fn glGetFogFuncSGIS(arg_3138: [*c]GLfloat) void {
    return epoxy_glGetFogFuncSGIS.?(arg_3138);
}
pub inline fn glGetFragDataIndex(arg_3139: GLuint, arg_3140: [*c]const GLchar) GLint {
    return epoxy_glGetFragDataIndex.?(arg_3139, arg_3140);
}
pub inline fn glGetFragDataIndexEXT(arg_3141: GLuint, arg_3142: [*c]const GLchar) GLint {
    return epoxy_glGetFragDataIndexEXT.?(arg_3141, arg_3142);
}
pub inline fn glGetFragDataLocation(arg_3143: GLuint, arg_3144: [*c]const GLchar) GLint {
    return epoxy_glGetFragDataLocation.?(arg_3143, arg_3144);
}
pub inline fn glGetFragDataLocationEXT(arg_3145: GLuint, arg_3146: [*c]const GLchar) GLint {
    return epoxy_glGetFragDataLocationEXT.?(arg_3145, arg_3146);
}
pub inline fn glGetFragmentLightfvSGIX(arg_3147: GLenum, arg_3148: GLenum, arg_3149: [*c]GLfloat) void {
    return epoxy_glGetFragmentLightfvSGIX.?(arg_3147, arg_3148, arg_3149);
}
pub inline fn glGetFragmentLightivSGIX(arg_3150: GLenum, arg_3151: GLenum, arg_3152: [*c]GLint) void {
    return epoxy_glGetFragmentLightivSGIX.?(arg_3150, arg_3151, arg_3152);
}
pub inline fn glGetFragmentMaterialfvSGIX(arg_3153: GLenum, arg_3154: GLenum, arg_3155: [*c]GLfloat) void {
    return epoxy_glGetFragmentMaterialfvSGIX.?(arg_3153, arg_3154, arg_3155);
}
pub inline fn glGetFragmentMaterialivSGIX(arg_3156: GLenum, arg_3157: GLenum, arg_3158: [*c]GLint) void {
    return epoxy_glGetFragmentMaterialivSGIX.?(arg_3156, arg_3157, arg_3158);
}
pub inline fn glGetFramebufferAttachmentParameteriv(arg_3159: GLenum, arg_3160: GLenum, arg_3161: GLenum, arg_3162: [*c]GLint) void {
    return epoxy_glGetFramebufferAttachmentParameteriv.?(arg_3159, arg_3160, arg_3161, arg_3162);
}
pub inline fn glGetFramebufferAttachmentParameterivEXT(arg_3163: GLenum, arg_3164: GLenum, arg_3165: GLenum, arg_3166: [*c]GLint) void {
    return epoxy_glGetFramebufferAttachmentParameterivEXT.?(arg_3163, arg_3164, arg_3165, arg_3166);
}
pub inline fn glGetFramebufferAttachmentParameterivOES(arg_3167: GLenum, arg_3168: GLenum, arg_3169: GLenum, arg_3170: [*c]GLint) void {
    return epoxy_glGetFramebufferAttachmentParameterivOES.?(arg_3167, arg_3168, arg_3169, arg_3170);
}
pub inline fn glGetFramebufferParameterfvAMD(arg_3171: GLenum, arg_3172: GLenum, arg_3173: GLuint, arg_3174: GLuint, arg_3175: GLsizei, arg_3176: [*c]GLfloat) void {
    return epoxy_glGetFramebufferParameterfvAMD.?(arg_3171, arg_3172, arg_3173, arg_3174, arg_3175, arg_3176);
}
pub inline fn glGetFramebufferParameteriv(arg_3177: GLenum, arg_3178: GLenum, arg_3179: [*c]GLint) void {
    return epoxy_glGetFramebufferParameteriv.?(arg_3177, arg_3178, arg_3179);
}
pub inline fn glGetFramebufferParameterivEXT(arg_3180: GLuint, arg_3181: GLenum, arg_3182: [*c]GLint) void {
    return epoxy_glGetFramebufferParameterivEXT.?(arg_3180, arg_3181, arg_3182);
}
pub inline fn glGetFramebufferParameterivMESA(arg_3183: GLenum, arg_3184: GLenum, arg_3185: [*c]GLint) void {
    return epoxy_glGetFramebufferParameterivMESA.?(arg_3183, arg_3184, arg_3185);
}
pub inline fn glGetFramebufferPixelLocalStorageSizeEXT(arg_3186: GLuint) GLsizei {
    return epoxy_glGetFramebufferPixelLocalStorageSizeEXT.?(arg_3186);
}
pub inline fn glGetGraphicsResetStatus() GLenum {
    return epoxy_glGetGraphicsResetStatus.?();
}
pub inline fn glGetGraphicsResetStatusARB() GLenum {
    return epoxy_glGetGraphicsResetStatusARB.?();
}
pub inline fn glGetGraphicsResetStatusEXT() GLenum {
    return epoxy_glGetGraphicsResetStatusEXT.?();
}
pub inline fn glGetGraphicsResetStatusKHR() GLenum {
    return epoxy_glGetGraphicsResetStatusKHR.?();
}
pub inline fn glGetHandleARB(arg_3187: GLenum) GLhandleARB {
    return epoxy_glGetHandleARB.?(arg_3187);
}
pub inline fn glGetHistogram(arg_3188: GLenum, arg_3189: GLboolean, arg_3190: GLenum, arg_3191: GLenum, arg_3192: ?*anyopaque) void {
    return epoxy_glGetHistogram.?(arg_3188, arg_3189, arg_3190, arg_3191, arg_3192);
}
pub inline fn glGetHistogramEXT(arg_3193: GLenum, arg_3194: GLboolean, arg_3195: GLenum, arg_3196: GLenum, arg_3197: ?*anyopaque) void {
    return epoxy_glGetHistogramEXT.?(arg_3193, arg_3194, arg_3195, arg_3196, arg_3197);
}
pub inline fn glGetHistogramParameterfv(arg_3198: GLenum, arg_3199: GLenum, arg_3200: [*c]GLfloat) void {
    return epoxy_glGetHistogramParameterfv.?(arg_3198, arg_3199, arg_3200);
}
pub inline fn glGetHistogramParameterfvEXT(arg_3201: GLenum, arg_3202: GLenum, arg_3203: [*c]GLfloat) void {
    return epoxy_glGetHistogramParameterfvEXT.?(arg_3201, arg_3202, arg_3203);
}
pub inline fn glGetHistogramParameteriv(arg_3204: GLenum, arg_3205: GLenum, arg_3206: [*c]GLint) void {
    return epoxy_glGetHistogramParameteriv.?(arg_3204, arg_3205, arg_3206);
}
pub inline fn glGetHistogramParameterivEXT(arg_3207: GLenum, arg_3208: GLenum, arg_3209: [*c]GLint) void {
    return epoxy_glGetHistogramParameterivEXT.?(arg_3207, arg_3208, arg_3209);
}
pub inline fn glGetHistogramParameterxvOES(arg_3210: GLenum, arg_3211: GLenum, arg_3212: [*c]GLfixed) void {
    return epoxy_glGetHistogramParameterxvOES.?(arg_3210, arg_3211, arg_3212);
}
pub inline fn glGetImageHandleARB(arg_3213: GLuint, arg_3214: GLint, arg_3215: GLboolean, arg_3216: GLint, arg_3217: GLenum) GLuint64 {
    return epoxy_glGetImageHandleARB.?(arg_3213, arg_3214, arg_3215, arg_3216, arg_3217);
}
pub inline fn glGetImageHandleNV(arg_3218: GLuint, arg_3219: GLint, arg_3220: GLboolean, arg_3221: GLint, arg_3222: GLenum) GLuint64 {
    return epoxy_glGetImageHandleNV.?(arg_3218, arg_3219, arg_3220, arg_3221, arg_3222);
}
pub inline fn glGetImageTransformParameterfvHP(arg_3223: GLenum, arg_3224: GLenum, arg_3225: [*c]GLfloat) void {
    return epoxy_glGetImageTransformParameterfvHP.?(arg_3223, arg_3224, arg_3225);
}
pub inline fn glGetImageTransformParameterivHP(arg_3226: GLenum, arg_3227: GLenum, arg_3228: [*c]GLint) void {
    return epoxy_glGetImageTransformParameterivHP.?(arg_3226, arg_3227, arg_3228);
}
pub inline fn glGetInfoLogARB(arg_3229: GLhandleARB, arg_3230: GLsizei, arg_3231: [*c]GLsizei, arg_3232: [*c]GLcharARB) void {
    return epoxy_glGetInfoLogARB.?(arg_3229, arg_3230, arg_3231, arg_3232);
}
pub inline fn glGetInstrumentsSGIX() GLint {
    return epoxy_glGetInstrumentsSGIX.?();
}
pub inline fn glGetInteger64i_v(arg_3233: GLenum, arg_3234: GLuint, arg_3235: [*c]GLint64) void {
    return epoxy_glGetInteger64i_v.?(arg_3233, arg_3234, arg_3235);
}
pub inline fn glGetInteger64v(arg_3236: GLenum, arg_3237: [*c]GLint64) void {
    return epoxy_glGetInteger64v.?(arg_3236, arg_3237);
}
pub inline fn glGetInteger64vAPPLE(arg_3238: GLenum, arg_3239: [*c]GLint64) void {
    return epoxy_glGetInteger64vAPPLE.?(arg_3238, arg_3239);
}
pub inline fn glGetIntegerIndexedvEXT(arg_3240: GLenum, arg_3241: GLuint, arg_3242: [*c]GLint) void {
    return epoxy_glGetIntegerIndexedvEXT.?(arg_3240, arg_3241, arg_3242);
}
pub inline fn glGetIntegeri_v(arg_3243: GLenum, arg_3244: GLuint, arg_3245: [*c]GLint) void {
    return epoxy_glGetIntegeri_v.?(arg_3243, arg_3244, arg_3245);
}
pub inline fn glGetIntegeri_vEXT(arg_3246: GLenum, arg_3247: GLuint, arg_3248: [*c]GLint) void {
    return epoxy_glGetIntegeri_vEXT.?(arg_3246, arg_3247, arg_3248);
}
pub inline fn glGetIntegerui64i_vNV(arg_3249: GLenum, arg_3250: GLuint, arg_3251: [*c]GLuint64EXT) void {
    return epoxy_glGetIntegerui64i_vNV.?(arg_3249, arg_3250, arg_3251);
}
pub inline fn glGetIntegerui64vNV(arg_3252: GLenum, arg_3253: [*c]GLuint64EXT) void {
    return epoxy_glGetIntegerui64vNV.?(arg_3252, arg_3253);
}
pub inline fn glGetIntegerv(arg_3254: GLenum, arg_3255: [*c]GLint) void {
    return epoxy_glGetIntegerv.?(arg_3254, arg_3255);
}
pub inline fn glGetInternalformatSampleivNV(arg_3256: GLenum, arg_3257: GLenum, arg_3258: GLsizei, arg_3259: GLenum, arg_3260: GLsizei, arg_3261: [*c]GLint) void {
    return epoxy_glGetInternalformatSampleivNV.?(arg_3256, arg_3257, arg_3258, arg_3259, arg_3260, arg_3261);
}
pub inline fn glGetInternalformati64v(arg_3262: GLenum, arg_3263: GLenum, arg_3264: GLenum, arg_3265: GLsizei, arg_3266: [*c]GLint64) void {
    return epoxy_glGetInternalformati64v.?(arg_3262, arg_3263, arg_3264, arg_3265, arg_3266);
}
pub inline fn glGetInternalformativ(arg_3267: GLenum, arg_3268: GLenum, arg_3269: GLenum, arg_3270: GLsizei, arg_3271: [*c]GLint) void {
    return epoxy_glGetInternalformativ.?(arg_3267, arg_3268, arg_3269, arg_3270, arg_3271);
}
pub inline fn glGetInvariantBooleanvEXT(arg_3272: GLuint, arg_3273: GLenum, arg_3274: [*c]GLboolean) void {
    return epoxy_glGetInvariantBooleanvEXT.?(arg_3272, arg_3273, arg_3274);
}
pub inline fn glGetInvariantFloatvEXT(arg_3275: GLuint, arg_3276: GLenum, arg_3277: [*c]GLfloat) void {
    return epoxy_glGetInvariantFloatvEXT.?(arg_3275, arg_3276, arg_3277);
}
pub inline fn glGetInvariantIntegervEXT(arg_3278: GLuint, arg_3279: GLenum, arg_3280: [*c]GLint) void {
    return epoxy_glGetInvariantIntegervEXT.?(arg_3278, arg_3279, arg_3280);
}
pub inline fn glGetLightfv(arg_3281: GLenum, arg_3282: GLenum, arg_3283: [*c]GLfloat) void {
    return epoxy_glGetLightfv.?(arg_3281, arg_3282, arg_3283);
}
pub inline fn glGetLightiv(arg_3284: GLenum, arg_3285: GLenum, arg_3286: [*c]GLint) void {
    return epoxy_glGetLightiv.?(arg_3284, arg_3285, arg_3286);
}
pub inline fn glGetLightxOES(arg_3287: GLenum, arg_3288: GLenum, arg_3289: [*c]GLfixed) void {
    return epoxy_glGetLightxOES.?(arg_3287, arg_3288, arg_3289);
}
pub inline fn glGetLightxv(arg_3290: GLenum, arg_3291: GLenum, arg_3292: [*c]GLfixed) void {
    return epoxy_glGetLightxv.?(arg_3290, arg_3291, arg_3292);
}
pub inline fn glGetLightxvOES(arg_3293: GLenum, arg_3294: GLenum, arg_3295: [*c]GLfixed) void {
    return epoxy_glGetLightxvOES.?(arg_3293, arg_3294, arg_3295);
}
pub inline fn glGetListParameterfvSGIX(arg_3296: GLuint, arg_3297: GLenum, arg_3298: [*c]GLfloat) void {
    return epoxy_glGetListParameterfvSGIX.?(arg_3296, arg_3297, arg_3298);
}
pub inline fn glGetListParameterivSGIX(arg_3299: GLuint, arg_3300: GLenum, arg_3301: [*c]GLint) void {
    return epoxy_glGetListParameterivSGIX.?(arg_3299, arg_3300, arg_3301);
}
pub inline fn glGetLocalConstantBooleanvEXT(arg_3302: GLuint, arg_3303: GLenum, arg_3304: [*c]GLboolean) void {
    return epoxy_glGetLocalConstantBooleanvEXT.?(arg_3302, arg_3303, arg_3304);
}
pub inline fn glGetLocalConstantFloatvEXT(arg_3305: GLuint, arg_3306: GLenum, arg_3307: [*c]GLfloat) void {
    return epoxy_glGetLocalConstantFloatvEXT.?(arg_3305, arg_3306, arg_3307);
}
pub inline fn glGetLocalConstantIntegervEXT(arg_3308: GLuint, arg_3309: GLenum, arg_3310: [*c]GLint) void {
    return epoxy_glGetLocalConstantIntegervEXT.?(arg_3308, arg_3309, arg_3310);
}
pub inline fn glGetMapAttribParameterfvNV(arg_3311: GLenum, arg_3312: GLuint, arg_3313: GLenum, arg_3314: [*c]GLfloat) void {
    return epoxy_glGetMapAttribParameterfvNV.?(arg_3311, arg_3312, arg_3313, arg_3314);
}
pub inline fn glGetMapAttribParameterivNV(arg_3315: GLenum, arg_3316: GLuint, arg_3317: GLenum, arg_3318: [*c]GLint) void {
    return epoxy_glGetMapAttribParameterivNV.?(arg_3315, arg_3316, arg_3317, arg_3318);
}
pub inline fn glGetMapControlPointsNV(arg_3319: GLenum, arg_3320: GLuint, arg_3321: GLenum, arg_3322: GLsizei, arg_3323: GLsizei, arg_3324: GLboolean, arg_3325: ?*anyopaque) void {
    return epoxy_glGetMapControlPointsNV.?(arg_3319, arg_3320, arg_3321, arg_3322, arg_3323, arg_3324, arg_3325);
}
pub inline fn glGetMapParameterfvNV(arg_3326: GLenum, arg_3327: GLenum, arg_3328: [*c]GLfloat) void {
    return epoxy_glGetMapParameterfvNV.?(arg_3326, arg_3327, arg_3328);
}
pub inline fn glGetMapParameterivNV(arg_3329: GLenum, arg_3330: GLenum, arg_3331: [*c]GLint) void {
    return epoxy_glGetMapParameterivNV.?(arg_3329, arg_3330, arg_3331);
}
pub inline fn glGetMapdv(arg_3332: GLenum, arg_3333: GLenum, arg_3334: [*c]GLdouble) void {
    return epoxy_glGetMapdv.?(arg_3332, arg_3333, arg_3334);
}
pub inline fn glGetMapfv(arg_3335: GLenum, arg_3336: GLenum, arg_3337: [*c]GLfloat) void {
    return epoxy_glGetMapfv.?(arg_3335, arg_3336, arg_3337);
}
pub inline fn glGetMapiv(arg_3338: GLenum, arg_3339: GLenum, arg_3340: [*c]GLint) void {
    return epoxy_glGetMapiv.?(arg_3338, arg_3339, arg_3340);
}
pub inline fn glGetMapxvOES(arg_3341: GLenum, arg_3342: GLenum, arg_3343: [*c]GLfixed) void {
    return epoxy_glGetMapxvOES.?(arg_3341, arg_3342, arg_3343);
}
pub inline fn glGetMaterialfv(arg_3344: GLenum, arg_3345: GLenum, arg_3346: [*c]GLfloat) void {
    return epoxy_glGetMaterialfv.?(arg_3344, arg_3345, arg_3346);
}
pub inline fn glGetMaterialiv(arg_3347: GLenum, arg_3348: GLenum, arg_3349: [*c]GLint) void {
    return epoxy_glGetMaterialiv.?(arg_3347, arg_3348, arg_3349);
}
pub inline fn glGetMaterialxOES(arg_3350: GLenum, arg_3351: GLenum, arg_3352: GLfixed) void {
    return epoxy_glGetMaterialxOES.?(arg_3350, arg_3351, arg_3352);
}
pub inline fn glGetMaterialxv(arg_3353: GLenum, arg_3354: GLenum, arg_3355: [*c]GLfixed) void {
    return epoxy_glGetMaterialxv.?(arg_3353, arg_3354, arg_3355);
}
pub inline fn glGetMaterialxvOES(arg_3356: GLenum, arg_3357: GLenum, arg_3358: [*c]GLfixed) void {
    return epoxy_glGetMaterialxvOES.?(arg_3356, arg_3357, arg_3358);
}
pub inline fn glGetMemoryObjectDetachedResourcesuivNV(arg_3359: GLuint, arg_3360: GLenum, arg_3361: GLint, arg_3362: GLsizei, arg_3363: [*c]GLuint) void {
    return epoxy_glGetMemoryObjectDetachedResourcesuivNV.?(arg_3359, arg_3360, arg_3361, arg_3362, arg_3363);
}
pub inline fn glGetMemoryObjectParameterivEXT(arg_3364: GLuint, arg_3365: GLenum, arg_3366: [*c]GLint) void {
    return epoxy_glGetMemoryObjectParameterivEXT.?(arg_3364, arg_3365, arg_3366);
}
pub inline fn glGetMinmax(arg_3367: GLenum, arg_3368: GLboolean, arg_3369: GLenum, arg_3370: GLenum, arg_3371: ?*anyopaque) void {
    return epoxy_glGetMinmax.?(arg_3367, arg_3368, arg_3369, arg_3370, arg_3371);
}
pub inline fn glGetMinmaxEXT(arg_3372: GLenum, arg_3373: GLboolean, arg_3374: GLenum, arg_3375: GLenum, arg_3376: ?*anyopaque) void {
    return epoxy_glGetMinmaxEXT.?(arg_3372, arg_3373, arg_3374, arg_3375, arg_3376);
}
pub inline fn glGetMinmaxParameterfv(arg_3377: GLenum, arg_3378: GLenum, arg_3379: [*c]GLfloat) void {
    return epoxy_glGetMinmaxParameterfv.?(arg_3377, arg_3378, arg_3379);
}
pub inline fn glGetMinmaxParameterfvEXT(arg_3380: GLenum, arg_3381: GLenum, arg_3382: [*c]GLfloat) void {
    return epoxy_glGetMinmaxParameterfvEXT.?(arg_3380, arg_3381, arg_3382);
}
pub inline fn glGetMinmaxParameteriv(arg_3383: GLenum, arg_3384: GLenum, arg_3385: [*c]GLint) void {
    return epoxy_glGetMinmaxParameteriv.?(arg_3383, arg_3384, arg_3385);
}
pub inline fn glGetMinmaxParameterivEXT(arg_3386: GLenum, arg_3387: GLenum, arg_3388: [*c]GLint) void {
    return epoxy_glGetMinmaxParameterivEXT.?(arg_3386, arg_3387, arg_3388);
}
pub inline fn glGetMultiTexEnvfvEXT(arg_3389: GLenum, arg_3390: GLenum, arg_3391: GLenum, arg_3392: [*c]GLfloat) void {
    return epoxy_glGetMultiTexEnvfvEXT.?(arg_3389, arg_3390, arg_3391, arg_3392);
}
pub inline fn glGetMultiTexEnvivEXT(arg_3393: GLenum, arg_3394: GLenum, arg_3395: GLenum, arg_3396: [*c]GLint) void {
    return epoxy_glGetMultiTexEnvivEXT.?(arg_3393, arg_3394, arg_3395, arg_3396);
}
pub inline fn glGetMultiTexGendvEXT(arg_3397: GLenum, arg_3398: GLenum, arg_3399: GLenum, arg_3400: [*c]GLdouble) void {
    return epoxy_glGetMultiTexGendvEXT.?(arg_3397, arg_3398, arg_3399, arg_3400);
}
pub inline fn glGetMultiTexGenfvEXT(arg_3401: GLenum, arg_3402: GLenum, arg_3403: GLenum, arg_3404: [*c]GLfloat) void {
    return epoxy_glGetMultiTexGenfvEXT.?(arg_3401, arg_3402, arg_3403, arg_3404);
}
pub inline fn glGetMultiTexGenivEXT(arg_3405: GLenum, arg_3406: GLenum, arg_3407: GLenum, arg_3408: [*c]GLint) void {
    return epoxy_glGetMultiTexGenivEXT.?(arg_3405, arg_3406, arg_3407, arg_3408);
}
pub inline fn glGetMultiTexImageEXT(arg_3409: GLenum, arg_3410: GLenum, arg_3411: GLint, arg_3412: GLenum, arg_3413: GLenum, arg_3414: ?*anyopaque) void {
    return epoxy_glGetMultiTexImageEXT.?(arg_3409, arg_3410, arg_3411, arg_3412, arg_3413, arg_3414);
}
pub inline fn glGetMultiTexLevelParameterfvEXT(arg_3415: GLenum, arg_3416: GLenum, arg_3417: GLint, arg_3418: GLenum, arg_3419: [*c]GLfloat) void {
    return epoxy_glGetMultiTexLevelParameterfvEXT.?(arg_3415, arg_3416, arg_3417, arg_3418, arg_3419);
}
pub inline fn glGetMultiTexLevelParameterivEXT(arg_3420: GLenum, arg_3421: GLenum, arg_3422: GLint, arg_3423: GLenum, arg_3424: [*c]GLint) void {
    return epoxy_glGetMultiTexLevelParameterivEXT.?(arg_3420, arg_3421, arg_3422, arg_3423, arg_3424);
}
pub inline fn glGetMultiTexParameterIivEXT(arg_3425: GLenum, arg_3426: GLenum, arg_3427: GLenum, arg_3428: [*c]GLint) void {
    return epoxy_glGetMultiTexParameterIivEXT.?(arg_3425, arg_3426, arg_3427, arg_3428);
}
pub inline fn glGetMultiTexParameterIuivEXT(arg_3429: GLenum, arg_3430: GLenum, arg_3431: GLenum, arg_3432: [*c]GLuint) void {
    return epoxy_glGetMultiTexParameterIuivEXT.?(arg_3429, arg_3430, arg_3431, arg_3432);
}
pub inline fn glGetMultiTexParameterfvEXT(arg_3433: GLenum, arg_3434: GLenum, arg_3435: GLenum, arg_3436: [*c]GLfloat) void {
    return epoxy_glGetMultiTexParameterfvEXT.?(arg_3433, arg_3434, arg_3435, arg_3436);
}
pub inline fn glGetMultiTexParameterivEXT(arg_3437: GLenum, arg_3438: GLenum, arg_3439: GLenum, arg_3440: [*c]GLint) void {
    return epoxy_glGetMultiTexParameterivEXT.?(arg_3437, arg_3438, arg_3439, arg_3440);
}
pub inline fn glGetMultisamplefv(arg_3441: GLenum, arg_3442: GLuint, arg_3443: [*c]GLfloat) void {
    return epoxy_glGetMultisamplefv.?(arg_3441, arg_3442, arg_3443);
}
pub inline fn glGetMultisamplefvNV(arg_3444: GLenum, arg_3445: GLuint, arg_3446: [*c]GLfloat) void {
    return epoxy_glGetMultisamplefvNV.?(arg_3444, arg_3445, arg_3446);
}
pub inline fn glGetNamedBufferParameteri64v(arg_3447: GLuint, arg_3448: GLenum, arg_3449: [*c]GLint64) void {
    return epoxy_glGetNamedBufferParameteri64v.?(arg_3447, arg_3448, arg_3449);
}
pub inline fn glGetNamedBufferParameteriv(arg_3450: GLuint, arg_3451: GLenum, arg_3452: [*c]GLint) void {
    return epoxy_glGetNamedBufferParameteriv.?(arg_3450, arg_3451, arg_3452);
}
pub inline fn glGetNamedBufferParameterivEXT(arg_3453: GLuint, arg_3454: GLenum, arg_3455: [*c]GLint) void {
    return epoxy_glGetNamedBufferParameterivEXT.?(arg_3453, arg_3454, arg_3455);
}
pub inline fn glGetNamedBufferParameterui64vNV(arg_3456: GLuint, arg_3457: GLenum, arg_3458: [*c]GLuint64EXT) void {
    return epoxy_glGetNamedBufferParameterui64vNV.?(arg_3456, arg_3457, arg_3458);
}
pub inline fn glGetNamedBufferPointerv(arg_3459: GLuint, arg_3460: GLenum, arg_3461: [*c]?*anyopaque) void {
    return epoxy_glGetNamedBufferPointerv.?(arg_3459, arg_3460, arg_3461);
}
pub inline fn glGetNamedBufferPointervEXT(arg_3462: GLuint, arg_3463: GLenum, arg_3464: [*c]?*anyopaque) void {
    return epoxy_glGetNamedBufferPointervEXT.?(arg_3462, arg_3463, arg_3464);
}
pub inline fn glGetNamedBufferSubData(arg_3465: GLuint, arg_3466: GLintptr, arg_3467: GLsizeiptr, arg_3468: ?*anyopaque) void {
    return epoxy_glGetNamedBufferSubData.?(arg_3465, arg_3466, arg_3467, arg_3468);
}
pub inline fn glGetNamedBufferSubDataEXT(arg_3469: GLuint, arg_3470: GLintptr, arg_3471: GLsizeiptr, arg_3472: ?*anyopaque) void {
    return epoxy_glGetNamedBufferSubDataEXT.?(arg_3469, arg_3470, arg_3471, arg_3472);
}
pub inline fn glGetNamedFramebufferAttachmentParameteriv(arg_3473: GLuint, arg_3474: GLenum, arg_3475: GLenum, arg_3476: [*c]GLint) void {
    return epoxy_glGetNamedFramebufferAttachmentParameteriv.?(arg_3473, arg_3474, arg_3475, arg_3476);
}
pub inline fn glGetNamedFramebufferAttachmentParameterivEXT(arg_3477: GLuint, arg_3478: GLenum, arg_3479: GLenum, arg_3480: [*c]GLint) void {
    return epoxy_glGetNamedFramebufferAttachmentParameterivEXT.?(arg_3477, arg_3478, arg_3479, arg_3480);
}
pub inline fn glGetNamedFramebufferParameterfvAMD(arg_3481: GLuint, arg_3482: GLenum, arg_3483: GLuint, arg_3484: GLuint, arg_3485: GLsizei, arg_3486: [*c]GLfloat) void {
    return epoxy_glGetNamedFramebufferParameterfvAMD.?(arg_3481, arg_3482, arg_3483, arg_3484, arg_3485, arg_3486);
}
pub inline fn glGetNamedFramebufferParameteriv(arg_3487: GLuint, arg_3488: GLenum, arg_3489: [*c]GLint) void {
    return epoxy_glGetNamedFramebufferParameteriv.?(arg_3487, arg_3488, arg_3489);
}
pub inline fn glGetNamedFramebufferParameterivEXT(arg_3490: GLuint, arg_3491: GLenum, arg_3492: [*c]GLint) void {
    return epoxy_glGetNamedFramebufferParameterivEXT.?(arg_3490, arg_3491, arg_3492);
}
pub inline fn glGetNamedProgramLocalParameterIivEXT(arg_3493: GLuint, arg_3494: GLenum, arg_3495: GLuint, arg_3496: [*c]GLint) void {
    return epoxy_glGetNamedProgramLocalParameterIivEXT.?(arg_3493, arg_3494, arg_3495, arg_3496);
}
pub inline fn glGetNamedProgramLocalParameterIuivEXT(arg_3497: GLuint, arg_3498: GLenum, arg_3499: GLuint, arg_3500: [*c]GLuint) void {
    return epoxy_glGetNamedProgramLocalParameterIuivEXT.?(arg_3497, arg_3498, arg_3499, arg_3500);
}
pub inline fn glGetNamedProgramLocalParameterdvEXT(arg_3501: GLuint, arg_3502: GLenum, arg_3503: GLuint, arg_3504: [*c]GLdouble) void {
    return epoxy_glGetNamedProgramLocalParameterdvEXT.?(arg_3501, arg_3502, arg_3503, arg_3504);
}
pub inline fn glGetNamedProgramLocalParameterfvEXT(arg_3505: GLuint, arg_3506: GLenum, arg_3507: GLuint, arg_3508: [*c]GLfloat) void {
    return epoxy_glGetNamedProgramLocalParameterfvEXT.?(arg_3505, arg_3506, arg_3507, arg_3508);
}
pub inline fn glGetNamedProgramStringEXT(arg_3509: GLuint, arg_3510: GLenum, arg_3511: GLenum, arg_3512: ?*anyopaque) void {
    return epoxy_glGetNamedProgramStringEXT.?(arg_3509, arg_3510, arg_3511, arg_3512);
}
pub inline fn glGetNamedProgramivEXT(arg_3513: GLuint, arg_3514: GLenum, arg_3515: GLenum, arg_3516: [*c]GLint) void {
    return epoxy_glGetNamedProgramivEXT.?(arg_3513, arg_3514, arg_3515, arg_3516);
}
pub inline fn glGetNamedRenderbufferParameteriv(arg_3517: GLuint, arg_3518: GLenum, arg_3519: [*c]GLint) void {
    return epoxy_glGetNamedRenderbufferParameteriv.?(arg_3517, arg_3518, arg_3519);
}
pub inline fn glGetNamedRenderbufferParameterivEXT(arg_3520: GLuint, arg_3521: GLenum, arg_3522: [*c]GLint) void {
    return epoxy_glGetNamedRenderbufferParameterivEXT.?(arg_3520, arg_3521, arg_3522);
}
pub inline fn glGetNamedStringARB(arg_3523: GLint, arg_3524: [*c]const GLchar, arg_3525: GLsizei, arg_3526: [*c]GLint, arg_3527: [*c]GLchar) void {
    return epoxy_glGetNamedStringARB.?(arg_3523, arg_3524, arg_3525, arg_3526, arg_3527);
}
pub inline fn glGetNamedStringivARB(arg_3528: GLint, arg_3529: [*c]const GLchar, arg_3530: GLenum, arg_3531: [*c]GLint) void {
    return epoxy_glGetNamedStringivARB.?(arg_3528, arg_3529, arg_3530, arg_3531);
}
pub inline fn glGetNextPerfQueryIdINTEL(arg_3532: GLuint, arg_3533: [*c]GLuint) void {
    return epoxy_glGetNextPerfQueryIdINTEL.?(arg_3532, arg_3533);
}
pub inline fn glGetObjectBufferfvATI(arg_3534: GLuint, arg_3535: GLenum, arg_3536: [*c]GLfloat) void {
    return epoxy_glGetObjectBufferfvATI.?(arg_3534, arg_3535, arg_3536);
}
pub inline fn glGetObjectBufferivATI(arg_3537: GLuint, arg_3538: GLenum, arg_3539: [*c]GLint) void {
    return epoxy_glGetObjectBufferivATI.?(arg_3537, arg_3538, arg_3539);
}
pub inline fn glGetObjectLabel(arg_3540: GLenum, arg_3541: GLuint, arg_3542: GLsizei, arg_3543: [*c]GLsizei, arg_3544: [*c]GLchar) void {
    return epoxy_glGetObjectLabel.?(arg_3540, arg_3541, arg_3542, arg_3543, arg_3544);
}
pub inline fn glGetObjectLabelEXT(arg_3545: GLenum, arg_3546: GLuint, arg_3547: GLsizei, arg_3548: [*c]GLsizei, arg_3549: [*c]GLchar) void {
    return epoxy_glGetObjectLabelEXT.?(arg_3545, arg_3546, arg_3547, arg_3548, arg_3549);
}
pub inline fn glGetObjectLabelKHR(arg_3550: GLenum, arg_3551: GLuint, arg_3552: GLsizei, arg_3553: [*c]GLsizei, arg_3554: [*c]GLchar) void {
    return epoxy_glGetObjectLabelKHR.?(arg_3550, arg_3551, arg_3552, arg_3553, arg_3554);
}
pub inline fn glGetObjectParameterfvARB(arg_3555: GLhandleARB, arg_3556: GLenum, arg_3557: [*c]GLfloat) void {
    return epoxy_glGetObjectParameterfvARB.?(arg_3555, arg_3556, arg_3557);
}
pub inline fn glGetObjectParameterivAPPLE(arg_3558: GLenum, arg_3559: GLuint, arg_3560: GLenum, arg_3561: [*c]GLint) void {
    return epoxy_glGetObjectParameterivAPPLE.?(arg_3558, arg_3559, arg_3560, arg_3561);
}
pub inline fn glGetObjectParameterivARB(arg_3562: GLhandleARB, arg_3563: GLenum, arg_3564: [*c]GLint) void {
    return epoxy_glGetObjectParameterivARB.?(arg_3562, arg_3563, arg_3564);
}
pub inline fn glGetObjectPtrLabel(arg_3565: ?*const anyopaque, arg_3566: GLsizei, arg_3567: [*c]GLsizei, arg_3568: [*c]GLchar) void {
    return epoxy_glGetObjectPtrLabel.?(arg_3565, arg_3566, arg_3567, arg_3568);
}
pub inline fn glGetObjectPtrLabelKHR(arg_3569: ?*const anyopaque, arg_3570: GLsizei, arg_3571: [*c]GLsizei, arg_3572: [*c]GLchar) void {
    return epoxy_glGetObjectPtrLabelKHR.?(arg_3569, arg_3570, arg_3571, arg_3572);
}
pub inline fn glGetOcclusionQueryivNV(arg_3573: GLuint, arg_3574: GLenum, arg_3575: [*c]GLint) void {
    return epoxy_glGetOcclusionQueryivNV.?(arg_3573, arg_3574, arg_3575);
}
pub inline fn glGetOcclusionQueryuivNV(arg_3576: GLuint, arg_3577: GLenum, arg_3578: [*c]GLuint) void {
    return epoxy_glGetOcclusionQueryuivNV.?(arg_3576, arg_3577, arg_3578);
}
pub inline fn glGetPathColorGenfvNV(arg_3579: GLenum, arg_3580: GLenum, arg_3581: [*c]GLfloat) void {
    return epoxy_glGetPathColorGenfvNV.?(arg_3579, arg_3580, arg_3581);
}
pub inline fn glGetPathColorGenivNV(arg_3582: GLenum, arg_3583: GLenum, arg_3584: [*c]GLint) void {
    return epoxy_glGetPathColorGenivNV.?(arg_3582, arg_3583, arg_3584);
}
pub inline fn glGetPathCommandsNV(arg_3585: GLuint, arg_3586: [*c]GLubyte) void {
    return epoxy_glGetPathCommandsNV.?(arg_3585, arg_3586);
}
pub inline fn glGetPathCoordsNV(arg_3587: GLuint, arg_3588: [*c]GLfloat) void {
    return epoxy_glGetPathCoordsNV.?(arg_3587, arg_3588);
}
pub inline fn glGetPathDashArrayNV(arg_3589: GLuint, arg_3590: [*c]GLfloat) void {
    return epoxy_glGetPathDashArrayNV.?(arg_3589, arg_3590);
}
pub inline fn glGetPathLengthNV(arg_3591: GLuint, arg_3592: GLsizei, arg_3593: GLsizei) GLfloat {
    return epoxy_glGetPathLengthNV.?(arg_3591, arg_3592, arg_3593);
}
pub inline fn glGetPathMetricRangeNV(arg_3594: GLbitfield, arg_3595: GLuint, arg_3596: GLsizei, arg_3597: GLsizei, arg_3598: [*c]GLfloat) void {
    return epoxy_glGetPathMetricRangeNV.?(arg_3594, arg_3595, arg_3596, arg_3597, arg_3598);
}
pub inline fn glGetPathMetricsNV(arg_3599: GLbitfield, arg_3600: GLsizei, arg_3601: GLenum, arg_3602: ?*const anyopaque, arg_3603: GLuint, arg_3604: GLsizei, arg_3605: [*c]GLfloat) void {
    return epoxy_glGetPathMetricsNV.?(arg_3599, arg_3600, arg_3601, arg_3602, arg_3603, arg_3604, arg_3605);
}
pub inline fn glGetPathParameterfvNV(arg_3606: GLuint, arg_3607: GLenum, arg_3608: [*c]GLfloat) void {
    return epoxy_glGetPathParameterfvNV.?(arg_3606, arg_3607, arg_3608);
}
pub inline fn glGetPathParameterivNV(arg_3609: GLuint, arg_3610: GLenum, arg_3611: [*c]GLint) void {
    return epoxy_glGetPathParameterivNV.?(arg_3609, arg_3610, arg_3611);
}
pub inline fn glGetPathSpacingNV(arg_3612: GLenum, arg_3613: GLsizei, arg_3614: GLenum, arg_3615: ?*const anyopaque, arg_3616: GLuint, arg_3617: GLfloat, arg_3618: GLfloat, arg_3619: GLenum, arg_3620: [*c]GLfloat) void {
    return epoxy_glGetPathSpacingNV.?(arg_3612, arg_3613, arg_3614, arg_3615, arg_3616, arg_3617, arg_3618, arg_3619, arg_3620);
}
pub inline fn glGetPathTexGenfvNV(arg_3621: GLenum, arg_3622: GLenum, arg_3623: [*c]GLfloat) void {
    return epoxy_glGetPathTexGenfvNV.?(arg_3621, arg_3622, arg_3623);
}
pub inline fn glGetPathTexGenivNV(arg_3624: GLenum, arg_3625: GLenum, arg_3626: [*c]GLint) void {
    return epoxy_glGetPathTexGenivNV.?(arg_3624, arg_3625, arg_3626);
}
pub inline fn glGetPerfCounterInfoINTEL(arg_3627: GLuint, arg_3628: GLuint, arg_3629: GLuint, arg_3630: [*c]GLchar, arg_3631: GLuint, arg_3632: [*c]GLchar, arg_3633: [*c]GLuint, arg_3634: [*c]GLuint, arg_3635: [*c]GLuint, arg_3636: [*c]GLuint, arg_3637: [*c]GLuint64) void {
    return epoxy_glGetPerfCounterInfoINTEL.?(arg_3627, arg_3628, arg_3629, arg_3630, arg_3631, arg_3632, arg_3633, arg_3634, arg_3635, arg_3636, arg_3637);
}
pub inline fn glGetPerfMonitorCounterDataAMD(arg_3638: GLuint, arg_3639: GLenum, arg_3640: GLsizei, arg_3641: [*c]GLuint, arg_3642: [*c]GLint) void {
    return epoxy_glGetPerfMonitorCounterDataAMD.?(arg_3638, arg_3639, arg_3640, arg_3641, arg_3642);
}
pub inline fn glGetPerfMonitorCounterInfoAMD(arg_3643: GLuint, arg_3644: GLuint, arg_3645: GLenum, arg_3646: ?*anyopaque) void {
    return epoxy_glGetPerfMonitorCounterInfoAMD.?(arg_3643, arg_3644, arg_3645, arg_3646);
}
pub inline fn glGetPerfMonitorCounterStringAMD(arg_3647: GLuint, arg_3648: GLuint, arg_3649: GLsizei, arg_3650: [*c]GLsizei, arg_3651: [*c]GLchar) void {
    return epoxy_glGetPerfMonitorCounterStringAMD.?(arg_3647, arg_3648, arg_3649, arg_3650, arg_3651);
}
pub inline fn glGetPerfMonitorCountersAMD(arg_3652: GLuint, arg_3653: [*c]GLint, arg_3654: [*c]GLint, arg_3655: GLsizei, arg_3656: [*c]GLuint) void {
    return epoxy_glGetPerfMonitorCountersAMD.?(arg_3652, arg_3653, arg_3654, arg_3655, arg_3656);
}
pub inline fn glGetPerfMonitorGroupStringAMD(arg_3657: GLuint, arg_3658: GLsizei, arg_3659: [*c]GLsizei, arg_3660: [*c]GLchar) void {
    return epoxy_glGetPerfMonitorGroupStringAMD.?(arg_3657, arg_3658, arg_3659, arg_3660);
}
pub inline fn glGetPerfMonitorGroupsAMD(arg_3661: [*c]GLint, arg_3662: GLsizei, arg_3663: [*c]GLuint) void {
    return epoxy_glGetPerfMonitorGroupsAMD.?(arg_3661, arg_3662, arg_3663);
}
pub inline fn glGetPerfQueryDataINTEL(arg_3664: GLuint, arg_3665: GLuint, arg_3666: GLsizei, arg_3667: ?*anyopaque, arg_3668: [*c]GLuint) void {
    return epoxy_glGetPerfQueryDataINTEL.?(arg_3664, arg_3665, arg_3666, arg_3667, arg_3668);
}
pub inline fn glGetPerfQueryIdByNameINTEL(arg_3669: [*c]GLchar, arg_3670: [*c]GLuint) void {
    return epoxy_glGetPerfQueryIdByNameINTEL.?(arg_3669, arg_3670);
}
pub inline fn glGetPerfQueryInfoINTEL(arg_3671: GLuint, arg_3672: GLuint, arg_3673: [*c]GLchar, arg_3674: [*c]GLuint, arg_3675: [*c]GLuint, arg_3676: [*c]GLuint, arg_3677: [*c]GLuint) void {
    return epoxy_glGetPerfQueryInfoINTEL.?(arg_3671, arg_3672, arg_3673, arg_3674, arg_3675, arg_3676, arg_3677);
}
pub inline fn glGetPixelMapfv(arg_3678: GLenum, arg_3679: [*c]GLfloat) void {
    return epoxy_glGetPixelMapfv.?(arg_3678, arg_3679);
}
pub inline fn glGetPixelMapuiv(arg_3680: GLenum, arg_3681: [*c]GLuint) void {
    return epoxy_glGetPixelMapuiv.?(arg_3680, arg_3681);
}
pub inline fn glGetPixelMapusv(arg_3682: GLenum, arg_3683: [*c]GLushort) void {
    return epoxy_glGetPixelMapusv.?(arg_3682, arg_3683);
}
pub inline fn glGetPixelMapxv(arg_3684: GLenum, arg_3685: GLint, arg_3686: [*c]GLfixed) void {
    return epoxy_glGetPixelMapxv.?(arg_3684, arg_3685, arg_3686);
}
pub inline fn glGetPixelTexGenParameterfvSGIS(arg_3687: GLenum, arg_3688: [*c]GLfloat) void {
    return epoxy_glGetPixelTexGenParameterfvSGIS.?(arg_3687, arg_3688);
}
pub inline fn glGetPixelTexGenParameterivSGIS(arg_3689: GLenum, arg_3690: [*c]GLint) void {
    return epoxy_glGetPixelTexGenParameterivSGIS.?(arg_3689, arg_3690);
}
pub inline fn glGetPixelTransformParameterfvEXT(arg_3691: GLenum, arg_3692: GLenum, arg_3693: [*c]GLfloat) void {
    return epoxy_glGetPixelTransformParameterfvEXT.?(arg_3691, arg_3692, arg_3693);
}
pub inline fn glGetPixelTransformParameterivEXT(arg_3694: GLenum, arg_3695: GLenum, arg_3696: [*c]GLint) void {
    return epoxy_glGetPixelTransformParameterivEXT.?(arg_3694, arg_3695, arg_3696);
}
pub inline fn glGetPointerIndexedvEXT(arg_3697: GLenum, arg_3698: GLuint, arg_3699: [*c]?*anyopaque) void {
    return epoxy_glGetPointerIndexedvEXT.?(arg_3697, arg_3698, arg_3699);
}
pub inline fn glGetPointeri_vEXT(arg_3700: GLenum, arg_3701: GLuint, arg_3702: [*c]?*anyopaque) void {
    return epoxy_glGetPointeri_vEXT.?(arg_3700, arg_3701, arg_3702);
}
pub inline fn glGetPointerv(arg_3703: GLenum, arg_3704: [*c]?*anyopaque) void {
    return epoxy_glGetPointerv.?(arg_3703, arg_3704);
}
pub inline fn glGetPointervEXT(arg_3705: GLenum, arg_3706: [*c]?*anyopaque) void {
    return epoxy_glGetPointervEXT.?(arg_3705, arg_3706);
}
pub inline fn glGetPointervKHR(arg_3707: GLenum, arg_3708: [*c]?*anyopaque) void {
    return epoxy_glGetPointervKHR.?(arg_3707, arg_3708);
}
pub inline fn glGetPolygonStipple(arg_3709: [*c]GLubyte) void {
    return epoxy_glGetPolygonStipple.?(arg_3709);
}
pub inline fn glGetProgramBinary(arg_3710: GLuint, arg_3711: GLsizei, arg_3712: [*c]GLsizei, arg_3713: [*c]GLenum, arg_3714: ?*anyopaque) void {
    return epoxy_glGetProgramBinary.?(arg_3710, arg_3711, arg_3712, arg_3713, arg_3714);
}
pub inline fn glGetProgramBinaryOES(arg_3715: GLuint, arg_3716: GLsizei, arg_3717: [*c]GLsizei, arg_3718: [*c]GLenum, arg_3719: ?*anyopaque) void {
    return epoxy_glGetProgramBinaryOES.?(arg_3715, arg_3716, arg_3717, arg_3718, arg_3719);
}
pub inline fn glGetProgramEnvParameterIivNV(arg_3720: GLenum, arg_3721: GLuint, arg_3722: [*c]GLint) void {
    return epoxy_glGetProgramEnvParameterIivNV.?(arg_3720, arg_3721, arg_3722);
}
pub inline fn glGetProgramEnvParameterIuivNV(arg_3723: GLenum, arg_3724: GLuint, arg_3725: [*c]GLuint) void {
    return epoxy_glGetProgramEnvParameterIuivNV.?(arg_3723, arg_3724, arg_3725);
}
pub inline fn glGetProgramEnvParameterdvARB(arg_3726: GLenum, arg_3727: GLuint, arg_3728: [*c]GLdouble) void {
    return epoxy_glGetProgramEnvParameterdvARB.?(arg_3726, arg_3727, arg_3728);
}
pub inline fn glGetProgramEnvParameterfvARB(arg_3729: GLenum, arg_3730: GLuint, arg_3731: [*c]GLfloat) void {
    return epoxy_glGetProgramEnvParameterfvARB.?(arg_3729, arg_3730, arg_3731);
}
pub inline fn glGetProgramInfoLog(arg_3732: GLuint, arg_3733: GLsizei, arg_3734: [*c]GLsizei, arg_3735: [*c]GLchar) void {
    return epoxy_glGetProgramInfoLog.?(arg_3732, arg_3733, arg_3734, arg_3735);
}
pub inline fn glGetProgramInterfaceiv(arg_3736: GLuint, arg_3737: GLenum, arg_3738: GLenum, arg_3739: [*c]GLint) void {
    return epoxy_glGetProgramInterfaceiv.?(arg_3736, arg_3737, arg_3738, arg_3739);
}
pub inline fn glGetProgramLocalParameterIivNV(arg_3740: GLenum, arg_3741: GLuint, arg_3742: [*c]GLint) void {
    return epoxy_glGetProgramLocalParameterIivNV.?(arg_3740, arg_3741, arg_3742);
}
pub inline fn glGetProgramLocalParameterIuivNV(arg_3743: GLenum, arg_3744: GLuint, arg_3745: [*c]GLuint) void {
    return epoxy_glGetProgramLocalParameterIuivNV.?(arg_3743, arg_3744, arg_3745);
}
pub inline fn glGetProgramLocalParameterdvARB(arg_3746: GLenum, arg_3747: GLuint, arg_3748: [*c]GLdouble) void {
    return epoxy_glGetProgramLocalParameterdvARB.?(arg_3746, arg_3747, arg_3748);
}
pub inline fn glGetProgramLocalParameterfvARB(arg_3749: GLenum, arg_3750: GLuint, arg_3751: [*c]GLfloat) void {
    return epoxy_glGetProgramLocalParameterfvARB.?(arg_3749, arg_3750, arg_3751);
}
pub inline fn glGetProgramNamedParameterdvNV(arg_3752: GLuint, arg_3753: GLsizei, arg_3754: [*c]const GLubyte, arg_3755: [*c]GLdouble) void {
    return epoxy_glGetProgramNamedParameterdvNV.?(arg_3752, arg_3753, arg_3754, arg_3755);
}
pub inline fn glGetProgramNamedParameterfvNV(arg_3756: GLuint, arg_3757: GLsizei, arg_3758: [*c]const GLubyte, arg_3759: [*c]GLfloat) void {
    return epoxy_glGetProgramNamedParameterfvNV.?(arg_3756, arg_3757, arg_3758, arg_3759);
}
pub inline fn glGetProgramParameterdvNV(arg_3760: GLenum, arg_3761: GLuint, arg_3762: GLenum, arg_3763: [*c]GLdouble) void {
    return epoxy_glGetProgramParameterdvNV.?(arg_3760, arg_3761, arg_3762, arg_3763);
}
pub inline fn glGetProgramParameterfvNV(arg_3764: GLenum, arg_3765: GLuint, arg_3766: GLenum, arg_3767: [*c]GLfloat) void {
    return epoxy_glGetProgramParameterfvNV.?(arg_3764, arg_3765, arg_3766, arg_3767);
}
pub inline fn glGetProgramPipelineInfoLog(arg_3768: GLuint, arg_3769: GLsizei, arg_3770: [*c]GLsizei, arg_3771: [*c]GLchar) void {
    return epoxy_glGetProgramPipelineInfoLog.?(arg_3768, arg_3769, arg_3770, arg_3771);
}
pub inline fn glGetProgramPipelineInfoLogEXT(arg_3772: GLuint, arg_3773: GLsizei, arg_3774: [*c]GLsizei, arg_3775: [*c]GLchar) void {
    return epoxy_glGetProgramPipelineInfoLogEXT.?(arg_3772, arg_3773, arg_3774, arg_3775);
}
pub inline fn glGetProgramPipelineiv(arg_3776: GLuint, arg_3777: GLenum, arg_3778: [*c]GLint) void {
    return epoxy_glGetProgramPipelineiv.?(arg_3776, arg_3777, arg_3778);
}
pub inline fn glGetProgramPipelineivEXT(arg_3779: GLuint, arg_3780: GLenum, arg_3781: [*c]GLint) void {
    return epoxy_glGetProgramPipelineivEXT.?(arg_3779, arg_3780, arg_3781);
}
pub inline fn glGetProgramResourceIndex(arg_3782: GLuint, arg_3783: GLenum, arg_3784: [*c]const GLchar) GLuint {
    return epoxy_glGetProgramResourceIndex.?(arg_3782, arg_3783, arg_3784);
}
pub inline fn glGetProgramResourceLocation(arg_3785: GLuint, arg_3786: GLenum, arg_3787: [*c]const GLchar) GLint {
    return epoxy_glGetProgramResourceLocation.?(arg_3785, arg_3786, arg_3787);
}
pub inline fn glGetProgramResourceLocationIndex(arg_3788: GLuint, arg_3789: GLenum, arg_3790: [*c]const GLchar) GLint {
    return epoxy_glGetProgramResourceLocationIndex.?(arg_3788, arg_3789, arg_3790);
}
pub inline fn glGetProgramResourceLocationIndexEXT(arg_3791: GLuint, arg_3792: GLenum, arg_3793: [*c]const GLchar) GLint {
    return epoxy_glGetProgramResourceLocationIndexEXT.?(arg_3791, arg_3792, arg_3793);
}
pub inline fn glGetProgramResourceName(arg_3794: GLuint, arg_3795: GLenum, arg_3796: GLuint, arg_3797: GLsizei, arg_3798: [*c]GLsizei, arg_3799: [*c]GLchar) void {
    return epoxy_glGetProgramResourceName.?(arg_3794, arg_3795, arg_3796, arg_3797, arg_3798, arg_3799);
}
pub inline fn glGetProgramResourcefvNV(arg_3800: GLuint, arg_3801: GLenum, arg_3802: GLuint, arg_3803: GLsizei, arg_3804: [*c]const GLenum, arg_3805: GLsizei, arg_3806: [*c]GLsizei, arg_3807: [*c]GLfloat) void {
    return epoxy_glGetProgramResourcefvNV.?(arg_3800, arg_3801, arg_3802, arg_3803, arg_3804, arg_3805, arg_3806, arg_3807);
}
pub inline fn glGetProgramResourceiv(arg_3808: GLuint, arg_3809: GLenum, arg_3810: GLuint, arg_3811: GLsizei, arg_3812: [*c]const GLenum, arg_3813: GLsizei, arg_3814: [*c]GLsizei, arg_3815: [*c]GLint) void {
    return epoxy_glGetProgramResourceiv.?(arg_3808, arg_3809, arg_3810, arg_3811, arg_3812, arg_3813, arg_3814, arg_3815);
}
pub inline fn glGetProgramStageiv(arg_3816: GLuint, arg_3817: GLenum, arg_3818: GLenum, arg_3819: [*c]GLint) void {
    return epoxy_glGetProgramStageiv.?(arg_3816, arg_3817, arg_3818, arg_3819);
}
pub inline fn glGetProgramStringARB(arg_3820: GLenum, arg_3821: GLenum, arg_3822: ?*anyopaque) void {
    return epoxy_glGetProgramStringARB.?(arg_3820, arg_3821, arg_3822);
}
pub inline fn glGetProgramStringNV(arg_3823: GLuint, arg_3824: GLenum, arg_3825: [*c]GLubyte) void {
    return epoxy_glGetProgramStringNV.?(arg_3823, arg_3824, arg_3825);
}
pub inline fn glGetProgramSubroutineParameteruivNV(arg_3826: GLenum, arg_3827: GLuint, arg_3828: [*c]GLuint) void {
    return epoxy_glGetProgramSubroutineParameteruivNV.?(arg_3826, arg_3827, arg_3828);
}
pub inline fn glGetProgramiv(arg_3829: GLuint, arg_3830: GLenum, arg_3831: [*c]GLint) void {
    return epoxy_glGetProgramiv.?(arg_3829, arg_3830, arg_3831);
}
pub inline fn glGetProgramivARB(arg_3832: GLenum, arg_3833: GLenum, arg_3834: [*c]GLint) void {
    return epoxy_glGetProgramivARB.?(arg_3832, arg_3833, arg_3834);
}
pub inline fn glGetProgramivNV(arg_3835: GLuint, arg_3836: GLenum, arg_3837: [*c]GLint) void {
    return epoxy_glGetProgramivNV.?(arg_3835, arg_3836, arg_3837);
}
pub inline fn glGetQueryBufferObjecti64v(arg_3838: GLuint, arg_3839: GLuint, arg_3840: GLenum, arg_3841: GLintptr) void {
    return epoxy_glGetQueryBufferObjecti64v.?(arg_3838, arg_3839, arg_3840, arg_3841);
}
pub inline fn glGetQueryBufferObjectiv(arg_3842: GLuint, arg_3843: GLuint, arg_3844: GLenum, arg_3845: GLintptr) void {
    return epoxy_glGetQueryBufferObjectiv.?(arg_3842, arg_3843, arg_3844, arg_3845);
}
pub inline fn glGetQueryBufferObjectui64v(arg_3846: GLuint, arg_3847: GLuint, arg_3848: GLenum, arg_3849: GLintptr) void {
    return epoxy_glGetQueryBufferObjectui64v.?(arg_3846, arg_3847, arg_3848, arg_3849);
}
pub inline fn glGetQueryBufferObjectuiv(arg_3850: GLuint, arg_3851: GLuint, arg_3852: GLenum, arg_3853: GLintptr) void {
    return epoxy_glGetQueryBufferObjectuiv.?(arg_3850, arg_3851, arg_3852, arg_3853);
}
pub inline fn glGetQueryIndexediv(arg_3854: GLenum, arg_3855: GLuint, arg_3856: GLenum, arg_3857: [*c]GLint) void {
    return epoxy_glGetQueryIndexediv.?(arg_3854, arg_3855, arg_3856, arg_3857);
}
pub inline fn glGetQueryObjecti64v(arg_3858: GLuint, arg_3859: GLenum, arg_3860: [*c]GLint64) void {
    return epoxy_glGetQueryObjecti64v.?(arg_3858, arg_3859, arg_3860);
}
pub inline fn glGetQueryObjecti64vEXT(arg_3861: GLuint, arg_3862: GLenum, arg_3863: [*c]GLint64) void {
    return epoxy_glGetQueryObjecti64vEXT.?(arg_3861, arg_3862, arg_3863);
}
pub inline fn glGetQueryObjectiv(arg_3864: GLuint, arg_3865: GLenum, arg_3866: [*c]GLint) void {
    return epoxy_glGetQueryObjectiv.?(arg_3864, arg_3865, arg_3866);
}
pub inline fn glGetQueryObjectivARB(arg_3867: GLuint, arg_3868: GLenum, arg_3869: [*c]GLint) void {
    return epoxy_glGetQueryObjectivARB.?(arg_3867, arg_3868, arg_3869);
}
pub inline fn glGetQueryObjectivEXT(arg_3870: GLuint, arg_3871: GLenum, arg_3872: [*c]GLint) void {
    return epoxy_glGetQueryObjectivEXT.?(arg_3870, arg_3871, arg_3872);
}
pub inline fn glGetQueryObjectui64v(arg_3873: GLuint, arg_3874: GLenum, arg_3875: [*c]GLuint64) void {
    return epoxy_glGetQueryObjectui64v.?(arg_3873, arg_3874, arg_3875);
}
pub inline fn glGetQueryObjectui64vEXT(arg_3876: GLuint, arg_3877: GLenum, arg_3878: [*c]GLuint64) void {
    return epoxy_glGetQueryObjectui64vEXT.?(arg_3876, arg_3877, arg_3878);
}
pub inline fn glGetQueryObjectuiv(arg_3879: GLuint, arg_3880: GLenum, arg_3881: [*c]GLuint) void {
    return epoxy_glGetQueryObjectuiv.?(arg_3879, arg_3880, arg_3881);
}
pub inline fn glGetQueryObjectuivARB(arg_3882: GLuint, arg_3883: GLenum, arg_3884: [*c]GLuint) void {
    return epoxy_glGetQueryObjectuivARB.?(arg_3882, arg_3883, arg_3884);
}
pub inline fn glGetQueryObjectuivEXT(arg_3885: GLuint, arg_3886: GLenum, arg_3887: [*c]GLuint) void {
    return epoxy_glGetQueryObjectuivEXT.?(arg_3885, arg_3886, arg_3887);
}
pub inline fn glGetQueryiv(arg_3888: GLenum, arg_3889: GLenum, arg_3890: [*c]GLint) void {
    return epoxy_glGetQueryiv.?(arg_3888, arg_3889, arg_3890);
}
pub inline fn glGetQueryivARB(arg_3891: GLenum, arg_3892: GLenum, arg_3893: [*c]GLint) void {
    return epoxy_glGetQueryivARB.?(arg_3891, arg_3892, arg_3893);
}
pub inline fn glGetQueryivEXT(arg_3894: GLenum, arg_3895: GLenum, arg_3896: [*c]GLint) void {
    return epoxy_glGetQueryivEXT.?(arg_3894, arg_3895, arg_3896);
}
pub inline fn glGetRenderbufferParameteriv(arg_3897: GLenum, arg_3898: GLenum, arg_3899: [*c]GLint) void {
    return epoxy_glGetRenderbufferParameteriv.?(arg_3897, arg_3898, arg_3899);
}
pub inline fn glGetRenderbufferParameterivEXT(arg_3900: GLenum, arg_3901: GLenum, arg_3902: [*c]GLint) void {
    return epoxy_glGetRenderbufferParameterivEXT.?(arg_3900, arg_3901, arg_3902);
}
pub inline fn glGetRenderbufferParameterivOES(arg_3903: GLenum, arg_3904: GLenum, arg_3905: [*c]GLint) void {
    return epoxy_glGetRenderbufferParameterivOES.?(arg_3903, arg_3904, arg_3905);
}
pub inline fn glGetSamplerParameterIiv(arg_3906: GLuint, arg_3907: GLenum, arg_3908: [*c]GLint) void {
    return epoxy_glGetSamplerParameterIiv.?(arg_3906, arg_3907, arg_3908);
}
pub inline fn glGetSamplerParameterIivEXT(arg_3909: GLuint, arg_3910: GLenum, arg_3911: [*c]GLint) void {
    return epoxy_glGetSamplerParameterIivEXT.?(arg_3909, arg_3910, arg_3911);
}
pub inline fn glGetSamplerParameterIivOES(arg_3912: GLuint, arg_3913: GLenum, arg_3914: [*c]GLint) void {
    return epoxy_glGetSamplerParameterIivOES.?(arg_3912, arg_3913, arg_3914);
}
pub inline fn glGetSamplerParameterIuiv(arg_3915: GLuint, arg_3916: GLenum, arg_3917: [*c]GLuint) void {
    return epoxy_glGetSamplerParameterIuiv.?(arg_3915, arg_3916, arg_3917);
}
pub inline fn glGetSamplerParameterIuivEXT(arg_3918: GLuint, arg_3919: GLenum, arg_3920: [*c]GLuint) void {
    return epoxy_glGetSamplerParameterIuivEXT.?(arg_3918, arg_3919, arg_3920);
}
pub inline fn glGetSamplerParameterIuivOES(arg_3921: GLuint, arg_3922: GLenum, arg_3923: [*c]GLuint) void {
    return epoxy_glGetSamplerParameterIuivOES.?(arg_3921, arg_3922, arg_3923);
}
pub inline fn glGetSamplerParameterfv(arg_3924: GLuint, arg_3925: GLenum, arg_3926: [*c]GLfloat) void {
    return epoxy_glGetSamplerParameterfv.?(arg_3924, arg_3925, arg_3926);
}
pub inline fn glGetSamplerParameteriv(arg_3927: GLuint, arg_3928: GLenum, arg_3929: [*c]GLint) void {
    return epoxy_glGetSamplerParameteriv.?(arg_3927, arg_3928, arg_3929);
}
pub inline fn glGetSemaphoreParameterui64vEXT(arg_3930: GLuint, arg_3931: GLenum, arg_3932: [*c]GLuint64) void {
    return epoxy_glGetSemaphoreParameterui64vEXT.?(arg_3930, arg_3931, arg_3932);
}
pub inline fn glGetSeparableFilter(arg_3933: GLenum, arg_3934: GLenum, arg_3935: GLenum, arg_3936: ?*anyopaque, arg_3937: ?*anyopaque, arg_3938: ?*anyopaque) void {
    return epoxy_glGetSeparableFilter.?(arg_3933, arg_3934, arg_3935, arg_3936, arg_3937, arg_3938);
}
pub inline fn glGetSeparableFilterEXT(arg_3939: GLenum, arg_3940: GLenum, arg_3941: GLenum, arg_3942: ?*anyopaque, arg_3943: ?*anyopaque, arg_3944: ?*anyopaque) void {
    return epoxy_glGetSeparableFilterEXT.?(arg_3939, arg_3940, arg_3941, arg_3942, arg_3943, arg_3944);
}
pub inline fn glGetShaderInfoLog(arg_3945: GLuint, arg_3946: GLsizei, arg_3947: [*c]GLsizei, arg_3948: [*c]GLchar) void {
    return epoxy_glGetShaderInfoLog.?(arg_3945, arg_3946, arg_3947, arg_3948);
}
pub inline fn glGetShaderPrecisionFormat(arg_3949: GLenum, arg_3950: GLenum, arg_3951: [*c]GLint, arg_3952: [*c]GLint) void {
    return epoxy_glGetShaderPrecisionFormat.?(arg_3949, arg_3950, arg_3951, arg_3952);
}
pub inline fn glGetShaderSource(arg_3953: GLuint, arg_3954: GLsizei, arg_3955: [*c]GLsizei, arg_3956: [*c]GLchar) void {
    return epoxy_glGetShaderSource.?(arg_3953, arg_3954, arg_3955, arg_3956);
}
pub inline fn glGetShaderSourceARB(arg_3957: GLhandleARB, arg_3958: GLsizei, arg_3959: [*c]GLsizei, arg_3960: [*c]GLcharARB) void {
    return epoxy_glGetShaderSourceARB.?(arg_3957, arg_3958, arg_3959, arg_3960);
}
pub inline fn glGetShaderiv(arg_3961: GLuint, arg_3962: GLenum, arg_3963: [*c]GLint) void {
    return epoxy_glGetShaderiv.?(arg_3961, arg_3962, arg_3963);
}
pub inline fn glGetShadingRateImagePaletteNV(arg_3964: GLuint, arg_3965: GLuint, arg_3966: [*c]GLenum) void {
    return epoxy_glGetShadingRateImagePaletteNV.?(arg_3964, arg_3965, arg_3966);
}
pub inline fn glGetShadingRateSampleLocationivNV(arg_3967: GLenum, arg_3968: GLuint, arg_3969: GLuint, arg_3970: [*c]GLint) void {
    return epoxy_glGetShadingRateSampleLocationivNV.?(arg_3967, arg_3968, arg_3969, arg_3970);
}
pub inline fn glGetSharpenTexFuncSGIS(arg_3971: GLenum, arg_3972: [*c]GLfloat) void {
    return epoxy_glGetSharpenTexFuncSGIS.?(arg_3971, arg_3972);
}
pub inline fn glGetStageIndexNV(arg_3973: GLenum) GLushort {
    return epoxy_glGetStageIndexNV.?(arg_3973);
}
pub inline fn glGetString(arg_3974: GLenum) [*c]const GLubyte {
    return epoxy_glGetString.?(arg_3974);
}
pub inline fn glGetStringi(arg_3975: GLenum, arg_3976: GLuint) [*c]const GLubyte {
    return epoxy_glGetStringi.?(arg_3975, arg_3976);
}
pub inline fn glGetSubroutineIndex(arg_3977: GLuint, arg_3978: GLenum, arg_3979: [*c]const GLchar) GLuint {
    return epoxy_glGetSubroutineIndex.?(arg_3977, arg_3978, arg_3979);
}
pub inline fn glGetSubroutineUniformLocation(arg_3980: GLuint, arg_3981: GLenum, arg_3982: [*c]const GLchar) GLint {
    return epoxy_glGetSubroutineUniformLocation.?(arg_3980, arg_3981, arg_3982);
}
pub inline fn glGetSynciv(arg_3983: GLsync, arg_3984: GLenum, arg_3985: GLsizei, arg_3986: [*c]GLsizei, arg_3987: [*c]GLint) void {
    return epoxy_glGetSynciv.?(arg_3983, arg_3984, arg_3985, arg_3986, arg_3987);
}
pub inline fn glGetSyncivAPPLE(arg_3988: GLsync, arg_3989: GLenum, arg_3990: GLsizei, arg_3991: [*c]GLsizei, arg_3992: [*c]GLint) void {
    return epoxy_glGetSyncivAPPLE.?(arg_3988, arg_3989, arg_3990, arg_3991, arg_3992);
}
pub inline fn glGetTexBumpParameterfvATI(arg_3993: GLenum, arg_3994: [*c]GLfloat) void {
    return epoxy_glGetTexBumpParameterfvATI.?(arg_3993, arg_3994);
}
pub inline fn glGetTexBumpParameterivATI(arg_3995: GLenum, arg_3996: [*c]GLint) void {
    return epoxy_glGetTexBumpParameterivATI.?(arg_3995, arg_3996);
}
pub inline fn glGetTexEnvfv(arg_3997: GLenum, arg_3998: GLenum, arg_3999: [*c]GLfloat) void {
    return epoxy_glGetTexEnvfv.?(arg_3997, arg_3998, arg_3999);
}
pub inline fn glGetTexEnviv(arg_4000: GLenum, arg_4001: GLenum, arg_4002: [*c]GLint) void {
    return epoxy_glGetTexEnviv.?(arg_4000, arg_4001, arg_4002);
}
pub inline fn glGetTexEnvxv(arg_4003: GLenum, arg_4004: GLenum, arg_4005: [*c]GLfixed) void {
    return epoxy_glGetTexEnvxv.?(arg_4003, arg_4004, arg_4005);
}
pub inline fn glGetTexEnvxvOES(arg_4006: GLenum, arg_4007: GLenum, arg_4008: [*c]GLfixed) void {
    return epoxy_glGetTexEnvxvOES.?(arg_4006, arg_4007, arg_4008);
}
pub inline fn glGetTexFilterFuncSGIS(arg_4009: GLenum, arg_4010: GLenum, arg_4011: [*c]GLfloat) void {
    return epoxy_glGetTexFilterFuncSGIS.?(arg_4009, arg_4010, arg_4011);
}
pub inline fn glGetTexGendv(arg_4012: GLenum, arg_4013: GLenum, arg_4014: [*c]GLdouble) void {
    return epoxy_glGetTexGendv.?(arg_4012, arg_4013, arg_4014);
}
pub inline fn glGetTexGenfv(arg_4015: GLenum, arg_4016: GLenum, arg_4017: [*c]GLfloat) void {
    return epoxy_glGetTexGenfv.?(arg_4015, arg_4016, arg_4017);
}
pub inline fn glGetTexGenfvOES(arg_4018: GLenum, arg_4019: GLenum, arg_4020: [*c]GLfloat) void {
    return epoxy_glGetTexGenfvOES.?(arg_4018, arg_4019, arg_4020);
}
pub inline fn glGetTexGeniv(arg_4021: GLenum, arg_4022: GLenum, arg_4023: [*c]GLint) void {
    return epoxy_glGetTexGeniv.?(arg_4021, arg_4022, arg_4023);
}
pub inline fn glGetTexGenivOES(arg_4024: GLenum, arg_4025: GLenum, arg_4026: [*c]GLint) void {
    return epoxy_glGetTexGenivOES.?(arg_4024, arg_4025, arg_4026);
}
pub inline fn glGetTexGenxvOES(arg_4027: GLenum, arg_4028: GLenum, arg_4029: [*c]GLfixed) void {
    return epoxy_glGetTexGenxvOES.?(arg_4027, arg_4028, arg_4029);
}
pub inline fn glGetTexImage(arg_4030: GLenum, arg_4031: GLint, arg_4032: GLenum, arg_4033: GLenum, arg_4034: ?*anyopaque) void {
    return epoxy_glGetTexImage.?(arg_4030, arg_4031, arg_4032, arg_4033, arg_4034);
}
pub inline fn glGetTexLevelParameterfv(arg_4035: GLenum, arg_4036: GLint, arg_4037: GLenum, arg_4038: [*c]GLfloat) void {
    return epoxy_glGetTexLevelParameterfv.?(arg_4035, arg_4036, arg_4037, arg_4038);
}
pub inline fn glGetTexLevelParameteriv(arg_4039: GLenum, arg_4040: GLint, arg_4041: GLenum, arg_4042: [*c]GLint) void {
    return epoxy_glGetTexLevelParameteriv.?(arg_4039, arg_4040, arg_4041, arg_4042);
}
pub inline fn glGetTexLevelParameterxvOES(arg_4043: GLenum, arg_4044: GLint, arg_4045: GLenum, arg_4046: [*c]GLfixed) void {
    return epoxy_glGetTexLevelParameterxvOES.?(arg_4043, arg_4044, arg_4045, arg_4046);
}
pub inline fn glGetTexParameterIiv(arg_4047: GLenum, arg_4048: GLenum, arg_4049: [*c]GLint) void {
    return epoxy_glGetTexParameterIiv.?(arg_4047, arg_4048, arg_4049);
}
pub inline fn glGetTexParameterIivEXT(arg_4050: GLenum, arg_4051: GLenum, arg_4052: [*c]GLint) void {
    return epoxy_glGetTexParameterIivEXT.?(arg_4050, arg_4051, arg_4052);
}
pub inline fn glGetTexParameterIivOES(arg_4053: GLenum, arg_4054: GLenum, arg_4055: [*c]GLint) void {
    return epoxy_glGetTexParameterIivOES.?(arg_4053, arg_4054, arg_4055);
}
pub inline fn glGetTexParameterIuiv(arg_4056: GLenum, arg_4057: GLenum, arg_4058: [*c]GLuint) void {
    return epoxy_glGetTexParameterIuiv.?(arg_4056, arg_4057, arg_4058);
}
pub inline fn glGetTexParameterIuivEXT(arg_4059: GLenum, arg_4060: GLenum, arg_4061: [*c]GLuint) void {
    return epoxy_glGetTexParameterIuivEXT.?(arg_4059, arg_4060, arg_4061);
}
pub inline fn glGetTexParameterIuivOES(arg_4062: GLenum, arg_4063: GLenum, arg_4064: [*c]GLuint) void {
    return epoxy_glGetTexParameterIuivOES.?(arg_4062, arg_4063, arg_4064);
}
pub inline fn glGetTexParameterPointervAPPLE(arg_4065: GLenum, arg_4066: GLenum, arg_4067: [*c]?*anyopaque) void {
    return epoxy_glGetTexParameterPointervAPPLE.?(arg_4065, arg_4066, arg_4067);
}
pub inline fn glGetTexParameterfv(arg_4068: GLenum, arg_4069: GLenum, arg_4070: [*c]GLfloat) void {
    return epoxy_glGetTexParameterfv.?(arg_4068, arg_4069, arg_4070);
}
pub inline fn glGetTexParameteriv(arg_4071: GLenum, arg_4072: GLenum, arg_4073: [*c]GLint) void {
    return epoxy_glGetTexParameteriv.?(arg_4071, arg_4072, arg_4073);
}
pub inline fn glGetTexParameterxv(arg_4074: GLenum, arg_4075: GLenum, arg_4076: [*c]GLfixed) void {
    return epoxy_glGetTexParameterxv.?(arg_4074, arg_4075, arg_4076);
}
pub inline fn glGetTexParameterxvOES(arg_4077: GLenum, arg_4078: GLenum, arg_4079: [*c]GLfixed) void {
    return epoxy_glGetTexParameterxvOES.?(arg_4077, arg_4078, arg_4079);
}
pub inline fn glGetTextureHandleARB(arg_4080: GLuint) GLuint64 {
    return epoxy_glGetTextureHandleARB.?(arg_4080);
}
pub inline fn glGetTextureHandleIMG(arg_4081: GLuint) GLuint64 {
    return epoxy_glGetTextureHandleIMG.?(arg_4081);
}
pub inline fn glGetTextureHandleNV(arg_4082: GLuint) GLuint64 {
    return epoxy_glGetTextureHandleNV.?(arg_4082);
}
pub inline fn glGetTextureImage(arg_4083: GLuint, arg_4084: GLint, arg_4085: GLenum, arg_4086: GLenum, arg_4087: GLsizei, arg_4088: ?*anyopaque) void {
    return epoxy_glGetTextureImage.?(arg_4083, arg_4084, arg_4085, arg_4086, arg_4087, arg_4088);
}
pub inline fn glGetTextureImageEXT(arg_4089: GLuint, arg_4090: GLenum, arg_4091: GLint, arg_4092: GLenum, arg_4093: GLenum, arg_4094: ?*anyopaque) void {
    return epoxy_glGetTextureImageEXT.?(arg_4089, arg_4090, arg_4091, arg_4092, arg_4093, arg_4094);
}
pub inline fn glGetTextureLevelParameterfv(arg_4095: GLuint, arg_4096: GLint, arg_4097: GLenum, arg_4098: [*c]GLfloat) void {
    return epoxy_glGetTextureLevelParameterfv.?(arg_4095, arg_4096, arg_4097, arg_4098);
}
pub inline fn glGetTextureLevelParameterfvEXT(arg_4099: GLuint, arg_4100: GLenum, arg_4101: GLint, arg_4102: GLenum, arg_4103: [*c]GLfloat) void {
    return epoxy_glGetTextureLevelParameterfvEXT.?(arg_4099, arg_4100, arg_4101, arg_4102, arg_4103);
}
pub inline fn glGetTextureLevelParameteriv(arg_4104: GLuint, arg_4105: GLint, arg_4106: GLenum, arg_4107: [*c]GLint) void {
    return epoxy_glGetTextureLevelParameteriv.?(arg_4104, arg_4105, arg_4106, arg_4107);
}
pub inline fn glGetTextureLevelParameterivEXT(arg_4108: GLuint, arg_4109: GLenum, arg_4110: GLint, arg_4111: GLenum, arg_4112: [*c]GLint) void {
    return epoxy_glGetTextureLevelParameterivEXT.?(arg_4108, arg_4109, arg_4110, arg_4111, arg_4112);
}
pub inline fn glGetTextureParameterIiv(arg_4113: GLuint, arg_4114: GLenum, arg_4115: [*c]GLint) void {
    return epoxy_glGetTextureParameterIiv.?(arg_4113, arg_4114, arg_4115);
}
pub inline fn glGetTextureParameterIivEXT(arg_4116: GLuint, arg_4117: GLenum, arg_4118: GLenum, arg_4119: [*c]GLint) void {
    return epoxy_glGetTextureParameterIivEXT.?(arg_4116, arg_4117, arg_4118, arg_4119);
}
pub inline fn glGetTextureParameterIuiv(arg_4120: GLuint, arg_4121: GLenum, arg_4122: [*c]GLuint) void {
    return epoxy_glGetTextureParameterIuiv.?(arg_4120, arg_4121, arg_4122);
}
pub inline fn glGetTextureParameterIuivEXT(arg_4123: GLuint, arg_4124: GLenum, arg_4125: GLenum, arg_4126: [*c]GLuint) void {
    return epoxy_glGetTextureParameterIuivEXT.?(arg_4123, arg_4124, arg_4125, arg_4126);
}
pub inline fn glGetTextureParameterfv(arg_4127: GLuint, arg_4128: GLenum, arg_4129: [*c]GLfloat) void {
    return epoxy_glGetTextureParameterfv.?(arg_4127, arg_4128, arg_4129);
}
pub inline fn glGetTextureParameterfvEXT(arg_4130: GLuint, arg_4131: GLenum, arg_4132: GLenum, arg_4133: [*c]GLfloat) void {
    return epoxy_glGetTextureParameterfvEXT.?(arg_4130, arg_4131, arg_4132, arg_4133);
}
pub inline fn glGetTextureParameteriv(arg_4134: GLuint, arg_4135: GLenum, arg_4136: [*c]GLint) void {
    return epoxy_glGetTextureParameteriv.?(arg_4134, arg_4135, arg_4136);
}
pub inline fn glGetTextureParameterivEXT(arg_4137: GLuint, arg_4138: GLenum, arg_4139: GLenum, arg_4140: [*c]GLint) void {
    return epoxy_glGetTextureParameterivEXT.?(arg_4137, arg_4138, arg_4139, arg_4140);
}
pub inline fn glGetTextureSamplerHandleARB(arg_4141: GLuint, arg_4142: GLuint) GLuint64 {
    return epoxy_glGetTextureSamplerHandleARB.?(arg_4141, arg_4142);
}
pub inline fn glGetTextureSamplerHandleIMG(arg_4143: GLuint, arg_4144: GLuint) GLuint64 {
    return epoxy_glGetTextureSamplerHandleIMG.?(arg_4143, arg_4144);
}
pub inline fn glGetTextureSamplerHandleNV(arg_4145: GLuint, arg_4146: GLuint) GLuint64 {
    return epoxy_glGetTextureSamplerHandleNV.?(arg_4145, arg_4146);
}
pub inline fn glGetTextureSubImage(arg_4147: GLuint, arg_4148: GLint, arg_4149: GLint, arg_4150: GLint, arg_4151: GLint, arg_4152: GLsizei, arg_4153: GLsizei, arg_4154: GLsizei, arg_4155: GLenum, arg_4156: GLenum, arg_4157: GLsizei, arg_4158: ?*anyopaque) void {
    return epoxy_glGetTextureSubImage.?(arg_4147, arg_4148, arg_4149, arg_4150, arg_4151, arg_4152, arg_4153, arg_4154, arg_4155, arg_4156, arg_4157, arg_4158);
}
pub inline fn glGetTrackMatrixivNV(arg_4159: GLenum, arg_4160: GLuint, arg_4161: GLenum, arg_4162: [*c]GLint) void {
    return epoxy_glGetTrackMatrixivNV.?(arg_4159, arg_4160, arg_4161, arg_4162);
}
pub inline fn glGetTransformFeedbackVarying(arg_4163: GLuint, arg_4164: GLuint, arg_4165: GLsizei, arg_4166: [*c]GLsizei, arg_4167: [*c]GLsizei, arg_4168: [*c]GLenum, arg_4169: [*c]GLchar) void {
    return epoxy_glGetTransformFeedbackVarying.?(arg_4163, arg_4164, arg_4165, arg_4166, arg_4167, arg_4168, arg_4169);
}
pub inline fn glGetTransformFeedbackVaryingEXT(arg_4170: GLuint, arg_4171: GLuint, arg_4172: GLsizei, arg_4173: [*c]GLsizei, arg_4174: [*c]GLsizei, arg_4175: [*c]GLenum, arg_4176: [*c]GLchar) void {
    return epoxy_glGetTransformFeedbackVaryingEXT.?(arg_4170, arg_4171, arg_4172, arg_4173, arg_4174, arg_4175, arg_4176);
}
pub inline fn glGetTransformFeedbackVaryingNV(arg_4177: GLuint, arg_4178: GLuint, arg_4179: [*c]GLint) void {
    return epoxy_glGetTransformFeedbackVaryingNV.?(arg_4177, arg_4178, arg_4179);
}
pub inline fn glGetTransformFeedbacki64_v(arg_4180: GLuint, arg_4181: GLenum, arg_4182: GLuint, arg_4183: [*c]GLint64) void {
    return epoxy_glGetTransformFeedbacki64_v.?(arg_4180, arg_4181, arg_4182, arg_4183);
}
pub inline fn glGetTransformFeedbacki_v(arg_4184: GLuint, arg_4185: GLenum, arg_4186: GLuint, arg_4187: [*c]GLint) void {
    return epoxy_glGetTransformFeedbacki_v.?(arg_4184, arg_4185, arg_4186, arg_4187);
}
pub inline fn glGetTransformFeedbackiv(arg_4188: GLuint, arg_4189: GLenum, arg_4190: [*c]GLint) void {
    return epoxy_glGetTransformFeedbackiv.?(arg_4188, arg_4189, arg_4190);
}
pub inline fn glGetTranslatedShaderSourceANGLE(arg_4191: GLuint, arg_4192: GLsizei, arg_4193: [*c]GLsizei, arg_4194: [*c]GLchar) void {
    return epoxy_glGetTranslatedShaderSourceANGLE.?(arg_4191, arg_4192, arg_4193, arg_4194);
}
pub inline fn glGetUniformBlockIndex(arg_4195: GLuint, arg_4196: [*c]const GLchar) GLuint {
    return epoxy_glGetUniformBlockIndex.?(arg_4195, arg_4196);
}
pub inline fn glGetUniformBufferSizeEXT(arg_4197: GLuint, arg_4198: GLint) GLint {
    return epoxy_glGetUniformBufferSizeEXT.?(arg_4197, arg_4198);
}
pub inline fn glGetUniformIndices(arg_4199: GLuint, arg_4200: GLsizei, arg_4201: [*c]const [*c]const GLchar, arg_4202: [*c]GLuint) void {
    return epoxy_glGetUniformIndices.?(arg_4199, arg_4200, arg_4201, arg_4202);
}
pub inline fn glGetUniformLocation(arg_4203: GLuint, arg_4204: [*c]const GLchar) GLint {
    return epoxy_glGetUniformLocation.?(arg_4203, arg_4204);
}
pub inline fn glGetUniformLocationARB(arg_4205: GLhandleARB, arg_4206: [*c]const GLcharARB) GLint {
    return epoxy_glGetUniformLocationARB.?(arg_4205, arg_4206);
}
pub inline fn glGetUniformOffsetEXT(arg_4207: GLuint, arg_4208: GLint) GLintptr {
    return epoxy_glGetUniformOffsetEXT.?(arg_4207, arg_4208);
}
pub inline fn glGetUniformSubroutineuiv(arg_4209: GLenum, arg_4210: GLint, arg_4211: [*c]GLuint) void {
    return epoxy_glGetUniformSubroutineuiv.?(arg_4209, arg_4210, arg_4211);
}
pub inline fn glGetUniformdv(arg_4212: GLuint, arg_4213: GLint, arg_4214: [*c]GLdouble) void {
    return epoxy_glGetUniformdv.?(arg_4212, arg_4213, arg_4214);
}
pub inline fn glGetUniformfv(arg_4215: GLuint, arg_4216: GLint, arg_4217: [*c]GLfloat) void {
    return epoxy_glGetUniformfv.?(arg_4215, arg_4216, arg_4217);
}
pub inline fn glGetUniformfvARB(arg_4218: GLhandleARB, arg_4219: GLint, arg_4220: [*c]GLfloat) void {
    return epoxy_glGetUniformfvARB.?(arg_4218, arg_4219, arg_4220);
}
pub inline fn glGetUniformi64vARB(arg_4221: GLuint, arg_4222: GLint, arg_4223: [*c]GLint64) void {
    return epoxy_glGetUniformi64vARB.?(arg_4221, arg_4222, arg_4223);
}
pub inline fn glGetUniformi64vNV(arg_4224: GLuint, arg_4225: GLint, arg_4226: [*c]GLint64EXT) void {
    return epoxy_glGetUniformi64vNV.?(arg_4224, arg_4225, arg_4226);
}
pub inline fn glGetUniformiv(arg_4227: GLuint, arg_4228: GLint, arg_4229: [*c]GLint) void {
    return epoxy_glGetUniformiv.?(arg_4227, arg_4228, arg_4229);
}
pub inline fn glGetUniformivARB(arg_4230: GLhandleARB, arg_4231: GLint, arg_4232: [*c]GLint) void {
    return epoxy_glGetUniformivARB.?(arg_4230, arg_4231, arg_4232);
}
pub inline fn glGetUniformui64vARB(arg_4233: GLuint, arg_4234: GLint, arg_4235: [*c]GLuint64) void {
    return epoxy_glGetUniformui64vARB.?(arg_4233, arg_4234, arg_4235);
}
pub inline fn glGetUniformui64vNV(arg_4236: GLuint, arg_4237: GLint, arg_4238: [*c]GLuint64EXT) void {
    return epoxy_glGetUniformui64vNV.?(arg_4236, arg_4237, arg_4238);
}
pub inline fn glGetUniformuiv(arg_4239: GLuint, arg_4240: GLint, arg_4241: [*c]GLuint) void {
    return epoxy_glGetUniformuiv.?(arg_4239, arg_4240, arg_4241);
}
pub inline fn glGetUniformuivEXT(arg_4242: GLuint, arg_4243: GLint, arg_4244: [*c]GLuint) void {
    return epoxy_glGetUniformuivEXT.?(arg_4242, arg_4243, arg_4244);
}
pub inline fn glGetUnsignedBytei_vEXT(arg_4245: GLenum, arg_4246: GLuint, arg_4247: [*c]GLubyte) void {
    return epoxy_glGetUnsignedBytei_vEXT.?(arg_4245, arg_4246, arg_4247);
}
pub inline fn glGetUnsignedBytevEXT(arg_4248: GLenum, arg_4249: [*c]GLubyte) void {
    return epoxy_glGetUnsignedBytevEXT.?(arg_4248, arg_4249);
}
pub inline fn glGetVariantArrayObjectfvATI(arg_4250: GLuint, arg_4251: GLenum, arg_4252: [*c]GLfloat) void {
    return epoxy_glGetVariantArrayObjectfvATI.?(arg_4250, arg_4251, arg_4252);
}
pub inline fn glGetVariantArrayObjectivATI(arg_4253: GLuint, arg_4254: GLenum, arg_4255: [*c]GLint) void {
    return epoxy_glGetVariantArrayObjectivATI.?(arg_4253, arg_4254, arg_4255);
}
pub inline fn glGetVariantBooleanvEXT(arg_4256: GLuint, arg_4257: GLenum, arg_4258: [*c]GLboolean) void {
    return epoxy_glGetVariantBooleanvEXT.?(arg_4256, arg_4257, arg_4258);
}
pub inline fn glGetVariantFloatvEXT(arg_4259: GLuint, arg_4260: GLenum, arg_4261: [*c]GLfloat) void {
    return epoxy_glGetVariantFloatvEXT.?(arg_4259, arg_4260, arg_4261);
}
pub inline fn glGetVariantIntegervEXT(arg_4262: GLuint, arg_4263: GLenum, arg_4264: [*c]GLint) void {
    return epoxy_glGetVariantIntegervEXT.?(arg_4262, arg_4263, arg_4264);
}
pub inline fn glGetVariantPointervEXT(arg_4265: GLuint, arg_4266: GLenum, arg_4267: [*c]?*anyopaque) void {
    return epoxy_glGetVariantPointervEXT.?(arg_4265, arg_4266, arg_4267);
}
pub inline fn glGetVaryingLocationNV(arg_4268: GLuint, arg_4269: [*c]const GLchar) GLint {
    return epoxy_glGetVaryingLocationNV.?(arg_4268, arg_4269);
}
pub inline fn glGetVertexArrayIndexed64iv(arg_4270: GLuint, arg_4271: GLuint, arg_4272: GLenum, arg_4273: [*c]GLint64) void {
    return epoxy_glGetVertexArrayIndexed64iv.?(arg_4270, arg_4271, arg_4272, arg_4273);
}
pub inline fn glGetVertexArrayIndexediv(arg_4274: GLuint, arg_4275: GLuint, arg_4276: GLenum, arg_4277: [*c]GLint) void {
    return epoxy_glGetVertexArrayIndexediv.?(arg_4274, arg_4275, arg_4276, arg_4277);
}
pub inline fn glGetVertexArrayIntegeri_vEXT(arg_4278: GLuint, arg_4279: GLuint, arg_4280: GLenum, arg_4281: [*c]GLint) void {
    return epoxy_glGetVertexArrayIntegeri_vEXT.?(arg_4278, arg_4279, arg_4280, arg_4281);
}
pub inline fn glGetVertexArrayIntegervEXT(arg_4282: GLuint, arg_4283: GLenum, arg_4284: [*c]GLint) void {
    return epoxy_glGetVertexArrayIntegervEXT.?(arg_4282, arg_4283, arg_4284);
}
pub inline fn glGetVertexArrayPointeri_vEXT(arg_4285: GLuint, arg_4286: GLuint, arg_4287: GLenum, arg_4288: [*c]?*anyopaque) void {
    return epoxy_glGetVertexArrayPointeri_vEXT.?(arg_4285, arg_4286, arg_4287, arg_4288);
}
pub inline fn glGetVertexArrayPointervEXT(arg_4289: GLuint, arg_4290: GLenum, arg_4291: [*c]?*anyopaque) void {
    return epoxy_glGetVertexArrayPointervEXT.?(arg_4289, arg_4290, arg_4291);
}
pub inline fn glGetVertexArrayiv(arg_4292: GLuint, arg_4293: GLenum, arg_4294: [*c]GLint) void {
    return epoxy_glGetVertexArrayiv.?(arg_4292, arg_4293, arg_4294);
}
pub inline fn glGetVertexAttribArrayObjectfvATI(arg_4295: GLuint, arg_4296: GLenum, arg_4297: [*c]GLfloat) void {
    return epoxy_glGetVertexAttribArrayObjectfvATI.?(arg_4295, arg_4296, arg_4297);
}
pub inline fn glGetVertexAttribArrayObjectivATI(arg_4298: GLuint, arg_4299: GLenum, arg_4300: [*c]GLint) void {
    return epoxy_glGetVertexAttribArrayObjectivATI.?(arg_4298, arg_4299, arg_4300);
}
pub inline fn glGetVertexAttribIiv(arg_4301: GLuint, arg_4302: GLenum, arg_4303: [*c]GLint) void {
    return epoxy_glGetVertexAttribIiv.?(arg_4301, arg_4302, arg_4303);
}
pub inline fn glGetVertexAttribIivEXT(arg_4304: GLuint, arg_4305: GLenum, arg_4306: [*c]GLint) void {
    return epoxy_glGetVertexAttribIivEXT.?(arg_4304, arg_4305, arg_4306);
}
pub inline fn glGetVertexAttribIuiv(arg_4307: GLuint, arg_4308: GLenum, arg_4309: [*c]GLuint) void {
    return epoxy_glGetVertexAttribIuiv.?(arg_4307, arg_4308, arg_4309);
}
pub inline fn glGetVertexAttribIuivEXT(arg_4310: GLuint, arg_4311: GLenum, arg_4312: [*c]GLuint) void {
    return epoxy_glGetVertexAttribIuivEXT.?(arg_4310, arg_4311, arg_4312);
}
pub inline fn glGetVertexAttribLdv(arg_4313: GLuint, arg_4314: GLenum, arg_4315: [*c]GLdouble) void {
    return epoxy_glGetVertexAttribLdv.?(arg_4313, arg_4314, arg_4315);
}
pub inline fn glGetVertexAttribLdvEXT(arg_4316: GLuint, arg_4317: GLenum, arg_4318: [*c]GLdouble) void {
    return epoxy_glGetVertexAttribLdvEXT.?(arg_4316, arg_4317, arg_4318);
}
pub inline fn glGetVertexAttribLi64vNV(arg_4319: GLuint, arg_4320: GLenum, arg_4321: [*c]GLint64EXT) void {
    return epoxy_glGetVertexAttribLi64vNV.?(arg_4319, arg_4320, arg_4321);
}
pub inline fn glGetVertexAttribLui64vARB(arg_4322: GLuint, arg_4323: GLenum, arg_4324: [*c]GLuint64EXT) void {
    return epoxy_glGetVertexAttribLui64vARB.?(arg_4322, arg_4323, arg_4324);
}
pub inline fn glGetVertexAttribLui64vNV(arg_4325: GLuint, arg_4326: GLenum, arg_4327: [*c]GLuint64EXT) void {
    return epoxy_glGetVertexAttribLui64vNV.?(arg_4325, arg_4326, arg_4327);
}
pub inline fn glGetVertexAttribPointerv(arg_4328: GLuint, arg_4329: GLenum, arg_4330: [*c]?*anyopaque) void {
    return epoxy_glGetVertexAttribPointerv.?(arg_4328, arg_4329, arg_4330);
}
pub inline fn glGetVertexAttribPointervARB(arg_4331: GLuint, arg_4332: GLenum, arg_4333: [*c]?*anyopaque) void {
    return epoxy_glGetVertexAttribPointervARB.?(arg_4331, arg_4332, arg_4333);
}
pub inline fn glGetVertexAttribPointervNV(arg_4334: GLuint, arg_4335: GLenum, arg_4336: [*c]?*anyopaque) void {
    return epoxy_glGetVertexAttribPointervNV.?(arg_4334, arg_4335, arg_4336);
}
pub inline fn glGetVertexAttribdv(arg_4337: GLuint, arg_4338: GLenum, arg_4339: [*c]GLdouble) void {
    return epoxy_glGetVertexAttribdv.?(arg_4337, arg_4338, arg_4339);
}
pub inline fn glGetVertexAttribdvARB(arg_4340: GLuint, arg_4341: GLenum, arg_4342: [*c]GLdouble) void {
    return epoxy_glGetVertexAttribdvARB.?(arg_4340, arg_4341, arg_4342);
}
pub inline fn glGetVertexAttribdvNV(arg_4343: GLuint, arg_4344: GLenum, arg_4345: [*c]GLdouble) void {
    return epoxy_glGetVertexAttribdvNV.?(arg_4343, arg_4344, arg_4345);
}
pub inline fn glGetVertexAttribfv(arg_4346: GLuint, arg_4347: GLenum, arg_4348: [*c]GLfloat) void {
    return epoxy_glGetVertexAttribfv.?(arg_4346, arg_4347, arg_4348);
}
pub inline fn glGetVertexAttribfvARB(arg_4349: GLuint, arg_4350: GLenum, arg_4351: [*c]GLfloat) void {
    return epoxy_glGetVertexAttribfvARB.?(arg_4349, arg_4350, arg_4351);
}
pub inline fn glGetVertexAttribfvNV(arg_4352: GLuint, arg_4353: GLenum, arg_4354: [*c]GLfloat) void {
    return epoxy_glGetVertexAttribfvNV.?(arg_4352, arg_4353, arg_4354);
}
pub inline fn glGetVertexAttribiv(arg_4355: GLuint, arg_4356: GLenum, arg_4357: [*c]GLint) void {
    return epoxy_glGetVertexAttribiv.?(arg_4355, arg_4356, arg_4357);
}
pub inline fn glGetVertexAttribivARB(arg_4358: GLuint, arg_4359: GLenum, arg_4360: [*c]GLint) void {
    return epoxy_glGetVertexAttribivARB.?(arg_4358, arg_4359, arg_4360);
}
pub inline fn glGetVertexAttribivNV(arg_4361: GLuint, arg_4362: GLenum, arg_4363: [*c]GLint) void {
    return epoxy_glGetVertexAttribivNV.?(arg_4361, arg_4362, arg_4363);
}
pub inline fn glGetVideoCaptureStreamdvNV(arg_4364: GLuint, arg_4365: GLuint, arg_4366: GLenum, arg_4367: [*c]GLdouble) void {
    return epoxy_glGetVideoCaptureStreamdvNV.?(arg_4364, arg_4365, arg_4366, arg_4367);
}
pub inline fn glGetVideoCaptureStreamfvNV(arg_4368: GLuint, arg_4369: GLuint, arg_4370: GLenum, arg_4371: [*c]GLfloat) void {
    return epoxy_glGetVideoCaptureStreamfvNV.?(arg_4368, arg_4369, arg_4370, arg_4371);
}
pub inline fn glGetVideoCaptureStreamivNV(arg_4372: GLuint, arg_4373: GLuint, arg_4374: GLenum, arg_4375: [*c]GLint) void {
    return epoxy_glGetVideoCaptureStreamivNV.?(arg_4372, arg_4373, arg_4374, arg_4375);
}
pub inline fn glGetVideoCaptureivNV(arg_4376: GLuint, arg_4377: GLenum, arg_4378: [*c]GLint) void {
    return epoxy_glGetVideoCaptureivNV.?(arg_4376, arg_4377, arg_4378);
}
pub inline fn glGetVideoi64vNV(arg_4379: GLuint, arg_4380: GLenum, arg_4381: [*c]GLint64EXT) void {
    return epoxy_glGetVideoi64vNV.?(arg_4379, arg_4380, arg_4381);
}
pub inline fn glGetVideoivNV(arg_4382: GLuint, arg_4383: GLenum, arg_4384: [*c]GLint) void {
    return epoxy_glGetVideoivNV.?(arg_4382, arg_4383, arg_4384);
}
pub inline fn glGetVideoui64vNV(arg_4385: GLuint, arg_4386: GLenum, arg_4387: [*c]GLuint64EXT) void {
    return epoxy_glGetVideoui64vNV.?(arg_4385, arg_4386, arg_4387);
}
pub inline fn glGetVideouivNV(arg_4388: GLuint, arg_4389: GLenum, arg_4390: [*c]GLuint) void {
    return epoxy_glGetVideouivNV.?(arg_4388, arg_4389, arg_4390);
}
pub inline fn glGetVkProcAddrNV(arg_4391: [*c]const GLchar) GLVULKANPROCNV {
    return epoxy_glGetVkProcAddrNV.?(arg_4391);
}
pub inline fn glGetnColorTable(arg_4392: GLenum, arg_4393: GLenum, arg_4394: GLenum, arg_4395: GLsizei, arg_4396: ?*anyopaque) void {
    return epoxy_glGetnColorTable.?(arg_4392, arg_4393, arg_4394, arg_4395, arg_4396);
}
pub inline fn glGetnColorTableARB(arg_4397: GLenum, arg_4398: GLenum, arg_4399: GLenum, arg_4400: GLsizei, arg_4401: ?*anyopaque) void {
    return epoxy_glGetnColorTableARB.?(arg_4397, arg_4398, arg_4399, arg_4400, arg_4401);
}
pub inline fn glGetnCompressedTexImage(arg_4402: GLenum, arg_4403: GLint, arg_4404: GLsizei, arg_4405: ?*anyopaque) void {
    return epoxy_glGetnCompressedTexImage.?(arg_4402, arg_4403, arg_4404, arg_4405);
}
pub inline fn glGetnCompressedTexImageARB(arg_4406: GLenum, arg_4407: GLint, arg_4408: GLsizei, arg_4409: ?*anyopaque) void {
    return epoxy_glGetnCompressedTexImageARB.?(arg_4406, arg_4407, arg_4408, arg_4409);
}
pub inline fn glGetnConvolutionFilter(arg_4410: GLenum, arg_4411: GLenum, arg_4412: GLenum, arg_4413: GLsizei, arg_4414: ?*anyopaque) void {
    return epoxy_glGetnConvolutionFilter.?(arg_4410, arg_4411, arg_4412, arg_4413, arg_4414);
}
pub inline fn glGetnConvolutionFilterARB(arg_4415: GLenum, arg_4416: GLenum, arg_4417: GLenum, arg_4418: GLsizei, arg_4419: ?*anyopaque) void {
    return epoxy_glGetnConvolutionFilterARB.?(arg_4415, arg_4416, arg_4417, arg_4418, arg_4419);
}
pub inline fn glGetnHistogram(arg_4420: GLenum, arg_4421: GLboolean, arg_4422: GLenum, arg_4423: GLenum, arg_4424: GLsizei, arg_4425: ?*anyopaque) void {
    return epoxy_glGetnHistogram.?(arg_4420, arg_4421, arg_4422, arg_4423, arg_4424, arg_4425);
}
pub inline fn glGetnHistogramARB(arg_4426: GLenum, arg_4427: GLboolean, arg_4428: GLenum, arg_4429: GLenum, arg_4430: GLsizei, arg_4431: ?*anyopaque) void {
    return epoxy_glGetnHistogramARB.?(arg_4426, arg_4427, arg_4428, arg_4429, arg_4430, arg_4431);
}
pub inline fn glGetnMapdv(arg_4432: GLenum, arg_4433: GLenum, arg_4434: GLsizei, arg_4435: [*c]GLdouble) void {
    return epoxy_glGetnMapdv.?(arg_4432, arg_4433, arg_4434, arg_4435);
}
pub inline fn glGetnMapdvARB(arg_4436: GLenum, arg_4437: GLenum, arg_4438: GLsizei, arg_4439: [*c]GLdouble) void {
    return epoxy_glGetnMapdvARB.?(arg_4436, arg_4437, arg_4438, arg_4439);
}
pub inline fn glGetnMapfv(arg_4440: GLenum, arg_4441: GLenum, arg_4442: GLsizei, arg_4443: [*c]GLfloat) void {
    return epoxy_glGetnMapfv.?(arg_4440, arg_4441, arg_4442, arg_4443);
}
pub inline fn glGetnMapfvARB(arg_4444: GLenum, arg_4445: GLenum, arg_4446: GLsizei, arg_4447: [*c]GLfloat) void {
    return epoxy_glGetnMapfvARB.?(arg_4444, arg_4445, arg_4446, arg_4447);
}
pub inline fn glGetnMapiv(arg_4448: GLenum, arg_4449: GLenum, arg_4450: GLsizei, arg_4451: [*c]GLint) void {
    return epoxy_glGetnMapiv.?(arg_4448, arg_4449, arg_4450, arg_4451);
}
pub inline fn glGetnMapivARB(arg_4452: GLenum, arg_4453: GLenum, arg_4454: GLsizei, arg_4455: [*c]GLint) void {
    return epoxy_glGetnMapivARB.?(arg_4452, arg_4453, arg_4454, arg_4455);
}
pub inline fn glGetnMinmax(arg_4456: GLenum, arg_4457: GLboolean, arg_4458: GLenum, arg_4459: GLenum, arg_4460: GLsizei, arg_4461: ?*anyopaque) void {
    return epoxy_glGetnMinmax.?(arg_4456, arg_4457, arg_4458, arg_4459, arg_4460, arg_4461);
}
pub inline fn glGetnMinmaxARB(arg_4462: GLenum, arg_4463: GLboolean, arg_4464: GLenum, arg_4465: GLenum, arg_4466: GLsizei, arg_4467: ?*anyopaque) void {
    return epoxy_glGetnMinmaxARB.?(arg_4462, arg_4463, arg_4464, arg_4465, arg_4466, arg_4467);
}
pub inline fn glGetnPixelMapfv(arg_4468: GLenum, arg_4469: GLsizei, arg_4470: [*c]GLfloat) void {
    return epoxy_glGetnPixelMapfv.?(arg_4468, arg_4469, arg_4470);
}
pub inline fn glGetnPixelMapfvARB(arg_4471: GLenum, arg_4472: GLsizei, arg_4473: [*c]GLfloat) void {
    return epoxy_glGetnPixelMapfvARB.?(arg_4471, arg_4472, arg_4473);
}
pub inline fn glGetnPixelMapuiv(arg_4474: GLenum, arg_4475: GLsizei, arg_4476: [*c]GLuint) void {
    return epoxy_glGetnPixelMapuiv.?(arg_4474, arg_4475, arg_4476);
}
pub inline fn glGetnPixelMapuivARB(arg_4477: GLenum, arg_4478: GLsizei, arg_4479: [*c]GLuint) void {
    return epoxy_glGetnPixelMapuivARB.?(arg_4477, arg_4478, arg_4479);
}
pub inline fn glGetnPixelMapusv(arg_4480: GLenum, arg_4481: GLsizei, arg_4482: [*c]GLushort) void {
    return epoxy_glGetnPixelMapusv.?(arg_4480, arg_4481, arg_4482);
}
pub inline fn glGetnPixelMapusvARB(arg_4483: GLenum, arg_4484: GLsizei, arg_4485: [*c]GLushort) void {
    return epoxy_glGetnPixelMapusvARB.?(arg_4483, arg_4484, arg_4485);
}
pub inline fn glGetnPolygonStipple(arg_4486: GLsizei, arg_4487: [*c]GLubyte) void {
    return epoxy_glGetnPolygonStipple.?(arg_4486, arg_4487);
}
pub inline fn glGetnPolygonStippleARB(arg_4488: GLsizei, arg_4489: [*c]GLubyte) void {
    return epoxy_glGetnPolygonStippleARB.?(arg_4488, arg_4489);
}
pub inline fn glGetnSeparableFilter(arg_4490: GLenum, arg_4491: GLenum, arg_4492: GLenum, arg_4493: GLsizei, arg_4494: ?*anyopaque, arg_4495: GLsizei, arg_4496: ?*anyopaque, arg_4497: ?*anyopaque) void {
    return epoxy_glGetnSeparableFilter.?(arg_4490, arg_4491, arg_4492, arg_4493, arg_4494, arg_4495, arg_4496, arg_4497);
}
pub inline fn glGetnSeparableFilterARB(arg_4498: GLenum, arg_4499: GLenum, arg_4500: GLenum, arg_4501: GLsizei, arg_4502: ?*anyopaque, arg_4503: GLsizei, arg_4504: ?*anyopaque, arg_4505: ?*anyopaque) void {
    return epoxy_glGetnSeparableFilterARB.?(arg_4498, arg_4499, arg_4500, arg_4501, arg_4502, arg_4503, arg_4504, arg_4505);
}
pub inline fn glGetnTexImage(arg_4506: GLenum, arg_4507: GLint, arg_4508: GLenum, arg_4509: GLenum, arg_4510: GLsizei, arg_4511: ?*anyopaque) void {
    return epoxy_glGetnTexImage.?(arg_4506, arg_4507, arg_4508, arg_4509, arg_4510, arg_4511);
}
pub inline fn glGetnTexImageARB(arg_4512: GLenum, arg_4513: GLint, arg_4514: GLenum, arg_4515: GLenum, arg_4516: GLsizei, arg_4517: ?*anyopaque) void {
    return epoxy_glGetnTexImageARB.?(arg_4512, arg_4513, arg_4514, arg_4515, arg_4516, arg_4517);
}
pub inline fn glGetnUniformdv(arg_4518: GLuint, arg_4519: GLint, arg_4520: GLsizei, arg_4521: [*c]GLdouble) void {
    return epoxy_glGetnUniformdv.?(arg_4518, arg_4519, arg_4520, arg_4521);
}
pub inline fn glGetnUniformdvARB(arg_4522: GLuint, arg_4523: GLint, arg_4524: GLsizei, arg_4525: [*c]GLdouble) void {
    return epoxy_glGetnUniformdvARB.?(arg_4522, arg_4523, arg_4524, arg_4525);
}
pub inline fn glGetnUniformfv(arg_4526: GLuint, arg_4527: GLint, arg_4528: GLsizei, arg_4529: [*c]GLfloat) void {
    return epoxy_glGetnUniformfv.?(arg_4526, arg_4527, arg_4528, arg_4529);
}
pub inline fn glGetnUniformfvARB(arg_4530: GLuint, arg_4531: GLint, arg_4532: GLsizei, arg_4533: [*c]GLfloat) void {
    return epoxy_glGetnUniformfvARB.?(arg_4530, arg_4531, arg_4532, arg_4533);
}
pub inline fn glGetnUniformfvEXT(arg_4534: GLuint, arg_4535: GLint, arg_4536: GLsizei, arg_4537: [*c]GLfloat) void {
    return epoxy_glGetnUniformfvEXT.?(arg_4534, arg_4535, arg_4536, arg_4537);
}
pub inline fn glGetnUniformfvKHR(arg_4538: GLuint, arg_4539: GLint, arg_4540: GLsizei, arg_4541: [*c]GLfloat) void {
    return epoxy_glGetnUniformfvKHR.?(arg_4538, arg_4539, arg_4540, arg_4541);
}
pub inline fn glGetnUniformi64vARB(arg_4542: GLuint, arg_4543: GLint, arg_4544: GLsizei, arg_4545: [*c]GLint64) void {
    return epoxy_glGetnUniformi64vARB.?(arg_4542, arg_4543, arg_4544, arg_4545);
}
pub inline fn glGetnUniformiv(arg_4546: GLuint, arg_4547: GLint, arg_4548: GLsizei, arg_4549: [*c]GLint) void {
    return epoxy_glGetnUniformiv.?(arg_4546, arg_4547, arg_4548, arg_4549);
}
pub inline fn glGetnUniformivARB(arg_4550: GLuint, arg_4551: GLint, arg_4552: GLsizei, arg_4553: [*c]GLint) void {
    return epoxy_glGetnUniformivARB.?(arg_4550, arg_4551, arg_4552, arg_4553);
}
pub inline fn glGetnUniformivEXT(arg_4554: GLuint, arg_4555: GLint, arg_4556: GLsizei, arg_4557: [*c]GLint) void {
    return epoxy_glGetnUniformivEXT.?(arg_4554, arg_4555, arg_4556, arg_4557);
}
pub inline fn glGetnUniformivKHR(arg_4558: GLuint, arg_4559: GLint, arg_4560: GLsizei, arg_4561: [*c]GLint) void {
    return epoxy_glGetnUniformivKHR.?(arg_4558, arg_4559, arg_4560, arg_4561);
}
pub inline fn glGetnUniformui64vARB(arg_4562: GLuint, arg_4563: GLint, arg_4564: GLsizei, arg_4565: [*c]GLuint64) void {
    return epoxy_glGetnUniformui64vARB.?(arg_4562, arg_4563, arg_4564, arg_4565);
}
pub inline fn glGetnUniformuiv(arg_4566: GLuint, arg_4567: GLint, arg_4568: GLsizei, arg_4569: [*c]GLuint) void {
    return epoxy_glGetnUniformuiv.?(arg_4566, arg_4567, arg_4568, arg_4569);
}
pub inline fn glGetnUniformuivARB(arg_4570: GLuint, arg_4571: GLint, arg_4572: GLsizei, arg_4573: [*c]GLuint) void {
    return epoxy_glGetnUniformuivARB.?(arg_4570, arg_4571, arg_4572, arg_4573);
}
pub inline fn glGetnUniformuivKHR(arg_4574: GLuint, arg_4575: GLint, arg_4576: GLsizei, arg_4577: [*c]GLuint) void {
    return epoxy_glGetnUniformuivKHR.?(arg_4574, arg_4575, arg_4576, arg_4577);
}
pub inline fn glGlobalAlphaFactorbSUN(arg_4578: GLbyte) void {
    return epoxy_glGlobalAlphaFactorbSUN.?(arg_4578);
}
pub inline fn glGlobalAlphaFactordSUN(arg_4579: GLdouble) void {
    return epoxy_glGlobalAlphaFactordSUN.?(arg_4579);
}
pub inline fn glGlobalAlphaFactorfSUN(arg_4580: GLfloat) void {
    return epoxy_glGlobalAlphaFactorfSUN.?(arg_4580);
}
pub inline fn glGlobalAlphaFactoriSUN(arg_4581: GLint) void {
    return epoxy_glGlobalAlphaFactoriSUN.?(arg_4581);
}
pub inline fn glGlobalAlphaFactorsSUN(arg_4582: GLshort) void {
    return epoxy_glGlobalAlphaFactorsSUN.?(arg_4582);
}
pub inline fn glGlobalAlphaFactorubSUN(arg_4583: GLubyte) void {
    return epoxy_glGlobalAlphaFactorubSUN.?(arg_4583);
}
pub inline fn glGlobalAlphaFactoruiSUN(arg_4584: GLuint) void {
    return epoxy_glGlobalAlphaFactoruiSUN.?(arg_4584);
}
pub inline fn glGlobalAlphaFactorusSUN(arg_4585: GLushort) void {
    return epoxy_glGlobalAlphaFactorusSUN.?(arg_4585);
}
pub inline fn glHint(arg_4586: GLenum, arg_4587: GLenum) void {
    return epoxy_glHint.?(arg_4586, arg_4587);
}
pub inline fn glHintPGI(arg_4588: GLenum, arg_4589: GLint) void {
    return epoxy_glHintPGI.?(arg_4588, arg_4589);
}
pub inline fn glHistogram(arg_4590: GLenum, arg_4591: GLsizei, arg_4592: GLenum, arg_4593: GLboolean) void {
    return epoxy_glHistogram.?(arg_4590, arg_4591, arg_4592, arg_4593);
}
pub inline fn glHistogramEXT(arg_4594: GLenum, arg_4595: GLsizei, arg_4596: GLenum, arg_4597: GLboolean) void {
    return epoxy_glHistogramEXT.?(arg_4594, arg_4595, arg_4596, arg_4597);
}
pub inline fn glIglooInterfaceSGIX(arg_4598: GLenum, arg_4599: ?*const anyopaque) void {
    return epoxy_glIglooInterfaceSGIX.?(arg_4598, arg_4599);
}
pub inline fn glImageTransformParameterfHP(arg_4600: GLenum, arg_4601: GLenum, arg_4602: GLfloat) void {
    return epoxy_glImageTransformParameterfHP.?(arg_4600, arg_4601, arg_4602);
}
pub inline fn glImageTransformParameterfvHP(arg_4603: GLenum, arg_4604: GLenum, arg_4605: [*c]const GLfloat) void {
    return epoxy_glImageTransformParameterfvHP.?(arg_4603, arg_4604, arg_4605);
}
pub inline fn glImageTransformParameteriHP(arg_4606: GLenum, arg_4607: GLenum, arg_4608: GLint) void {
    return epoxy_glImageTransformParameteriHP.?(arg_4606, arg_4607, arg_4608);
}
pub inline fn glImageTransformParameterivHP(arg_4609: GLenum, arg_4610: GLenum, arg_4611: [*c]const GLint) void {
    return epoxy_glImageTransformParameterivHP.?(arg_4609, arg_4610, arg_4611);
}
pub inline fn glImportMemoryFdEXT(arg_4612: GLuint, arg_4613: GLuint64, arg_4614: GLenum, arg_4615: GLint) void {
    return epoxy_glImportMemoryFdEXT.?(arg_4612, arg_4613, arg_4614, arg_4615);
}
pub inline fn glImportMemoryWin32HandleEXT(arg_4616: GLuint, arg_4617: GLuint64, arg_4618: GLenum, arg_4619: ?*anyopaque) void {
    return epoxy_glImportMemoryWin32HandleEXT.?(arg_4616, arg_4617, arg_4618, arg_4619);
}
pub inline fn glImportMemoryWin32NameEXT(arg_4620: GLuint, arg_4621: GLuint64, arg_4622: GLenum, arg_4623: ?*const anyopaque) void {
    return epoxy_glImportMemoryWin32NameEXT.?(arg_4620, arg_4621, arg_4622, arg_4623);
}
pub inline fn glImportSemaphoreFdEXT(arg_4624: GLuint, arg_4625: GLenum, arg_4626: GLint) void {
    return epoxy_glImportSemaphoreFdEXT.?(arg_4624, arg_4625, arg_4626);
}
pub inline fn glImportSemaphoreWin32HandleEXT(arg_4627: GLuint, arg_4628: GLenum, arg_4629: ?*anyopaque) void {
    return epoxy_glImportSemaphoreWin32HandleEXT.?(arg_4627, arg_4628, arg_4629);
}
pub inline fn glImportSemaphoreWin32NameEXT(arg_4630: GLuint, arg_4631: GLenum, arg_4632: ?*const anyopaque) void {
    return epoxy_glImportSemaphoreWin32NameEXT.?(arg_4630, arg_4631, arg_4632);
}
pub inline fn glImportSyncEXT(arg_4633: GLenum, arg_4634: GLintptr, arg_4635: GLbitfield) GLsync {
    return epoxy_glImportSyncEXT.?(arg_4633, arg_4634, arg_4635);
}
pub inline fn glIndexFormatNV(arg_4636: GLenum, arg_4637: GLsizei) void {
    return epoxy_glIndexFormatNV.?(arg_4636, arg_4637);
}
pub inline fn glIndexFuncEXT(arg_4638: GLenum, arg_4639: GLclampf) void {
    return epoxy_glIndexFuncEXT.?(arg_4638, arg_4639);
}
pub inline fn glIndexMask(arg_4640: GLuint) void {
    return epoxy_glIndexMask.?(arg_4640);
}
pub inline fn glIndexMaterialEXT(arg_4641: GLenum, arg_4642: GLenum) void {
    return epoxy_glIndexMaterialEXT.?(arg_4641, arg_4642);
}
pub inline fn glIndexPointer(arg_4643: GLenum, arg_4644: GLsizei, arg_4645: ?*const anyopaque) void {
    return epoxy_glIndexPointer.?(arg_4643, arg_4644, arg_4645);
}
pub inline fn glIndexPointerEXT(arg_4646: GLenum, arg_4647: GLsizei, arg_4648: GLsizei, arg_4649: ?*const anyopaque) void {
    return epoxy_glIndexPointerEXT.?(arg_4646, arg_4647, arg_4648, arg_4649);
}
pub inline fn glIndexPointerListIBM(arg_4650: GLenum, arg_4651: GLint, arg_4652: [*c]?*const anyopaque, arg_4653: GLint) void {
    return epoxy_glIndexPointerListIBM.?(arg_4650, arg_4651, arg_4652, arg_4653);
}
pub inline fn glIndexd(arg_4654: GLdouble) void {
    return epoxy_glIndexd.?(arg_4654);
}
pub inline fn glIndexdv(arg_4655: [*c]const GLdouble) void {
    return epoxy_glIndexdv.?(arg_4655);
}
pub inline fn glIndexf(arg_4656: GLfloat) void {
    return epoxy_glIndexf.?(arg_4656);
}
pub inline fn glIndexfv(arg_4657: [*c]const GLfloat) void {
    return epoxy_glIndexfv.?(arg_4657);
}
pub inline fn glIndexi(arg_4658: GLint) void {
    return epoxy_glIndexi.?(arg_4658);
}
pub inline fn glIndexiv(arg_4659: [*c]const GLint) void {
    return epoxy_glIndexiv.?(arg_4659);
}
pub inline fn glIndexs(arg_4660: GLshort) void {
    return epoxy_glIndexs.?(arg_4660);
}
pub inline fn glIndexsv(arg_4661: [*c]const GLshort) void {
    return epoxy_glIndexsv.?(arg_4661);
}
pub inline fn glIndexub(arg_4662: GLubyte) void {
    return epoxy_glIndexub.?(arg_4662);
}
pub inline fn glIndexubv(arg_4663: [*c]const GLubyte) void {
    return epoxy_glIndexubv.?(arg_4663);
}
pub inline fn glIndexxOES(arg_4664: GLfixed) void {
    return epoxy_glIndexxOES.?(arg_4664);
}
pub inline fn glIndexxvOES(arg_4665: [*c]const GLfixed) void {
    return epoxy_glIndexxvOES.?(arg_4665);
}
pub inline fn glInitNames() void {
    return epoxy_glInitNames.?();
}
pub inline fn glInsertComponentEXT(arg_4666: GLuint, arg_4667: GLuint, arg_4668: GLuint) void {
    return epoxy_glInsertComponentEXT.?(arg_4666, arg_4667, arg_4668);
}
pub inline fn glInsertEventMarkerEXT(arg_4669: GLsizei, arg_4670: [*c]const GLchar) void {
    return epoxy_glInsertEventMarkerEXT.?(arg_4669, arg_4670);
}
pub inline fn glInstrumentsBufferSGIX(arg_4671: GLsizei, arg_4672: [*c]GLint) void {
    return epoxy_glInstrumentsBufferSGIX.?(arg_4671, arg_4672);
}
pub inline fn glInterleavedArrays(arg_4673: GLenum, arg_4674: GLsizei, arg_4675: ?*const anyopaque) void {
    return epoxy_glInterleavedArrays.?(arg_4673, arg_4674, arg_4675);
}
pub inline fn glInterpolatePathsNV(arg_4676: GLuint, arg_4677: GLuint, arg_4678: GLuint, arg_4679: GLfloat) void {
    return epoxy_glInterpolatePathsNV.?(arg_4676, arg_4677, arg_4678, arg_4679);
}
pub inline fn glInvalidateBufferData(arg_4680: GLuint) void {
    return epoxy_glInvalidateBufferData.?(arg_4680);
}
pub inline fn glInvalidateBufferSubData(arg_4681: GLuint, arg_4682: GLintptr, arg_4683: GLsizeiptr) void {
    return epoxy_glInvalidateBufferSubData.?(arg_4681, arg_4682, arg_4683);
}
pub inline fn glInvalidateFramebuffer(arg_4684: GLenum, arg_4685: GLsizei, arg_4686: [*c]const GLenum) void {
    return epoxy_glInvalidateFramebuffer.?(arg_4684, arg_4685, arg_4686);
}
pub inline fn glInvalidateNamedFramebufferData(arg_4687: GLuint, arg_4688: GLsizei, arg_4689: [*c]const GLenum) void {
    return epoxy_glInvalidateNamedFramebufferData.?(arg_4687, arg_4688, arg_4689);
}
pub inline fn glInvalidateNamedFramebufferSubData(arg_4690: GLuint, arg_4691: GLsizei, arg_4692: [*c]const GLenum, arg_4693: GLint, arg_4694: GLint, arg_4695: GLsizei, arg_4696: GLsizei) void {
    return epoxy_glInvalidateNamedFramebufferSubData.?(arg_4690, arg_4691, arg_4692, arg_4693, arg_4694, arg_4695, arg_4696);
}
pub inline fn glInvalidateSubFramebuffer(arg_4697: GLenum, arg_4698: GLsizei, arg_4699: [*c]const GLenum, arg_4700: GLint, arg_4701: GLint, arg_4702: GLsizei, arg_4703: GLsizei) void {
    return epoxy_glInvalidateSubFramebuffer.?(arg_4697, arg_4698, arg_4699, arg_4700, arg_4701, arg_4702, arg_4703);
}
pub inline fn glInvalidateTexImage(arg_4704: GLuint, arg_4705: GLint) void {
    return epoxy_glInvalidateTexImage.?(arg_4704, arg_4705);
}
pub inline fn glInvalidateTexSubImage(arg_4706: GLuint, arg_4707: GLint, arg_4708: GLint, arg_4709: GLint, arg_4710: GLint, arg_4711: GLsizei, arg_4712: GLsizei, arg_4713: GLsizei) void {
    return epoxy_glInvalidateTexSubImage.?(arg_4706, arg_4707, arg_4708, arg_4709, arg_4710, arg_4711, arg_4712, arg_4713);
}
pub inline fn glIsAsyncMarkerSGIX(arg_4714: GLuint) GLboolean {
    return epoxy_glIsAsyncMarkerSGIX.?(arg_4714);
}
pub inline fn glIsBuffer(arg_4715: GLuint) GLboolean {
    return epoxy_glIsBuffer.?(arg_4715);
}
pub inline fn glIsBufferARB(arg_4716: GLuint) GLboolean {
    return epoxy_glIsBufferARB.?(arg_4716);
}
pub inline fn glIsBufferResidentNV(arg_4717: GLenum) GLboolean {
    return epoxy_glIsBufferResidentNV.?(arg_4717);
}
pub inline fn glIsCommandListNV(arg_4718: GLuint) GLboolean {
    return epoxy_glIsCommandListNV.?(arg_4718);
}
pub inline fn glIsEnabled(arg_4719: GLenum) GLboolean {
    return epoxy_glIsEnabled.?(arg_4719);
}
pub inline fn glIsEnabledIndexedEXT(arg_4720: GLenum, arg_4721: GLuint) GLboolean {
    return epoxy_glIsEnabledIndexedEXT.?(arg_4720, arg_4721);
}
pub inline fn glIsEnabledi(arg_4722: GLenum, arg_4723: GLuint) GLboolean {
    return epoxy_glIsEnabledi.?(arg_4722, arg_4723);
}
pub inline fn glIsEnablediEXT(arg_4724: GLenum, arg_4725: GLuint) GLboolean {
    return epoxy_glIsEnablediEXT.?(arg_4724, arg_4725);
}
pub inline fn glIsEnablediNV(arg_4726: GLenum, arg_4727: GLuint) GLboolean {
    return epoxy_glIsEnablediNV.?(arg_4726, arg_4727);
}
pub inline fn glIsEnablediOES(arg_4728: GLenum, arg_4729: GLuint) GLboolean {
    return epoxy_glIsEnablediOES.?(arg_4728, arg_4729);
}
pub inline fn glIsFenceAPPLE(arg_4730: GLuint) GLboolean {
    return epoxy_glIsFenceAPPLE.?(arg_4730);
}
pub inline fn glIsFenceNV(arg_4731: GLuint) GLboolean {
    return epoxy_glIsFenceNV.?(arg_4731);
}
pub inline fn glIsFramebuffer(arg_4732: GLuint) GLboolean {
    return epoxy_glIsFramebuffer.?(arg_4732);
}
pub inline fn glIsFramebufferEXT(arg_4733: GLuint) GLboolean {
    return epoxy_glIsFramebufferEXT.?(arg_4733);
}
pub inline fn glIsFramebufferOES(arg_4734: GLuint) GLboolean {
    return epoxy_glIsFramebufferOES.?(arg_4734);
}
pub inline fn glIsImageHandleResidentARB(arg_4735: GLuint64) GLboolean {
    return epoxy_glIsImageHandleResidentARB.?(arg_4735);
}
pub inline fn glIsImageHandleResidentNV(arg_4736: GLuint64) GLboolean {
    return epoxy_glIsImageHandleResidentNV.?(arg_4736);
}
pub inline fn glIsList(arg_4737: GLuint) GLboolean {
    return epoxy_glIsList.?(arg_4737);
}
pub inline fn glIsMemoryObjectEXT(arg_4738: GLuint) GLboolean {
    return epoxy_glIsMemoryObjectEXT.?(arg_4738);
}
pub inline fn glIsNameAMD(arg_4739: GLenum, arg_4740: GLuint) GLboolean {
    return epoxy_glIsNameAMD.?(arg_4739, arg_4740);
}
pub inline fn glIsNamedBufferResidentNV(arg_4741: GLuint) GLboolean {
    return epoxy_glIsNamedBufferResidentNV.?(arg_4741);
}
pub inline fn glIsNamedStringARB(arg_4742: GLint, arg_4743: [*c]const GLchar) GLboolean {
    return epoxy_glIsNamedStringARB.?(arg_4742, arg_4743);
}
pub inline fn glIsObjectBufferATI(arg_4744: GLuint) GLboolean {
    return epoxy_glIsObjectBufferATI.?(arg_4744);
}
pub inline fn glIsOcclusionQueryNV(arg_4745: GLuint) GLboolean {
    return epoxy_glIsOcclusionQueryNV.?(arg_4745);
}
pub inline fn glIsPathNV(arg_4746: GLuint) GLboolean {
    return epoxy_glIsPathNV.?(arg_4746);
}
pub inline fn glIsPointInFillPathNV(arg_4747: GLuint, arg_4748: GLuint, arg_4749: GLfloat, arg_4750: GLfloat) GLboolean {
    return epoxy_glIsPointInFillPathNV.?(arg_4747, arg_4748, arg_4749, arg_4750);
}
pub inline fn glIsPointInStrokePathNV(arg_4751: GLuint, arg_4752: GLfloat, arg_4753: GLfloat) GLboolean {
    return epoxy_glIsPointInStrokePathNV.?(arg_4751, arg_4752, arg_4753);
}
pub inline fn glIsProgram(arg_4754: GLuint) GLboolean {
    return epoxy_glIsProgram.?(arg_4754);
}
pub inline fn glIsProgramARB(arg_4755: GLuint) GLboolean {
    return epoxy_glIsProgramARB.?(arg_4755);
}
pub inline fn glIsProgramNV(arg_4756: GLuint) GLboolean {
    return epoxy_glIsProgramNV.?(arg_4756);
}
pub inline fn glIsProgramPipeline(arg_4757: GLuint) GLboolean {
    return epoxy_glIsProgramPipeline.?(arg_4757);
}
pub inline fn glIsProgramPipelineEXT(arg_4758: GLuint) GLboolean {
    return epoxy_glIsProgramPipelineEXT.?(arg_4758);
}
pub inline fn glIsQuery(arg_4759: GLuint) GLboolean {
    return epoxy_glIsQuery.?(arg_4759);
}
pub inline fn glIsQueryARB(arg_4760: GLuint) GLboolean {
    return epoxy_glIsQueryARB.?(arg_4760);
}
pub inline fn glIsQueryEXT(arg_4761: GLuint) GLboolean {
    return epoxy_glIsQueryEXT.?(arg_4761);
}
pub inline fn glIsRenderbuffer(arg_4762: GLuint) GLboolean {
    return epoxy_glIsRenderbuffer.?(arg_4762);
}
pub inline fn glIsRenderbufferEXT(arg_4763: GLuint) GLboolean {
    return epoxy_glIsRenderbufferEXT.?(arg_4763);
}
pub inline fn glIsRenderbufferOES(arg_4764: GLuint) GLboolean {
    return epoxy_glIsRenderbufferOES.?(arg_4764);
}
pub inline fn glIsSampler(arg_4765: GLuint) GLboolean {
    return epoxy_glIsSampler.?(arg_4765);
}
pub inline fn glIsSemaphoreEXT(arg_4766: GLuint) GLboolean {
    return epoxy_glIsSemaphoreEXT.?(arg_4766);
}
pub inline fn glIsShader(arg_4767: GLuint) GLboolean {
    return epoxy_glIsShader.?(arg_4767);
}
pub inline fn glIsStateNV(arg_4768: GLuint) GLboolean {
    return epoxy_glIsStateNV.?(arg_4768);
}
pub inline fn glIsSync(arg_4769: GLsync) GLboolean {
    return epoxy_glIsSync.?(arg_4769);
}
pub inline fn glIsSyncAPPLE(arg_4770: GLsync) GLboolean {
    return epoxy_glIsSyncAPPLE.?(arg_4770);
}
pub inline fn glIsTexture(arg_4771: GLuint) GLboolean {
    return epoxy_glIsTexture.?(arg_4771);
}
pub inline fn glIsTextureEXT(arg_4772: GLuint) GLboolean {
    return epoxy_glIsTextureEXT.?(arg_4772);
}
pub inline fn glIsTextureHandleResidentARB(arg_4773: GLuint64) GLboolean {
    return epoxy_glIsTextureHandleResidentARB.?(arg_4773);
}
pub inline fn glIsTextureHandleResidentNV(arg_4774: GLuint64) GLboolean {
    return epoxy_glIsTextureHandleResidentNV.?(arg_4774);
}
pub inline fn glIsTransformFeedback(arg_4775: GLuint) GLboolean {
    return epoxy_glIsTransformFeedback.?(arg_4775);
}
pub inline fn glIsTransformFeedbackNV(arg_4776: GLuint) GLboolean {
    return epoxy_glIsTransformFeedbackNV.?(arg_4776);
}
pub inline fn glIsVariantEnabledEXT(arg_4777: GLuint, arg_4778: GLenum) GLboolean {
    return epoxy_glIsVariantEnabledEXT.?(arg_4777, arg_4778);
}
pub inline fn glIsVertexArray(arg_4779: GLuint) GLboolean {
    return epoxy_glIsVertexArray.?(arg_4779);
}
pub inline fn glIsVertexArrayAPPLE(arg_4780: GLuint) GLboolean {
    return epoxy_glIsVertexArrayAPPLE.?(arg_4780);
}
pub inline fn glIsVertexArrayOES(arg_4781: GLuint) GLboolean {
    return epoxy_glIsVertexArrayOES.?(arg_4781);
}
pub inline fn glIsVertexAttribEnabledAPPLE(arg_4782: GLuint, arg_4783: GLenum) GLboolean {
    return epoxy_glIsVertexAttribEnabledAPPLE.?(arg_4782, arg_4783);
}
pub inline fn glLGPUCopyImageSubDataNVX(arg_4784: GLuint, arg_4785: GLbitfield, arg_4786: GLuint, arg_4787: GLenum, arg_4788: GLint, arg_4789: GLint, arg_4790: GLint, arg_4791: GLint, arg_4792: GLuint, arg_4793: GLenum, arg_4794: GLint, arg_4795: GLint, arg_4796: GLint, arg_4797: GLint, arg_4798: GLsizei, arg_4799: GLsizei, arg_4800: GLsizei) void {
    return epoxy_glLGPUCopyImageSubDataNVX.?(arg_4784, arg_4785, arg_4786, arg_4787, arg_4788, arg_4789, arg_4790, arg_4791, arg_4792, arg_4793, arg_4794, arg_4795, arg_4796, arg_4797, arg_4798, arg_4799, arg_4800);
}
pub inline fn glLGPUInterlockNVX() void {
    return epoxy_glLGPUInterlockNVX.?();
}
pub inline fn glLGPUNamedBufferSubDataNVX(arg_4801: GLbitfield, arg_4802: GLuint, arg_4803: GLintptr, arg_4804: GLsizeiptr, arg_4805: ?*const anyopaque) void {
    return epoxy_glLGPUNamedBufferSubDataNVX.?(arg_4801, arg_4802, arg_4803, arg_4804, arg_4805);
}
pub inline fn glLabelObjectEXT(arg_4806: GLenum, arg_4807: GLuint, arg_4808: GLsizei, arg_4809: [*c]const GLchar) void {
    return epoxy_glLabelObjectEXT.?(arg_4806, arg_4807, arg_4808, arg_4809);
}
pub inline fn glLightEnviSGIX(arg_4810: GLenum, arg_4811: GLint) void {
    return epoxy_glLightEnviSGIX.?(arg_4810, arg_4811);
}
pub inline fn glLightModelf(arg_4812: GLenum, arg_4813: GLfloat) void {
    return epoxy_glLightModelf.?(arg_4812, arg_4813);
}
pub inline fn glLightModelfv(arg_4814: GLenum, arg_4815: [*c]const GLfloat) void {
    return epoxy_glLightModelfv.?(arg_4814, arg_4815);
}
pub inline fn glLightModeli(arg_4816: GLenum, arg_4817: GLint) void {
    return epoxy_glLightModeli.?(arg_4816, arg_4817);
}
pub inline fn glLightModeliv(arg_4818: GLenum, arg_4819: [*c]const GLint) void {
    return epoxy_glLightModeliv.?(arg_4818, arg_4819);
}
pub inline fn glLightModelx(arg_4820: GLenum, arg_4821: GLfixed) void {
    return epoxy_glLightModelx.?(arg_4820, arg_4821);
}
pub inline fn glLightModelxOES(arg_4822: GLenum, arg_4823: GLfixed) void {
    return epoxy_glLightModelxOES.?(arg_4822, arg_4823);
}
pub inline fn glLightModelxv(arg_4824: GLenum, arg_4825: [*c]const GLfixed) void {
    return epoxy_glLightModelxv.?(arg_4824, arg_4825);
}
pub inline fn glLightModelxvOES(arg_4826: GLenum, arg_4827: [*c]const GLfixed) void {
    return epoxy_glLightModelxvOES.?(arg_4826, arg_4827);
}
pub inline fn glLightf(arg_4828: GLenum, arg_4829: GLenum, arg_4830: GLfloat) void {
    return epoxy_glLightf.?(arg_4828, arg_4829, arg_4830);
}
pub inline fn glLightfv(arg_4831: GLenum, arg_4832: GLenum, arg_4833: [*c]const GLfloat) void {
    return epoxy_glLightfv.?(arg_4831, arg_4832, arg_4833);
}
pub inline fn glLighti(arg_4834: GLenum, arg_4835: GLenum, arg_4836: GLint) void {
    return epoxy_glLighti.?(arg_4834, arg_4835, arg_4836);
}
pub inline fn glLightiv(arg_4837: GLenum, arg_4838: GLenum, arg_4839: [*c]const GLint) void {
    return epoxy_glLightiv.?(arg_4837, arg_4838, arg_4839);
}
pub inline fn glLightx(arg_4840: GLenum, arg_4841: GLenum, arg_4842: GLfixed) void {
    return epoxy_glLightx.?(arg_4840, arg_4841, arg_4842);
}
pub inline fn glLightxOES(arg_4843: GLenum, arg_4844: GLenum, arg_4845: GLfixed) void {
    return epoxy_glLightxOES.?(arg_4843, arg_4844, arg_4845);
}
pub inline fn glLightxv(arg_4846: GLenum, arg_4847: GLenum, arg_4848: [*c]const GLfixed) void {
    return epoxy_glLightxv.?(arg_4846, arg_4847, arg_4848);
}
pub inline fn glLightxvOES(arg_4849: GLenum, arg_4850: GLenum, arg_4851: [*c]const GLfixed) void {
    return epoxy_glLightxvOES.?(arg_4849, arg_4850, arg_4851);
}
pub inline fn glLineStipple(arg_4852: GLint, arg_4853: GLushort) void {
    return epoxy_glLineStipple.?(arg_4852, arg_4853);
}
pub inline fn glLineWidth(arg_4854: GLfloat) void {
    return epoxy_glLineWidth.?(arg_4854);
}
pub inline fn glLineWidthx(arg_4855: GLfixed) void {
    return epoxy_glLineWidthx.?(arg_4855);
}
pub inline fn glLineWidthxOES(arg_4856: GLfixed) void {
    return epoxy_glLineWidthxOES.?(arg_4856);
}
pub inline fn glLinkProgram(arg_4857: GLuint) void {
    return epoxy_glLinkProgram.?(arg_4857);
}
pub inline fn glLinkProgramARB(arg_4858: GLhandleARB) void {
    return epoxy_glLinkProgramARB.?(arg_4858);
}
pub inline fn glListBase(arg_4859: GLuint) void {
    return epoxy_glListBase.?(arg_4859);
}
pub inline fn glListDrawCommandsStatesClientNV(arg_4860: GLuint, arg_4861: GLuint, arg_4862: [*c]?*const anyopaque, arg_4863: [*c]const GLsizei, arg_4864: [*c]const GLuint, arg_4865: [*c]const GLuint, arg_4866: GLuint) void {
    return epoxy_glListDrawCommandsStatesClientNV.?(arg_4860, arg_4861, arg_4862, arg_4863, arg_4864, arg_4865, arg_4866);
}
pub inline fn glListParameterfSGIX(arg_4867: GLuint, arg_4868: GLenum, arg_4869: GLfloat) void {
    return epoxy_glListParameterfSGIX.?(arg_4867, arg_4868, arg_4869);
}
pub inline fn glListParameterfvSGIX(arg_4870: GLuint, arg_4871: GLenum, arg_4872: [*c]const GLfloat) void {
    return epoxy_glListParameterfvSGIX.?(arg_4870, arg_4871, arg_4872);
}
pub inline fn glListParameteriSGIX(arg_4873: GLuint, arg_4874: GLenum, arg_4875: GLint) void {
    return epoxy_glListParameteriSGIX.?(arg_4873, arg_4874, arg_4875);
}
pub inline fn glListParameterivSGIX(arg_4876: GLuint, arg_4877: GLenum, arg_4878: [*c]const GLint) void {
    return epoxy_glListParameterivSGIX.?(arg_4876, arg_4877, arg_4878);
}
pub inline fn glLoadIdentity() void {
    return epoxy_glLoadIdentity.?();
}
pub inline fn glLoadIdentityDeformationMapSGIX(arg_4879: GLbitfield) void {
    return epoxy_glLoadIdentityDeformationMapSGIX.?(arg_4879);
}
pub inline fn glLoadMatrixd(arg_4880: [*c]const GLdouble) void {
    return epoxy_glLoadMatrixd.?(arg_4880);
}
pub inline fn glLoadMatrixf(arg_4881: [*c]const GLfloat) void {
    return epoxy_glLoadMatrixf.?(arg_4881);
}
pub inline fn glLoadMatrixx(arg_4882: [*c]const GLfixed) void {
    return epoxy_glLoadMatrixx.?(arg_4882);
}
pub inline fn glLoadMatrixxOES(arg_4883: [*c]const GLfixed) void {
    return epoxy_glLoadMatrixxOES.?(arg_4883);
}
pub inline fn glLoadName(arg_4884: GLuint) void {
    return epoxy_glLoadName.?(arg_4884);
}
pub inline fn glLoadPaletteFromModelViewMatrixOES() void {
    return epoxy_glLoadPaletteFromModelViewMatrixOES.?();
}
pub inline fn glLoadProgramNV(arg_4885: GLenum, arg_4886: GLuint, arg_4887: GLsizei, arg_4888: [*c]const GLubyte) void {
    return epoxy_glLoadProgramNV.?(arg_4885, arg_4886, arg_4887, arg_4888);
}
pub inline fn glLoadTransposeMatrixd(arg_4889: [*c]const GLdouble) void {
    return epoxy_glLoadTransposeMatrixd.?(arg_4889);
}
pub inline fn glLoadTransposeMatrixdARB(arg_4890: [*c]const GLdouble) void {
    return epoxy_glLoadTransposeMatrixdARB.?(arg_4890);
}
pub inline fn glLoadTransposeMatrixf(arg_4891: [*c]const GLfloat) void {
    return epoxy_glLoadTransposeMatrixf.?(arg_4891);
}
pub inline fn glLoadTransposeMatrixfARB(arg_4892: [*c]const GLfloat) void {
    return epoxy_glLoadTransposeMatrixfARB.?(arg_4892);
}
pub inline fn glLoadTransposeMatrixxOES(arg_4893: [*c]const GLfixed) void {
    return epoxy_glLoadTransposeMatrixxOES.?(arg_4893);
}
pub inline fn glLockArraysEXT(arg_4894: GLint, arg_4895: GLsizei) void {
    return epoxy_glLockArraysEXT.?(arg_4894, arg_4895);
}
pub inline fn glLogicOp(arg_4896: GLenum) void {
    return epoxy_glLogicOp.?(arg_4896);
}
pub inline fn glMakeBufferNonResidentNV(arg_4897: GLenum) void {
    return epoxy_glMakeBufferNonResidentNV.?(arg_4897);
}
pub inline fn glMakeBufferResidentNV(arg_4898: GLenum, arg_4899: GLenum) void {
    return epoxy_glMakeBufferResidentNV.?(arg_4898, arg_4899);
}
pub inline fn glMakeImageHandleNonResidentARB(arg_4900: GLuint64) void {
    return epoxy_glMakeImageHandleNonResidentARB.?(arg_4900);
}
pub inline fn glMakeImageHandleNonResidentNV(arg_4901: GLuint64) void {
    return epoxy_glMakeImageHandleNonResidentNV.?(arg_4901);
}
pub inline fn glMakeImageHandleResidentARB(arg_4902: GLuint64, arg_4903: GLenum) void {
    return epoxy_glMakeImageHandleResidentARB.?(arg_4902, arg_4903);
}
pub inline fn glMakeImageHandleResidentNV(arg_4904: GLuint64, arg_4905: GLenum) void {
    return epoxy_glMakeImageHandleResidentNV.?(arg_4904, arg_4905);
}
pub inline fn glMakeNamedBufferNonResidentNV(arg_4906: GLuint) void {
    return epoxy_glMakeNamedBufferNonResidentNV.?(arg_4906);
}
pub inline fn glMakeNamedBufferResidentNV(arg_4907: GLuint, arg_4908: GLenum) void {
    return epoxy_glMakeNamedBufferResidentNV.?(arg_4907, arg_4908);
}
pub inline fn glMakeTextureHandleNonResidentARB(arg_4909: GLuint64) void {
    return epoxy_glMakeTextureHandleNonResidentARB.?(arg_4909);
}
pub inline fn glMakeTextureHandleNonResidentNV(arg_4910: GLuint64) void {
    return epoxy_glMakeTextureHandleNonResidentNV.?(arg_4910);
}
pub inline fn glMakeTextureHandleResidentARB(arg_4911: GLuint64) void {
    return epoxy_glMakeTextureHandleResidentARB.?(arg_4911);
}
pub inline fn glMakeTextureHandleResidentNV(arg_4912: GLuint64) void {
    return epoxy_glMakeTextureHandleResidentNV.?(arg_4912);
}
pub inline fn glMap1d(arg_4913: GLenum, arg_4914: GLdouble, arg_4915: GLdouble, arg_4916: GLint, arg_4917: GLint, arg_4918: [*c]const GLdouble) void {
    return epoxy_glMap1d.?(arg_4913, arg_4914, arg_4915, arg_4916, arg_4917, arg_4918);
}
pub inline fn glMap1f(arg_4919: GLenum, arg_4920: GLfloat, arg_4921: GLfloat, arg_4922: GLint, arg_4923: GLint, arg_4924: [*c]const GLfloat) void {
    return epoxy_glMap1f.?(arg_4919, arg_4920, arg_4921, arg_4922, arg_4923, arg_4924);
}
pub inline fn glMap1xOES(arg_4925: GLenum, arg_4926: GLfixed, arg_4927: GLfixed, arg_4928: GLint, arg_4929: GLint, arg_4930: GLfixed) void {
    return epoxy_glMap1xOES.?(arg_4925, arg_4926, arg_4927, arg_4928, arg_4929, arg_4930);
}
pub inline fn glMap2d(arg_4931: GLenum, arg_4932: GLdouble, arg_4933: GLdouble, arg_4934: GLint, arg_4935: GLint, arg_4936: GLdouble, arg_4937: GLdouble, arg_4938: GLint, arg_4939: GLint, arg_4940: [*c]const GLdouble) void {
    return epoxy_glMap2d.?(arg_4931, arg_4932, arg_4933, arg_4934, arg_4935, arg_4936, arg_4937, arg_4938, arg_4939, arg_4940);
}
pub inline fn glMap2f(arg_4941: GLenum, arg_4942: GLfloat, arg_4943: GLfloat, arg_4944: GLint, arg_4945: GLint, arg_4946: GLfloat, arg_4947: GLfloat, arg_4948: GLint, arg_4949: GLint, arg_4950: [*c]const GLfloat) void {
    return epoxy_glMap2f.?(arg_4941, arg_4942, arg_4943, arg_4944, arg_4945, arg_4946, arg_4947, arg_4948, arg_4949, arg_4950);
}
pub inline fn glMap2xOES(arg_4951: GLenum, arg_4952: GLfixed, arg_4953: GLfixed, arg_4954: GLint, arg_4955: GLint, arg_4956: GLfixed, arg_4957: GLfixed, arg_4958: GLint, arg_4959: GLint, arg_4960: GLfixed) void {
    return epoxy_glMap2xOES.?(arg_4951, arg_4952, arg_4953, arg_4954, arg_4955, arg_4956, arg_4957, arg_4958, arg_4959, arg_4960);
}
pub inline fn glMapBuffer(arg_4961: GLenum, arg_4962: GLenum) ?*anyopaque {
    return epoxy_glMapBuffer.?(arg_4961, arg_4962);
}
pub inline fn glMapBufferARB(arg_4963: GLenum, arg_4964: GLenum) ?*anyopaque {
    return epoxy_glMapBufferARB.?(arg_4963, arg_4964);
}
pub inline fn glMapBufferOES(arg_4965: GLenum, arg_4966: GLenum) ?*anyopaque {
    return epoxy_glMapBufferOES.?(arg_4965, arg_4966);
}
pub inline fn glMapBufferRange(arg_4967: GLenum, arg_4968: GLintptr, arg_4969: GLsizeiptr, arg_4970: GLbitfield) ?*anyopaque {
    return epoxy_glMapBufferRange.?(arg_4967, arg_4968, arg_4969, arg_4970);
}
pub inline fn glMapBufferRangeEXT(arg_4971: GLenum, arg_4972: GLintptr, arg_4973: GLsizeiptr, arg_4974: GLbitfield) ?*anyopaque {
    return epoxy_glMapBufferRangeEXT.?(arg_4971, arg_4972, arg_4973, arg_4974);
}
pub inline fn glMapControlPointsNV(arg_4975: GLenum, arg_4976: GLuint, arg_4977: GLenum, arg_4978: GLsizei, arg_4979: GLsizei, arg_4980: GLint, arg_4981: GLint, arg_4982: GLboolean, arg_4983: ?*const anyopaque) void {
    return epoxy_glMapControlPointsNV.?(arg_4975, arg_4976, arg_4977, arg_4978, arg_4979, arg_4980, arg_4981, arg_4982, arg_4983);
}
pub inline fn glMapGrid1d(arg_4984: GLint, arg_4985: GLdouble, arg_4986: GLdouble) void {
    return epoxy_glMapGrid1d.?(arg_4984, arg_4985, arg_4986);
}
pub inline fn glMapGrid1f(arg_4987: GLint, arg_4988: GLfloat, arg_4989: GLfloat) void {
    return epoxy_glMapGrid1f.?(arg_4987, arg_4988, arg_4989);
}
pub inline fn glMapGrid1xOES(arg_4990: GLint, arg_4991: GLfixed, arg_4992: GLfixed) void {
    return epoxy_glMapGrid1xOES.?(arg_4990, arg_4991, arg_4992);
}
pub inline fn glMapGrid2d(arg_4993: GLint, arg_4994: GLdouble, arg_4995: GLdouble, arg_4996: GLint, arg_4997: GLdouble, arg_4998: GLdouble) void {
    return epoxy_glMapGrid2d.?(arg_4993, arg_4994, arg_4995, arg_4996, arg_4997, arg_4998);
}
pub inline fn glMapGrid2f(arg_4999: GLint, arg_5000: GLfloat, arg_5001: GLfloat, arg_5002: GLint, arg_5003: GLfloat, arg_5004: GLfloat) void {
    return epoxy_glMapGrid2f.?(arg_4999, arg_5000, arg_5001, arg_5002, arg_5003, arg_5004);
}
pub inline fn glMapGrid2xOES(arg_5005: GLint, arg_5006: GLfixed, arg_5007: GLfixed, arg_5008: GLfixed, arg_5009: GLfixed) void {
    return epoxy_glMapGrid2xOES.?(arg_5005, arg_5006, arg_5007, arg_5008, arg_5009);
}
pub inline fn glMapNamedBuffer(arg_5010: GLuint, arg_5011: GLenum) ?*anyopaque {
    return epoxy_glMapNamedBuffer.?(arg_5010, arg_5011);
}
pub inline fn glMapNamedBufferEXT(arg_5012: GLuint, arg_5013: GLenum) ?*anyopaque {
    return epoxy_glMapNamedBufferEXT.?(arg_5012, arg_5013);
}
pub inline fn glMapNamedBufferRange(arg_5014: GLuint, arg_5015: GLintptr, arg_5016: GLsizeiptr, arg_5017: GLbitfield) ?*anyopaque {
    return epoxy_glMapNamedBufferRange.?(arg_5014, arg_5015, arg_5016, arg_5017);
}
pub inline fn glMapNamedBufferRangeEXT(arg_5018: GLuint, arg_5019: GLintptr, arg_5020: GLsizeiptr, arg_5021: GLbitfield) ?*anyopaque {
    return epoxy_glMapNamedBufferRangeEXT.?(arg_5018, arg_5019, arg_5020, arg_5021);
}
pub inline fn glMapObjectBufferATI(arg_5022: GLuint) ?*anyopaque {
    return epoxy_glMapObjectBufferATI.?(arg_5022);
}
pub inline fn glMapParameterfvNV(arg_5023: GLenum, arg_5024: GLenum, arg_5025: [*c]const GLfloat) void {
    return epoxy_glMapParameterfvNV.?(arg_5023, arg_5024, arg_5025);
}
pub inline fn glMapParameterivNV(arg_5026: GLenum, arg_5027: GLenum, arg_5028: [*c]const GLint) void {
    return epoxy_glMapParameterivNV.?(arg_5026, arg_5027, arg_5028);
}
pub inline fn glMapTexture2DINTEL(arg_5029: GLuint, arg_5030: GLint, arg_5031: GLbitfield, arg_5032: [*c]GLint, arg_5033: [*c]GLenum) ?*anyopaque {
    return epoxy_glMapTexture2DINTEL.?(arg_5029, arg_5030, arg_5031, arg_5032, arg_5033);
}
pub inline fn glMapVertexAttrib1dAPPLE(arg_5034: GLuint, arg_5035: GLuint, arg_5036: GLdouble, arg_5037: GLdouble, arg_5038: GLint, arg_5039: GLint, arg_5040: [*c]const GLdouble) void {
    return epoxy_glMapVertexAttrib1dAPPLE.?(arg_5034, arg_5035, arg_5036, arg_5037, arg_5038, arg_5039, arg_5040);
}
pub inline fn glMapVertexAttrib1fAPPLE(arg_5041: GLuint, arg_5042: GLuint, arg_5043: GLfloat, arg_5044: GLfloat, arg_5045: GLint, arg_5046: GLint, arg_5047: [*c]const GLfloat) void {
    return epoxy_glMapVertexAttrib1fAPPLE.?(arg_5041, arg_5042, arg_5043, arg_5044, arg_5045, arg_5046, arg_5047);
}
pub inline fn glMapVertexAttrib2dAPPLE(arg_5048: GLuint, arg_5049: GLuint, arg_5050: GLdouble, arg_5051: GLdouble, arg_5052: GLint, arg_5053: GLint, arg_5054: GLdouble, arg_5055: GLdouble, arg_5056: GLint, arg_5057: GLint, arg_5058: [*c]const GLdouble) void {
    return epoxy_glMapVertexAttrib2dAPPLE.?(arg_5048, arg_5049, arg_5050, arg_5051, arg_5052, arg_5053, arg_5054, arg_5055, arg_5056, arg_5057, arg_5058);
}
pub inline fn glMapVertexAttrib2fAPPLE(arg_5059: GLuint, arg_5060: GLuint, arg_5061: GLfloat, arg_5062: GLfloat, arg_5063: GLint, arg_5064: GLint, arg_5065: GLfloat, arg_5066: GLfloat, arg_5067: GLint, arg_5068: GLint, arg_5069: [*c]const GLfloat) void {
    return epoxy_glMapVertexAttrib2fAPPLE.?(arg_5059, arg_5060, arg_5061, arg_5062, arg_5063, arg_5064, arg_5065, arg_5066, arg_5067, arg_5068, arg_5069);
}
pub inline fn glMaterialf(arg_5070: GLenum, arg_5071: GLenum, arg_5072: GLfloat) void {
    return epoxy_glMaterialf.?(arg_5070, arg_5071, arg_5072);
}
pub inline fn glMaterialfv(arg_5073: GLenum, arg_5074: GLenum, arg_5075: [*c]const GLfloat) void {
    return epoxy_glMaterialfv.?(arg_5073, arg_5074, arg_5075);
}
pub inline fn glMateriali(arg_5076: GLenum, arg_5077: GLenum, arg_5078: GLint) void {
    return epoxy_glMateriali.?(arg_5076, arg_5077, arg_5078);
}
pub inline fn glMaterialiv(arg_5079: GLenum, arg_5080: GLenum, arg_5081: [*c]const GLint) void {
    return epoxy_glMaterialiv.?(arg_5079, arg_5080, arg_5081);
}
pub inline fn glMaterialx(arg_5082: GLenum, arg_5083: GLenum, arg_5084: GLfixed) void {
    return epoxy_glMaterialx.?(arg_5082, arg_5083, arg_5084);
}
pub inline fn glMaterialxOES(arg_5085: GLenum, arg_5086: GLenum, arg_5087: GLfixed) void {
    return epoxy_glMaterialxOES.?(arg_5085, arg_5086, arg_5087);
}
pub inline fn glMaterialxv(arg_5088: GLenum, arg_5089: GLenum, arg_5090: [*c]const GLfixed) void {
    return epoxy_glMaterialxv.?(arg_5088, arg_5089, arg_5090);
}
pub inline fn glMaterialxvOES(arg_5091: GLenum, arg_5092: GLenum, arg_5093: [*c]const GLfixed) void {
    return epoxy_glMaterialxvOES.?(arg_5091, arg_5092, arg_5093);
}
pub inline fn glMatrixFrustumEXT(arg_5094: GLenum, arg_5095: GLdouble, arg_5096: GLdouble, arg_5097: GLdouble, arg_5098: GLdouble, arg_5099: GLdouble, arg_5100: GLdouble) void {
    return epoxy_glMatrixFrustumEXT.?(arg_5094, arg_5095, arg_5096, arg_5097, arg_5098, arg_5099, arg_5100);
}
pub inline fn glMatrixIndexPointerARB(arg_5101: GLint, arg_5102: GLenum, arg_5103: GLsizei, arg_5104: ?*const anyopaque) void {
    return epoxy_glMatrixIndexPointerARB.?(arg_5101, arg_5102, arg_5103, arg_5104);
}
pub inline fn glMatrixIndexPointerOES(arg_5105: GLint, arg_5106: GLenum, arg_5107: GLsizei, arg_5108: ?*const anyopaque) void {
    return epoxy_glMatrixIndexPointerOES.?(arg_5105, arg_5106, arg_5107, arg_5108);
}
pub inline fn glMatrixIndexubvARB(arg_5109: GLint, arg_5110: [*c]const GLubyte) void {
    return epoxy_glMatrixIndexubvARB.?(arg_5109, arg_5110);
}
pub inline fn glMatrixIndexuivARB(arg_5111: GLint, arg_5112: [*c]const GLuint) void {
    return epoxy_glMatrixIndexuivARB.?(arg_5111, arg_5112);
}
pub inline fn glMatrixIndexusvARB(arg_5113: GLint, arg_5114: [*c]const GLushort) void {
    return epoxy_glMatrixIndexusvARB.?(arg_5113, arg_5114);
}
pub inline fn glMatrixLoad3x2fNV(arg_5115: GLenum, arg_5116: [*c]const GLfloat) void {
    return epoxy_glMatrixLoad3x2fNV.?(arg_5115, arg_5116);
}
pub inline fn glMatrixLoad3x3fNV(arg_5117: GLenum, arg_5118: [*c]const GLfloat) void {
    return epoxy_glMatrixLoad3x3fNV.?(arg_5117, arg_5118);
}
pub inline fn glMatrixLoadIdentityEXT(arg_5119: GLenum) void {
    return epoxy_glMatrixLoadIdentityEXT.?(arg_5119);
}
pub inline fn glMatrixLoadTranspose3x3fNV(arg_5120: GLenum, arg_5121: [*c]const GLfloat) void {
    return epoxy_glMatrixLoadTranspose3x3fNV.?(arg_5120, arg_5121);
}
pub inline fn glMatrixLoadTransposedEXT(arg_5122: GLenum, arg_5123: [*c]const GLdouble) void {
    return epoxy_glMatrixLoadTransposedEXT.?(arg_5122, arg_5123);
}
pub inline fn glMatrixLoadTransposefEXT(arg_5124: GLenum, arg_5125: [*c]const GLfloat) void {
    return epoxy_glMatrixLoadTransposefEXT.?(arg_5124, arg_5125);
}
pub inline fn glMatrixLoaddEXT(arg_5126: GLenum, arg_5127: [*c]const GLdouble) void {
    return epoxy_glMatrixLoaddEXT.?(arg_5126, arg_5127);
}
pub inline fn glMatrixLoadfEXT(arg_5128: GLenum, arg_5129: [*c]const GLfloat) void {
    return epoxy_glMatrixLoadfEXT.?(arg_5128, arg_5129);
}
pub inline fn glMatrixMode(arg_5130: GLenum) void {
    return epoxy_glMatrixMode.?(arg_5130);
}
pub inline fn glMatrixMult3x2fNV(arg_5131: GLenum, arg_5132: [*c]const GLfloat) void {
    return epoxy_glMatrixMult3x2fNV.?(arg_5131, arg_5132);
}
pub inline fn glMatrixMult3x3fNV(arg_5133: GLenum, arg_5134: [*c]const GLfloat) void {
    return epoxy_glMatrixMult3x3fNV.?(arg_5133, arg_5134);
}
pub inline fn glMatrixMultTranspose3x3fNV(arg_5135: GLenum, arg_5136: [*c]const GLfloat) void {
    return epoxy_glMatrixMultTranspose3x3fNV.?(arg_5135, arg_5136);
}
pub inline fn glMatrixMultTransposedEXT(arg_5137: GLenum, arg_5138: [*c]const GLdouble) void {
    return epoxy_glMatrixMultTransposedEXT.?(arg_5137, arg_5138);
}
pub inline fn glMatrixMultTransposefEXT(arg_5139: GLenum, arg_5140: [*c]const GLfloat) void {
    return epoxy_glMatrixMultTransposefEXT.?(arg_5139, arg_5140);
}
pub inline fn glMatrixMultdEXT(arg_5141: GLenum, arg_5142: [*c]const GLdouble) void {
    return epoxy_glMatrixMultdEXT.?(arg_5141, arg_5142);
}
pub inline fn glMatrixMultfEXT(arg_5143: GLenum, arg_5144: [*c]const GLfloat) void {
    return epoxy_glMatrixMultfEXT.?(arg_5143, arg_5144);
}
pub inline fn glMatrixOrthoEXT(arg_5145: GLenum, arg_5146: GLdouble, arg_5147: GLdouble, arg_5148: GLdouble, arg_5149: GLdouble, arg_5150: GLdouble, arg_5151: GLdouble) void {
    return epoxy_glMatrixOrthoEXT.?(arg_5145, arg_5146, arg_5147, arg_5148, arg_5149, arg_5150, arg_5151);
}
pub inline fn glMatrixPopEXT(arg_5152: GLenum) void {
    return epoxy_glMatrixPopEXT.?(arg_5152);
}
pub inline fn glMatrixPushEXT(arg_5153: GLenum) void {
    return epoxy_glMatrixPushEXT.?(arg_5153);
}
pub inline fn glMatrixRotatedEXT(arg_5154: GLenum, arg_5155: GLdouble, arg_5156: GLdouble, arg_5157: GLdouble, arg_5158: GLdouble) void {
    return epoxy_glMatrixRotatedEXT.?(arg_5154, arg_5155, arg_5156, arg_5157, arg_5158);
}
pub inline fn glMatrixRotatefEXT(arg_5159: GLenum, arg_5160: GLfloat, arg_5161: GLfloat, arg_5162: GLfloat, arg_5163: GLfloat) void {
    return epoxy_glMatrixRotatefEXT.?(arg_5159, arg_5160, arg_5161, arg_5162, arg_5163);
}
pub inline fn glMatrixScaledEXT(arg_5164: GLenum, arg_5165: GLdouble, arg_5166: GLdouble, arg_5167: GLdouble) void {
    return epoxy_glMatrixScaledEXT.?(arg_5164, arg_5165, arg_5166, arg_5167);
}
pub inline fn glMatrixScalefEXT(arg_5168: GLenum, arg_5169: GLfloat, arg_5170: GLfloat, arg_5171: GLfloat) void {
    return epoxy_glMatrixScalefEXT.?(arg_5168, arg_5169, arg_5170, arg_5171);
}
pub inline fn glMatrixTranslatedEXT(arg_5172: GLenum, arg_5173: GLdouble, arg_5174: GLdouble, arg_5175: GLdouble) void {
    return epoxy_glMatrixTranslatedEXT.?(arg_5172, arg_5173, arg_5174, arg_5175);
}
pub inline fn glMatrixTranslatefEXT(arg_5176: GLenum, arg_5177: GLfloat, arg_5178: GLfloat, arg_5179: GLfloat) void {
    return epoxy_glMatrixTranslatefEXT.?(arg_5176, arg_5177, arg_5178, arg_5179);
}
pub inline fn glMaxShaderCompilerThreadsARB(arg_5180: GLuint) void {
    return epoxy_glMaxShaderCompilerThreadsARB.?(arg_5180);
}
pub inline fn glMaxShaderCompilerThreadsKHR(arg_5181: GLuint) void {
    return epoxy_glMaxShaderCompilerThreadsKHR.?(arg_5181);
}
pub inline fn glMemoryBarrier(arg_5182: GLbitfield) void {
    return epoxy_glMemoryBarrier.?(arg_5182);
}
pub inline fn glMemoryBarrierByRegion(arg_5183: GLbitfield) void {
    return epoxy_glMemoryBarrierByRegion.?(arg_5183);
}
pub inline fn glMemoryBarrierEXT(arg_5184: GLbitfield) void {
    return epoxy_glMemoryBarrierEXT.?(arg_5184);
}
pub inline fn glMemoryObjectParameterivEXT(arg_5185: GLuint, arg_5186: GLenum, arg_5187: [*c]const GLint) void {
    return epoxy_glMemoryObjectParameterivEXT.?(arg_5185, arg_5186, arg_5187);
}
pub inline fn glMinSampleShading(arg_5188: GLfloat) void {
    return epoxy_glMinSampleShading.?(arg_5188);
}
pub inline fn glMinSampleShadingARB(arg_5189: GLfloat) void {
    return epoxy_glMinSampleShadingARB.?(arg_5189);
}
pub inline fn glMinSampleShadingOES(arg_5190: GLfloat) void {
    return epoxy_glMinSampleShadingOES.?(arg_5190);
}
pub inline fn glMinmax(arg_5191: GLenum, arg_5192: GLenum, arg_5193: GLboolean) void {
    return epoxy_glMinmax.?(arg_5191, arg_5192, arg_5193);
}
pub inline fn glMinmaxEXT(arg_5194: GLenum, arg_5195: GLenum, arg_5196: GLboolean) void {
    return epoxy_glMinmaxEXT.?(arg_5194, arg_5195, arg_5196);
}
pub inline fn glMultMatrixd(arg_5197: [*c]const GLdouble) void {
    return epoxy_glMultMatrixd.?(arg_5197);
}
pub inline fn glMultMatrixf(arg_5198: [*c]const GLfloat) void {
    return epoxy_glMultMatrixf.?(arg_5198);
}
pub inline fn glMultMatrixx(arg_5199: [*c]const GLfixed) void {
    return epoxy_glMultMatrixx.?(arg_5199);
}
pub inline fn glMultMatrixxOES(arg_5200: [*c]const GLfixed) void {
    return epoxy_glMultMatrixxOES.?(arg_5200);
}
pub inline fn glMultTransposeMatrixd(arg_5201: [*c]const GLdouble) void {
    return epoxy_glMultTransposeMatrixd.?(arg_5201);
}
pub inline fn glMultTransposeMatrixdARB(arg_5202: [*c]const GLdouble) void {
    return epoxy_glMultTransposeMatrixdARB.?(arg_5202);
}
pub inline fn glMultTransposeMatrixf(arg_5203: [*c]const GLfloat) void {
    return epoxy_glMultTransposeMatrixf.?(arg_5203);
}
pub inline fn glMultTransposeMatrixfARB(arg_5204: [*c]const GLfloat) void {
    return epoxy_glMultTransposeMatrixfARB.?(arg_5204);
}
pub inline fn glMultTransposeMatrixxOES(arg_5205: [*c]const GLfixed) void {
    return epoxy_glMultTransposeMatrixxOES.?(arg_5205);
}
pub inline fn glMultiDrawArrays(arg_5206: GLenum, arg_5207: [*c]const GLint, arg_5208: [*c]const GLsizei, arg_5209: GLsizei) void {
    return epoxy_glMultiDrawArrays.?(arg_5206, arg_5207, arg_5208, arg_5209);
}
pub inline fn glMultiDrawArraysEXT(arg_5210: GLenum, arg_5211: [*c]const GLint, arg_5212: [*c]const GLsizei, arg_5213: GLsizei) void {
    return epoxy_glMultiDrawArraysEXT.?(arg_5210, arg_5211, arg_5212, arg_5213);
}
pub inline fn glMultiDrawArraysIndirect(arg_5214: GLenum, arg_5215: ?*const anyopaque, arg_5216: GLsizei, arg_5217: GLsizei) void {
    return epoxy_glMultiDrawArraysIndirect.?(arg_5214, arg_5215, arg_5216, arg_5217);
}
pub inline fn glMultiDrawArraysIndirectAMD(arg_5218: GLenum, arg_5219: ?*const anyopaque, arg_5220: GLsizei, arg_5221: GLsizei) void {
    return epoxy_glMultiDrawArraysIndirectAMD.?(arg_5218, arg_5219, arg_5220, arg_5221);
}
pub inline fn glMultiDrawArraysIndirectBindlessCountNV(arg_5222: GLenum, arg_5223: ?*const anyopaque, arg_5224: GLsizei, arg_5225: GLsizei, arg_5226: GLsizei, arg_5227: GLint) void {
    return epoxy_glMultiDrawArraysIndirectBindlessCountNV.?(arg_5222, arg_5223, arg_5224, arg_5225, arg_5226, arg_5227);
}
pub inline fn glMultiDrawArraysIndirectBindlessNV(arg_5228: GLenum, arg_5229: ?*const anyopaque, arg_5230: GLsizei, arg_5231: GLsizei, arg_5232: GLint) void {
    return epoxy_glMultiDrawArraysIndirectBindlessNV.?(arg_5228, arg_5229, arg_5230, arg_5231, arg_5232);
}
pub inline fn glMultiDrawArraysIndirectCount(arg_5233: GLenum, arg_5234: ?*const anyopaque, arg_5235: GLintptr, arg_5236: GLsizei, arg_5237: GLsizei) void {
    return epoxy_glMultiDrawArraysIndirectCount.?(arg_5233, arg_5234, arg_5235, arg_5236, arg_5237);
}
pub inline fn glMultiDrawArraysIndirectCountARB(arg_5238: GLenum, arg_5239: ?*const anyopaque, arg_5240: GLintptr, arg_5241: GLsizei, arg_5242: GLsizei) void {
    return epoxy_glMultiDrawArraysIndirectCountARB.?(arg_5238, arg_5239, arg_5240, arg_5241, arg_5242);
}
pub inline fn glMultiDrawArraysIndirectEXT(arg_5243: GLenum, arg_5244: ?*const anyopaque, arg_5245: GLsizei, arg_5246: GLsizei) void {
    return epoxy_glMultiDrawArraysIndirectEXT.?(arg_5243, arg_5244, arg_5245, arg_5246);
}
pub inline fn glMultiDrawElementArrayAPPLE(arg_5247: GLenum, arg_5248: [*c]const GLint, arg_5249: [*c]const GLsizei, arg_5250: GLsizei) void {
    return epoxy_glMultiDrawElementArrayAPPLE.?(arg_5247, arg_5248, arg_5249, arg_5250);
}
pub inline fn glMultiDrawElements(arg_5251: GLenum, arg_5252: [*c]const GLsizei, arg_5253: GLenum, arg_5254: [*c]const ?*const anyopaque, arg_5255: GLsizei) void {
    return epoxy_glMultiDrawElements.?(arg_5251, arg_5252, arg_5253, arg_5254, arg_5255);
}
pub inline fn glMultiDrawElementsBaseVertex(arg_5256: GLenum, arg_5257: [*c]const GLsizei, arg_5258: GLenum, arg_5259: [*c]const ?*const anyopaque, arg_5260: GLsizei, arg_5261: [*c]const GLint) void {
    return epoxy_glMultiDrawElementsBaseVertex.?(arg_5256, arg_5257, arg_5258, arg_5259, arg_5260, arg_5261);
}
pub inline fn glMultiDrawElementsBaseVertexEXT(arg_5262: GLenum, arg_5263: [*c]const GLsizei, arg_5264: GLenum, arg_5265: [*c]const ?*const anyopaque, arg_5266: GLsizei, arg_5267: [*c]const GLint) void {
    return epoxy_glMultiDrawElementsBaseVertexEXT.?(arg_5262, arg_5263, arg_5264, arg_5265, arg_5266, arg_5267);
}
pub inline fn glMultiDrawElementsEXT(arg_5268: GLenum, arg_5269: [*c]const GLsizei, arg_5270: GLenum, arg_5271: [*c]const ?*const anyopaque, arg_5272: GLsizei) void {
    return epoxy_glMultiDrawElementsEXT.?(arg_5268, arg_5269, arg_5270, arg_5271, arg_5272);
}
pub inline fn glMultiDrawElementsIndirect(arg_5273: GLenum, arg_5274: GLenum, arg_5275: ?*const anyopaque, arg_5276: GLsizei, arg_5277: GLsizei) void {
    return epoxy_glMultiDrawElementsIndirect.?(arg_5273, arg_5274, arg_5275, arg_5276, arg_5277);
}
pub inline fn glMultiDrawElementsIndirectAMD(arg_5278: GLenum, arg_5279: GLenum, arg_5280: ?*const anyopaque, arg_5281: GLsizei, arg_5282: GLsizei) void {
    return epoxy_glMultiDrawElementsIndirectAMD.?(arg_5278, arg_5279, arg_5280, arg_5281, arg_5282);
}
pub inline fn glMultiDrawElementsIndirectBindlessCountNV(arg_5283: GLenum, arg_5284: GLenum, arg_5285: ?*const anyopaque, arg_5286: GLsizei, arg_5287: GLsizei, arg_5288: GLsizei, arg_5289: GLint) void {
    return epoxy_glMultiDrawElementsIndirectBindlessCountNV.?(arg_5283, arg_5284, arg_5285, arg_5286, arg_5287, arg_5288, arg_5289);
}
pub inline fn glMultiDrawElementsIndirectBindlessNV(arg_5290: GLenum, arg_5291: GLenum, arg_5292: ?*const anyopaque, arg_5293: GLsizei, arg_5294: GLsizei, arg_5295: GLint) void {
    return epoxy_glMultiDrawElementsIndirectBindlessNV.?(arg_5290, arg_5291, arg_5292, arg_5293, arg_5294, arg_5295);
}
pub inline fn glMultiDrawElementsIndirectCount(arg_5296: GLenum, arg_5297: GLenum, arg_5298: ?*const anyopaque, arg_5299: GLintptr, arg_5300: GLsizei, arg_5301: GLsizei) void {
    return epoxy_glMultiDrawElementsIndirectCount.?(arg_5296, arg_5297, arg_5298, arg_5299, arg_5300, arg_5301);
}
pub inline fn glMultiDrawElementsIndirectCountARB(arg_5302: GLenum, arg_5303: GLenum, arg_5304: ?*const anyopaque, arg_5305: GLintptr, arg_5306: GLsizei, arg_5307: GLsizei) void {
    return epoxy_glMultiDrawElementsIndirectCountARB.?(arg_5302, arg_5303, arg_5304, arg_5305, arg_5306, arg_5307);
}
pub inline fn glMultiDrawElementsIndirectEXT(arg_5308: GLenum, arg_5309: GLenum, arg_5310: ?*const anyopaque, arg_5311: GLsizei, arg_5312: GLsizei) void {
    return epoxy_glMultiDrawElementsIndirectEXT.?(arg_5308, arg_5309, arg_5310, arg_5311, arg_5312);
}
pub inline fn glMultiDrawMeshTasksIndirectCountNV(arg_5313: GLintptr, arg_5314: GLintptr, arg_5315: GLsizei, arg_5316: GLsizei) void {
    return epoxy_glMultiDrawMeshTasksIndirectCountNV.?(arg_5313, arg_5314, arg_5315, arg_5316);
}
pub inline fn glMultiDrawMeshTasksIndirectNV(arg_5317: GLintptr, arg_5318: GLsizei, arg_5319: GLsizei) void {
    return epoxy_glMultiDrawMeshTasksIndirectNV.?(arg_5317, arg_5318, arg_5319);
}
pub inline fn glMultiDrawRangeElementArrayAPPLE(arg_5320: GLenum, arg_5321: GLuint, arg_5322: GLuint, arg_5323: [*c]const GLint, arg_5324: [*c]const GLsizei, arg_5325: GLsizei) void {
    return epoxy_glMultiDrawRangeElementArrayAPPLE.?(arg_5320, arg_5321, arg_5322, arg_5323, arg_5324, arg_5325);
}
pub inline fn glMultiModeDrawArraysIBM(arg_5326: [*c]const GLenum, arg_5327: [*c]const GLint, arg_5328: [*c]const GLsizei, arg_5329: GLsizei, arg_5330: GLint) void {
    return epoxy_glMultiModeDrawArraysIBM.?(arg_5326, arg_5327, arg_5328, arg_5329, arg_5330);
}
pub inline fn glMultiModeDrawElementsIBM(arg_5331: [*c]const GLenum, arg_5332: [*c]const GLsizei, arg_5333: GLenum, arg_5334: [*c]const ?*const anyopaque, arg_5335: GLsizei, arg_5336: GLint) void {
    return epoxy_glMultiModeDrawElementsIBM.?(arg_5331, arg_5332, arg_5333, arg_5334, arg_5335, arg_5336);
}
pub inline fn glMultiTexBufferEXT(arg_5337: GLenum, arg_5338: GLenum, arg_5339: GLenum, arg_5340: GLuint) void {
    return epoxy_glMultiTexBufferEXT.?(arg_5337, arg_5338, arg_5339, arg_5340);
}
pub inline fn glMultiTexCoord1bOES(arg_5341: GLenum, arg_5342: GLbyte) void {
    return epoxy_glMultiTexCoord1bOES.?(arg_5341, arg_5342);
}
pub inline fn glMultiTexCoord1bvOES(arg_5343: GLenum, arg_5344: [*c]const GLbyte) void {
    return epoxy_glMultiTexCoord1bvOES.?(arg_5343, arg_5344);
}
pub inline fn glMultiTexCoord1d(arg_5345: GLenum, arg_5346: GLdouble) void {
    return epoxy_glMultiTexCoord1d.?(arg_5345, arg_5346);
}
pub inline fn glMultiTexCoord1dARB(arg_5347: GLenum, arg_5348: GLdouble) void {
    return epoxy_glMultiTexCoord1dARB.?(arg_5347, arg_5348);
}
pub inline fn glMultiTexCoord1dv(arg_5349: GLenum, arg_5350: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord1dv.?(arg_5349, arg_5350);
}
pub inline fn glMultiTexCoord1dvARB(arg_5351: GLenum, arg_5352: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord1dvARB.?(arg_5351, arg_5352);
}
pub inline fn glMultiTexCoord1f(arg_5353: GLenum, arg_5354: GLfloat) void {
    return epoxy_glMultiTexCoord1f.?(arg_5353, arg_5354);
}
pub inline fn glMultiTexCoord1fARB(arg_5355: GLenum, arg_5356: GLfloat) void {
    return epoxy_glMultiTexCoord1fARB.?(arg_5355, arg_5356);
}
pub inline fn glMultiTexCoord1fv(arg_5357: GLenum, arg_5358: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord1fv.?(arg_5357, arg_5358);
}
pub inline fn glMultiTexCoord1fvARB(arg_5359: GLenum, arg_5360: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord1fvARB.?(arg_5359, arg_5360);
}
pub inline fn glMultiTexCoord1hNV(arg_5361: GLenum, arg_5362: GLhalfNV) void {
    return epoxy_glMultiTexCoord1hNV.?(arg_5361, arg_5362);
}
pub inline fn glMultiTexCoord1hvNV(arg_5363: GLenum, arg_5364: [*c]const GLhalfNV) void {
    return epoxy_glMultiTexCoord1hvNV.?(arg_5363, arg_5364);
}
pub inline fn glMultiTexCoord1i(arg_5365: GLenum, arg_5366: GLint) void {
    return epoxy_glMultiTexCoord1i.?(arg_5365, arg_5366);
}
pub inline fn glMultiTexCoord1iARB(arg_5367: GLenum, arg_5368: GLint) void {
    return epoxy_glMultiTexCoord1iARB.?(arg_5367, arg_5368);
}
pub inline fn glMultiTexCoord1iv(arg_5369: GLenum, arg_5370: [*c]const GLint) void {
    return epoxy_glMultiTexCoord1iv.?(arg_5369, arg_5370);
}
pub inline fn glMultiTexCoord1ivARB(arg_5371: GLenum, arg_5372: [*c]const GLint) void {
    return epoxy_glMultiTexCoord1ivARB.?(arg_5371, arg_5372);
}
pub inline fn glMultiTexCoord1s(arg_5373: GLenum, arg_5374: GLshort) void {
    return epoxy_glMultiTexCoord1s.?(arg_5373, arg_5374);
}
pub inline fn glMultiTexCoord1sARB(arg_5375: GLenum, arg_5376: GLshort) void {
    return epoxy_glMultiTexCoord1sARB.?(arg_5375, arg_5376);
}
pub inline fn glMultiTexCoord1sv(arg_5377: GLenum, arg_5378: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord1sv.?(arg_5377, arg_5378);
}
pub inline fn glMultiTexCoord1svARB(arg_5379: GLenum, arg_5380: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord1svARB.?(arg_5379, arg_5380);
}
pub inline fn glMultiTexCoord1xOES(arg_5381: GLenum, arg_5382: GLfixed) void {
    return epoxy_glMultiTexCoord1xOES.?(arg_5381, arg_5382);
}
pub inline fn glMultiTexCoord1xvOES(arg_5383: GLenum, arg_5384: [*c]const GLfixed) void {
    return epoxy_glMultiTexCoord1xvOES.?(arg_5383, arg_5384);
}
pub inline fn glMultiTexCoord2bOES(arg_5385: GLenum, arg_5386: GLbyte, arg_5387: GLbyte) void {
    return epoxy_glMultiTexCoord2bOES.?(arg_5385, arg_5386, arg_5387);
}
pub inline fn glMultiTexCoord2bvOES(arg_5388: GLenum, arg_5389: [*c]const GLbyte) void {
    return epoxy_glMultiTexCoord2bvOES.?(arg_5388, arg_5389);
}
pub inline fn glMultiTexCoord2d(arg_5390: GLenum, arg_5391: GLdouble, arg_5392: GLdouble) void {
    return epoxy_glMultiTexCoord2d.?(arg_5390, arg_5391, arg_5392);
}
pub inline fn glMultiTexCoord2dARB(arg_5393: GLenum, arg_5394: GLdouble, arg_5395: GLdouble) void {
    return epoxy_glMultiTexCoord2dARB.?(arg_5393, arg_5394, arg_5395);
}
pub inline fn glMultiTexCoord2dv(arg_5396: GLenum, arg_5397: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord2dv.?(arg_5396, arg_5397);
}
pub inline fn glMultiTexCoord2dvARB(arg_5398: GLenum, arg_5399: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord2dvARB.?(arg_5398, arg_5399);
}
pub inline fn glMultiTexCoord2f(arg_5400: GLenum, arg_5401: GLfloat, arg_5402: GLfloat) void {
    return epoxy_glMultiTexCoord2f.?(arg_5400, arg_5401, arg_5402);
}
pub inline fn glMultiTexCoord2fARB(arg_5403: GLenum, arg_5404: GLfloat, arg_5405: GLfloat) void {
    return epoxy_glMultiTexCoord2fARB.?(arg_5403, arg_5404, arg_5405);
}
pub inline fn glMultiTexCoord2fv(arg_5406: GLenum, arg_5407: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord2fv.?(arg_5406, arg_5407);
}
pub inline fn glMultiTexCoord2fvARB(arg_5408: GLenum, arg_5409: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord2fvARB.?(arg_5408, arg_5409);
}
pub inline fn glMultiTexCoord2hNV(arg_5410: GLenum, arg_5411: GLhalfNV, arg_5412: GLhalfNV) void {
    return epoxy_glMultiTexCoord2hNV.?(arg_5410, arg_5411, arg_5412);
}
pub inline fn glMultiTexCoord2hvNV(arg_5413: GLenum, arg_5414: [*c]const GLhalfNV) void {
    return epoxy_glMultiTexCoord2hvNV.?(arg_5413, arg_5414);
}
pub inline fn glMultiTexCoord2i(arg_5415: GLenum, arg_5416: GLint, arg_5417: GLint) void {
    return epoxy_glMultiTexCoord2i.?(arg_5415, arg_5416, arg_5417);
}
pub inline fn glMultiTexCoord2iARB(arg_5418: GLenum, arg_5419: GLint, arg_5420: GLint) void {
    return epoxy_glMultiTexCoord2iARB.?(arg_5418, arg_5419, arg_5420);
}
pub inline fn glMultiTexCoord2iv(arg_5421: GLenum, arg_5422: [*c]const GLint) void {
    return epoxy_glMultiTexCoord2iv.?(arg_5421, arg_5422);
}
pub inline fn glMultiTexCoord2ivARB(arg_5423: GLenum, arg_5424: [*c]const GLint) void {
    return epoxy_glMultiTexCoord2ivARB.?(arg_5423, arg_5424);
}
pub inline fn glMultiTexCoord2s(arg_5425: GLenum, arg_5426: GLshort, arg_5427: GLshort) void {
    return epoxy_glMultiTexCoord2s.?(arg_5425, arg_5426, arg_5427);
}
pub inline fn glMultiTexCoord2sARB(arg_5428: GLenum, arg_5429: GLshort, arg_5430: GLshort) void {
    return epoxy_glMultiTexCoord2sARB.?(arg_5428, arg_5429, arg_5430);
}
pub inline fn glMultiTexCoord2sv(arg_5431: GLenum, arg_5432: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord2sv.?(arg_5431, arg_5432);
}
pub inline fn glMultiTexCoord2svARB(arg_5433: GLenum, arg_5434: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord2svARB.?(arg_5433, arg_5434);
}
pub inline fn glMultiTexCoord2xOES(arg_5435: GLenum, arg_5436: GLfixed, arg_5437: GLfixed) void {
    return epoxy_glMultiTexCoord2xOES.?(arg_5435, arg_5436, arg_5437);
}
pub inline fn glMultiTexCoord2xvOES(arg_5438: GLenum, arg_5439: [*c]const GLfixed) void {
    return epoxy_glMultiTexCoord2xvOES.?(arg_5438, arg_5439);
}
pub inline fn glMultiTexCoord3bOES(arg_5440: GLenum, arg_5441: GLbyte, arg_5442: GLbyte, arg_5443: GLbyte) void {
    return epoxy_glMultiTexCoord3bOES.?(arg_5440, arg_5441, arg_5442, arg_5443);
}
pub inline fn glMultiTexCoord3bvOES(arg_5444: GLenum, arg_5445: [*c]const GLbyte) void {
    return epoxy_glMultiTexCoord3bvOES.?(arg_5444, arg_5445);
}
pub inline fn glMultiTexCoord3d(arg_5446: GLenum, arg_5447: GLdouble, arg_5448: GLdouble, arg_5449: GLdouble) void {
    return epoxy_glMultiTexCoord3d.?(arg_5446, arg_5447, arg_5448, arg_5449);
}
pub inline fn glMultiTexCoord3dARB(arg_5450: GLenum, arg_5451: GLdouble, arg_5452: GLdouble, arg_5453: GLdouble) void {
    return epoxy_glMultiTexCoord3dARB.?(arg_5450, arg_5451, arg_5452, arg_5453);
}
pub inline fn glMultiTexCoord3dv(arg_5454: GLenum, arg_5455: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord3dv.?(arg_5454, arg_5455);
}
pub inline fn glMultiTexCoord3dvARB(arg_5456: GLenum, arg_5457: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord3dvARB.?(arg_5456, arg_5457);
}
pub inline fn glMultiTexCoord3f(arg_5458: GLenum, arg_5459: GLfloat, arg_5460: GLfloat, arg_5461: GLfloat) void {
    return epoxy_glMultiTexCoord3f.?(arg_5458, arg_5459, arg_5460, arg_5461);
}
pub inline fn glMultiTexCoord3fARB(arg_5462: GLenum, arg_5463: GLfloat, arg_5464: GLfloat, arg_5465: GLfloat) void {
    return epoxy_glMultiTexCoord3fARB.?(arg_5462, arg_5463, arg_5464, arg_5465);
}
pub inline fn glMultiTexCoord3fv(arg_5466: GLenum, arg_5467: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord3fv.?(arg_5466, arg_5467);
}
pub inline fn glMultiTexCoord3fvARB(arg_5468: GLenum, arg_5469: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord3fvARB.?(arg_5468, arg_5469);
}
pub inline fn glMultiTexCoord3hNV(arg_5470: GLenum, arg_5471: GLhalfNV, arg_5472: GLhalfNV, arg_5473: GLhalfNV) void {
    return epoxy_glMultiTexCoord3hNV.?(arg_5470, arg_5471, arg_5472, arg_5473);
}
pub inline fn glMultiTexCoord3hvNV(arg_5474: GLenum, arg_5475: [*c]const GLhalfNV) void {
    return epoxy_glMultiTexCoord3hvNV.?(arg_5474, arg_5475);
}
pub inline fn glMultiTexCoord3i(arg_5476: GLenum, arg_5477: GLint, arg_5478: GLint, arg_5479: GLint) void {
    return epoxy_glMultiTexCoord3i.?(arg_5476, arg_5477, arg_5478, arg_5479);
}
pub inline fn glMultiTexCoord3iARB(arg_5480: GLenum, arg_5481: GLint, arg_5482: GLint, arg_5483: GLint) void {
    return epoxy_glMultiTexCoord3iARB.?(arg_5480, arg_5481, arg_5482, arg_5483);
}
pub inline fn glMultiTexCoord3iv(arg_5484: GLenum, arg_5485: [*c]const GLint) void {
    return epoxy_glMultiTexCoord3iv.?(arg_5484, arg_5485);
}
pub inline fn glMultiTexCoord3ivARB(arg_5486: GLenum, arg_5487: [*c]const GLint) void {
    return epoxy_glMultiTexCoord3ivARB.?(arg_5486, arg_5487);
}
pub inline fn glMultiTexCoord3s(arg_5488: GLenum, arg_5489: GLshort, arg_5490: GLshort, arg_5491: GLshort) void {
    return epoxy_glMultiTexCoord3s.?(arg_5488, arg_5489, arg_5490, arg_5491);
}
pub inline fn glMultiTexCoord3sARB(arg_5492: GLenum, arg_5493: GLshort, arg_5494: GLshort, arg_5495: GLshort) void {
    return epoxy_glMultiTexCoord3sARB.?(arg_5492, arg_5493, arg_5494, arg_5495);
}
pub inline fn glMultiTexCoord3sv(arg_5496: GLenum, arg_5497: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord3sv.?(arg_5496, arg_5497);
}
pub inline fn glMultiTexCoord3svARB(arg_5498: GLenum, arg_5499: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord3svARB.?(arg_5498, arg_5499);
}
pub inline fn glMultiTexCoord3xOES(arg_5500: GLenum, arg_5501: GLfixed, arg_5502: GLfixed, arg_5503: GLfixed) void {
    return epoxy_glMultiTexCoord3xOES.?(arg_5500, arg_5501, arg_5502, arg_5503);
}
pub inline fn glMultiTexCoord3xvOES(arg_5504: GLenum, arg_5505: [*c]const GLfixed) void {
    return epoxy_glMultiTexCoord3xvOES.?(arg_5504, arg_5505);
}
pub inline fn glMultiTexCoord4bOES(arg_5506: GLenum, arg_5507: GLbyte, arg_5508: GLbyte, arg_5509: GLbyte, arg_5510: GLbyte) void {
    return epoxy_glMultiTexCoord4bOES.?(arg_5506, arg_5507, arg_5508, arg_5509, arg_5510);
}
pub inline fn glMultiTexCoord4bvOES(arg_5511: GLenum, arg_5512: [*c]const GLbyte) void {
    return epoxy_glMultiTexCoord4bvOES.?(arg_5511, arg_5512);
}
pub inline fn glMultiTexCoord4d(arg_5513: GLenum, arg_5514: GLdouble, arg_5515: GLdouble, arg_5516: GLdouble, arg_5517: GLdouble) void {
    return epoxy_glMultiTexCoord4d.?(arg_5513, arg_5514, arg_5515, arg_5516, arg_5517);
}
pub inline fn glMultiTexCoord4dARB(arg_5518: GLenum, arg_5519: GLdouble, arg_5520: GLdouble, arg_5521: GLdouble, arg_5522: GLdouble) void {
    return epoxy_glMultiTexCoord4dARB.?(arg_5518, arg_5519, arg_5520, arg_5521, arg_5522);
}
pub inline fn glMultiTexCoord4dv(arg_5523: GLenum, arg_5524: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord4dv.?(arg_5523, arg_5524);
}
pub inline fn glMultiTexCoord4dvARB(arg_5525: GLenum, arg_5526: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord4dvARB.?(arg_5525, arg_5526);
}
pub inline fn glMultiTexCoord4f(arg_5527: GLenum, arg_5528: GLfloat, arg_5529: GLfloat, arg_5530: GLfloat, arg_5531: GLfloat) void {
    return epoxy_glMultiTexCoord4f.?(arg_5527, arg_5528, arg_5529, arg_5530, arg_5531);
}
pub inline fn glMultiTexCoord4fARB(arg_5532: GLenum, arg_5533: GLfloat, arg_5534: GLfloat, arg_5535: GLfloat, arg_5536: GLfloat) void {
    return epoxy_glMultiTexCoord4fARB.?(arg_5532, arg_5533, arg_5534, arg_5535, arg_5536);
}
pub inline fn glMultiTexCoord4fv(arg_5537: GLenum, arg_5538: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord4fv.?(arg_5537, arg_5538);
}
pub inline fn glMultiTexCoord4fvARB(arg_5539: GLenum, arg_5540: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord4fvARB.?(arg_5539, arg_5540);
}
pub inline fn glMultiTexCoord4hNV(arg_5541: GLenum, arg_5542: GLhalfNV, arg_5543: GLhalfNV, arg_5544: GLhalfNV, arg_5545: GLhalfNV) void {
    return epoxy_glMultiTexCoord4hNV.?(arg_5541, arg_5542, arg_5543, arg_5544, arg_5545);
}
pub inline fn glMultiTexCoord4hvNV(arg_5546: GLenum, arg_5547: [*c]const GLhalfNV) void {
    return epoxy_glMultiTexCoord4hvNV.?(arg_5546, arg_5547);
}
pub inline fn glMultiTexCoord4i(arg_5548: GLenum, arg_5549: GLint, arg_5550: GLint, arg_5551: GLint, arg_5552: GLint) void {
    return epoxy_glMultiTexCoord4i.?(arg_5548, arg_5549, arg_5550, arg_5551, arg_5552);
}
pub inline fn glMultiTexCoord4iARB(arg_5553: GLenum, arg_5554: GLint, arg_5555: GLint, arg_5556: GLint, arg_5557: GLint) void {
    return epoxy_glMultiTexCoord4iARB.?(arg_5553, arg_5554, arg_5555, arg_5556, arg_5557);
}
pub inline fn glMultiTexCoord4iv(arg_5558: GLenum, arg_5559: [*c]const GLint) void {
    return epoxy_glMultiTexCoord4iv.?(arg_5558, arg_5559);
}
pub inline fn glMultiTexCoord4ivARB(arg_5560: GLenum, arg_5561: [*c]const GLint) void {
    return epoxy_glMultiTexCoord4ivARB.?(arg_5560, arg_5561);
}
pub inline fn glMultiTexCoord4s(arg_5562: GLenum, arg_5563: GLshort, arg_5564: GLshort, arg_5565: GLshort, arg_5566: GLshort) void {
    return epoxy_glMultiTexCoord4s.?(arg_5562, arg_5563, arg_5564, arg_5565, arg_5566);
}
pub inline fn glMultiTexCoord4sARB(arg_5567: GLenum, arg_5568: GLshort, arg_5569: GLshort, arg_5570: GLshort, arg_5571: GLshort) void {
    return epoxy_glMultiTexCoord4sARB.?(arg_5567, arg_5568, arg_5569, arg_5570, arg_5571);
}
pub inline fn glMultiTexCoord4sv(arg_5572: GLenum, arg_5573: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord4sv.?(arg_5572, arg_5573);
}
pub inline fn glMultiTexCoord4svARB(arg_5574: GLenum, arg_5575: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord4svARB.?(arg_5574, arg_5575);
}
pub inline fn glMultiTexCoord4x(arg_5576: GLenum, arg_5577: GLfixed, arg_5578: GLfixed, arg_5579: GLfixed, arg_5580: GLfixed) void {
    return epoxy_glMultiTexCoord4x.?(arg_5576, arg_5577, arg_5578, arg_5579, arg_5580);
}
pub inline fn glMultiTexCoord4xOES(arg_5581: GLenum, arg_5582: GLfixed, arg_5583: GLfixed, arg_5584: GLfixed, arg_5585: GLfixed) void {
    return epoxy_glMultiTexCoord4xOES.?(arg_5581, arg_5582, arg_5583, arg_5584, arg_5585);
}
pub inline fn glMultiTexCoord4xvOES(arg_5586: GLenum, arg_5587: [*c]const GLfixed) void {
    return epoxy_glMultiTexCoord4xvOES.?(arg_5586, arg_5587);
}
pub inline fn glMultiTexCoordP1ui(arg_5588: GLenum, arg_5589: GLenum, arg_5590: GLuint) void {
    return epoxy_glMultiTexCoordP1ui.?(arg_5588, arg_5589, arg_5590);
}
pub inline fn glMultiTexCoordP1uiv(arg_5591: GLenum, arg_5592: GLenum, arg_5593: [*c]const GLuint) void {
    return epoxy_glMultiTexCoordP1uiv.?(arg_5591, arg_5592, arg_5593);
}
pub inline fn glMultiTexCoordP2ui(arg_5594: GLenum, arg_5595: GLenum, arg_5596: GLuint) void {
    return epoxy_glMultiTexCoordP2ui.?(arg_5594, arg_5595, arg_5596);
}
pub inline fn glMultiTexCoordP2uiv(arg_5597: GLenum, arg_5598: GLenum, arg_5599: [*c]const GLuint) void {
    return epoxy_glMultiTexCoordP2uiv.?(arg_5597, arg_5598, arg_5599);
}
pub inline fn glMultiTexCoordP3ui(arg_5600: GLenum, arg_5601: GLenum, arg_5602: GLuint) void {
    return epoxy_glMultiTexCoordP3ui.?(arg_5600, arg_5601, arg_5602);
}
pub inline fn glMultiTexCoordP3uiv(arg_5603: GLenum, arg_5604: GLenum, arg_5605: [*c]const GLuint) void {
    return epoxy_glMultiTexCoordP3uiv.?(arg_5603, arg_5604, arg_5605);
}
pub inline fn glMultiTexCoordP4ui(arg_5606: GLenum, arg_5607: GLenum, arg_5608: GLuint) void {
    return epoxy_glMultiTexCoordP4ui.?(arg_5606, arg_5607, arg_5608);
}
pub inline fn glMultiTexCoordP4uiv(arg_5609: GLenum, arg_5610: GLenum, arg_5611: [*c]const GLuint) void {
    return epoxy_glMultiTexCoordP4uiv.?(arg_5609, arg_5610, arg_5611);
}
pub inline fn glMultiTexCoordPointerEXT(arg_5612: GLenum, arg_5613: GLint, arg_5614: GLenum, arg_5615: GLsizei, arg_5616: ?*const anyopaque) void {
    return epoxy_glMultiTexCoordPointerEXT.?(arg_5612, arg_5613, arg_5614, arg_5615, arg_5616);
}
pub inline fn glMultiTexEnvfEXT(arg_5617: GLenum, arg_5618: GLenum, arg_5619: GLenum, arg_5620: GLfloat) void {
    return epoxy_glMultiTexEnvfEXT.?(arg_5617, arg_5618, arg_5619, arg_5620);
}
pub inline fn glMultiTexEnvfvEXT(arg_5621: GLenum, arg_5622: GLenum, arg_5623: GLenum, arg_5624: [*c]const GLfloat) void {
    return epoxy_glMultiTexEnvfvEXT.?(arg_5621, arg_5622, arg_5623, arg_5624);
}
pub inline fn glMultiTexEnviEXT(arg_5625: GLenum, arg_5626: GLenum, arg_5627: GLenum, arg_5628: GLint) void {
    return epoxy_glMultiTexEnviEXT.?(arg_5625, arg_5626, arg_5627, arg_5628);
}
pub inline fn glMultiTexEnvivEXT(arg_5629: GLenum, arg_5630: GLenum, arg_5631: GLenum, arg_5632: [*c]const GLint) void {
    return epoxy_glMultiTexEnvivEXT.?(arg_5629, arg_5630, arg_5631, arg_5632);
}
pub inline fn glMultiTexGendEXT(arg_5633: GLenum, arg_5634: GLenum, arg_5635: GLenum, arg_5636: GLdouble) void {
    return epoxy_glMultiTexGendEXT.?(arg_5633, arg_5634, arg_5635, arg_5636);
}
pub inline fn glMultiTexGendvEXT(arg_5637: GLenum, arg_5638: GLenum, arg_5639: GLenum, arg_5640: [*c]const GLdouble) void {
    return epoxy_glMultiTexGendvEXT.?(arg_5637, arg_5638, arg_5639, arg_5640);
}
pub inline fn glMultiTexGenfEXT(arg_5641: GLenum, arg_5642: GLenum, arg_5643: GLenum, arg_5644: GLfloat) void {
    return epoxy_glMultiTexGenfEXT.?(arg_5641, arg_5642, arg_5643, arg_5644);
}
pub inline fn glMultiTexGenfvEXT(arg_5645: GLenum, arg_5646: GLenum, arg_5647: GLenum, arg_5648: [*c]const GLfloat) void {
    return epoxy_glMultiTexGenfvEXT.?(arg_5645, arg_5646, arg_5647, arg_5648);
}
pub inline fn glMultiTexGeniEXT(arg_5649: GLenum, arg_5650: GLenum, arg_5651: GLenum, arg_5652: GLint) void {
    return epoxy_glMultiTexGeniEXT.?(arg_5649, arg_5650, arg_5651, arg_5652);
}
pub inline fn glMultiTexGenivEXT(arg_5653: GLenum, arg_5654: GLenum, arg_5655: GLenum, arg_5656: [*c]const GLint) void {
    return epoxy_glMultiTexGenivEXT.?(arg_5653, arg_5654, arg_5655, arg_5656);
}
pub inline fn glMultiTexImage1DEXT(arg_5657: GLenum, arg_5658: GLenum, arg_5659: GLint, arg_5660: GLint, arg_5661: GLsizei, arg_5662: GLint, arg_5663: GLenum, arg_5664: GLenum, arg_5665: ?*const anyopaque) void {
    return epoxy_glMultiTexImage1DEXT.?(arg_5657, arg_5658, arg_5659, arg_5660, arg_5661, arg_5662, arg_5663, arg_5664, arg_5665);
}
pub inline fn glMultiTexImage2DEXT(arg_5666: GLenum, arg_5667: GLenum, arg_5668: GLint, arg_5669: GLint, arg_5670: GLsizei, arg_5671: GLsizei, arg_5672: GLint, arg_5673: GLenum, arg_5674: GLenum, arg_5675: ?*const anyopaque) void {
    return epoxy_glMultiTexImage2DEXT.?(arg_5666, arg_5667, arg_5668, arg_5669, arg_5670, arg_5671, arg_5672, arg_5673, arg_5674, arg_5675);
}
pub inline fn glMultiTexImage3DEXT(arg_5676: GLenum, arg_5677: GLenum, arg_5678: GLint, arg_5679: GLint, arg_5680: GLsizei, arg_5681: GLsizei, arg_5682: GLsizei, arg_5683: GLint, arg_5684: GLenum, arg_5685: GLenum, arg_5686: ?*const anyopaque) void {
    return epoxy_glMultiTexImage3DEXT.?(arg_5676, arg_5677, arg_5678, arg_5679, arg_5680, arg_5681, arg_5682, arg_5683, arg_5684, arg_5685, arg_5686);
}
pub inline fn glMultiTexParameterIivEXT(arg_5687: GLenum, arg_5688: GLenum, arg_5689: GLenum, arg_5690: [*c]const GLint) void {
    return epoxy_glMultiTexParameterIivEXT.?(arg_5687, arg_5688, arg_5689, arg_5690);
}
pub inline fn glMultiTexParameterIuivEXT(arg_5691: GLenum, arg_5692: GLenum, arg_5693: GLenum, arg_5694: [*c]const GLuint) void {
    return epoxy_glMultiTexParameterIuivEXT.?(arg_5691, arg_5692, arg_5693, arg_5694);
}
pub inline fn glMultiTexParameterfEXT(arg_5695: GLenum, arg_5696: GLenum, arg_5697: GLenum, arg_5698: GLfloat) void {
    return epoxy_glMultiTexParameterfEXT.?(arg_5695, arg_5696, arg_5697, arg_5698);
}
pub inline fn glMultiTexParameterfvEXT(arg_5699: GLenum, arg_5700: GLenum, arg_5701: GLenum, arg_5702: [*c]const GLfloat) void {
    return epoxy_glMultiTexParameterfvEXT.?(arg_5699, arg_5700, arg_5701, arg_5702);
}
pub inline fn glMultiTexParameteriEXT(arg_5703: GLenum, arg_5704: GLenum, arg_5705: GLenum, arg_5706: GLint) void {
    return epoxy_glMultiTexParameteriEXT.?(arg_5703, arg_5704, arg_5705, arg_5706);
}
pub inline fn glMultiTexParameterivEXT(arg_5707: GLenum, arg_5708: GLenum, arg_5709: GLenum, arg_5710: [*c]const GLint) void {
    return epoxy_glMultiTexParameterivEXT.?(arg_5707, arg_5708, arg_5709, arg_5710);
}
pub inline fn glMultiTexRenderbufferEXT(arg_5711: GLenum, arg_5712: GLenum, arg_5713: GLuint) void {
    return epoxy_glMultiTexRenderbufferEXT.?(arg_5711, arg_5712, arg_5713);
}
pub inline fn glMultiTexSubImage1DEXT(arg_5714: GLenum, arg_5715: GLenum, arg_5716: GLint, arg_5717: GLint, arg_5718: GLsizei, arg_5719: GLenum, arg_5720: GLenum, arg_5721: ?*const anyopaque) void {
    return epoxy_glMultiTexSubImage1DEXT.?(arg_5714, arg_5715, arg_5716, arg_5717, arg_5718, arg_5719, arg_5720, arg_5721);
}
pub inline fn glMultiTexSubImage2DEXT(arg_5722: GLenum, arg_5723: GLenum, arg_5724: GLint, arg_5725: GLint, arg_5726: GLint, arg_5727: GLsizei, arg_5728: GLsizei, arg_5729: GLenum, arg_5730: GLenum, arg_5731: ?*const anyopaque) void {
    return epoxy_glMultiTexSubImage2DEXT.?(arg_5722, arg_5723, arg_5724, arg_5725, arg_5726, arg_5727, arg_5728, arg_5729, arg_5730, arg_5731);
}
pub inline fn glMultiTexSubImage3DEXT(arg_5732: GLenum, arg_5733: GLenum, arg_5734: GLint, arg_5735: GLint, arg_5736: GLint, arg_5737: GLint, arg_5738: GLsizei, arg_5739: GLsizei, arg_5740: GLsizei, arg_5741: GLenum, arg_5742: GLenum, arg_5743: ?*const anyopaque) void {
    return epoxy_glMultiTexSubImage3DEXT.?(arg_5732, arg_5733, arg_5734, arg_5735, arg_5736, arg_5737, arg_5738, arg_5739, arg_5740, arg_5741, arg_5742, arg_5743);
}
pub inline fn glMulticastBarrierNV() void {
    return epoxy_glMulticastBarrierNV.?();
}
pub inline fn glMulticastBlitFramebufferNV(arg_5744: GLuint, arg_5745: GLuint, arg_5746: GLint, arg_5747: GLint, arg_5748: GLint, arg_5749: GLint, arg_5750: GLint, arg_5751: GLint, arg_5752: GLint, arg_5753: GLint, arg_5754: GLbitfield, arg_5755: GLenum) void {
    return epoxy_glMulticastBlitFramebufferNV.?(arg_5744, arg_5745, arg_5746, arg_5747, arg_5748, arg_5749, arg_5750, arg_5751, arg_5752, arg_5753, arg_5754, arg_5755);
}
pub inline fn glMulticastBufferSubDataNV(arg_5756: GLbitfield, arg_5757: GLuint, arg_5758: GLintptr, arg_5759: GLsizeiptr, arg_5760: ?*const anyopaque) void {
    return epoxy_glMulticastBufferSubDataNV.?(arg_5756, arg_5757, arg_5758, arg_5759, arg_5760);
}
pub inline fn glMulticastCopyBufferSubDataNV(arg_5761: GLuint, arg_5762: GLbitfield, arg_5763: GLuint, arg_5764: GLuint, arg_5765: GLintptr, arg_5766: GLintptr, arg_5767: GLsizeiptr) void {
    return epoxy_glMulticastCopyBufferSubDataNV.?(arg_5761, arg_5762, arg_5763, arg_5764, arg_5765, arg_5766, arg_5767);
}
pub inline fn glMulticastCopyImageSubDataNV(arg_5768: GLuint, arg_5769: GLbitfield, arg_5770: GLuint, arg_5771: GLenum, arg_5772: GLint, arg_5773: GLint, arg_5774: GLint, arg_5775: GLint, arg_5776: GLuint, arg_5777: GLenum, arg_5778: GLint, arg_5779: GLint, arg_5780: GLint, arg_5781: GLint, arg_5782: GLsizei, arg_5783: GLsizei, arg_5784: GLsizei) void {
    return epoxy_glMulticastCopyImageSubDataNV.?(arg_5768, arg_5769, arg_5770, arg_5771, arg_5772, arg_5773, arg_5774, arg_5775, arg_5776, arg_5777, arg_5778, arg_5779, arg_5780, arg_5781, arg_5782, arg_5783, arg_5784);
}
pub inline fn glMulticastFramebufferSampleLocationsfvNV(arg_5785: GLuint, arg_5786: GLuint, arg_5787: GLuint, arg_5788: GLsizei, arg_5789: [*c]const GLfloat) void {
    return epoxy_glMulticastFramebufferSampleLocationsfvNV.?(arg_5785, arg_5786, arg_5787, arg_5788, arg_5789);
}
pub inline fn glMulticastGetQueryObjecti64vNV(arg_5790: GLuint, arg_5791: GLuint, arg_5792: GLenum, arg_5793: [*c]GLint64) void {
    return epoxy_glMulticastGetQueryObjecti64vNV.?(arg_5790, arg_5791, arg_5792, arg_5793);
}
pub inline fn glMulticastGetQueryObjectivNV(arg_5794: GLuint, arg_5795: GLuint, arg_5796: GLenum, arg_5797: [*c]GLint) void {
    return epoxy_glMulticastGetQueryObjectivNV.?(arg_5794, arg_5795, arg_5796, arg_5797);
}
pub inline fn glMulticastGetQueryObjectui64vNV(arg_5798: GLuint, arg_5799: GLuint, arg_5800: GLenum, arg_5801: [*c]GLuint64) void {
    return epoxy_glMulticastGetQueryObjectui64vNV.?(arg_5798, arg_5799, arg_5800, arg_5801);
}
pub inline fn glMulticastGetQueryObjectuivNV(arg_5802: GLuint, arg_5803: GLuint, arg_5804: GLenum, arg_5805: [*c]GLuint) void {
    return epoxy_glMulticastGetQueryObjectuivNV.?(arg_5802, arg_5803, arg_5804, arg_5805);
}
pub inline fn glMulticastScissorArrayvNVX(arg_5806: GLuint, arg_5807: GLuint, arg_5808: GLsizei, arg_5809: [*c]const GLint) void {
    return epoxy_glMulticastScissorArrayvNVX.?(arg_5806, arg_5807, arg_5808, arg_5809);
}
pub inline fn glMulticastViewportArrayvNVX(arg_5810: GLuint, arg_5811: GLuint, arg_5812: GLsizei, arg_5813: [*c]const GLfloat) void {
    return epoxy_glMulticastViewportArrayvNVX.?(arg_5810, arg_5811, arg_5812, arg_5813);
}
pub inline fn glMulticastViewportPositionWScaleNVX(arg_5814: GLuint, arg_5815: GLuint, arg_5816: GLfloat, arg_5817: GLfloat) void {
    return epoxy_glMulticastViewportPositionWScaleNVX.?(arg_5814, arg_5815, arg_5816, arg_5817);
}
pub inline fn glMulticastWaitSyncNV(arg_5818: GLuint, arg_5819: GLbitfield) void {
    return epoxy_glMulticastWaitSyncNV.?(arg_5818, arg_5819);
}
pub inline fn glNamedBufferAttachMemoryNV(arg_5820: GLuint, arg_5821: GLuint, arg_5822: GLuint64) void {
    return epoxy_glNamedBufferAttachMemoryNV.?(arg_5820, arg_5821, arg_5822);
}
pub inline fn glNamedBufferData(arg_5823: GLuint, arg_5824: GLsizeiptr, arg_5825: ?*const anyopaque, arg_5826: GLenum) void {
    return epoxy_glNamedBufferData.?(arg_5823, arg_5824, arg_5825, arg_5826);
}
pub inline fn glNamedBufferDataEXT(arg_5827: GLuint, arg_5828: GLsizeiptr, arg_5829: ?*const anyopaque, arg_5830: GLenum) void {
    return epoxy_glNamedBufferDataEXT.?(arg_5827, arg_5828, arg_5829, arg_5830);
}
pub inline fn glNamedBufferPageCommitmentARB(arg_5831: GLuint, arg_5832: GLintptr, arg_5833: GLsizeiptr, arg_5834: GLboolean) void {
    return epoxy_glNamedBufferPageCommitmentARB.?(arg_5831, arg_5832, arg_5833, arg_5834);
}
pub inline fn glNamedBufferPageCommitmentEXT(arg_5835: GLuint, arg_5836: GLintptr, arg_5837: GLsizeiptr, arg_5838: GLboolean) void {
    return epoxy_glNamedBufferPageCommitmentEXT.?(arg_5835, arg_5836, arg_5837, arg_5838);
}
pub inline fn glNamedBufferStorage(arg_5839: GLuint, arg_5840: GLsizeiptr, arg_5841: ?*const anyopaque, arg_5842: GLbitfield) void {
    return epoxy_glNamedBufferStorage.?(arg_5839, arg_5840, arg_5841, arg_5842);
}
pub inline fn glNamedBufferStorageEXT(arg_5843: GLuint, arg_5844: GLsizeiptr, arg_5845: ?*const anyopaque, arg_5846: GLbitfield) void {
    return epoxy_glNamedBufferStorageEXT.?(arg_5843, arg_5844, arg_5845, arg_5846);
}
pub inline fn glNamedBufferStorageExternalEXT(arg_5847: GLuint, arg_5848: GLintptr, arg_5849: GLsizeiptr, arg_5850: GLeglClientBufferEXT, arg_5851: GLbitfield) void {
    return epoxy_glNamedBufferStorageExternalEXT.?(arg_5847, arg_5848, arg_5849, arg_5850, arg_5851);
}
pub inline fn glNamedBufferStorageMemEXT(arg_5852: GLuint, arg_5853: GLsizeiptr, arg_5854: GLuint, arg_5855: GLuint64) void {
    return epoxy_glNamedBufferStorageMemEXT.?(arg_5852, arg_5853, arg_5854, arg_5855);
}
pub inline fn glNamedBufferSubData(arg_5856: GLuint, arg_5857: GLintptr, arg_5858: GLsizeiptr, arg_5859: ?*const anyopaque) void {
    return epoxy_glNamedBufferSubData.?(arg_5856, arg_5857, arg_5858, arg_5859);
}
pub inline fn glNamedBufferSubDataEXT(arg_5860: GLuint, arg_5861: GLintptr, arg_5862: GLsizeiptr, arg_5863: ?*const anyopaque) void {
    return epoxy_glNamedBufferSubDataEXT.?(arg_5860, arg_5861, arg_5862, arg_5863);
}
pub inline fn glNamedCopyBufferSubDataEXT(arg_5864: GLuint, arg_5865: GLuint, arg_5866: GLintptr, arg_5867: GLintptr, arg_5868: GLsizeiptr) void {
    return epoxy_glNamedCopyBufferSubDataEXT.?(arg_5864, arg_5865, arg_5866, arg_5867, arg_5868);
}
pub inline fn glNamedFramebufferDrawBuffer(arg_5869: GLuint, arg_5870: GLenum) void {
    return epoxy_glNamedFramebufferDrawBuffer.?(arg_5869, arg_5870);
}
pub inline fn glNamedFramebufferDrawBuffers(arg_5871: GLuint, arg_5872: GLsizei, arg_5873: [*c]const GLenum) void {
    return epoxy_glNamedFramebufferDrawBuffers.?(arg_5871, arg_5872, arg_5873);
}
pub inline fn glNamedFramebufferParameteri(arg_5874: GLuint, arg_5875: GLenum, arg_5876: GLint) void {
    return epoxy_glNamedFramebufferParameteri.?(arg_5874, arg_5875, arg_5876);
}
pub inline fn glNamedFramebufferParameteriEXT(arg_5877: GLuint, arg_5878: GLenum, arg_5879: GLint) void {
    return epoxy_glNamedFramebufferParameteriEXT.?(arg_5877, arg_5878, arg_5879);
}
pub inline fn glNamedFramebufferReadBuffer(arg_5880: GLuint, arg_5881: GLenum) void {
    return epoxy_glNamedFramebufferReadBuffer.?(arg_5880, arg_5881);
}
pub inline fn glNamedFramebufferRenderbuffer(arg_5882: GLuint, arg_5883: GLenum, arg_5884: GLenum, arg_5885: GLuint) void {
    return epoxy_glNamedFramebufferRenderbuffer.?(arg_5882, arg_5883, arg_5884, arg_5885);
}
pub inline fn glNamedFramebufferRenderbufferEXT(arg_5886: GLuint, arg_5887: GLenum, arg_5888: GLenum, arg_5889: GLuint) void {
    return epoxy_glNamedFramebufferRenderbufferEXT.?(arg_5886, arg_5887, arg_5888, arg_5889);
}
pub inline fn glNamedFramebufferSampleLocationsfvARB(arg_5890: GLuint, arg_5891: GLuint, arg_5892: GLsizei, arg_5893: [*c]const GLfloat) void {
    return epoxy_glNamedFramebufferSampleLocationsfvARB.?(arg_5890, arg_5891, arg_5892, arg_5893);
}
pub inline fn glNamedFramebufferSampleLocationsfvNV(arg_5894: GLuint, arg_5895: GLuint, arg_5896: GLsizei, arg_5897: [*c]const GLfloat) void {
    return epoxy_glNamedFramebufferSampleLocationsfvNV.?(arg_5894, arg_5895, arg_5896, arg_5897);
}
pub inline fn glNamedFramebufferSamplePositionsfvAMD(arg_5898: GLuint, arg_5899: GLuint, arg_5900: GLuint, arg_5901: [*c]const GLfloat) void {
    return epoxy_glNamedFramebufferSamplePositionsfvAMD.?(arg_5898, arg_5899, arg_5900, arg_5901);
}
pub inline fn glNamedFramebufferTexture(arg_5902: GLuint, arg_5903: GLenum, arg_5904: GLuint, arg_5905: GLint) void {
    return epoxy_glNamedFramebufferTexture.?(arg_5902, arg_5903, arg_5904, arg_5905);
}
pub inline fn glNamedFramebufferTexture1DEXT(arg_5906: GLuint, arg_5907: GLenum, arg_5908: GLenum, arg_5909: GLuint, arg_5910: GLint) void {
    return epoxy_glNamedFramebufferTexture1DEXT.?(arg_5906, arg_5907, arg_5908, arg_5909, arg_5910);
}
pub inline fn glNamedFramebufferTexture2DEXT(arg_5911: GLuint, arg_5912: GLenum, arg_5913: GLenum, arg_5914: GLuint, arg_5915: GLint) void {
    return epoxy_glNamedFramebufferTexture2DEXT.?(arg_5911, arg_5912, arg_5913, arg_5914, arg_5915);
}
pub inline fn glNamedFramebufferTexture3DEXT(arg_5916: GLuint, arg_5917: GLenum, arg_5918: GLenum, arg_5919: GLuint, arg_5920: GLint, arg_5921: GLint) void {
    return epoxy_glNamedFramebufferTexture3DEXT.?(arg_5916, arg_5917, arg_5918, arg_5919, arg_5920, arg_5921);
}
pub inline fn glNamedFramebufferTextureEXT(arg_5922: GLuint, arg_5923: GLenum, arg_5924: GLuint, arg_5925: GLint) void {
    return epoxy_glNamedFramebufferTextureEXT.?(arg_5922, arg_5923, arg_5924, arg_5925);
}
pub inline fn glNamedFramebufferTextureFaceEXT(arg_5926: GLuint, arg_5927: GLenum, arg_5928: GLuint, arg_5929: GLint, arg_5930: GLenum) void {
    return epoxy_glNamedFramebufferTextureFaceEXT.?(arg_5926, arg_5927, arg_5928, arg_5929, arg_5930);
}
pub inline fn glNamedFramebufferTextureLayer(arg_5931: GLuint, arg_5932: GLenum, arg_5933: GLuint, arg_5934: GLint, arg_5935: GLint) void {
    return epoxy_glNamedFramebufferTextureLayer.?(arg_5931, arg_5932, arg_5933, arg_5934, arg_5935);
}
pub inline fn glNamedFramebufferTextureLayerEXT(arg_5936: GLuint, arg_5937: GLenum, arg_5938: GLuint, arg_5939: GLint, arg_5940: GLint) void {
    return epoxy_glNamedFramebufferTextureLayerEXT.?(arg_5936, arg_5937, arg_5938, arg_5939, arg_5940);
}
pub inline fn glNamedProgramLocalParameter4dEXT(arg_5941: GLuint, arg_5942: GLenum, arg_5943: GLuint, arg_5944: GLdouble, arg_5945: GLdouble, arg_5946: GLdouble, arg_5947: GLdouble) void {
    return epoxy_glNamedProgramLocalParameter4dEXT.?(arg_5941, arg_5942, arg_5943, arg_5944, arg_5945, arg_5946, arg_5947);
}
pub inline fn glNamedProgramLocalParameter4dvEXT(arg_5948: GLuint, arg_5949: GLenum, arg_5950: GLuint, arg_5951: [*c]const GLdouble) void {
    return epoxy_glNamedProgramLocalParameter4dvEXT.?(arg_5948, arg_5949, arg_5950, arg_5951);
}
pub inline fn glNamedProgramLocalParameter4fEXT(arg_5952: GLuint, arg_5953: GLenum, arg_5954: GLuint, arg_5955: GLfloat, arg_5956: GLfloat, arg_5957: GLfloat, arg_5958: GLfloat) void {
    return epoxy_glNamedProgramLocalParameter4fEXT.?(arg_5952, arg_5953, arg_5954, arg_5955, arg_5956, arg_5957, arg_5958);
}
pub inline fn glNamedProgramLocalParameter4fvEXT(arg_5959: GLuint, arg_5960: GLenum, arg_5961: GLuint, arg_5962: [*c]const GLfloat) void {
    return epoxy_glNamedProgramLocalParameter4fvEXT.?(arg_5959, arg_5960, arg_5961, arg_5962);
}
pub inline fn glNamedProgramLocalParameterI4iEXT(arg_5963: GLuint, arg_5964: GLenum, arg_5965: GLuint, arg_5966: GLint, arg_5967: GLint, arg_5968: GLint, arg_5969: GLint) void {
    return epoxy_glNamedProgramLocalParameterI4iEXT.?(arg_5963, arg_5964, arg_5965, arg_5966, arg_5967, arg_5968, arg_5969);
}
pub inline fn glNamedProgramLocalParameterI4ivEXT(arg_5970: GLuint, arg_5971: GLenum, arg_5972: GLuint, arg_5973: [*c]const GLint) void {
    return epoxy_glNamedProgramLocalParameterI4ivEXT.?(arg_5970, arg_5971, arg_5972, arg_5973);
}
pub inline fn glNamedProgramLocalParameterI4uiEXT(arg_5974: GLuint, arg_5975: GLenum, arg_5976: GLuint, arg_5977: GLuint, arg_5978: GLuint, arg_5979: GLuint, arg_5980: GLuint) void {
    return epoxy_glNamedProgramLocalParameterI4uiEXT.?(arg_5974, arg_5975, arg_5976, arg_5977, arg_5978, arg_5979, arg_5980);
}
pub inline fn glNamedProgramLocalParameterI4uivEXT(arg_5981: GLuint, arg_5982: GLenum, arg_5983: GLuint, arg_5984: [*c]const GLuint) void {
    return epoxy_glNamedProgramLocalParameterI4uivEXT.?(arg_5981, arg_5982, arg_5983, arg_5984);
}
pub inline fn glNamedProgramLocalParameters4fvEXT(arg_5985: GLuint, arg_5986: GLenum, arg_5987: GLuint, arg_5988: GLsizei, arg_5989: [*c]const GLfloat) void {
    return epoxy_glNamedProgramLocalParameters4fvEXT.?(arg_5985, arg_5986, arg_5987, arg_5988, arg_5989);
}
pub inline fn glNamedProgramLocalParametersI4ivEXT(arg_5990: GLuint, arg_5991: GLenum, arg_5992: GLuint, arg_5993: GLsizei, arg_5994: [*c]const GLint) void {
    return epoxy_glNamedProgramLocalParametersI4ivEXT.?(arg_5990, arg_5991, arg_5992, arg_5993, arg_5994);
}
pub inline fn glNamedProgramLocalParametersI4uivEXT(arg_5995: GLuint, arg_5996: GLenum, arg_5997: GLuint, arg_5998: GLsizei, arg_5999: [*c]const GLuint) void {
    return epoxy_glNamedProgramLocalParametersI4uivEXT.?(arg_5995, arg_5996, arg_5997, arg_5998, arg_5999);
}
pub inline fn glNamedProgramStringEXT(arg_6000: GLuint, arg_6001: GLenum, arg_6002: GLenum, arg_6003: GLsizei, arg_6004: ?*const anyopaque) void {
    return epoxy_glNamedProgramStringEXT.?(arg_6000, arg_6001, arg_6002, arg_6003, arg_6004);
}
pub inline fn glNamedRenderbufferStorage(arg_6005: GLuint, arg_6006: GLenum, arg_6007: GLsizei, arg_6008: GLsizei) void {
    return epoxy_glNamedRenderbufferStorage.?(arg_6005, arg_6006, arg_6007, arg_6008);
}
pub inline fn glNamedRenderbufferStorageEXT(arg_6009: GLuint, arg_6010: GLenum, arg_6011: GLsizei, arg_6012: GLsizei) void {
    return epoxy_glNamedRenderbufferStorageEXT.?(arg_6009, arg_6010, arg_6011, arg_6012);
}
pub inline fn glNamedRenderbufferStorageMultisample(arg_6013: GLuint, arg_6014: GLsizei, arg_6015: GLenum, arg_6016: GLsizei, arg_6017: GLsizei) void {
    return epoxy_glNamedRenderbufferStorageMultisample.?(arg_6013, arg_6014, arg_6015, arg_6016, arg_6017);
}
pub inline fn glNamedRenderbufferStorageMultisampleAdvancedAMD(arg_6018: GLuint, arg_6019: GLsizei, arg_6020: GLsizei, arg_6021: GLenum, arg_6022: GLsizei, arg_6023: GLsizei) void {
    return epoxy_glNamedRenderbufferStorageMultisampleAdvancedAMD.?(arg_6018, arg_6019, arg_6020, arg_6021, arg_6022, arg_6023);
}
pub inline fn glNamedRenderbufferStorageMultisampleCoverageEXT(arg_6024: GLuint, arg_6025: GLsizei, arg_6026: GLsizei, arg_6027: GLenum, arg_6028: GLsizei, arg_6029: GLsizei) void {
    return epoxy_glNamedRenderbufferStorageMultisampleCoverageEXT.?(arg_6024, arg_6025, arg_6026, arg_6027, arg_6028, arg_6029);
}
pub inline fn glNamedRenderbufferStorageMultisampleEXT(arg_6030: GLuint, arg_6031: GLsizei, arg_6032: GLenum, arg_6033: GLsizei, arg_6034: GLsizei) void {
    return epoxy_glNamedRenderbufferStorageMultisampleEXT.?(arg_6030, arg_6031, arg_6032, arg_6033, arg_6034);
}
pub inline fn glNamedStringARB(arg_6035: GLenum, arg_6036: GLint, arg_6037: [*c]const GLchar, arg_6038: GLint, arg_6039: [*c]const GLchar) void {
    return epoxy_glNamedStringARB.?(arg_6035, arg_6036, arg_6037, arg_6038, arg_6039);
}
pub inline fn glNewList(arg_6040: GLuint, arg_6041: GLenum) void {
    return epoxy_glNewList.?(arg_6040, arg_6041);
}
pub inline fn glNewObjectBufferATI(arg_6042: GLsizei, arg_6043: ?*const anyopaque, arg_6044: GLenum) GLuint {
    return epoxy_glNewObjectBufferATI.?(arg_6042, arg_6043, arg_6044);
}
pub inline fn glNormal3b(arg_6045: GLbyte, arg_6046: GLbyte, arg_6047: GLbyte) void {
    return epoxy_glNormal3b.?(arg_6045, arg_6046, arg_6047);
}
pub inline fn glNormal3bv(arg_6048: [*c]const GLbyte) void {
    return epoxy_glNormal3bv.?(arg_6048);
}
pub inline fn glNormal3d(arg_6049: GLdouble, arg_6050: GLdouble, arg_6051: GLdouble) void {
    return epoxy_glNormal3d.?(arg_6049, arg_6050, arg_6051);
}
pub inline fn glNormal3dv(arg_6052: [*c]const GLdouble) void {
    return epoxy_glNormal3dv.?(arg_6052);
}
pub inline fn glNormal3f(arg_6053: GLfloat, arg_6054: GLfloat, arg_6055: GLfloat) void {
    return epoxy_glNormal3f.?(arg_6053, arg_6054, arg_6055);
}
pub inline fn glNormal3fVertex3fSUN(arg_6056: GLfloat, arg_6057: GLfloat, arg_6058: GLfloat, arg_6059: GLfloat, arg_6060: GLfloat, arg_6061: GLfloat) void {
    return epoxy_glNormal3fVertex3fSUN.?(arg_6056, arg_6057, arg_6058, arg_6059, arg_6060, arg_6061);
}
pub inline fn glNormal3fVertex3fvSUN(arg_6062: [*c]const GLfloat, arg_6063: [*c]const GLfloat) void {
    return epoxy_glNormal3fVertex3fvSUN.?(arg_6062, arg_6063);
}
pub inline fn glNormal3fv(arg_6064: [*c]const GLfloat) void {
    return epoxy_glNormal3fv.?(arg_6064);
}
pub inline fn glNormal3hNV(arg_6065: GLhalfNV, arg_6066: GLhalfNV, arg_6067: GLhalfNV) void {
    return epoxy_glNormal3hNV.?(arg_6065, arg_6066, arg_6067);
}
pub inline fn glNormal3hvNV(arg_6068: [*c]const GLhalfNV) void {
    return epoxy_glNormal3hvNV.?(arg_6068);
}
pub inline fn glNormal3i(arg_6069: GLint, arg_6070: GLint, arg_6071: GLint) void {
    return epoxy_glNormal3i.?(arg_6069, arg_6070, arg_6071);
}
pub inline fn glNormal3iv(arg_6072: [*c]const GLint) void {
    return epoxy_glNormal3iv.?(arg_6072);
}
pub inline fn glNormal3s(arg_6073: GLshort, arg_6074: GLshort, arg_6075: GLshort) void {
    return epoxy_glNormal3s.?(arg_6073, arg_6074, arg_6075);
}
pub inline fn glNormal3sv(arg_6076: [*c]const GLshort) void {
    return epoxy_glNormal3sv.?(arg_6076);
}
pub inline fn glNormal3x(arg_6077: GLfixed, arg_6078: GLfixed, arg_6079: GLfixed) void {
    return epoxy_glNormal3x.?(arg_6077, arg_6078, arg_6079);
}
pub inline fn glNormal3xOES(arg_6080: GLfixed, arg_6081: GLfixed, arg_6082: GLfixed) void {
    return epoxy_glNormal3xOES.?(arg_6080, arg_6081, arg_6082);
}
pub inline fn glNormal3xvOES(arg_6083: [*c]const GLfixed) void {
    return epoxy_glNormal3xvOES.?(arg_6083);
}
pub inline fn glNormalFormatNV(arg_6084: GLenum, arg_6085: GLsizei) void {
    return epoxy_glNormalFormatNV.?(arg_6084, arg_6085);
}
pub inline fn glNormalP3ui(arg_6086: GLenum, arg_6087: GLuint) void {
    return epoxy_glNormalP3ui.?(arg_6086, arg_6087);
}
pub inline fn glNormalP3uiv(arg_6088: GLenum, arg_6089: [*c]const GLuint) void {
    return epoxy_glNormalP3uiv.?(arg_6088, arg_6089);
}
pub inline fn glNormalPointer(arg_6090: GLenum, arg_6091: GLsizei, arg_6092: ?*const anyopaque) void {
    return epoxy_glNormalPointer.?(arg_6090, arg_6091, arg_6092);
}
pub inline fn glNormalPointerEXT(arg_6093: GLenum, arg_6094: GLsizei, arg_6095: GLsizei, arg_6096: ?*const anyopaque) void {
    return epoxy_glNormalPointerEXT.?(arg_6093, arg_6094, arg_6095, arg_6096);
}
pub inline fn glNormalPointerListIBM(arg_6097: GLenum, arg_6098: GLint, arg_6099: [*c]?*const anyopaque, arg_6100: GLint) void {
    return epoxy_glNormalPointerListIBM.?(arg_6097, arg_6098, arg_6099, arg_6100);
}
pub inline fn glNormalPointervINTEL(arg_6101: GLenum, arg_6102: [*c]?*const anyopaque) void {
    return epoxy_glNormalPointervINTEL.?(arg_6101, arg_6102);
}
pub inline fn glNormalStream3bATI(arg_6103: GLenum, arg_6104: GLbyte, arg_6105: GLbyte, arg_6106: GLbyte) void {
    return epoxy_glNormalStream3bATI.?(arg_6103, arg_6104, arg_6105, arg_6106);
}
pub inline fn glNormalStream3bvATI(arg_6107: GLenum, arg_6108: [*c]const GLbyte) void {
    return epoxy_glNormalStream3bvATI.?(arg_6107, arg_6108);
}
pub inline fn glNormalStream3dATI(arg_6109: GLenum, arg_6110: GLdouble, arg_6111: GLdouble, arg_6112: GLdouble) void {
    return epoxy_glNormalStream3dATI.?(arg_6109, arg_6110, arg_6111, arg_6112);
}
pub inline fn glNormalStream3dvATI(arg_6113: GLenum, arg_6114: [*c]const GLdouble) void {
    return epoxy_glNormalStream3dvATI.?(arg_6113, arg_6114);
}
pub inline fn glNormalStream3fATI(arg_6115: GLenum, arg_6116: GLfloat, arg_6117: GLfloat, arg_6118: GLfloat) void {
    return epoxy_glNormalStream3fATI.?(arg_6115, arg_6116, arg_6117, arg_6118);
}
pub inline fn glNormalStream3fvATI(arg_6119: GLenum, arg_6120: [*c]const GLfloat) void {
    return epoxy_glNormalStream3fvATI.?(arg_6119, arg_6120);
}
pub inline fn glNormalStream3iATI(arg_6121: GLenum, arg_6122: GLint, arg_6123: GLint, arg_6124: GLint) void {
    return epoxy_glNormalStream3iATI.?(arg_6121, arg_6122, arg_6123, arg_6124);
}
pub inline fn glNormalStream3ivATI(arg_6125: GLenum, arg_6126: [*c]const GLint) void {
    return epoxy_glNormalStream3ivATI.?(arg_6125, arg_6126);
}
pub inline fn glNormalStream3sATI(arg_6127: GLenum, arg_6128: GLshort, arg_6129: GLshort, arg_6130: GLshort) void {
    return epoxy_glNormalStream3sATI.?(arg_6127, arg_6128, arg_6129, arg_6130);
}
pub inline fn glNormalStream3svATI(arg_6131: GLenum, arg_6132: [*c]const GLshort) void {
    return epoxy_glNormalStream3svATI.?(arg_6131, arg_6132);
}
pub inline fn glObjectLabel(arg_6133: GLenum, arg_6134: GLuint, arg_6135: GLsizei, arg_6136: [*c]const GLchar) void {
    return epoxy_glObjectLabel.?(arg_6133, arg_6134, arg_6135, arg_6136);
}
pub inline fn glObjectLabelKHR(arg_6137: GLenum, arg_6138: GLuint, arg_6139: GLsizei, arg_6140: [*c]const GLchar) void {
    return epoxy_glObjectLabelKHR.?(arg_6137, arg_6138, arg_6139, arg_6140);
}
pub inline fn glObjectPtrLabel(arg_6141: ?*const anyopaque, arg_6142: GLsizei, arg_6143: [*c]const GLchar) void {
    return epoxy_glObjectPtrLabel.?(arg_6141, arg_6142, arg_6143);
}
pub inline fn glObjectPtrLabelKHR(arg_6144: ?*const anyopaque, arg_6145: GLsizei, arg_6146: [*c]const GLchar) void {
    return epoxy_glObjectPtrLabelKHR.?(arg_6144, arg_6145, arg_6146);
}
pub inline fn glObjectPurgeableAPPLE(arg_6147: GLenum, arg_6148: GLuint, arg_6149: GLenum) GLenum {
    return epoxy_glObjectPurgeableAPPLE.?(arg_6147, arg_6148, arg_6149);
}
pub inline fn glObjectUnpurgeableAPPLE(arg_6150: GLenum, arg_6151: GLuint, arg_6152: GLenum) GLenum {
    return epoxy_glObjectUnpurgeableAPPLE.?(arg_6150, arg_6151, arg_6152);
}
pub inline fn glOrtho(arg_6153: GLdouble, arg_6154: GLdouble, arg_6155: GLdouble, arg_6156: GLdouble, arg_6157: GLdouble, arg_6158: GLdouble) void {
    return epoxy_glOrtho.?(arg_6153, arg_6154, arg_6155, arg_6156, arg_6157, arg_6158);
}
pub inline fn glOrthof(arg_6159: GLfloat, arg_6160: GLfloat, arg_6161: GLfloat, arg_6162: GLfloat, arg_6163: GLfloat, arg_6164: GLfloat) void {
    return epoxy_glOrthof.?(arg_6159, arg_6160, arg_6161, arg_6162, arg_6163, arg_6164);
}
pub inline fn glOrthofOES(arg_6165: GLfloat, arg_6166: GLfloat, arg_6167: GLfloat, arg_6168: GLfloat, arg_6169: GLfloat, arg_6170: GLfloat) void {
    return epoxy_glOrthofOES.?(arg_6165, arg_6166, arg_6167, arg_6168, arg_6169, arg_6170);
}
pub inline fn glOrthox(arg_6171: GLfixed, arg_6172: GLfixed, arg_6173: GLfixed, arg_6174: GLfixed, arg_6175: GLfixed, arg_6176: GLfixed) void {
    return epoxy_glOrthox.?(arg_6171, arg_6172, arg_6173, arg_6174, arg_6175, arg_6176);
}
pub inline fn glOrthoxOES(arg_6177: GLfixed, arg_6178: GLfixed, arg_6179: GLfixed, arg_6180: GLfixed, arg_6181: GLfixed, arg_6182: GLfixed) void {
    return epoxy_glOrthoxOES.?(arg_6177, arg_6178, arg_6179, arg_6180, arg_6181, arg_6182);
}
pub inline fn glPNTrianglesfATI(arg_6183: GLenum, arg_6184: GLfloat) void {
    return epoxy_glPNTrianglesfATI.?(arg_6183, arg_6184);
}
pub inline fn glPNTrianglesiATI(arg_6185: GLenum, arg_6186: GLint) void {
    return epoxy_glPNTrianglesiATI.?(arg_6185, arg_6186);
}
pub inline fn glPassTexCoordATI(arg_6187: GLuint, arg_6188: GLuint, arg_6189: GLenum) void {
    return epoxy_glPassTexCoordATI.?(arg_6187, arg_6188, arg_6189);
}
pub inline fn glPassThrough(arg_6190: GLfloat) void {
    return epoxy_glPassThrough.?(arg_6190);
}
pub inline fn glPassThroughxOES(arg_6191: GLfixed) void {
    return epoxy_glPassThroughxOES.?(arg_6191);
}
pub inline fn glPatchParameterfv(arg_6192: GLenum, arg_6193: [*c]const GLfloat) void {
    return epoxy_glPatchParameterfv.?(arg_6192, arg_6193);
}
pub inline fn glPatchParameteri(arg_6194: GLenum, arg_6195: GLint) void {
    return epoxy_glPatchParameteri.?(arg_6194, arg_6195);
}
pub inline fn glPatchParameteriEXT(arg_6196: GLenum, arg_6197: GLint) void {
    return epoxy_glPatchParameteriEXT.?(arg_6196, arg_6197);
}
pub inline fn glPatchParameteriOES(arg_6198: GLenum, arg_6199: GLint) void {
    return epoxy_glPatchParameteriOES.?(arg_6198, arg_6199);
}
pub inline fn glPathColorGenNV(arg_6200: GLenum, arg_6201: GLenum, arg_6202: GLenum, arg_6203: [*c]const GLfloat) void {
    return epoxy_glPathColorGenNV.?(arg_6200, arg_6201, arg_6202, arg_6203);
}
pub inline fn glPathCommandsNV(arg_6204: GLuint, arg_6205: GLsizei, arg_6206: [*c]const GLubyte, arg_6207: GLsizei, arg_6208: GLenum, arg_6209: ?*const anyopaque) void {
    return epoxy_glPathCommandsNV.?(arg_6204, arg_6205, arg_6206, arg_6207, arg_6208, arg_6209);
}
pub inline fn glPathCoordsNV(arg_6210: GLuint, arg_6211: GLsizei, arg_6212: GLenum, arg_6213: ?*const anyopaque) void {
    return epoxy_glPathCoordsNV.?(arg_6210, arg_6211, arg_6212, arg_6213);
}
pub inline fn glPathCoverDepthFuncNV(arg_6214: GLenum) void {
    return epoxy_glPathCoverDepthFuncNV.?(arg_6214);
}
pub inline fn glPathDashArrayNV(arg_6215: GLuint, arg_6216: GLsizei, arg_6217: [*c]const GLfloat) void {
    return epoxy_glPathDashArrayNV.?(arg_6215, arg_6216, arg_6217);
}
pub inline fn glPathFogGenNV(arg_6218: GLenum) void {
    return epoxy_glPathFogGenNV.?(arg_6218);
}
pub inline fn glPathGlyphIndexArrayNV(arg_6219: GLuint, arg_6220: GLenum, arg_6221: ?*const anyopaque, arg_6222: GLbitfield, arg_6223: GLuint, arg_6224: GLsizei, arg_6225: GLuint, arg_6226: GLfloat) GLenum {
    return epoxy_glPathGlyphIndexArrayNV.?(arg_6219, arg_6220, arg_6221, arg_6222, arg_6223, arg_6224, arg_6225, arg_6226);
}
pub inline fn glPathGlyphIndexRangeNV(arg_6227: GLenum, arg_6228: ?*const anyopaque, arg_6229: GLbitfield, arg_6230: GLuint, arg_6231: GLfloat, arg_6232: GLuint) GLenum {
    return epoxy_glPathGlyphIndexRangeNV.?(arg_6227, arg_6228, arg_6229, arg_6230, arg_6231, arg_6232);
}
pub inline fn glPathGlyphRangeNV(arg_6233: GLuint, arg_6234: GLenum, arg_6235: ?*const anyopaque, arg_6236: GLbitfield, arg_6237: GLuint, arg_6238: GLsizei, arg_6239: GLenum, arg_6240: GLuint, arg_6241: GLfloat) void {
    return epoxy_glPathGlyphRangeNV.?(arg_6233, arg_6234, arg_6235, arg_6236, arg_6237, arg_6238, arg_6239, arg_6240, arg_6241);
}
pub inline fn glPathGlyphsNV(arg_6242: GLuint, arg_6243: GLenum, arg_6244: ?*const anyopaque, arg_6245: GLbitfield, arg_6246: GLsizei, arg_6247: GLenum, arg_6248: ?*const anyopaque, arg_6249: GLenum, arg_6250: GLuint, arg_6251: GLfloat) void {
    return epoxy_glPathGlyphsNV.?(arg_6242, arg_6243, arg_6244, arg_6245, arg_6246, arg_6247, arg_6248, arg_6249, arg_6250, arg_6251);
}
pub inline fn glPathMemoryGlyphIndexArrayNV(arg_6252: GLuint, arg_6253: GLenum, arg_6254: GLsizeiptr, arg_6255: ?*const anyopaque, arg_6256: GLsizei, arg_6257: GLuint, arg_6258: GLsizei, arg_6259: GLuint, arg_6260: GLfloat) GLenum {
    return epoxy_glPathMemoryGlyphIndexArrayNV.?(arg_6252, arg_6253, arg_6254, arg_6255, arg_6256, arg_6257, arg_6258, arg_6259, arg_6260);
}
pub inline fn glPathParameterfNV(arg_6261: GLuint, arg_6262: GLenum, arg_6263: GLfloat) void {
    return epoxy_glPathParameterfNV.?(arg_6261, arg_6262, arg_6263);
}
pub inline fn glPathParameterfvNV(arg_6264: GLuint, arg_6265: GLenum, arg_6266: [*c]const GLfloat) void {
    return epoxy_glPathParameterfvNV.?(arg_6264, arg_6265, arg_6266);
}
pub inline fn glPathParameteriNV(arg_6267: GLuint, arg_6268: GLenum, arg_6269: GLint) void {
    return epoxy_glPathParameteriNV.?(arg_6267, arg_6268, arg_6269);
}
pub inline fn glPathParameterivNV(arg_6270: GLuint, arg_6271: GLenum, arg_6272: [*c]const GLint) void {
    return epoxy_glPathParameterivNV.?(arg_6270, arg_6271, arg_6272);
}
pub inline fn glPathStencilDepthOffsetNV(arg_6273: GLfloat, arg_6274: GLfloat) void {
    return epoxy_glPathStencilDepthOffsetNV.?(arg_6273, arg_6274);
}
pub inline fn glPathStencilFuncNV(arg_6275: GLenum, arg_6276: GLint, arg_6277: GLuint) void {
    return epoxy_glPathStencilFuncNV.?(arg_6275, arg_6276, arg_6277);
}
pub inline fn glPathStringNV(arg_6278: GLuint, arg_6279: GLenum, arg_6280: GLsizei, arg_6281: ?*const anyopaque) void {
    return epoxy_glPathStringNV.?(arg_6278, arg_6279, arg_6280, arg_6281);
}
pub inline fn glPathSubCommandsNV(arg_6282: GLuint, arg_6283: GLsizei, arg_6284: GLsizei, arg_6285: GLsizei, arg_6286: [*c]const GLubyte, arg_6287: GLsizei, arg_6288: GLenum, arg_6289: ?*const anyopaque) void {
    return epoxy_glPathSubCommandsNV.?(arg_6282, arg_6283, arg_6284, arg_6285, arg_6286, arg_6287, arg_6288, arg_6289);
}
pub inline fn glPathSubCoordsNV(arg_6290: GLuint, arg_6291: GLsizei, arg_6292: GLsizei, arg_6293: GLenum, arg_6294: ?*const anyopaque) void {
    return epoxy_glPathSubCoordsNV.?(arg_6290, arg_6291, arg_6292, arg_6293, arg_6294);
}
pub inline fn glPathTexGenNV(arg_6295: GLenum, arg_6296: GLenum, arg_6297: GLint, arg_6298: [*c]const GLfloat) void {
    return epoxy_glPathTexGenNV.?(arg_6295, arg_6296, arg_6297, arg_6298);
}
pub inline fn glPauseTransformFeedback() void {
    return epoxy_glPauseTransformFeedback.?();
}
pub inline fn glPauseTransformFeedbackNV() void {
    return epoxy_glPauseTransformFeedbackNV.?();
}
pub inline fn glPixelDataRangeNV(arg_6299: GLenum, arg_6300: GLsizei, arg_6301: ?*const anyopaque) void {
    return epoxy_glPixelDataRangeNV.?(arg_6299, arg_6300, arg_6301);
}
pub inline fn glPixelMapfv(arg_6302: GLenum, arg_6303: GLsizei, arg_6304: [*c]const GLfloat) void {
    return epoxy_glPixelMapfv.?(arg_6302, arg_6303, arg_6304);
}
pub inline fn glPixelMapuiv(arg_6305: GLenum, arg_6306: GLsizei, arg_6307: [*c]const GLuint) void {
    return epoxy_glPixelMapuiv.?(arg_6305, arg_6306, arg_6307);
}
pub inline fn glPixelMapusv(arg_6308: GLenum, arg_6309: GLsizei, arg_6310: [*c]const GLushort) void {
    return epoxy_glPixelMapusv.?(arg_6308, arg_6309, arg_6310);
}
pub inline fn glPixelMapx(arg_6311: GLenum, arg_6312: GLint, arg_6313: [*c]const GLfixed) void {
    return epoxy_glPixelMapx.?(arg_6311, arg_6312, arg_6313);
}
pub inline fn glPixelStoref(arg_6314: GLenum, arg_6315: GLfloat) void {
    return epoxy_glPixelStoref.?(arg_6314, arg_6315);
}
pub inline fn glPixelStorei(arg_6316: GLenum, arg_6317: GLint) void {
    return epoxy_glPixelStorei.?(arg_6316, arg_6317);
}
pub inline fn glPixelStorex(arg_6318: GLenum, arg_6319: GLfixed) void {
    return epoxy_glPixelStorex.?(arg_6318, arg_6319);
}
pub inline fn glPixelTexGenParameterfSGIS(arg_6320: GLenum, arg_6321: GLfloat) void {
    return epoxy_glPixelTexGenParameterfSGIS.?(arg_6320, arg_6321);
}
pub inline fn glPixelTexGenParameterfvSGIS(arg_6322: GLenum, arg_6323: [*c]const GLfloat) void {
    return epoxy_glPixelTexGenParameterfvSGIS.?(arg_6322, arg_6323);
}
pub inline fn glPixelTexGenParameteriSGIS(arg_6324: GLenum, arg_6325: GLint) void {
    return epoxy_glPixelTexGenParameteriSGIS.?(arg_6324, arg_6325);
}
pub inline fn glPixelTexGenParameterivSGIS(arg_6326: GLenum, arg_6327: [*c]const GLint) void {
    return epoxy_glPixelTexGenParameterivSGIS.?(arg_6326, arg_6327);
}
pub inline fn glPixelTexGenSGIX(arg_6328: GLenum) void {
    return epoxy_glPixelTexGenSGIX.?(arg_6328);
}
pub inline fn glPixelTransferf(arg_6329: GLenum, arg_6330: GLfloat) void {
    return epoxy_glPixelTransferf.?(arg_6329, arg_6330);
}
pub inline fn glPixelTransferi(arg_6331: GLenum, arg_6332: GLint) void {
    return epoxy_glPixelTransferi.?(arg_6331, arg_6332);
}
pub inline fn glPixelTransferxOES(arg_6333: GLenum, arg_6334: GLfixed) void {
    return epoxy_glPixelTransferxOES.?(arg_6333, arg_6334);
}
pub inline fn glPixelTransformParameterfEXT(arg_6335: GLenum, arg_6336: GLenum, arg_6337: GLfloat) void {
    return epoxy_glPixelTransformParameterfEXT.?(arg_6335, arg_6336, arg_6337);
}
pub inline fn glPixelTransformParameterfvEXT(arg_6338: GLenum, arg_6339: GLenum, arg_6340: [*c]const GLfloat) void {
    return epoxy_glPixelTransformParameterfvEXT.?(arg_6338, arg_6339, arg_6340);
}
pub inline fn glPixelTransformParameteriEXT(arg_6341: GLenum, arg_6342: GLenum, arg_6343: GLint) void {
    return epoxy_glPixelTransformParameteriEXT.?(arg_6341, arg_6342, arg_6343);
}
pub inline fn glPixelTransformParameterivEXT(arg_6344: GLenum, arg_6345: GLenum, arg_6346: [*c]const GLint) void {
    return epoxy_glPixelTransformParameterivEXT.?(arg_6344, arg_6345, arg_6346);
}
pub inline fn glPixelZoom(arg_6347: GLfloat, arg_6348: GLfloat) void {
    return epoxy_glPixelZoom.?(arg_6347, arg_6348);
}
pub inline fn glPixelZoomxOES(arg_6349: GLfixed, arg_6350: GLfixed) void {
    return epoxy_glPixelZoomxOES.?(arg_6349, arg_6350);
}
pub inline fn glPointAlongPathNV(arg_6351: GLuint, arg_6352: GLsizei, arg_6353: GLsizei, arg_6354: GLfloat, arg_6355: [*c]GLfloat, arg_6356: [*c]GLfloat, arg_6357: [*c]GLfloat, arg_6358: [*c]GLfloat) GLboolean {
    return epoxy_glPointAlongPathNV.?(arg_6351, arg_6352, arg_6353, arg_6354, arg_6355, arg_6356, arg_6357, arg_6358);
}
pub inline fn glPointParameterf(arg_6359: GLenum, arg_6360: GLfloat) void {
    return epoxy_glPointParameterf.?(arg_6359, arg_6360);
}
pub inline fn glPointParameterfARB(arg_6361: GLenum, arg_6362: GLfloat) void {
    return epoxy_glPointParameterfARB.?(arg_6361, arg_6362);
}
pub inline fn glPointParameterfEXT(arg_6363: GLenum, arg_6364: GLfloat) void {
    return epoxy_glPointParameterfEXT.?(arg_6363, arg_6364);
}
pub inline fn glPointParameterfSGIS(arg_6365: GLenum, arg_6366: GLfloat) void {
    return epoxy_glPointParameterfSGIS.?(arg_6365, arg_6366);
}
pub inline fn glPointParameterfv(arg_6367: GLenum, arg_6368: [*c]const GLfloat) void {
    return epoxy_glPointParameterfv.?(arg_6367, arg_6368);
}
pub inline fn glPointParameterfvARB(arg_6369: GLenum, arg_6370: [*c]const GLfloat) void {
    return epoxy_glPointParameterfvARB.?(arg_6369, arg_6370);
}
pub inline fn glPointParameterfvEXT(arg_6371: GLenum, arg_6372: [*c]const GLfloat) void {
    return epoxy_glPointParameterfvEXT.?(arg_6371, arg_6372);
}
pub inline fn glPointParameterfvSGIS(arg_6373: GLenum, arg_6374: [*c]const GLfloat) void {
    return epoxy_glPointParameterfvSGIS.?(arg_6373, arg_6374);
}
pub inline fn glPointParameteri(arg_6375: GLenum, arg_6376: GLint) void {
    return epoxy_glPointParameteri.?(arg_6375, arg_6376);
}
pub inline fn glPointParameteriNV(arg_6377: GLenum, arg_6378: GLint) void {
    return epoxy_glPointParameteriNV.?(arg_6377, arg_6378);
}
pub inline fn glPointParameteriv(arg_6379: GLenum, arg_6380: [*c]const GLint) void {
    return epoxy_glPointParameteriv.?(arg_6379, arg_6380);
}
pub inline fn glPointParameterivNV(arg_6381: GLenum, arg_6382: [*c]const GLint) void {
    return epoxy_glPointParameterivNV.?(arg_6381, arg_6382);
}
pub inline fn glPointParameterx(arg_6383: GLenum, arg_6384: GLfixed) void {
    return epoxy_glPointParameterx.?(arg_6383, arg_6384);
}
pub inline fn glPointParameterxOES(arg_6385: GLenum, arg_6386: GLfixed) void {
    return epoxy_glPointParameterxOES.?(arg_6385, arg_6386);
}
pub inline fn glPointParameterxv(arg_6387: GLenum, arg_6388: [*c]const GLfixed) void {
    return epoxy_glPointParameterxv.?(arg_6387, arg_6388);
}
pub inline fn glPointParameterxvOES(arg_6389: GLenum, arg_6390: [*c]const GLfixed) void {
    return epoxy_glPointParameterxvOES.?(arg_6389, arg_6390);
}
pub inline fn glPointSize(arg_6391: GLfloat) void {
    return epoxy_glPointSize.?(arg_6391);
}
pub inline fn glPointSizePointerOES(arg_6392: GLenum, arg_6393: GLsizei, arg_6394: ?*const anyopaque) void {
    return epoxy_glPointSizePointerOES.?(arg_6392, arg_6393, arg_6394);
}
pub inline fn glPointSizex(arg_6395: GLfixed) void {
    return epoxy_glPointSizex.?(arg_6395);
}
pub inline fn glPointSizexOES(arg_6396: GLfixed) void {
    return epoxy_glPointSizexOES.?(arg_6396);
}
pub inline fn glPollAsyncSGIX(arg_6397: [*c]GLuint) GLint {
    return epoxy_glPollAsyncSGIX.?(arg_6397);
}
pub inline fn glPollInstrumentsSGIX(arg_6398: [*c]GLint) GLint {
    return epoxy_glPollInstrumentsSGIX.?(arg_6398);
}
pub inline fn glPolygonMode(arg_6399: GLenum, arg_6400: GLenum) void {
    return epoxy_glPolygonMode.?(arg_6399, arg_6400);
}
pub inline fn glPolygonModeNV(arg_6401: GLenum, arg_6402: GLenum) void {
    return epoxy_glPolygonModeNV.?(arg_6401, arg_6402);
}
pub inline fn glPolygonOffset(arg_6403: GLfloat, arg_6404: GLfloat) void {
    return epoxy_glPolygonOffset.?(arg_6403, arg_6404);
}
pub inline fn glPolygonOffsetClamp(arg_6405: GLfloat, arg_6406: GLfloat, arg_6407: GLfloat) void {
    return epoxy_glPolygonOffsetClamp.?(arg_6405, arg_6406, arg_6407);
}
pub inline fn glPolygonOffsetClampEXT(arg_6408: GLfloat, arg_6409: GLfloat, arg_6410: GLfloat) void {
    return epoxy_glPolygonOffsetClampEXT.?(arg_6408, arg_6409, arg_6410);
}
pub inline fn glPolygonOffsetEXT(arg_6411: GLfloat, arg_6412: GLfloat) void {
    return epoxy_glPolygonOffsetEXT.?(arg_6411, arg_6412);
}
pub inline fn glPolygonOffsetx(arg_6413: GLfixed, arg_6414: GLfixed) void {
    return epoxy_glPolygonOffsetx.?(arg_6413, arg_6414);
}
pub inline fn glPolygonOffsetxOES(arg_6415: GLfixed, arg_6416: GLfixed) void {
    return epoxy_glPolygonOffsetxOES.?(arg_6415, arg_6416);
}
pub inline fn glPolygonStipple(arg_6417: [*c]const GLubyte) void {
    return epoxy_glPolygonStipple.?(arg_6417);
}
pub inline fn glPopAttrib() void {
    return epoxy_glPopAttrib.?();
}
pub inline fn glPopClientAttrib() void {
    return epoxy_glPopClientAttrib.?();
}
pub inline fn glPopDebugGroup() void {
    return epoxy_glPopDebugGroup.?();
}
pub inline fn glPopDebugGroupKHR() void {
    return epoxy_glPopDebugGroupKHR.?();
}
pub inline fn glPopGroupMarkerEXT() void {
    return epoxy_glPopGroupMarkerEXT.?();
}
pub inline fn glPopMatrix() void {
    return epoxy_glPopMatrix.?();
}
pub inline fn glPopName() void {
    return epoxy_glPopName.?();
}
pub inline fn glPresentFrameDualFillNV(arg_6418: GLuint, arg_6419: GLuint64EXT, arg_6420: GLuint, arg_6421: GLuint, arg_6422: GLenum, arg_6423: GLenum, arg_6424: GLuint, arg_6425: GLenum, arg_6426: GLuint, arg_6427: GLenum, arg_6428: GLuint, arg_6429: GLenum, arg_6430: GLuint) void {
    return epoxy_glPresentFrameDualFillNV.?(arg_6418, arg_6419, arg_6420, arg_6421, arg_6422, arg_6423, arg_6424, arg_6425, arg_6426, arg_6427, arg_6428, arg_6429, arg_6430);
}
pub inline fn glPresentFrameKeyedNV(arg_6431: GLuint, arg_6432: GLuint64EXT, arg_6433: GLuint, arg_6434: GLuint, arg_6435: GLenum, arg_6436: GLenum, arg_6437: GLuint, arg_6438: GLuint, arg_6439: GLenum, arg_6440: GLuint, arg_6441: GLuint) void {
    return epoxy_glPresentFrameKeyedNV.?(arg_6431, arg_6432, arg_6433, arg_6434, arg_6435, arg_6436, arg_6437, arg_6438, arg_6439, arg_6440, arg_6441);
}
pub inline fn glPrimitiveBoundingBox(arg_6442: GLfloat, arg_6443: GLfloat, arg_6444: GLfloat, arg_6445: GLfloat, arg_6446: GLfloat, arg_6447: GLfloat, arg_6448: GLfloat, arg_6449: GLfloat) void {
    return epoxy_glPrimitiveBoundingBox.?(arg_6442, arg_6443, arg_6444, arg_6445, arg_6446, arg_6447, arg_6448, arg_6449);
}
pub inline fn glPrimitiveBoundingBoxARB(arg_6450: GLfloat, arg_6451: GLfloat, arg_6452: GLfloat, arg_6453: GLfloat, arg_6454: GLfloat, arg_6455: GLfloat, arg_6456: GLfloat, arg_6457: GLfloat) void {
    return epoxy_glPrimitiveBoundingBoxARB.?(arg_6450, arg_6451, arg_6452, arg_6453, arg_6454, arg_6455, arg_6456, arg_6457);
}
pub inline fn glPrimitiveBoundingBoxEXT(arg_6458: GLfloat, arg_6459: GLfloat, arg_6460: GLfloat, arg_6461: GLfloat, arg_6462: GLfloat, arg_6463: GLfloat, arg_6464: GLfloat, arg_6465: GLfloat) void {
    return epoxy_glPrimitiveBoundingBoxEXT.?(arg_6458, arg_6459, arg_6460, arg_6461, arg_6462, arg_6463, arg_6464, arg_6465);
}
pub inline fn glPrimitiveBoundingBoxOES(arg_6466: GLfloat, arg_6467: GLfloat, arg_6468: GLfloat, arg_6469: GLfloat, arg_6470: GLfloat, arg_6471: GLfloat, arg_6472: GLfloat, arg_6473: GLfloat) void {
    return epoxy_glPrimitiveBoundingBoxOES.?(arg_6466, arg_6467, arg_6468, arg_6469, arg_6470, arg_6471, arg_6472, arg_6473);
}
pub inline fn glPrimitiveRestartIndex(arg_6474: GLuint) void {
    return epoxy_glPrimitiveRestartIndex.?(arg_6474);
}
pub inline fn glPrimitiveRestartIndexNV(arg_6475: GLuint) void {
    return epoxy_glPrimitiveRestartIndexNV.?(arg_6475);
}
pub inline fn glPrimitiveRestartNV() void {
    return epoxy_glPrimitiveRestartNV.?();
}
pub inline fn glPrioritizeTextures(arg_6476: GLsizei, arg_6477: [*c]const GLuint, arg_6478: [*c]const GLfloat) void {
    return epoxy_glPrioritizeTextures.?(arg_6476, arg_6477, arg_6478);
}
pub inline fn glPrioritizeTexturesEXT(arg_6479: GLsizei, arg_6480: [*c]const GLuint, arg_6481: [*c]const GLclampf) void {
    return epoxy_glPrioritizeTexturesEXT.?(arg_6479, arg_6480, arg_6481);
}
pub inline fn glPrioritizeTexturesxOES(arg_6482: GLsizei, arg_6483: [*c]const GLuint, arg_6484: [*c]const GLfixed) void {
    return epoxy_glPrioritizeTexturesxOES.?(arg_6482, arg_6483, arg_6484);
}
pub inline fn glProgramBinary(arg_6485: GLuint, arg_6486: GLenum, arg_6487: ?*const anyopaque, arg_6488: GLsizei) void {
    return epoxy_glProgramBinary.?(arg_6485, arg_6486, arg_6487, arg_6488);
}
pub inline fn glProgramBinaryOES(arg_6489: GLuint, arg_6490: GLenum, arg_6491: ?*const anyopaque, arg_6492: GLint) void {
    return epoxy_glProgramBinaryOES.?(arg_6489, arg_6490, arg_6491, arg_6492);
}
pub inline fn glProgramBufferParametersIivNV(arg_6493: GLenum, arg_6494: GLuint, arg_6495: GLuint, arg_6496: GLsizei, arg_6497: [*c]const GLint) void {
    return epoxy_glProgramBufferParametersIivNV.?(arg_6493, arg_6494, arg_6495, arg_6496, arg_6497);
}
pub inline fn glProgramBufferParametersIuivNV(arg_6498: GLenum, arg_6499: GLuint, arg_6500: GLuint, arg_6501: GLsizei, arg_6502: [*c]const GLuint) void {
    return epoxy_glProgramBufferParametersIuivNV.?(arg_6498, arg_6499, arg_6500, arg_6501, arg_6502);
}
pub inline fn glProgramBufferParametersfvNV(arg_6503: GLenum, arg_6504: GLuint, arg_6505: GLuint, arg_6506: GLsizei, arg_6507: [*c]const GLfloat) void {
    return epoxy_glProgramBufferParametersfvNV.?(arg_6503, arg_6504, arg_6505, arg_6506, arg_6507);
}
pub inline fn glProgramEnvParameter4dARB(arg_6508: GLenum, arg_6509: GLuint, arg_6510: GLdouble, arg_6511: GLdouble, arg_6512: GLdouble, arg_6513: GLdouble) void {
    return epoxy_glProgramEnvParameter4dARB.?(arg_6508, arg_6509, arg_6510, arg_6511, arg_6512, arg_6513);
}
pub inline fn glProgramEnvParameter4dvARB(arg_6514: GLenum, arg_6515: GLuint, arg_6516: [*c]const GLdouble) void {
    return epoxy_glProgramEnvParameter4dvARB.?(arg_6514, arg_6515, arg_6516);
}
pub inline fn glProgramEnvParameter4fARB(arg_6517: GLenum, arg_6518: GLuint, arg_6519: GLfloat, arg_6520: GLfloat, arg_6521: GLfloat, arg_6522: GLfloat) void {
    return epoxy_glProgramEnvParameter4fARB.?(arg_6517, arg_6518, arg_6519, arg_6520, arg_6521, arg_6522);
}
pub inline fn glProgramEnvParameter4fvARB(arg_6523: GLenum, arg_6524: GLuint, arg_6525: [*c]const GLfloat) void {
    return epoxy_glProgramEnvParameter4fvARB.?(arg_6523, arg_6524, arg_6525);
}
pub inline fn glProgramEnvParameterI4iNV(arg_6526: GLenum, arg_6527: GLuint, arg_6528: GLint, arg_6529: GLint, arg_6530: GLint, arg_6531: GLint) void {
    return epoxy_glProgramEnvParameterI4iNV.?(arg_6526, arg_6527, arg_6528, arg_6529, arg_6530, arg_6531);
}
pub inline fn glProgramEnvParameterI4ivNV(arg_6532: GLenum, arg_6533: GLuint, arg_6534: [*c]const GLint) void {
    return epoxy_glProgramEnvParameterI4ivNV.?(arg_6532, arg_6533, arg_6534);
}
pub inline fn glProgramEnvParameterI4uiNV(arg_6535: GLenum, arg_6536: GLuint, arg_6537: GLuint, arg_6538: GLuint, arg_6539: GLuint, arg_6540: GLuint) void {
    return epoxy_glProgramEnvParameterI4uiNV.?(arg_6535, arg_6536, arg_6537, arg_6538, arg_6539, arg_6540);
}
pub inline fn glProgramEnvParameterI4uivNV(arg_6541: GLenum, arg_6542: GLuint, arg_6543: [*c]const GLuint) void {
    return epoxy_glProgramEnvParameterI4uivNV.?(arg_6541, arg_6542, arg_6543);
}
pub inline fn glProgramEnvParameters4fvEXT(arg_6544: GLenum, arg_6545: GLuint, arg_6546: GLsizei, arg_6547: [*c]const GLfloat) void {
    return epoxy_glProgramEnvParameters4fvEXT.?(arg_6544, arg_6545, arg_6546, arg_6547);
}
pub inline fn glProgramEnvParametersI4ivNV(arg_6548: GLenum, arg_6549: GLuint, arg_6550: GLsizei, arg_6551: [*c]const GLint) void {
    return epoxy_glProgramEnvParametersI4ivNV.?(arg_6548, arg_6549, arg_6550, arg_6551);
}
pub inline fn glProgramEnvParametersI4uivNV(arg_6552: GLenum, arg_6553: GLuint, arg_6554: GLsizei, arg_6555: [*c]const GLuint) void {
    return epoxy_glProgramEnvParametersI4uivNV.?(arg_6552, arg_6553, arg_6554, arg_6555);
}
pub inline fn glProgramLocalParameter4dARB(arg_6556: GLenum, arg_6557: GLuint, arg_6558: GLdouble, arg_6559: GLdouble, arg_6560: GLdouble, arg_6561: GLdouble) void {
    return epoxy_glProgramLocalParameter4dARB.?(arg_6556, arg_6557, arg_6558, arg_6559, arg_6560, arg_6561);
}
pub inline fn glProgramLocalParameter4dvARB(arg_6562: GLenum, arg_6563: GLuint, arg_6564: [*c]const GLdouble) void {
    return epoxy_glProgramLocalParameter4dvARB.?(arg_6562, arg_6563, arg_6564);
}
pub inline fn glProgramLocalParameter4fARB(arg_6565: GLenum, arg_6566: GLuint, arg_6567: GLfloat, arg_6568: GLfloat, arg_6569: GLfloat, arg_6570: GLfloat) void {
    return epoxy_glProgramLocalParameter4fARB.?(arg_6565, arg_6566, arg_6567, arg_6568, arg_6569, arg_6570);
}
pub inline fn glProgramLocalParameter4fvARB(arg_6571: GLenum, arg_6572: GLuint, arg_6573: [*c]const GLfloat) void {
    return epoxy_glProgramLocalParameter4fvARB.?(arg_6571, arg_6572, arg_6573);
}
pub inline fn glProgramLocalParameterI4iNV(arg_6574: GLenum, arg_6575: GLuint, arg_6576: GLint, arg_6577: GLint, arg_6578: GLint, arg_6579: GLint) void {
    return epoxy_glProgramLocalParameterI4iNV.?(arg_6574, arg_6575, arg_6576, arg_6577, arg_6578, arg_6579);
}
pub inline fn glProgramLocalParameterI4ivNV(arg_6580: GLenum, arg_6581: GLuint, arg_6582: [*c]const GLint) void {
    return epoxy_glProgramLocalParameterI4ivNV.?(arg_6580, arg_6581, arg_6582);
}
pub inline fn glProgramLocalParameterI4uiNV(arg_6583: GLenum, arg_6584: GLuint, arg_6585: GLuint, arg_6586: GLuint, arg_6587: GLuint, arg_6588: GLuint) void {
    return epoxy_glProgramLocalParameterI4uiNV.?(arg_6583, arg_6584, arg_6585, arg_6586, arg_6587, arg_6588);
}
pub inline fn glProgramLocalParameterI4uivNV(arg_6589: GLenum, arg_6590: GLuint, arg_6591: [*c]const GLuint) void {
    return epoxy_glProgramLocalParameterI4uivNV.?(arg_6589, arg_6590, arg_6591);
}
pub inline fn glProgramLocalParameters4fvEXT(arg_6592: GLenum, arg_6593: GLuint, arg_6594: GLsizei, arg_6595: [*c]const GLfloat) void {
    return epoxy_glProgramLocalParameters4fvEXT.?(arg_6592, arg_6593, arg_6594, arg_6595);
}
pub inline fn glProgramLocalParametersI4ivNV(arg_6596: GLenum, arg_6597: GLuint, arg_6598: GLsizei, arg_6599: [*c]const GLint) void {
    return epoxy_glProgramLocalParametersI4ivNV.?(arg_6596, arg_6597, arg_6598, arg_6599);
}
pub inline fn glProgramLocalParametersI4uivNV(arg_6600: GLenum, arg_6601: GLuint, arg_6602: GLsizei, arg_6603: [*c]const GLuint) void {
    return epoxy_glProgramLocalParametersI4uivNV.?(arg_6600, arg_6601, arg_6602, arg_6603);
}
pub inline fn glProgramNamedParameter4dNV(arg_6604: GLuint, arg_6605: GLsizei, arg_6606: [*c]const GLubyte, arg_6607: GLdouble, arg_6608: GLdouble, arg_6609: GLdouble, arg_6610: GLdouble) void {
    return epoxy_glProgramNamedParameter4dNV.?(arg_6604, arg_6605, arg_6606, arg_6607, arg_6608, arg_6609, arg_6610);
}
pub inline fn glProgramNamedParameter4dvNV(arg_6611: GLuint, arg_6612: GLsizei, arg_6613: [*c]const GLubyte, arg_6614: [*c]const GLdouble) void {
    return epoxy_glProgramNamedParameter4dvNV.?(arg_6611, arg_6612, arg_6613, arg_6614);
}
pub inline fn glProgramNamedParameter4fNV(arg_6615: GLuint, arg_6616: GLsizei, arg_6617: [*c]const GLubyte, arg_6618: GLfloat, arg_6619: GLfloat, arg_6620: GLfloat, arg_6621: GLfloat) void {
    return epoxy_glProgramNamedParameter4fNV.?(arg_6615, arg_6616, arg_6617, arg_6618, arg_6619, arg_6620, arg_6621);
}
pub inline fn glProgramNamedParameter4fvNV(arg_6622: GLuint, arg_6623: GLsizei, arg_6624: [*c]const GLubyte, arg_6625: [*c]const GLfloat) void {
    return epoxy_glProgramNamedParameter4fvNV.?(arg_6622, arg_6623, arg_6624, arg_6625);
}
pub inline fn glProgramParameter4dNV(arg_6626: GLenum, arg_6627: GLuint, arg_6628: GLdouble, arg_6629: GLdouble, arg_6630: GLdouble, arg_6631: GLdouble) void {
    return epoxy_glProgramParameter4dNV.?(arg_6626, arg_6627, arg_6628, arg_6629, arg_6630, arg_6631);
}
pub inline fn glProgramParameter4dvNV(arg_6632: GLenum, arg_6633: GLuint, arg_6634: [*c]const GLdouble) void {
    return epoxy_glProgramParameter4dvNV.?(arg_6632, arg_6633, arg_6634);
}
pub inline fn glProgramParameter4fNV(arg_6635: GLenum, arg_6636: GLuint, arg_6637: GLfloat, arg_6638: GLfloat, arg_6639: GLfloat, arg_6640: GLfloat) void {
    return epoxy_glProgramParameter4fNV.?(arg_6635, arg_6636, arg_6637, arg_6638, arg_6639, arg_6640);
}
pub inline fn glProgramParameter4fvNV(arg_6641: GLenum, arg_6642: GLuint, arg_6643: [*c]const GLfloat) void {
    return epoxy_glProgramParameter4fvNV.?(arg_6641, arg_6642, arg_6643);
}
pub inline fn glProgramParameteri(arg_6644: GLuint, arg_6645: GLenum, arg_6646: GLint) void {
    return epoxy_glProgramParameteri.?(arg_6644, arg_6645, arg_6646);
}
pub inline fn glProgramParameteriARB(arg_6647: GLuint, arg_6648: GLenum, arg_6649: GLint) void {
    return epoxy_glProgramParameteriARB.?(arg_6647, arg_6648, arg_6649);
}
pub inline fn glProgramParameteriEXT(arg_6650: GLuint, arg_6651: GLenum, arg_6652: GLint) void {
    return epoxy_glProgramParameteriEXT.?(arg_6650, arg_6651, arg_6652);
}
pub inline fn glProgramParameters4dvNV(arg_6653: GLenum, arg_6654: GLuint, arg_6655: GLsizei, arg_6656: [*c]const GLdouble) void {
    return epoxy_glProgramParameters4dvNV.?(arg_6653, arg_6654, arg_6655, arg_6656);
}
pub inline fn glProgramParameters4fvNV(arg_6657: GLenum, arg_6658: GLuint, arg_6659: GLsizei, arg_6660: [*c]const GLfloat) void {
    return epoxy_glProgramParameters4fvNV.?(arg_6657, arg_6658, arg_6659, arg_6660);
}
pub inline fn glProgramPathFragmentInputGenNV(arg_6661: GLuint, arg_6662: GLint, arg_6663: GLenum, arg_6664: GLint, arg_6665: [*c]const GLfloat) void {
    return epoxy_glProgramPathFragmentInputGenNV.?(arg_6661, arg_6662, arg_6663, arg_6664, arg_6665);
}
pub inline fn glProgramStringARB(arg_6666: GLenum, arg_6667: GLenum, arg_6668: GLsizei, arg_6669: ?*const anyopaque) void {
    return epoxy_glProgramStringARB.?(arg_6666, arg_6667, arg_6668, arg_6669);
}
pub inline fn glProgramSubroutineParametersuivNV(arg_6670: GLenum, arg_6671: GLsizei, arg_6672: [*c]const GLuint) void {
    return epoxy_glProgramSubroutineParametersuivNV.?(arg_6670, arg_6671, arg_6672);
}
pub inline fn glProgramUniform1d(arg_6673: GLuint, arg_6674: GLint, arg_6675: GLdouble) void {
    return epoxy_glProgramUniform1d.?(arg_6673, arg_6674, arg_6675);
}
pub inline fn glProgramUniform1dEXT(arg_6676: GLuint, arg_6677: GLint, arg_6678: GLdouble) void {
    return epoxy_glProgramUniform1dEXT.?(arg_6676, arg_6677, arg_6678);
}
pub inline fn glProgramUniform1dv(arg_6679: GLuint, arg_6680: GLint, arg_6681: GLsizei, arg_6682: [*c]const GLdouble) void {
    return epoxy_glProgramUniform1dv.?(arg_6679, arg_6680, arg_6681, arg_6682);
}
pub inline fn glProgramUniform1dvEXT(arg_6683: GLuint, arg_6684: GLint, arg_6685: GLsizei, arg_6686: [*c]const GLdouble) void {
    return epoxy_glProgramUniform1dvEXT.?(arg_6683, arg_6684, arg_6685, arg_6686);
}
pub inline fn glProgramUniform1f(arg_6687: GLuint, arg_6688: GLint, arg_6689: GLfloat) void {
    return epoxy_glProgramUniform1f.?(arg_6687, arg_6688, arg_6689);
}
pub inline fn glProgramUniform1fEXT(arg_6690: GLuint, arg_6691: GLint, arg_6692: GLfloat) void {
    return epoxy_glProgramUniform1fEXT.?(arg_6690, arg_6691, arg_6692);
}
pub inline fn glProgramUniform1fv(arg_6693: GLuint, arg_6694: GLint, arg_6695: GLsizei, arg_6696: [*c]const GLfloat) void {
    return epoxy_glProgramUniform1fv.?(arg_6693, arg_6694, arg_6695, arg_6696);
}
pub inline fn glProgramUniform1fvEXT(arg_6697: GLuint, arg_6698: GLint, arg_6699: GLsizei, arg_6700: [*c]const GLfloat) void {
    return epoxy_glProgramUniform1fvEXT.?(arg_6697, arg_6698, arg_6699, arg_6700);
}
pub inline fn glProgramUniform1i(arg_6701: GLuint, arg_6702: GLint, arg_6703: GLint) void {
    return epoxy_glProgramUniform1i.?(arg_6701, arg_6702, arg_6703);
}
pub inline fn glProgramUniform1i64ARB(arg_6704: GLuint, arg_6705: GLint, arg_6706: GLint64) void {
    return epoxy_glProgramUniform1i64ARB.?(arg_6704, arg_6705, arg_6706);
}
pub inline fn glProgramUniform1i64NV(arg_6707: GLuint, arg_6708: GLint, arg_6709: GLint64EXT) void {
    return epoxy_glProgramUniform1i64NV.?(arg_6707, arg_6708, arg_6709);
}
pub inline fn glProgramUniform1i64vARB(arg_6710: GLuint, arg_6711: GLint, arg_6712: GLsizei, arg_6713: [*c]const GLint64) void {
    return epoxy_glProgramUniform1i64vARB.?(arg_6710, arg_6711, arg_6712, arg_6713);
}
pub inline fn glProgramUniform1i64vNV(arg_6714: GLuint, arg_6715: GLint, arg_6716: GLsizei, arg_6717: [*c]const GLint64EXT) void {
    return epoxy_glProgramUniform1i64vNV.?(arg_6714, arg_6715, arg_6716, arg_6717);
}
pub inline fn glProgramUniform1iEXT(arg_6718: GLuint, arg_6719: GLint, arg_6720: GLint) void {
    return epoxy_glProgramUniform1iEXT.?(arg_6718, arg_6719, arg_6720);
}
pub inline fn glProgramUniform1iv(arg_6721: GLuint, arg_6722: GLint, arg_6723: GLsizei, arg_6724: [*c]const GLint) void {
    return epoxy_glProgramUniform1iv.?(arg_6721, arg_6722, arg_6723, arg_6724);
}
pub inline fn glProgramUniform1ivEXT(arg_6725: GLuint, arg_6726: GLint, arg_6727: GLsizei, arg_6728: [*c]const GLint) void {
    return epoxy_glProgramUniform1ivEXT.?(arg_6725, arg_6726, arg_6727, arg_6728);
}
pub inline fn glProgramUniform1ui(arg_6729: GLuint, arg_6730: GLint, arg_6731: GLuint) void {
    return epoxy_glProgramUniform1ui.?(arg_6729, arg_6730, arg_6731);
}
pub inline fn glProgramUniform1ui64ARB(arg_6732: GLuint, arg_6733: GLint, arg_6734: GLuint64) void {
    return epoxy_glProgramUniform1ui64ARB.?(arg_6732, arg_6733, arg_6734);
}
pub inline fn glProgramUniform1ui64NV(arg_6735: GLuint, arg_6736: GLint, arg_6737: GLuint64EXT) void {
    return epoxy_glProgramUniform1ui64NV.?(arg_6735, arg_6736, arg_6737);
}
pub inline fn glProgramUniform1ui64vARB(arg_6738: GLuint, arg_6739: GLint, arg_6740: GLsizei, arg_6741: [*c]const GLuint64) void {
    return epoxy_glProgramUniform1ui64vARB.?(arg_6738, arg_6739, arg_6740, arg_6741);
}
pub inline fn glProgramUniform1ui64vNV(arg_6742: GLuint, arg_6743: GLint, arg_6744: GLsizei, arg_6745: [*c]const GLuint64EXT) void {
    return epoxy_glProgramUniform1ui64vNV.?(arg_6742, arg_6743, arg_6744, arg_6745);
}
pub inline fn glProgramUniform1uiEXT(arg_6746: GLuint, arg_6747: GLint, arg_6748: GLuint) void {
    return epoxy_glProgramUniform1uiEXT.?(arg_6746, arg_6747, arg_6748);
}
pub inline fn glProgramUniform1uiv(arg_6749: GLuint, arg_6750: GLint, arg_6751: GLsizei, arg_6752: [*c]const GLuint) void {
    return epoxy_glProgramUniform1uiv.?(arg_6749, arg_6750, arg_6751, arg_6752);
}
pub inline fn glProgramUniform1uivEXT(arg_6753: GLuint, arg_6754: GLint, arg_6755: GLsizei, arg_6756: [*c]const GLuint) void {
    return epoxy_glProgramUniform1uivEXT.?(arg_6753, arg_6754, arg_6755, arg_6756);
}
pub inline fn glProgramUniform2d(arg_6757: GLuint, arg_6758: GLint, arg_6759: GLdouble, arg_6760: GLdouble) void {
    return epoxy_glProgramUniform2d.?(arg_6757, arg_6758, arg_6759, arg_6760);
}
pub inline fn glProgramUniform2dEXT(arg_6761: GLuint, arg_6762: GLint, arg_6763: GLdouble, arg_6764: GLdouble) void {
    return epoxy_glProgramUniform2dEXT.?(arg_6761, arg_6762, arg_6763, arg_6764);
}
pub inline fn glProgramUniform2dv(arg_6765: GLuint, arg_6766: GLint, arg_6767: GLsizei, arg_6768: [*c]const GLdouble) void {
    return epoxy_glProgramUniform2dv.?(arg_6765, arg_6766, arg_6767, arg_6768);
}
pub inline fn glProgramUniform2dvEXT(arg_6769: GLuint, arg_6770: GLint, arg_6771: GLsizei, arg_6772: [*c]const GLdouble) void {
    return epoxy_glProgramUniform2dvEXT.?(arg_6769, arg_6770, arg_6771, arg_6772);
}
pub inline fn glProgramUniform2f(arg_6773: GLuint, arg_6774: GLint, arg_6775: GLfloat, arg_6776: GLfloat) void {
    return epoxy_glProgramUniform2f.?(arg_6773, arg_6774, arg_6775, arg_6776);
}
pub inline fn glProgramUniform2fEXT(arg_6777: GLuint, arg_6778: GLint, arg_6779: GLfloat, arg_6780: GLfloat) void {
    return epoxy_glProgramUniform2fEXT.?(arg_6777, arg_6778, arg_6779, arg_6780);
}
pub inline fn glProgramUniform2fv(arg_6781: GLuint, arg_6782: GLint, arg_6783: GLsizei, arg_6784: [*c]const GLfloat) void {
    return epoxy_glProgramUniform2fv.?(arg_6781, arg_6782, arg_6783, arg_6784);
}
pub inline fn glProgramUniform2fvEXT(arg_6785: GLuint, arg_6786: GLint, arg_6787: GLsizei, arg_6788: [*c]const GLfloat) void {
    return epoxy_glProgramUniform2fvEXT.?(arg_6785, arg_6786, arg_6787, arg_6788);
}
pub inline fn glProgramUniform2i(arg_6789: GLuint, arg_6790: GLint, arg_6791: GLint, arg_6792: GLint) void {
    return epoxy_glProgramUniform2i.?(arg_6789, arg_6790, arg_6791, arg_6792);
}
pub inline fn glProgramUniform2i64ARB(arg_6793: GLuint, arg_6794: GLint, arg_6795: GLint64, arg_6796: GLint64) void {
    return epoxy_glProgramUniform2i64ARB.?(arg_6793, arg_6794, arg_6795, arg_6796);
}
pub inline fn glProgramUniform2i64NV(arg_6797: GLuint, arg_6798: GLint, arg_6799: GLint64EXT, arg_6800: GLint64EXT) void {
    return epoxy_glProgramUniform2i64NV.?(arg_6797, arg_6798, arg_6799, arg_6800);
}
pub inline fn glProgramUniform2i64vARB(arg_6801: GLuint, arg_6802: GLint, arg_6803: GLsizei, arg_6804: [*c]const GLint64) void {
    return epoxy_glProgramUniform2i64vARB.?(arg_6801, arg_6802, arg_6803, arg_6804);
}
pub inline fn glProgramUniform2i64vNV(arg_6805: GLuint, arg_6806: GLint, arg_6807: GLsizei, arg_6808: [*c]const GLint64EXT) void {
    return epoxy_glProgramUniform2i64vNV.?(arg_6805, arg_6806, arg_6807, arg_6808);
}
pub inline fn glProgramUniform2iEXT(arg_6809: GLuint, arg_6810: GLint, arg_6811: GLint, arg_6812: GLint) void {
    return epoxy_glProgramUniform2iEXT.?(arg_6809, arg_6810, arg_6811, arg_6812);
}
pub inline fn glProgramUniform2iv(arg_6813: GLuint, arg_6814: GLint, arg_6815: GLsizei, arg_6816: [*c]const GLint) void {
    return epoxy_glProgramUniform2iv.?(arg_6813, arg_6814, arg_6815, arg_6816);
}
pub inline fn glProgramUniform2ivEXT(arg_6817: GLuint, arg_6818: GLint, arg_6819: GLsizei, arg_6820: [*c]const GLint) void {
    return epoxy_glProgramUniform2ivEXT.?(arg_6817, arg_6818, arg_6819, arg_6820);
}
pub inline fn glProgramUniform2ui(arg_6821: GLuint, arg_6822: GLint, arg_6823: GLuint, arg_6824: GLuint) void {
    return epoxy_glProgramUniform2ui.?(arg_6821, arg_6822, arg_6823, arg_6824);
}
pub inline fn glProgramUniform2ui64ARB(arg_6825: GLuint, arg_6826: GLint, arg_6827: GLuint64, arg_6828: GLuint64) void {
    return epoxy_glProgramUniform2ui64ARB.?(arg_6825, arg_6826, arg_6827, arg_6828);
}
pub inline fn glProgramUniform2ui64NV(arg_6829: GLuint, arg_6830: GLint, arg_6831: GLuint64EXT, arg_6832: GLuint64EXT) void {
    return epoxy_glProgramUniform2ui64NV.?(arg_6829, arg_6830, arg_6831, arg_6832);
}
pub inline fn glProgramUniform2ui64vARB(arg_6833: GLuint, arg_6834: GLint, arg_6835: GLsizei, arg_6836: [*c]const GLuint64) void {
    return epoxy_glProgramUniform2ui64vARB.?(arg_6833, arg_6834, arg_6835, arg_6836);
}
pub inline fn glProgramUniform2ui64vNV(arg_6837: GLuint, arg_6838: GLint, arg_6839: GLsizei, arg_6840: [*c]const GLuint64EXT) void {
    return epoxy_glProgramUniform2ui64vNV.?(arg_6837, arg_6838, arg_6839, arg_6840);
}
pub inline fn glProgramUniform2uiEXT(arg_6841: GLuint, arg_6842: GLint, arg_6843: GLuint, arg_6844: GLuint) void {
    return epoxy_glProgramUniform2uiEXT.?(arg_6841, arg_6842, arg_6843, arg_6844);
}
pub inline fn glProgramUniform2uiv(arg_6845: GLuint, arg_6846: GLint, arg_6847: GLsizei, arg_6848: [*c]const GLuint) void {
    return epoxy_glProgramUniform2uiv.?(arg_6845, arg_6846, arg_6847, arg_6848);
}
pub inline fn glProgramUniform2uivEXT(arg_6849: GLuint, arg_6850: GLint, arg_6851: GLsizei, arg_6852: [*c]const GLuint) void {
    return epoxy_glProgramUniform2uivEXT.?(arg_6849, arg_6850, arg_6851, arg_6852);
}
pub inline fn glProgramUniform3d(arg_6853: GLuint, arg_6854: GLint, arg_6855: GLdouble, arg_6856: GLdouble, arg_6857: GLdouble) void {
    return epoxy_glProgramUniform3d.?(arg_6853, arg_6854, arg_6855, arg_6856, arg_6857);
}
pub inline fn glProgramUniform3dEXT(arg_6858: GLuint, arg_6859: GLint, arg_6860: GLdouble, arg_6861: GLdouble, arg_6862: GLdouble) void {
    return epoxy_glProgramUniform3dEXT.?(arg_6858, arg_6859, arg_6860, arg_6861, arg_6862);
}
pub inline fn glProgramUniform3dv(arg_6863: GLuint, arg_6864: GLint, arg_6865: GLsizei, arg_6866: [*c]const GLdouble) void {
    return epoxy_glProgramUniform3dv.?(arg_6863, arg_6864, arg_6865, arg_6866);
}
pub inline fn glProgramUniform3dvEXT(arg_6867: GLuint, arg_6868: GLint, arg_6869: GLsizei, arg_6870: [*c]const GLdouble) void {
    return epoxy_glProgramUniform3dvEXT.?(arg_6867, arg_6868, arg_6869, arg_6870);
}
pub inline fn glProgramUniform3f(arg_6871: GLuint, arg_6872: GLint, arg_6873: GLfloat, arg_6874: GLfloat, arg_6875: GLfloat) void {
    return epoxy_glProgramUniform3f.?(arg_6871, arg_6872, arg_6873, arg_6874, arg_6875);
}
pub inline fn glProgramUniform3fEXT(arg_6876: GLuint, arg_6877: GLint, arg_6878: GLfloat, arg_6879: GLfloat, arg_6880: GLfloat) void {
    return epoxy_glProgramUniform3fEXT.?(arg_6876, arg_6877, arg_6878, arg_6879, arg_6880);
}
pub inline fn glProgramUniform3fv(arg_6881: GLuint, arg_6882: GLint, arg_6883: GLsizei, arg_6884: [*c]const GLfloat) void {
    return epoxy_glProgramUniform3fv.?(arg_6881, arg_6882, arg_6883, arg_6884);
}
pub inline fn glProgramUniform3fvEXT(arg_6885: GLuint, arg_6886: GLint, arg_6887: GLsizei, arg_6888: [*c]const GLfloat) void {
    return epoxy_glProgramUniform3fvEXT.?(arg_6885, arg_6886, arg_6887, arg_6888);
}
pub inline fn glProgramUniform3i(arg_6889: GLuint, arg_6890: GLint, arg_6891: GLint, arg_6892: GLint, arg_6893: GLint) void {
    return epoxy_glProgramUniform3i.?(arg_6889, arg_6890, arg_6891, arg_6892, arg_6893);
}
pub inline fn glProgramUniform3i64ARB(arg_6894: GLuint, arg_6895: GLint, arg_6896: GLint64, arg_6897: GLint64, arg_6898: GLint64) void {
    return epoxy_glProgramUniform3i64ARB.?(arg_6894, arg_6895, arg_6896, arg_6897, arg_6898);
}
pub inline fn glProgramUniform3i64NV(arg_6899: GLuint, arg_6900: GLint, arg_6901: GLint64EXT, arg_6902: GLint64EXT, arg_6903: GLint64EXT) void {
    return epoxy_glProgramUniform3i64NV.?(arg_6899, arg_6900, arg_6901, arg_6902, arg_6903);
}
pub inline fn glProgramUniform3i64vARB(arg_6904: GLuint, arg_6905: GLint, arg_6906: GLsizei, arg_6907: [*c]const GLint64) void {
    return epoxy_glProgramUniform3i64vARB.?(arg_6904, arg_6905, arg_6906, arg_6907);
}
pub inline fn glProgramUniform3i64vNV(arg_6908: GLuint, arg_6909: GLint, arg_6910: GLsizei, arg_6911: [*c]const GLint64EXT) void {
    return epoxy_glProgramUniform3i64vNV.?(arg_6908, arg_6909, arg_6910, arg_6911);
}
pub inline fn glProgramUniform3iEXT(arg_6912: GLuint, arg_6913: GLint, arg_6914: GLint, arg_6915: GLint, arg_6916: GLint) void {
    return epoxy_glProgramUniform3iEXT.?(arg_6912, arg_6913, arg_6914, arg_6915, arg_6916);
}
pub inline fn glProgramUniform3iv(arg_6917: GLuint, arg_6918: GLint, arg_6919: GLsizei, arg_6920: [*c]const GLint) void {
    return epoxy_glProgramUniform3iv.?(arg_6917, arg_6918, arg_6919, arg_6920);
}
pub inline fn glProgramUniform3ivEXT(arg_6921: GLuint, arg_6922: GLint, arg_6923: GLsizei, arg_6924: [*c]const GLint) void {
    return epoxy_glProgramUniform3ivEXT.?(arg_6921, arg_6922, arg_6923, arg_6924);
}
pub inline fn glProgramUniform3ui(arg_6925: GLuint, arg_6926: GLint, arg_6927: GLuint, arg_6928: GLuint, arg_6929: GLuint) void {
    return epoxy_glProgramUniform3ui.?(arg_6925, arg_6926, arg_6927, arg_6928, arg_6929);
}
pub inline fn glProgramUniform3ui64ARB(arg_6930: GLuint, arg_6931: GLint, arg_6932: GLuint64, arg_6933: GLuint64, arg_6934: GLuint64) void {
    return epoxy_glProgramUniform3ui64ARB.?(arg_6930, arg_6931, arg_6932, arg_6933, arg_6934);
}
pub inline fn glProgramUniform3ui64NV(arg_6935: GLuint, arg_6936: GLint, arg_6937: GLuint64EXT, arg_6938: GLuint64EXT, arg_6939: GLuint64EXT) void {
    return epoxy_glProgramUniform3ui64NV.?(arg_6935, arg_6936, arg_6937, arg_6938, arg_6939);
}
pub inline fn glProgramUniform3ui64vARB(arg_6940: GLuint, arg_6941: GLint, arg_6942: GLsizei, arg_6943: [*c]const GLuint64) void {
    return epoxy_glProgramUniform3ui64vARB.?(arg_6940, arg_6941, arg_6942, arg_6943);
}
pub inline fn glProgramUniform3ui64vNV(arg_6944: GLuint, arg_6945: GLint, arg_6946: GLsizei, arg_6947: [*c]const GLuint64EXT) void {
    return epoxy_glProgramUniform3ui64vNV.?(arg_6944, arg_6945, arg_6946, arg_6947);
}
pub inline fn glProgramUniform3uiEXT(arg_6948: GLuint, arg_6949: GLint, arg_6950: GLuint, arg_6951: GLuint, arg_6952: GLuint) void {
    return epoxy_glProgramUniform3uiEXT.?(arg_6948, arg_6949, arg_6950, arg_6951, arg_6952);
}
pub inline fn glProgramUniform3uiv(arg_6953: GLuint, arg_6954: GLint, arg_6955: GLsizei, arg_6956: [*c]const GLuint) void {
    return epoxy_glProgramUniform3uiv.?(arg_6953, arg_6954, arg_6955, arg_6956);
}
pub inline fn glProgramUniform3uivEXT(arg_6957: GLuint, arg_6958: GLint, arg_6959: GLsizei, arg_6960: [*c]const GLuint) void {
    return epoxy_glProgramUniform3uivEXT.?(arg_6957, arg_6958, arg_6959, arg_6960);
}
pub inline fn glProgramUniform4d(arg_6961: GLuint, arg_6962: GLint, arg_6963: GLdouble, arg_6964: GLdouble, arg_6965: GLdouble, arg_6966: GLdouble) void {
    return epoxy_glProgramUniform4d.?(arg_6961, arg_6962, arg_6963, arg_6964, arg_6965, arg_6966);
}
pub inline fn glProgramUniform4dEXT(arg_6967: GLuint, arg_6968: GLint, arg_6969: GLdouble, arg_6970: GLdouble, arg_6971: GLdouble, arg_6972: GLdouble) void {
    return epoxy_glProgramUniform4dEXT.?(arg_6967, arg_6968, arg_6969, arg_6970, arg_6971, arg_6972);
}
pub inline fn glProgramUniform4dv(arg_6973: GLuint, arg_6974: GLint, arg_6975: GLsizei, arg_6976: [*c]const GLdouble) void {
    return epoxy_glProgramUniform4dv.?(arg_6973, arg_6974, arg_6975, arg_6976);
}
pub inline fn glProgramUniform4dvEXT(arg_6977: GLuint, arg_6978: GLint, arg_6979: GLsizei, arg_6980: [*c]const GLdouble) void {
    return epoxy_glProgramUniform4dvEXT.?(arg_6977, arg_6978, arg_6979, arg_6980);
}
pub inline fn glProgramUniform4f(arg_6981: GLuint, arg_6982: GLint, arg_6983: GLfloat, arg_6984: GLfloat, arg_6985: GLfloat, arg_6986: GLfloat) void {
    return epoxy_glProgramUniform4f.?(arg_6981, arg_6982, arg_6983, arg_6984, arg_6985, arg_6986);
}
pub inline fn glProgramUniform4fEXT(arg_6987: GLuint, arg_6988: GLint, arg_6989: GLfloat, arg_6990: GLfloat, arg_6991: GLfloat, arg_6992: GLfloat) void {
    return epoxy_glProgramUniform4fEXT.?(arg_6987, arg_6988, arg_6989, arg_6990, arg_6991, arg_6992);
}
pub inline fn glProgramUniform4fv(arg_6993: GLuint, arg_6994: GLint, arg_6995: GLsizei, arg_6996: [*c]const GLfloat) void {
    return epoxy_glProgramUniform4fv.?(arg_6993, arg_6994, arg_6995, arg_6996);
}
pub inline fn glProgramUniform4fvEXT(arg_6997: GLuint, arg_6998: GLint, arg_6999: GLsizei, arg_7000: [*c]const GLfloat) void {
    return epoxy_glProgramUniform4fvEXT.?(arg_6997, arg_6998, arg_6999, arg_7000);
}
pub inline fn glProgramUniform4i(arg_7001: GLuint, arg_7002: GLint, arg_7003: GLint, arg_7004: GLint, arg_7005: GLint, arg_7006: GLint) void {
    return epoxy_glProgramUniform4i.?(arg_7001, arg_7002, arg_7003, arg_7004, arg_7005, arg_7006);
}
pub inline fn glProgramUniform4i64ARB(arg_7007: GLuint, arg_7008: GLint, arg_7009: GLint64, arg_7010: GLint64, arg_7011: GLint64, arg_7012: GLint64) void {
    return epoxy_glProgramUniform4i64ARB.?(arg_7007, arg_7008, arg_7009, arg_7010, arg_7011, arg_7012);
}
pub inline fn glProgramUniform4i64NV(arg_7013: GLuint, arg_7014: GLint, arg_7015: GLint64EXT, arg_7016: GLint64EXT, arg_7017: GLint64EXT, arg_7018: GLint64EXT) void {
    return epoxy_glProgramUniform4i64NV.?(arg_7013, arg_7014, arg_7015, arg_7016, arg_7017, arg_7018);
}
pub inline fn glProgramUniform4i64vARB(arg_7019: GLuint, arg_7020: GLint, arg_7021: GLsizei, arg_7022: [*c]const GLint64) void {
    return epoxy_glProgramUniform4i64vARB.?(arg_7019, arg_7020, arg_7021, arg_7022);
}
pub inline fn glProgramUniform4i64vNV(arg_7023: GLuint, arg_7024: GLint, arg_7025: GLsizei, arg_7026: [*c]const GLint64EXT) void {
    return epoxy_glProgramUniform4i64vNV.?(arg_7023, arg_7024, arg_7025, arg_7026);
}
pub inline fn glProgramUniform4iEXT(arg_7027: GLuint, arg_7028: GLint, arg_7029: GLint, arg_7030: GLint, arg_7031: GLint, arg_7032: GLint) void {
    return epoxy_glProgramUniform4iEXT.?(arg_7027, arg_7028, arg_7029, arg_7030, arg_7031, arg_7032);
}
pub inline fn glProgramUniform4iv(arg_7033: GLuint, arg_7034: GLint, arg_7035: GLsizei, arg_7036: [*c]const GLint) void {
    return epoxy_glProgramUniform4iv.?(arg_7033, arg_7034, arg_7035, arg_7036);
}
pub inline fn glProgramUniform4ivEXT(arg_7037: GLuint, arg_7038: GLint, arg_7039: GLsizei, arg_7040: [*c]const GLint) void {
    return epoxy_glProgramUniform4ivEXT.?(arg_7037, arg_7038, arg_7039, arg_7040);
}
pub inline fn glProgramUniform4ui(arg_7041: GLuint, arg_7042: GLint, arg_7043: GLuint, arg_7044: GLuint, arg_7045: GLuint, arg_7046: GLuint) void {
    return epoxy_glProgramUniform4ui.?(arg_7041, arg_7042, arg_7043, arg_7044, arg_7045, arg_7046);
}
pub inline fn glProgramUniform4ui64ARB(arg_7047: GLuint, arg_7048: GLint, arg_7049: GLuint64, arg_7050: GLuint64, arg_7051: GLuint64, arg_7052: GLuint64) void {
    return epoxy_glProgramUniform4ui64ARB.?(arg_7047, arg_7048, arg_7049, arg_7050, arg_7051, arg_7052);
}
pub inline fn glProgramUniform4ui64NV(arg_7053: GLuint, arg_7054: GLint, arg_7055: GLuint64EXT, arg_7056: GLuint64EXT, arg_7057: GLuint64EXT, arg_7058: GLuint64EXT) void {
    return epoxy_glProgramUniform4ui64NV.?(arg_7053, arg_7054, arg_7055, arg_7056, arg_7057, arg_7058);
}
pub inline fn glProgramUniform4ui64vARB(arg_7059: GLuint, arg_7060: GLint, arg_7061: GLsizei, arg_7062: [*c]const GLuint64) void {
    return epoxy_glProgramUniform4ui64vARB.?(arg_7059, arg_7060, arg_7061, arg_7062);
}
pub inline fn glProgramUniform4ui64vNV(arg_7063: GLuint, arg_7064: GLint, arg_7065: GLsizei, arg_7066: [*c]const GLuint64EXT) void {
    return epoxy_glProgramUniform4ui64vNV.?(arg_7063, arg_7064, arg_7065, arg_7066);
}
pub inline fn glProgramUniform4uiEXT(arg_7067: GLuint, arg_7068: GLint, arg_7069: GLuint, arg_7070: GLuint, arg_7071: GLuint, arg_7072: GLuint) void {
    return epoxy_glProgramUniform4uiEXT.?(arg_7067, arg_7068, arg_7069, arg_7070, arg_7071, arg_7072);
}
pub inline fn glProgramUniform4uiv(arg_7073: GLuint, arg_7074: GLint, arg_7075: GLsizei, arg_7076: [*c]const GLuint) void {
    return epoxy_glProgramUniform4uiv.?(arg_7073, arg_7074, arg_7075, arg_7076);
}
pub inline fn glProgramUniform4uivEXT(arg_7077: GLuint, arg_7078: GLint, arg_7079: GLsizei, arg_7080: [*c]const GLuint) void {
    return epoxy_glProgramUniform4uivEXT.?(arg_7077, arg_7078, arg_7079, arg_7080);
}
pub inline fn glProgramUniformHandleui64ARB(arg_7081: GLuint, arg_7082: GLint, arg_7083: GLuint64) void {
    return epoxy_glProgramUniformHandleui64ARB.?(arg_7081, arg_7082, arg_7083);
}
pub inline fn glProgramUniformHandleui64IMG(arg_7084: GLuint, arg_7085: GLint, arg_7086: GLuint64) void {
    return epoxy_glProgramUniformHandleui64IMG.?(arg_7084, arg_7085, arg_7086);
}
pub inline fn glProgramUniformHandleui64NV(arg_7087: GLuint, arg_7088: GLint, arg_7089: GLuint64) void {
    return epoxy_glProgramUniformHandleui64NV.?(arg_7087, arg_7088, arg_7089);
}
pub inline fn glProgramUniformHandleui64vARB(arg_7090: GLuint, arg_7091: GLint, arg_7092: GLsizei, arg_7093: [*c]const GLuint64) void {
    return epoxy_glProgramUniformHandleui64vARB.?(arg_7090, arg_7091, arg_7092, arg_7093);
}
pub inline fn glProgramUniformHandleui64vIMG(arg_7094: GLuint, arg_7095: GLint, arg_7096: GLsizei, arg_7097: [*c]const GLuint64) void {
    return epoxy_glProgramUniformHandleui64vIMG.?(arg_7094, arg_7095, arg_7096, arg_7097);
}
pub inline fn glProgramUniformHandleui64vNV(arg_7098: GLuint, arg_7099: GLint, arg_7100: GLsizei, arg_7101: [*c]const GLuint64) void {
    return epoxy_glProgramUniformHandleui64vNV.?(arg_7098, arg_7099, arg_7100, arg_7101);
}
pub inline fn glProgramUniformMatrix2dv(arg_7102: GLuint, arg_7103: GLint, arg_7104: GLsizei, arg_7105: GLboolean, arg_7106: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2dv.?(arg_7102, arg_7103, arg_7104, arg_7105, arg_7106);
}
pub inline fn glProgramUniformMatrix2dvEXT(arg_7107: GLuint, arg_7108: GLint, arg_7109: GLsizei, arg_7110: GLboolean, arg_7111: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2dvEXT.?(arg_7107, arg_7108, arg_7109, arg_7110, arg_7111);
}
pub inline fn glProgramUniformMatrix2fv(arg_7112: GLuint, arg_7113: GLint, arg_7114: GLsizei, arg_7115: GLboolean, arg_7116: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2fv.?(arg_7112, arg_7113, arg_7114, arg_7115, arg_7116);
}
pub inline fn glProgramUniformMatrix2fvEXT(arg_7117: GLuint, arg_7118: GLint, arg_7119: GLsizei, arg_7120: GLboolean, arg_7121: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2fvEXT.?(arg_7117, arg_7118, arg_7119, arg_7120, arg_7121);
}
pub inline fn glProgramUniformMatrix2x3dv(arg_7122: GLuint, arg_7123: GLint, arg_7124: GLsizei, arg_7125: GLboolean, arg_7126: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2x3dv.?(arg_7122, arg_7123, arg_7124, arg_7125, arg_7126);
}
pub inline fn glProgramUniformMatrix2x3dvEXT(arg_7127: GLuint, arg_7128: GLint, arg_7129: GLsizei, arg_7130: GLboolean, arg_7131: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2x3dvEXT.?(arg_7127, arg_7128, arg_7129, arg_7130, arg_7131);
}
pub inline fn glProgramUniformMatrix2x3fv(arg_7132: GLuint, arg_7133: GLint, arg_7134: GLsizei, arg_7135: GLboolean, arg_7136: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2x3fv.?(arg_7132, arg_7133, arg_7134, arg_7135, arg_7136);
}
pub inline fn glProgramUniformMatrix2x3fvEXT(arg_7137: GLuint, arg_7138: GLint, arg_7139: GLsizei, arg_7140: GLboolean, arg_7141: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2x3fvEXT.?(arg_7137, arg_7138, arg_7139, arg_7140, arg_7141);
}
pub inline fn glProgramUniformMatrix2x4dv(arg_7142: GLuint, arg_7143: GLint, arg_7144: GLsizei, arg_7145: GLboolean, arg_7146: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2x4dv.?(arg_7142, arg_7143, arg_7144, arg_7145, arg_7146);
}
pub inline fn glProgramUniformMatrix2x4dvEXT(arg_7147: GLuint, arg_7148: GLint, arg_7149: GLsizei, arg_7150: GLboolean, arg_7151: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2x4dvEXT.?(arg_7147, arg_7148, arg_7149, arg_7150, arg_7151);
}
pub inline fn glProgramUniformMatrix2x4fv(arg_7152: GLuint, arg_7153: GLint, arg_7154: GLsizei, arg_7155: GLboolean, arg_7156: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2x4fv.?(arg_7152, arg_7153, arg_7154, arg_7155, arg_7156);
}
pub inline fn glProgramUniformMatrix2x4fvEXT(arg_7157: GLuint, arg_7158: GLint, arg_7159: GLsizei, arg_7160: GLboolean, arg_7161: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2x4fvEXT.?(arg_7157, arg_7158, arg_7159, arg_7160, arg_7161);
}
pub inline fn glProgramUniformMatrix3dv(arg_7162: GLuint, arg_7163: GLint, arg_7164: GLsizei, arg_7165: GLboolean, arg_7166: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3dv.?(arg_7162, arg_7163, arg_7164, arg_7165, arg_7166);
}
pub inline fn glProgramUniformMatrix3dvEXT(arg_7167: GLuint, arg_7168: GLint, arg_7169: GLsizei, arg_7170: GLboolean, arg_7171: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3dvEXT.?(arg_7167, arg_7168, arg_7169, arg_7170, arg_7171);
}
pub inline fn glProgramUniformMatrix3fv(arg_7172: GLuint, arg_7173: GLint, arg_7174: GLsizei, arg_7175: GLboolean, arg_7176: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3fv.?(arg_7172, arg_7173, arg_7174, arg_7175, arg_7176);
}
pub inline fn glProgramUniformMatrix3fvEXT(arg_7177: GLuint, arg_7178: GLint, arg_7179: GLsizei, arg_7180: GLboolean, arg_7181: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3fvEXT.?(arg_7177, arg_7178, arg_7179, arg_7180, arg_7181);
}
pub inline fn glProgramUniformMatrix3x2dv(arg_7182: GLuint, arg_7183: GLint, arg_7184: GLsizei, arg_7185: GLboolean, arg_7186: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3x2dv.?(arg_7182, arg_7183, arg_7184, arg_7185, arg_7186);
}
pub inline fn glProgramUniformMatrix3x2dvEXT(arg_7187: GLuint, arg_7188: GLint, arg_7189: GLsizei, arg_7190: GLboolean, arg_7191: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3x2dvEXT.?(arg_7187, arg_7188, arg_7189, arg_7190, arg_7191);
}
pub inline fn glProgramUniformMatrix3x2fv(arg_7192: GLuint, arg_7193: GLint, arg_7194: GLsizei, arg_7195: GLboolean, arg_7196: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3x2fv.?(arg_7192, arg_7193, arg_7194, arg_7195, arg_7196);
}
pub inline fn glProgramUniformMatrix3x2fvEXT(arg_7197: GLuint, arg_7198: GLint, arg_7199: GLsizei, arg_7200: GLboolean, arg_7201: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3x2fvEXT.?(arg_7197, arg_7198, arg_7199, arg_7200, arg_7201);
}
pub inline fn glProgramUniformMatrix3x4dv(arg_7202: GLuint, arg_7203: GLint, arg_7204: GLsizei, arg_7205: GLboolean, arg_7206: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3x4dv.?(arg_7202, arg_7203, arg_7204, arg_7205, arg_7206);
}
pub inline fn glProgramUniformMatrix3x4dvEXT(arg_7207: GLuint, arg_7208: GLint, arg_7209: GLsizei, arg_7210: GLboolean, arg_7211: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3x4dvEXT.?(arg_7207, arg_7208, arg_7209, arg_7210, arg_7211);
}
pub inline fn glProgramUniformMatrix3x4fv(arg_7212: GLuint, arg_7213: GLint, arg_7214: GLsizei, arg_7215: GLboolean, arg_7216: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3x4fv.?(arg_7212, arg_7213, arg_7214, arg_7215, arg_7216);
}
pub inline fn glProgramUniformMatrix3x4fvEXT(arg_7217: GLuint, arg_7218: GLint, arg_7219: GLsizei, arg_7220: GLboolean, arg_7221: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3x4fvEXT.?(arg_7217, arg_7218, arg_7219, arg_7220, arg_7221);
}
pub inline fn glProgramUniformMatrix4dv(arg_7222: GLuint, arg_7223: GLint, arg_7224: GLsizei, arg_7225: GLboolean, arg_7226: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4dv.?(arg_7222, arg_7223, arg_7224, arg_7225, arg_7226);
}
pub inline fn glProgramUniformMatrix4dvEXT(arg_7227: GLuint, arg_7228: GLint, arg_7229: GLsizei, arg_7230: GLboolean, arg_7231: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4dvEXT.?(arg_7227, arg_7228, arg_7229, arg_7230, arg_7231);
}
pub inline fn glProgramUniformMatrix4fv(arg_7232: GLuint, arg_7233: GLint, arg_7234: GLsizei, arg_7235: GLboolean, arg_7236: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4fv.?(arg_7232, arg_7233, arg_7234, arg_7235, arg_7236);
}
pub inline fn glProgramUniformMatrix4fvEXT(arg_7237: GLuint, arg_7238: GLint, arg_7239: GLsizei, arg_7240: GLboolean, arg_7241: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4fvEXT.?(arg_7237, arg_7238, arg_7239, arg_7240, arg_7241);
}
pub inline fn glProgramUniformMatrix4x2dv(arg_7242: GLuint, arg_7243: GLint, arg_7244: GLsizei, arg_7245: GLboolean, arg_7246: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4x2dv.?(arg_7242, arg_7243, arg_7244, arg_7245, arg_7246);
}
pub inline fn glProgramUniformMatrix4x2dvEXT(arg_7247: GLuint, arg_7248: GLint, arg_7249: GLsizei, arg_7250: GLboolean, arg_7251: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4x2dvEXT.?(arg_7247, arg_7248, arg_7249, arg_7250, arg_7251);
}
pub inline fn glProgramUniformMatrix4x2fv(arg_7252: GLuint, arg_7253: GLint, arg_7254: GLsizei, arg_7255: GLboolean, arg_7256: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4x2fv.?(arg_7252, arg_7253, arg_7254, arg_7255, arg_7256);
}
pub inline fn glProgramUniformMatrix4x2fvEXT(arg_7257: GLuint, arg_7258: GLint, arg_7259: GLsizei, arg_7260: GLboolean, arg_7261: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4x2fvEXT.?(arg_7257, arg_7258, arg_7259, arg_7260, arg_7261);
}
pub inline fn glProgramUniformMatrix4x3dv(arg_7262: GLuint, arg_7263: GLint, arg_7264: GLsizei, arg_7265: GLboolean, arg_7266: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4x3dv.?(arg_7262, arg_7263, arg_7264, arg_7265, arg_7266);
}
pub inline fn glProgramUniformMatrix4x3dvEXT(arg_7267: GLuint, arg_7268: GLint, arg_7269: GLsizei, arg_7270: GLboolean, arg_7271: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4x3dvEXT.?(arg_7267, arg_7268, arg_7269, arg_7270, arg_7271);
}
pub inline fn glProgramUniformMatrix4x3fv(arg_7272: GLuint, arg_7273: GLint, arg_7274: GLsizei, arg_7275: GLboolean, arg_7276: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4x3fv.?(arg_7272, arg_7273, arg_7274, arg_7275, arg_7276);
}
pub inline fn glProgramUniformMatrix4x3fvEXT(arg_7277: GLuint, arg_7278: GLint, arg_7279: GLsizei, arg_7280: GLboolean, arg_7281: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4x3fvEXT.?(arg_7277, arg_7278, arg_7279, arg_7280, arg_7281);
}
pub inline fn glProgramUniformui64NV(arg_7282: GLuint, arg_7283: GLint, arg_7284: GLuint64EXT) void {
    return epoxy_glProgramUniformui64NV.?(arg_7282, arg_7283, arg_7284);
}
pub inline fn glProgramUniformui64vNV(arg_7285: GLuint, arg_7286: GLint, arg_7287: GLsizei, arg_7288: [*c]const GLuint64EXT) void {
    return epoxy_glProgramUniformui64vNV.?(arg_7285, arg_7286, arg_7287, arg_7288);
}
pub inline fn glProgramVertexLimitNV(arg_7289: GLenum, arg_7290: GLint) void {
    return epoxy_glProgramVertexLimitNV.?(arg_7289, arg_7290);
}
pub inline fn glProvokingVertex(arg_7291: GLenum) void {
    return epoxy_glProvokingVertex.?(arg_7291);
}
pub inline fn glProvokingVertexEXT(arg_7292: GLenum) void {
    return epoxy_glProvokingVertexEXT.?(arg_7292);
}
pub inline fn glPushAttrib(arg_7293: GLbitfield) void {
    return epoxy_glPushAttrib.?(arg_7293);
}
pub inline fn glPushClientAttrib(arg_7294: GLbitfield) void {
    return epoxy_glPushClientAttrib.?(arg_7294);
}
pub inline fn glPushClientAttribDefaultEXT(arg_7295: GLbitfield) void {
    return epoxy_glPushClientAttribDefaultEXT.?(arg_7295);
}
pub inline fn glPushDebugGroup(arg_7296: GLenum, arg_7297: GLuint, arg_7298: GLsizei, arg_7299: [*c]const GLchar) void {
    return epoxy_glPushDebugGroup.?(arg_7296, arg_7297, arg_7298, arg_7299);
}
pub inline fn glPushDebugGroupKHR(arg_7300: GLenum, arg_7301: GLuint, arg_7302: GLsizei, arg_7303: [*c]const GLchar) void {
    return epoxy_glPushDebugGroupKHR.?(arg_7300, arg_7301, arg_7302, arg_7303);
}
pub inline fn glPushGroupMarkerEXT(arg_7304: GLsizei, arg_7305: [*c]const GLchar) void {
    return epoxy_glPushGroupMarkerEXT.?(arg_7304, arg_7305);
}
pub inline fn glPushMatrix() void {
    return epoxy_glPushMatrix.?();
}
pub inline fn glPushName(arg_7306: GLuint) void {
    return epoxy_glPushName.?(arg_7306);
}
pub inline fn glQueryCounter(arg_7307: GLuint, arg_7308: GLenum) void {
    return epoxy_glQueryCounter.?(arg_7307, arg_7308);
}
pub inline fn glQueryCounterEXT(arg_7309: GLuint, arg_7310: GLenum) void {
    return epoxy_glQueryCounterEXT.?(arg_7309, arg_7310);
}
pub inline fn glQueryMatrixxOES(arg_7311: [*c]GLfixed, arg_7312: [*c]GLint) GLbitfield {
    return epoxy_glQueryMatrixxOES.?(arg_7311, arg_7312);
}
pub inline fn glQueryObjectParameteruiAMD(arg_7313: GLenum, arg_7314: GLuint, arg_7315: GLenum, arg_7316: GLuint) void {
    return epoxy_glQueryObjectParameteruiAMD.?(arg_7313, arg_7314, arg_7315, arg_7316);
}
pub inline fn glQueryResourceNV(arg_7317: GLenum, arg_7318: GLint, arg_7319: GLuint, arg_7320: [*c]GLint) GLint {
    return epoxy_glQueryResourceNV.?(arg_7317, arg_7318, arg_7319, arg_7320);
}
pub inline fn glQueryResourceTagNV(arg_7321: GLint, arg_7322: [*c]const GLchar) void {
    return epoxy_glQueryResourceTagNV.?(arg_7321, arg_7322);
}
pub inline fn glRasterPos2d(arg_7323: GLdouble, arg_7324: GLdouble) void {
    return epoxy_glRasterPos2d.?(arg_7323, arg_7324);
}
pub inline fn glRasterPos2dv(arg_7325: [*c]const GLdouble) void {
    return epoxy_glRasterPos2dv.?(arg_7325);
}
pub inline fn glRasterPos2f(arg_7326: GLfloat, arg_7327: GLfloat) void {
    return epoxy_glRasterPos2f.?(arg_7326, arg_7327);
}
pub inline fn glRasterPos2fv(arg_7328: [*c]const GLfloat) void {
    return epoxy_glRasterPos2fv.?(arg_7328);
}
pub inline fn glRasterPos2i(arg_7329: GLint, arg_7330: GLint) void {
    return epoxy_glRasterPos2i.?(arg_7329, arg_7330);
}
pub inline fn glRasterPos2iv(arg_7331: [*c]const GLint) void {
    return epoxy_glRasterPos2iv.?(arg_7331);
}
pub inline fn glRasterPos2s(arg_7332: GLshort, arg_7333: GLshort) void {
    return epoxy_glRasterPos2s.?(arg_7332, arg_7333);
}
pub inline fn glRasterPos2sv(arg_7334: [*c]const GLshort) void {
    return epoxy_glRasterPos2sv.?(arg_7334);
}
pub inline fn glRasterPos2xOES(arg_7335: GLfixed, arg_7336: GLfixed) void {
    return epoxy_glRasterPos2xOES.?(arg_7335, arg_7336);
}
pub inline fn glRasterPos2xvOES(arg_7337: [*c]const GLfixed) void {
    return epoxy_glRasterPos2xvOES.?(arg_7337);
}
pub inline fn glRasterPos3d(arg_7338: GLdouble, arg_7339: GLdouble, arg_7340: GLdouble) void {
    return epoxy_glRasterPos3d.?(arg_7338, arg_7339, arg_7340);
}
pub inline fn glRasterPos3dv(arg_7341: [*c]const GLdouble) void {
    return epoxy_glRasterPos3dv.?(arg_7341);
}
pub inline fn glRasterPos3f(arg_7342: GLfloat, arg_7343: GLfloat, arg_7344: GLfloat) void {
    return epoxy_glRasterPos3f.?(arg_7342, arg_7343, arg_7344);
}
pub inline fn glRasterPos3fv(arg_7345: [*c]const GLfloat) void {
    return epoxy_glRasterPos3fv.?(arg_7345);
}
pub inline fn glRasterPos3i(arg_7346: GLint, arg_7347: GLint, arg_7348: GLint) void {
    return epoxy_glRasterPos3i.?(arg_7346, arg_7347, arg_7348);
}
pub inline fn glRasterPos3iv(arg_7349: [*c]const GLint) void {
    return epoxy_glRasterPos3iv.?(arg_7349);
}
pub inline fn glRasterPos3s(arg_7350: GLshort, arg_7351: GLshort, arg_7352: GLshort) void {
    return epoxy_glRasterPos3s.?(arg_7350, arg_7351, arg_7352);
}
pub inline fn glRasterPos3sv(arg_7353: [*c]const GLshort) void {
    return epoxy_glRasterPos3sv.?(arg_7353);
}
pub inline fn glRasterPos3xOES(arg_7354: GLfixed, arg_7355: GLfixed, arg_7356: GLfixed) void {
    return epoxy_glRasterPos3xOES.?(arg_7354, arg_7355, arg_7356);
}
pub inline fn glRasterPos3xvOES(arg_7357: [*c]const GLfixed) void {
    return epoxy_glRasterPos3xvOES.?(arg_7357);
}
pub inline fn glRasterPos4d(arg_7358: GLdouble, arg_7359: GLdouble, arg_7360: GLdouble, arg_7361: GLdouble) void {
    return epoxy_glRasterPos4d.?(arg_7358, arg_7359, arg_7360, arg_7361);
}
pub inline fn glRasterPos4dv(arg_7362: [*c]const GLdouble) void {
    return epoxy_glRasterPos4dv.?(arg_7362);
}
pub inline fn glRasterPos4f(arg_7363: GLfloat, arg_7364: GLfloat, arg_7365: GLfloat, arg_7366: GLfloat) void {
    return epoxy_glRasterPos4f.?(arg_7363, arg_7364, arg_7365, arg_7366);
}
pub inline fn glRasterPos4fv(arg_7367: [*c]const GLfloat) void {
    return epoxy_glRasterPos4fv.?(arg_7367);
}
pub inline fn glRasterPos4i(arg_7368: GLint, arg_7369: GLint, arg_7370: GLint, arg_7371: GLint) void {
    return epoxy_glRasterPos4i.?(arg_7368, arg_7369, arg_7370, arg_7371);
}
pub inline fn glRasterPos4iv(arg_7372: [*c]const GLint) void {
    return epoxy_glRasterPos4iv.?(arg_7372);
}
pub inline fn glRasterPos4s(arg_7373: GLshort, arg_7374: GLshort, arg_7375: GLshort, arg_7376: GLshort) void {
    return epoxy_glRasterPos4s.?(arg_7373, arg_7374, arg_7375, arg_7376);
}
pub inline fn glRasterPos4sv(arg_7377: [*c]const GLshort) void {
    return epoxy_glRasterPos4sv.?(arg_7377);
}
pub inline fn glRasterPos4xOES(arg_7378: GLfixed, arg_7379: GLfixed, arg_7380: GLfixed, arg_7381: GLfixed) void {
    return epoxy_glRasterPos4xOES.?(arg_7378, arg_7379, arg_7380, arg_7381);
}
pub inline fn glRasterPos4xvOES(arg_7382: [*c]const GLfixed) void {
    return epoxy_glRasterPos4xvOES.?(arg_7382);
}
pub inline fn glRasterSamplesEXT(arg_7383: GLuint, arg_7384: GLboolean) void {
    return epoxy_glRasterSamplesEXT.?(arg_7383, arg_7384);
}
pub inline fn glReadBuffer(arg_7385: GLenum) void {
    return epoxy_glReadBuffer.?(arg_7385);
}
pub inline fn glReadBufferIndexedEXT(arg_7386: GLenum, arg_7387: GLint) void {
    return epoxy_glReadBufferIndexedEXT.?(arg_7386, arg_7387);
}
pub inline fn glReadBufferNV(arg_7388: GLenum) void {
    return epoxy_glReadBufferNV.?(arg_7388);
}
pub inline fn glReadInstrumentsSGIX(arg_7389: GLint) void {
    return epoxy_glReadInstrumentsSGIX.?(arg_7389);
}
pub inline fn glReadPixels(arg_7390: GLint, arg_7391: GLint, arg_7392: GLsizei, arg_7393: GLsizei, arg_7394: GLenum, arg_7395: GLenum, arg_7396: ?*anyopaque) void {
    return epoxy_glReadPixels.?(arg_7390, arg_7391, arg_7392, arg_7393, arg_7394, arg_7395, arg_7396);
}
pub inline fn glReadnPixels(arg_7397: GLint, arg_7398: GLint, arg_7399: GLsizei, arg_7400: GLsizei, arg_7401: GLenum, arg_7402: GLenum, arg_7403: GLsizei, arg_7404: ?*anyopaque) void {
    return epoxy_glReadnPixels.?(arg_7397, arg_7398, arg_7399, arg_7400, arg_7401, arg_7402, arg_7403, arg_7404);
}
pub inline fn glReadnPixelsARB(arg_7405: GLint, arg_7406: GLint, arg_7407: GLsizei, arg_7408: GLsizei, arg_7409: GLenum, arg_7410: GLenum, arg_7411: GLsizei, arg_7412: ?*anyopaque) void {
    return epoxy_glReadnPixelsARB.?(arg_7405, arg_7406, arg_7407, arg_7408, arg_7409, arg_7410, arg_7411, arg_7412);
}
pub inline fn glReadnPixelsEXT(arg_7413: GLint, arg_7414: GLint, arg_7415: GLsizei, arg_7416: GLsizei, arg_7417: GLenum, arg_7418: GLenum, arg_7419: GLsizei, arg_7420: ?*anyopaque) void {
    return epoxy_glReadnPixelsEXT.?(arg_7413, arg_7414, arg_7415, arg_7416, arg_7417, arg_7418, arg_7419, arg_7420);
}
pub inline fn glReadnPixelsKHR(arg_7421: GLint, arg_7422: GLint, arg_7423: GLsizei, arg_7424: GLsizei, arg_7425: GLenum, arg_7426: GLenum, arg_7427: GLsizei, arg_7428: ?*anyopaque) void {
    return epoxy_glReadnPixelsKHR.?(arg_7421, arg_7422, arg_7423, arg_7424, arg_7425, arg_7426, arg_7427, arg_7428);
}
pub inline fn glRectd(arg_7429: GLdouble, arg_7430: GLdouble, arg_7431: GLdouble, arg_7432: GLdouble) void {
    return epoxy_glRectd.?(arg_7429, arg_7430, arg_7431, arg_7432);
}
pub inline fn glRectdv(arg_7433: [*c]const GLdouble, arg_7434: [*c]const GLdouble) void {
    return epoxy_glRectdv.?(arg_7433, arg_7434);
}
pub inline fn glRectf(arg_7435: GLfloat, arg_7436: GLfloat, arg_7437: GLfloat, arg_7438: GLfloat) void {
    return epoxy_glRectf.?(arg_7435, arg_7436, arg_7437, arg_7438);
}
pub inline fn glRectfv(arg_7439: [*c]const GLfloat, arg_7440: [*c]const GLfloat) void {
    return epoxy_glRectfv.?(arg_7439, arg_7440);
}
pub inline fn glRecti(arg_7441: GLint, arg_7442: GLint, arg_7443: GLint, arg_7444: GLint) void {
    return epoxy_glRecti.?(arg_7441, arg_7442, arg_7443, arg_7444);
}
pub inline fn glRectiv(arg_7445: [*c]const GLint, arg_7446: [*c]const GLint) void {
    return epoxy_glRectiv.?(arg_7445, arg_7446);
}
pub inline fn glRects(arg_7447: GLshort, arg_7448: GLshort, arg_7449: GLshort, arg_7450: GLshort) void {
    return epoxy_glRects.?(arg_7447, arg_7448, arg_7449, arg_7450);
}
pub inline fn glRectsv(arg_7451: [*c]const GLshort, arg_7452: [*c]const GLshort) void {
    return epoxy_glRectsv.?(arg_7451, arg_7452);
}
pub inline fn glRectxOES(arg_7453: GLfixed, arg_7454: GLfixed, arg_7455: GLfixed, arg_7456: GLfixed) void {
    return epoxy_glRectxOES.?(arg_7453, arg_7454, arg_7455, arg_7456);
}
pub inline fn glRectxvOES(arg_7457: [*c]const GLfixed, arg_7458: [*c]const GLfixed) void {
    return epoxy_glRectxvOES.?(arg_7457, arg_7458);
}
pub inline fn glReferencePlaneSGIX(arg_7459: [*c]const GLdouble) void {
    return epoxy_glReferencePlaneSGIX.?(arg_7459);
}
pub inline fn glReleaseKeyedMutexWin32EXT(arg_7460: GLuint, arg_7461: GLuint64) GLboolean {
    return epoxy_glReleaseKeyedMutexWin32EXT.?(arg_7460, arg_7461);
}
pub inline fn glReleaseShaderCompiler() void {
    return epoxy_glReleaseShaderCompiler.?();
}
pub inline fn glRenderGpuMaskNV(arg_7462: GLbitfield) void {
    return epoxy_glRenderGpuMaskNV.?(arg_7462);
}
pub inline fn glRenderMode(arg_7463: GLenum) GLint {
    return epoxy_glRenderMode.?(arg_7463);
}
pub inline fn glRenderbufferStorage(arg_7464: GLenum, arg_7465: GLenum, arg_7466: GLsizei, arg_7467: GLsizei) void {
    return epoxy_glRenderbufferStorage.?(arg_7464, arg_7465, arg_7466, arg_7467);
}
pub inline fn glRenderbufferStorageEXT(arg_7468: GLenum, arg_7469: GLenum, arg_7470: GLsizei, arg_7471: GLsizei) void {
    return epoxy_glRenderbufferStorageEXT.?(arg_7468, arg_7469, arg_7470, arg_7471);
}
pub inline fn glRenderbufferStorageMultisample(arg_7472: GLenum, arg_7473: GLsizei, arg_7474: GLenum, arg_7475: GLsizei, arg_7476: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisample.?(arg_7472, arg_7473, arg_7474, arg_7475, arg_7476);
}
pub inline fn glRenderbufferStorageMultisampleANGLE(arg_7477: GLenum, arg_7478: GLsizei, arg_7479: GLenum, arg_7480: GLsizei, arg_7481: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleANGLE.?(arg_7477, arg_7478, arg_7479, arg_7480, arg_7481);
}
pub inline fn glRenderbufferStorageMultisampleAPPLE(arg_7482: GLenum, arg_7483: GLsizei, arg_7484: GLenum, arg_7485: GLsizei, arg_7486: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleAPPLE.?(arg_7482, arg_7483, arg_7484, arg_7485, arg_7486);
}
pub inline fn glRenderbufferStorageMultisampleAdvancedAMD(arg_7487: GLenum, arg_7488: GLsizei, arg_7489: GLsizei, arg_7490: GLenum, arg_7491: GLsizei, arg_7492: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleAdvancedAMD.?(arg_7487, arg_7488, arg_7489, arg_7490, arg_7491, arg_7492);
}
pub inline fn glRenderbufferStorageMultisampleCoverageNV(arg_7493: GLenum, arg_7494: GLsizei, arg_7495: GLsizei, arg_7496: GLenum, arg_7497: GLsizei, arg_7498: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleCoverageNV.?(arg_7493, arg_7494, arg_7495, arg_7496, arg_7497, arg_7498);
}
pub inline fn glRenderbufferStorageMultisampleEXT(arg_7499: GLenum, arg_7500: GLsizei, arg_7501: GLenum, arg_7502: GLsizei, arg_7503: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleEXT.?(arg_7499, arg_7500, arg_7501, arg_7502, arg_7503);
}
pub inline fn glRenderbufferStorageMultisampleIMG(arg_7504: GLenum, arg_7505: GLsizei, arg_7506: GLenum, arg_7507: GLsizei, arg_7508: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleIMG.?(arg_7504, arg_7505, arg_7506, arg_7507, arg_7508);
}
pub inline fn glRenderbufferStorageMultisampleNV(arg_7509: GLenum, arg_7510: GLsizei, arg_7511: GLenum, arg_7512: GLsizei, arg_7513: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleNV.?(arg_7509, arg_7510, arg_7511, arg_7512, arg_7513);
}
pub inline fn glRenderbufferStorageOES(arg_7514: GLenum, arg_7515: GLenum, arg_7516: GLsizei, arg_7517: GLsizei) void {
    return epoxy_glRenderbufferStorageOES.?(arg_7514, arg_7515, arg_7516, arg_7517);
}
pub inline fn glReplacementCodePointerSUN(arg_7518: GLenum, arg_7519: GLsizei, arg_7520: [*c]?*const anyopaque) void {
    return epoxy_glReplacementCodePointerSUN.?(arg_7518, arg_7519, arg_7520);
}
pub inline fn glReplacementCodeubSUN(arg_7521: GLubyte) void {
    return epoxy_glReplacementCodeubSUN.?(arg_7521);
}
pub inline fn glReplacementCodeubvSUN(arg_7522: [*c]const GLubyte) void {
    return epoxy_glReplacementCodeubvSUN.?(arg_7522);
}
pub inline fn glReplacementCodeuiColor3fVertex3fSUN(arg_7523: GLuint, arg_7524: GLfloat, arg_7525: GLfloat, arg_7526: GLfloat, arg_7527: GLfloat, arg_7528: GLfloat, arg_7529: GLfloat) void {
    return epoxy_glReplacementCodeuiColor3fVertex3fSUN.?(arg_7523, arg_7524, arg_7525, arg_7526, arg_7527, arg_7528, arg_7529);
}
pub inline fn glReplacementCodeuiColor3fVertex3fvSUN(arg_7530: [*c]const GLuint, arg_7531: [*c]const GLfloat, arg_7532: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiColor3fVertex3fvSUN.?(arg_7530, arg_7531, arg_7532);
}
pub inline fn glReplacementCodeuiColor4fNormal3fVertex3fSUN(arg_7533: GLuint, arg_7534: GLfloat, arg_7535: GLfloat, arg_7536: GLfloat, arg_7537: GLfloat, arg_7538: GLfloat, arg_7539: GLfloat, arg_7540: GLfloat, arg_7541: GLfloat, arg_7542: GLfloat, arg_7543: GLfloat) void {
    return epoxy_glReplacementCodeuiColor4fNormal3fVertex3fSUN.?(arg_7533, arg_7534, arg_7535, arg_7536, arg_7537, arg_7538, arg_7539, arg_7540, arg_7541, arg_7542, arg_7543);
}
pub inline fn glReplacementCodeuiColor4fNormal3fVertex3fvSUN(arg_7544: [*c]const GLuint, arg_7545: [*c]const GLfloat, arg_7546: [*c]const GLfloat, arg_7547: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiColor4fNormal3fVertex3fvSUN.?(arg_7544, arg_7545, arg_7546, arg_7547);
}
pub inline fn glReplacementCodeuiColor4ubVertex3fSUN(arg_7548: GLuint, arg_7549: GLubyte, arg_7550: GLubyte, arg_7551: GLubyte, arg_7552: GLubyte, arg_7553: GLfloat, arg_7554: GLfloat, arg_7555: GLfloat) void {
    return epoxy_glReplacementCodeuiColor4ubVertex3fSUN.?(arg_7548, arg_7549, arg_7550, arg_7551, arg_7552, arg_7553, arg_7554, arg_7555);
}
pub inline fn glReplacementCodeuiColor4ubVertex3fvSUN(arg_7556: [*c]const GLuint, arg_7557: [*c]const GLubyte, arg_7558: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiColor4ubVertex3fvSUN.?(arg_7556, arg_7557, arg_7558);
}
pub inline fn glReplacementCodeuiNormal3fVertex3fSUN(arg_7559: GLuint, arg_7560: GLfloat, arg_7561: GLfloat, arg_7562: GLfloat, arg_7563: GLfloat, arg_7564: GLfloat, arg_7565: GLfloat) void {
    return epoxy_glReplacementCodeuiNormal3fVertex3fSUN.?(arg_7559, arg_7560, arg_7561, arg_7562, arg_7563, arg_7564, arg_7565);
}
pub inline fn glReplacementCodeuiNormal3fVertex3fvSUN(arg_7566: [*c]const GLuint, arg_7567: [*c]const GLfloat, arg_7568: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiNormal3fVertex3fvSUN.?(arg_7566, arg_7567, arg_7568);
}
pub inline fn glReplacementCodeuiSUN(arg_7569: GLuint) void {
    return epoxy_glReplacementCodeuiSUN.?(arg_7569);
}
pub inline fn glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(arg_7570: GLuint, arg_7571: GLfloat, arg_7572: GLfloat, arg_7573: GLfloat, arg_7574: GLfloat, arg_7575: GLfloat, arg_7576: GLfloat, arg_7577: GLfloat, arg_7578: GLfloat, arg_7579: GLfloat, arg_7580: GLfloat, arg_7581: GLfloat, arg_7582: GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.?(arg_7570, arg_7571, arg_7572, arg_7573, arg_7574, arg_7575, arg_7576, arg_7577, arg_7578, arg_7579, arg_7580, arg_7581, arg_7582);
}
pub inline fn glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(arg_7583: [*c]const GLuint, arg_7584: [*c]const GLfloat, arg_7585: [*c]const GLfloat, arg_7586: [*c]const GLfloat, arg_7587: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.?(arg_7583, arg_7584, arg_7585, arg_7586, arg_7587);
}
pub inline fn glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(arg_7588: GLuint, arg_7589: GLfloat, arg_7590: GLfloat, arg_7591: GLfloat, arg_7592: GLfloat, arg_7593: GLfloat, arg_7594: GLfloat, arg_7595: GLfloat, arg_7596: GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.?(arg_7588, arg_7589, arg_7590, arg_7591, arg_7592, arg_7593, arg_7594, arg_7595, arg_7596);
}
pub inline fn glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(arg_7597: [*c]const GLuint, arg_7598: [*c]const GLfloat, arg_7599: [*c]const GLfloat, arg_7600: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.?(arg_7597, arg_7598, arg_7599, arg_7600);
}
pub inline fn glReplacementCodeuiTexCoord2fVertex3fSUN(arg_7601: GLuint, arg_7602: GLfloat, arg_7603: GLfloat, arg_7604: GLfloat, arg_7605: GLfloat, arg_7606: GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fVertex3fSUN.?(arg_7601, arg_7602, arg_7603, arg_7604, arg_7605, arg_7606);
}
pub inline fn glReplacementCodeuiTexCoord2fVertex3fvSUN(arg_7607: [*c]const GLuint, arg_7608: [*c]const GLfloat, arg_7609: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fVertex3fvSUN.?(arg_7607, arg_7608, arg_7609);
}
pub inline fn glReplacementCodeuiVertex3fSUN(arg_7610: GLuint, arg_7611: GLfloat, arg_7612: GLfloat, arg_7613: GLfloat) void {
    return epoxy_glReplacementCodeuiVertex3fSUN.?(arg_7610, arg_7611, arg_7612, arg_7613);
}
pub inline fn glReplacementCodeuiVertex3fvSUN(arg_7614: [*c]const GLuint, arg_7615: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiVertex3fvSUN.?(arg_7614, arg_7615);
}
pub inline fn glReplacementCodeuivSUN(arg_7616: [*c]const GLuint) void {
    return epoxy_glReplacementCodeuivSUN.?(arg_7616);
}
pub inline fn glReplacementCodeusSUN(arg_7617: GLushort) void {
    return epoxy_glReplacementCodeusSUN.?(arg_7617);
}
pub inline fn glReplacementCodeusvSUN(arg_7618: [*c]const GLushort) void {
    return epoxy_glReplacementCodeusvSUN.?(arg_7618);
}
pub inline fn glRequestResidentProgramsNV(arg_7619: GLsizei, arg_7620: [*c]const GLuint) void {
    return epoxy_glRequestResidentProgramsNV.?(arg_7619, arg_7620);
}
pub inline fn glResetHistogram(arg_7621: GLenum) void {
    return epoxy_glResetHistogram.?(arg_7621);
}
pub inline fn glResetHistogramEXT(arg_7622: GLenum) void {
    return epoxy_glResetHistogramEXT.?(arg_7622);
}
pub inline fn glResetMemoryObjectParameterNV(arg_7623: GLuint, arg_7624: GLenum) void {
    return epoxy_glResetMemoryObjectParameterNV.?(arg_7623, arg_7624);
}
pub inline fn glResetMinmax(arg_7625: GLenum) void {
    return epoxy_glResetMinmax.?(arg_7625);
}
pub inline fn glResetMinmaxEXT(arg_7626: GLenum) void {
    return epoxy_glResetMinmaxEXT.?(arg_7626);
}
pub inline fn glResizeBuffersMESA() void {
    return epoxy_glResizeBuffersMESA.?();
}
pub inline fn glResolveDepthValuesNV() void {
    return epoxy_glResolveDepthValuesNV.?();
}
pub inline fn glResolveMultisampleFramebufferAPPLE() void {
    return epoxy_glResolveMultisampleFramebufferAPPLE.?();
}
pub inline fn glResumeTransformFeedback() void {
    return epoxy_glResumeTransformFeedback.?();
}
pub inline fn glResumeTransformFeedbackNV() void {
    return epoxy_glResumeTransformFeedbackNV.?();
}
pub inline fn glRotated(arg_7627: GLdouble, arg_7628: GLdouble, arg_7629: GLdouble, arg_7630: GLdouble) void {
    return epoxy_glRotated.?(arg_7627, arg_7628, arg_7629, arg_7630);
}
pub inline fn glRotatef(arg_7631: GLfloat, arg_7632: GLfloat, arg_7633: GLfloat, arg_7634: GLfloat) void {
    return epoxy_glRotatef.?(arg_7631, arg_7632, arg_7633, arg_7634);
}
pub inline fn glRotatex(arg_7635: GLfixed, arg_7636: GLfixed, arg_7637: GLfixed, arg_7638: GLfixed) void {
    return epoxy_glRotatex.?(arg_7635, arg_7636, arg_7637, arg_7638);
}
pub inline fn glRotatexOES(arg_7639: GLfixed, arg_7640: GLfixed, arg_7641: GLfixed, arg_7642: GLfixed) void {
    return epoxy_glRotatexOES.?(arg_7639, arg_7640, arg_7641, arg_7642);
}
pub inline fn glSampleCoverage(arg_7643: GLfloat, arg_7644: GLboolean) void {
    return epoxy_glSampleCoverage.?(arg_7643, arg_7644);
}
pub inline fn glSampleCoverageARB(arg_7645: GLfloat, arg_7646: GLboolean) void {
    return epoxy_glSampleCoverageARB.?(arg_7645, arg_7646);
}
pub inline fn glSampleCoveragex(arg_7647: GLclampx, arg_7648: GLboolean) void {
    return epoxy_glSampleCoveragex.?(arg_7647, arg_7648);
}
pub inline fn glSampleCoveragexOES(arg_7649: GLclampx, arg_7650: GLboolean) void {
    return epoxy_glSampleCoveragexOES.?(arg_7649, arg_7650);
}
pub inline fn glSampleMapATI(arg_7651: GLuint, arg_7652: GLuint, arg_7653: GLenum) void {
    return epoxy_glSampleMapATI.?(arg_7651, arg_7652, arg_7653);
}
pub inline fn glSampleMaskEXT(arg_7654: GLclampf, arg_7655: GLboolean) void {
    return epoxy_glSampleMaskEXT.?(arg_7654, arg_7655);
}
pub inline fn glSampleMaskIndexedNV(arg_7656: GLuint, arg_7657: GLbitfield) void {
    return epoxy_glSampleMaskIndexedNV.?(arg_7656, arg_7657);
}
pub inline fn glSampleMaskSGIS(arg_7658: GLclampf, arg_7659: GLboolean) void {
    return epoxy_glSampleMaskSGIS.?(arg_7658, arg_7659);
}
pub inline fn glSampleMaski(arg_7660: GLuint, arg_7661: GLbitfield) void {
    return epoxy_glSampleMaski.?(arg_7660, arg_7661);
}
pub inline fn glSamplePatternEXT(arg_7662: GLenum) void {
    return epoxy_glSamplePatternEXT.?(arg_7662);
}
pub inline fn glSamplePatternSGIS(arg_7663: GLenum) void {
    return epoxy_glSamplePatternSGIS.?(arg_7663);
}
pub inline fn glSamplerParameterIiv(arg_7664: GLuint, arg_7665: GLenum, arg_7666: [*c]const GLint) void {
    return epoxy_glSamplerParameterIiv.?(arg_7664, arg_7665, arg_7666);
}
pub inline fn glSamplerParameterIivEXT(arg_7667: GLuint, arg_7668: GLenum, arg_7669: [*c]const GLint) void {
    return epoxy_glSamplerParameterIivEXT.?(arg_7667, arg_7668, arg_7669);
}
pub inline fn glSamplerParameterIivOES(arg_7670: GLuint, arg_7671: GLenum, arg_7672: [*c]const GLint) void {
    return epoxy_glSamplerParameterIivOES.?(arg_7670, arg_7671, arg_7672);
}
pub inline fn glSamplerParameterIuiv(arg_7673: GLuint, arg_7674: GLenum, arg_7675: [*c]const GLuint) void {
    return epoxy_glSamplerParameterIuiv.?(arg_7673, arg_7674, arg_7675);
}
pub inline fn glSamplerParameterIuivEXT(arg_7676: GLuint, arg_7677: GLenum, arg_7678: [*c]const GLuint) void {
    return epoxy_glSamplerParameterIuivEXT.?(arg_7676, arg_7677, arg_7678);
}
pub inline fn glSamplerParameterIuivOES(arg_7679: GLuint, arg_7680: GLenum, arg_7681: [*c]const GLuint) void {
    return epoxy_glSamplerParameterIuivOES.?(arg_7679, arg_7680, arg_7681);
}
pub inline fn glSamplerParameterf(arg_7682: GLuint, arg_7683: GLenum, arg_7684: GLfloat) void {
    return epoxy_glSamplerParameterf.?(arg_7682, arg_7683, arg_7684);
}
pub inline fn glSamplerParameterfv(arg_7685: GLuint, arg_7686: GLenum, arg_7687: [*c]const GLfloat) void {
    return epoxy_glSamplerParameterfv.?(arg_7685, arg_7686, arg_7687);
}
pub inline fn glSamplerParameteri(arg_7688: GLuint, arg_7689: GLenum, arg_7690: GLint) void {
    return epoxy_glSamplerParameteri.?(arg_7688, arg_7689, arg_7690);
}
pub inline fn glSamplerParameteriv(arg_7691: GLuint, arg_7692: GLenum, arg_7693: [*c]const GLint) void {
    return epoxy_glSamplerParameteriv.?(arg_7691, arg_7692, arg_7693);
}
pub inline fn glScaled(arg_7694: GLdouble, arg_7695: GLdouble, arg_7696: GLdouble) void {
    return epoxy_glScaled.?(arg_7694, arg_7695, arg_7696);
}
pub inline fn glScalef(arg_7697: GLfloat, arg_7698: GLfloat, arg_7699: GLfloat) void {
    return epoxy_glScalef.?(arg_7697, arg_7698, arg_7699);
}
pub inline fn glScalex(arg_7700: GLfixed, arg_7701: GLfixed, arg_7702: GLfixed) void {
    return epoxy_glScalex.?(arg_7700, arg_7701, arg_7702);
}
pub inline fn glScalexOES(arg_7703: GLfixed, arg_7704: GLfixed, arg_7705: GLfixed) void {
    return epoxy_glScalexOES.?(arg_7703, arg_7704, arg_7705);
}
pub inline fn glScissor(arg_7706: GLint, arg_7707: GLint, arg_7708: GLsizei, arg_7709: GLsizei) void {
    return epoxy_glScissor.?(arg_7706, arg_7707, arg_7708, arg_7709);
}
pub inline fn glScissorArrayv(arg_7710: GLuint, arg_7711: GLsizei, arg_7712: [*c]const GLint) void {
    return epoxy_glScissorArrayv.?(arg_7710, arg_7711, arg_7712);
}
pub inline fn glScissorArrayvNV(arg_7713: GLuint, arg_7714: GLsizei, arg_7715: [*c]const GLint) void {
    return epoxy_glScissorArrayvNV.?(arg_7713, arg_7714, arg_7715);
}
pub inline fn glScissorArrayvOES(arg_7716: GLuint, arg_7717: GLsizei, arg_7718: [*c]const GLint) void {
    return epoxy_glScissorArrayvOES.?(arg_7716, arg_7717, arg_7718);
}
pub inline fn glScissorExclusiveArrayvNV(arg_7719: GLuint, arg_7720: GLsizei, arg_7721: [*c]const GLint) void {
    return epoxy_glScissorExclusiveArrayvNV.?(arg_7719, arg_7720, arg_7721);
}
pub inline fn glScissorExclusiveNV(arg_7722: GLint, arg_7723: GLint, arg_7724: GLsizei, arg_7725: GLsizei) void {
    return epoxy_glScissorExclusiveNV.?(arg_7722, arg_7723, arg_7724, arg_7725);
}
pub inline fn glScissorIndexed(arg_7726: GLuint, arg_7727: GLint, arg_7728: GLint, arg_7729: GLsizei, arg_7730: GLsizei) void {
    return epoxy_glScissorIndexed.?(arg_7726, arg_7727, arg_7728, arg_7729, arg_7730);
}
pub inline fn glScissorIndexedNV(arg_7731: GLuint, arg_7732: GLint, arg_7733: GLint, arg_7734: GLsizei, arg_7735: GLsizei) void {
    return epoxy_glScissorIndexedNV.?(arg_7731, arg_7732, arg_7733, arg_7734, arg_7735);
}
pub inline fn glScissorIndexedOES(arg_7736: GLuint, arg_7737: GLint, arg_7738: GLint, arg_7739: GLsizei, arg_7740: GLsizei) void {
    return epoxy_glScissorIndexedOES.?(arg_7736, arg_7737, arg_7738, arg_7739, arg_7740);
}
pub inline fn glScissorIndexedv(arg_7741: GLuint, arg_7742: [*c]const GLint) void {
    return epoxy_glScissorIndexedv.?(arg_7741, arg_7742);
}
pub inline fn glScissorIndexedvNV(arg_7743: GLuint, arg_7744: [*c]const GLint) void {
    return epoxy_glScissorIndexedvNV.?(arg_7743, arg_7744);
}
pub inline fn glScissorIndexedvOES(arg_7745: GLuint, arg_7746: [*c]const GLint) void {
    return epoxy_glScissorIndexedvOES.?(arg_7745, arg_7746);
}
pub inline fn glSecondaryColor3b(arg_7747: GLbyte, arg_7748: GLbyte, arg_7749: GLbyte) void {
    return epoxy_glSecondaryColor3b.?(arg_7747, arg_7748, arg_7749);
}
pub inline fn glSecondaryColor3bEXT(arg_7750: GLbyte, arg_7751: GLbyte, arg_7752: GLbyte) void {
    return epoxy_glSecondaryColor3bEXT.?(arg_7750, arg_7751, arg_7752);
}
pub inline fn glSecondaryColor3bv(arg_7753: [*c]const GLbyte) void {
    return epoxy_glSecondaryColor3bv.?(arg_7753);
}
pub inline fn glSecondaryColor3bvEXT(arg_7754: [*c]const GLbyte) void {
    return epoxy_glSecondaryColor3bvEXT.?(arg_7754);
}
pub inline fn glSecondaryColor3d(arg_7755: GLdouble, arg_7756: GLdouble, arg_7757: GLdouble) void {
    return epoxy_glSecondaryColor3d.?(arg_7755, arg_7756, arg_7757);
}
pub inline fn glSecondaryColor3dEXT(arg_7758: GLdouble, arg_7759: GLdouble, arg_7760: GLdouble) void {
    return epoxy_glSecondaryColor3dEXT.?(arg_7758, arg_7759, arg_7760);
}
pub inline fn glSecondaryColor3dv(arg_7761: [*c]const GLdouble) void {
    return epoxy_glSecondaryColor3dv.?(arg_7761);
}
pub inline fn glSecondaryColor3dvEXT(arg_7762: [*c]const GLdouble) void {
    return epoxy_glSecondaryColor3dvEXT.?(arg_7762);
}
pub inline fn glSecondaryColor3f(arg_7763: GLfloat, arg_7764: GLfloat, arg_7765: GLfloat) void {
    return epoxy_glSecondaryColor3f.?(arg_7763, arg_7764, arg_7765);
}
pub inline fn glSecondaryColor3fEXT(arg_7766: GLfloat, arg_7767: GLfloat, arg_7768: GLfloat) void {
    return epoxy_glSecondaryColor3fEXT.?(arg_7766, arg_7767, arg_7768);
}
pub inline fn glSecondaryColor3fv(arg_7769: [*c]const GLfloat) void {
    return epoxy_glSecondaryColor3fv.?(arg_7769);
}
pub inline fn glSecondaryColor3fvEXT(arg_7770: [*c]const GLfloat) void {
    return epoxy_glSecondaryColor3fvEXT.?(arg_7770);
}
pub inline fn glSecondaryColor3hNV(arg_7771: GLhalfNV, arg_7772: GLhalfNV, arg_7773: GLhalfNV) void {
    return epoxy_glSecondaryColor3hNV.?(arg_7771, arg_7772, arg_7773);
}
pub inline fn glSecondaryColor3hvNV(arg_7774: [*c]const GLhalfNV) void {
    return epoxy_glSecondaryColor3hvNV.?(arg_7774);
}
pub inline fn glSecondaryColor3i(arg_7775: GLint, arg_7776: GLint, arg_7777: GLint) void {
    return epoxy_glSecondaryColor3i.?(arg_7775, arg_7776, arg_7777);
}
pub inline fn glSecondaryColor3iEXT(arg_7778: GLint, arg_7779: GLint, arg_7780: GLint) void {
    return epoxy_glSecondaryColor3iEXT.?(arg_7778, arg_7779, arg_7780);
}
pub inline fn glSecondaryColor3iv(arg_7781: [*c]const GLint) void {
    return epoxy_glSecondaryColor3iv.?(arg_7781);
}
pub inline fn glSecondaryColor3ivEXT(arg_7782: [*c]const GLint) void {
    return epoxy_glSecondaryColor3ivEXT.?(arg_7782);
}
pub inline fn glSecondaryColor3s(arg_7783: GLshort, arg_7784: GLshort, arg_7785: GLshort) void {
    return epoxy_glSecondaryColor3s.?(arg_7783, arg_7784, arg_7785);
}
pub inline fn glSecondaryColor3sEXT(arg_7786: GLshort, arg_7787: GLshort, arg_7788: GLshort) void {
    return epoxy_glSecondaryColor3sEXT.?(arg_7786, arg_7787, arg_7788);
}
pub inline fn glSecondaryColor3sv(arg_7789: [*c]const GLshort) void {
    return epoxy_glSecondaryColor3sv.?(arg_7789);
}
pub inline fn glSecondaryColor3svEXT(arg_7790: [*c]const GLshort) void {
    return epoxy_glSecondaryColor3svEXT.?(arg_7790);
}
pub inline fn glSecondaryColor3ub(arg_7791: GLubyte, arg_7792: GLubyte, arg_7793: GLubyte) void {
    return epoxy_glSecondaryColor3ub.?(arg_7791, arg_7792, arg_7793);
}
pub inline fn glSecondaryColor3ubEXT(arg_7794: GLubyte, arg_7795: GLubyte, arg_7796: GLubyte) void {
    return epoxy_glSecondaryColor3ubEXT.?(arg_7794, arg_7795, arg_7796);
}
pub inline fn glSecondaryColor3ubv(arg_7797: [*c]const GLubyte) void {
    return epoxy_glSecondaryColor3ubv.?(arg_7797);
}
pub inline fn glSecondaryColor3ubvEXT(arg_7798: [*c]const GLubyte) void {
    return epoxy_glSecondaryColor3ubvEXT.?(arg_7798);
}
pub inline fn glSecondaryColor3ui(arg_7799: GLuint, arg_7800: GLuint, arg_7801: GLuint) void {
    return epoxy_glSecondaryColor3ui.?(arg_7799, arg_7800, arg_7801);
}
pub inline fn glSecondaryColor3uiEXT(arg_7802: GLuint, arg_7803: GLuint, arg_7804: GLuint) void {
    return epoxy_glSecondaryColor3uiEXT.?(arg_7802, arg_7803, arg_7804);
}
pub inline fn glSecondaryColor3uiv(arg_7805: [*c]const GLuint) void {
    return epoxy_glSecondaryColor3uiv.?(arg_7805);
}
pub inline fn glSecondaryColor3uivEXT(arg_7806: [*c]const GLuint) void {
    return epoxy_glSecondaryColor3uivEXT.?(arg_7806);
}
pub inline fn glSecondaryColor3us(arg_7807: GLushort, arg_7808: GLushort, arg_7809: GLushort) void {
    return epoxy_glSecondaryColor3us.?(arg_7807, arg_7808, arg_7809);
}
pub inline fn glSecondaryColor3usEXT(arg_7810: GLushort, arg_7811: GLushort, arg_7812: GLushort) void {
    return epoxy_glSecondaryColor3usEXT.?(arg_7810, arg_7811, arg_7812);
}
pub inline fn glSecondaryColor3usv(arg_7813: [*c]const GLushort) void {
    return epoxy_glSecondaryColor3usv.?(arg_7813);
}
pub inline fn glSecondaryColor3usvEXT(arg_7814: [*c]const GLushort) void {
    return epoxy_glSecondaryColor3usvEXT.?(arg_7814);
}
pub inline fn glSecondaryColorFormatNV(arg_7815: GLint, arg_7816: GLenum, arg_7817: GLsizei) void {
    return epoxy_glSecondaryColorFormatNV.?(arg_7815, arg_7816, arg_7817);
}
pub inline fn glSecondaryColorP3ui(arg_7818: GLenum, arg_7819: GLuint) void {
    return epoxy_glSecondaryColorP3ui.?(arg_7818, arg_7819);
}
pub inline fn glSecondaryColorP3uiv(arg_7820: GLenum, arg_7821: [*c]const GLuint) void {
    return epoxy_glSecondaryColorP3uiv.?(arg_7820, arg_7821);
}
pub inline fn glSecondaryColorPointer(arg_7822: GLint, arg_7823: GLenum, arg_7824: GLsizei, arg_7825: ?*const anyopaque) void {
    return epoxy_glSecondaryColorPointer.?(arg_7822, arg_7823, arg_7824, arg_7825);
}
pub inline fn glSecondaryColorPointerEXT(arg_7826: GLint, arg_7827: GLenum, arg_7828: GLsizei, arg_7829: ?*const anyopaque) void {
    return epoxy_glSecondaryColorPointerEXT.?(arg_7826, arg_7827, arg_7828, arg_7829);
}
pub inline fn glSecondaryColorPointerListIBM(arg_7830: GLint, arg_7831: GLenum, arg_7832: GLint, arg_7833: [*c]?*const anyopaque, arg_7834: GLint) void {
    return epoxy_glSecondaryColorPointerListIBM.?(arg_7830, arg_7831, arg_7832, arg_7833, arg_7834);
}
pub inline fn glSelectBuffer(arg_7835: GLsizei, arg_7836: [*c]GLuint) void {
    return epoxy_glSelectBuffer.?(arg_7835, arg_7836);
}
pub inline fn glSelectPerfMonitorCountersAMD(arg_7837: GLuint, arg_7838: GLboolean, arg_7839: GLuint, arg_7840: GLint, arg_7841: [*c]GLuint) void {
    return epoxy_glSelectPerfMonitorCountersAMD.?(arg_7837, arg_7838, arg_7839, arg_7840, arg_7841);
}
pub inline fn glSemaphoreParameterui64vEXT(arg_7842: GLuint, arg_7843: GLenum, arg_7844: [*c]const GLuint64) void {
    return epoxy_glSemaphoreParameterui64vEXT.?(arg_7842, arg_7843, arg_7844);
}
pub inline fn glSeparableFilter2D(arg_7845: GLenum, arg_7846: GLenum, arg_7847: GLsizei, arg_7848: GLsizei, arg_7849: GLenum, arg_7850: GLenum, arg_7851: ?*const anyopaque, arg_7852: ?*const anyopaque) void {
    return epoxy_glSeparableFilter2D.?(arg_7845, arg_7846, arg_7847, arg_7848, arg_7849, arg_7850, arg_7851, arg_7852);
}
pub inline fn glSeparableFilter2DEXT(arg_7853: GLenum, arg_7854: GLenum, arg_7855: GLsizei, arg_7856: GLsizei, arg_7857: GLenum, arg_7858: GLenum, arg_7859: ?*const anyopaque, arg_7860: ?*const anyopaque) void {
    return epoxy_glSeparableFilter2DEXT.?(arg_7853, arg_7854, arg_7855, arg_7856, arg_7857, arg_7858, arg_7859, arg_7860);
}
pub inline fn glSetFenceAPPLE(arg_7861: GLuint) void {
    return epoxy_glSetFenceAPPLE.?(arg_7861);
}
pub inline fn glSetFenceNV(arg_7862: GLuint, arg_7863: GLenum) void {
    return epoxy_glSetFenceNV.?(arg_7862, arg_7863);
}
pub inline fn glSetFragmentShaderConstantATI(arg_7864: GLuint, arg_7865: [*c]const GLfloat) void {
    return epoxy_glSetFragmentShaderConstantATI.?(arg_7864, arg_7865);
}
pub inline fn glSetInvariantEXT(arg_7866: GLuint, arg_7867: GLenum, arg_7868: ?*const anyopaque) void {
    return epoxy_glSetInvariantEXT.?(arg_7866, arg_7867, arg_7868);
}
pub inline fn glSetLocalConstantEXT(arg_7869: GLuint, arg_7870: GLenum, arg_7871: ?*const anyopaque) void {
    return epoxy_glSetLocalConstantEXT.?(arg_7869, arg_7870, arg_7871);
}
pub inline fn glSetMultisamplefvAMD(arg_7872: GLenum, arg_7873: GLuint, arg_7874: [*c]const GLfloat) void {
    return epoxy_glSetMultisamplefvAMD.?(arg_7872, arg_7873, arg_7874);
}
pub inline fn glShadeModel(arg_7875: GLenum) void {
    return epoxy_glShadeModel.?(arg_7875);
}
pub inline fn glShaderBinary(arg_7876: GLsizei, arg_7877: [*c]const GLuint, arg_7878: GLenum, arg_7879: ?*const anyopaque, arg_7880: GLsizei) void {
    return epoxy_glShaderBinary.?(arg_7876, arg_7877, arg_7878, arg_7879, arg_7880);
}
pub inline fn glShaderOp1EXT(arg_7881: GLenum, arg_7882: GLuint, arg_7883: GLuint) void {
    return epoxy_glShaderOp1EXT.?(arg_7881, arg_7882, arg_7883);
}
pub inline fn glShaderOp2EXT(arg_7884: GLenum, arg_7885: GLuint, arg_7886: GLuint, arg_7887: GLuint) void {
    return epoxy_glShaderOp2EXT.?(arg_7884, arg_7885, arg_7886, arg_7887);
}
pub inline fn glShaderOp3EXT(arg_7888: GLenum, arg_7889: GLuint, arg_7890: GLuint, arg_7891: GLuint, arg_7892: GLuint) void {
    return epoxy_glShaderOp3EXT.?(arg_7888, arg_7889, arg_7890, arg_7891, arg_7892);
}
pub inline fn glShaderSource(arg_7893: GLuint, arg_7894: GLsizei, arg_7895: [*c]const [*c]const GLchar, arg_7896: [*c]const GLint) void {
    return epoxy_glShaderSource.?(arg_7893, arg_7894, arg_7895, arg_7896);
}
pub inline fn glShaderSourceARB(arg_7897: GLhandleARB, arg_7898: GLsizei, arg_7899: [*c][*c]const GLcharARB, arg_7900: [*c]const GLint) void {
    return epoxy_glShaderSourceARB.?(arg_7897, arg_7898, arg_7899, arg_7900);
}
pub inline fn glShaderStorageBlockBinding(arg_7901: GLuint, arg_7902: GLuint, arg_7903: GLuint) void {
    return epoxy_glShaderStorageBlockBinding.?(arg_7901, arg_7902, arg_7903);
}
pub inline fn glShadingRateImageBarrierNV(arg_7904: GLboolean) void {
    return epoxy_glShadingRateImageBarrierNV.?(arg_7904);
}
pub inline fn glShadingRateImagePaletteNV(arg_7905: GLuint, arg_7906: GLuint, arg_7907: GLsizei, arg_7908: [*c]const GLenum) void {
    return epoxy_glShadingRateImagePaletteNV.?(arg_7905, arg_7906, arg_7907, arg_7908);
}
pub inline fn glShadingRateSampleOrderCustomNV(arg_7909: GLenum, arg_7910: GLuint, arg_7911: [*c]const GLint) void {
    return epoxy_glShadingRateSampleOrderCustomNV.?(arg_7909, arg_7910, arg_7911);
}
pub inline fn glShadingRateSampleOrderNV(arg_7912: GLenum) void {
    return epoxy_glShadingRateSampleOrderNV.?(arg_7912);
}
pub inline fn glSharpenTexFuncSGIS(arg_7913: GLenum, arg_7914: GLsizei, arg_7915: [*c]const GLfloat) void {
    return epoxy_glSharpenTexFuncSGIS.?(arg_7913, arg_7914, arg_7915);
}
pub inline fn glSignalSemaphoreEXT(arg_7916: GLuint, arg_7917: GLuint, arg_7918: [*c]const GLuint, arg_7919: GLuint, arg_7920: [*c]const GLuint, arg_7921: [*c]const GLenum) void {
    return epoxy_glSignalSemaphoreEXT.?(arg_7916, arg_7917, arg_7918, arg_7919, arg_7920, arg_7921);
}
pub inline fn glSignalSemaphoreui64NVX(arg_7922: GLuint, arg_7923: GLsizei, arg_7924: [*c]const GLuint, arg_7925: [*c]const GLuint64) void {
    return epoxy_glSignalSemaphoreui64NVX.?(arg_7922, arg_7923, arg_7924, arg_7925);
}
pub inline fn glSignalVkFenceNV(arg_7926: GLuint64) void {
    return epoxy_glSignalVkFenceNV.?(arg_7926);
}
pub inline fn glSignalVkSemaphoreNV(arg_7927: GLuint64) void {
    return epoxy_glSignalVkSemaphoreNV.?(arg_7927);
}
pub inline fn glSpecializeShader(arg_7928: GLuint, arg_7929: [*c]const GLchar, arg_7930: GLuint, arg_7931: [*c]const GLuint, arg_7932: [*c]const GLuint) void {
    return epoxy_glSpecializeShader.?(arg_7928, arg_7929, arg_7930, arg_7931, arg_7932);
}
pub inline fn glSpecializeShaderARB(arg_7933: GLuint, arg_7934: [*c]const GLchar, arg_7935: GLuint, arg_7936: [*c]const GLuint, arg_7937: [*c]const GLuint) void {
    return epoxy_glSpecializeShaderARB.?(arg_7933, arg_7934, arg_7935, arg_7936, arg_7937);
}
pub inline fn glSpriteParameterfSGIX(arg_7938: GLenum, arg_7939: GLfloat) void {
    return epoxy_glSpriteParameterfSGIX.?(arg_7938, arg_7939);
}
pub inline fn glSpriteParameterfvSGIX(arg_7940: GLenum, arg_7941: [*c]const GLfloat) void {
    return epoxy_glSpriteParameterfvSGIX.?(arg_7940, arg_7941);
}
pub inline fn glSpriteParameteriSGIX(arg_7942: GLenum, arg_7943: GLint) void {
    return epoxy_glSpriteParameteriSGIX.?(arg_7942, arg_7943);
}
pub inline fn glSpriteParameterivSGIX(arg_7944: GLenum, arg_7945: [*c]const GLint) void {
    return epoxy_glSpriteParameterivSGIX.?(arg_7944, arg_7945);
}
pub inline fn glStartInstrumentsSGIX() void {
    return epoxy_glStartInstrumentsSGIX.?();
}
pub inline fn glStartTilingQCOM(arg_7946: GLuint, arg_7947: GLuint, arg_7948: GLuint, arg_7949: GLuint, arg_7950: GLbitfield) void {
    return epoxy_glStartTilingQCOM.?(arg_7946, arg_7947, arg_7948, arg_7949, arg_7950);
}
pub inline fn glStateCaptureNV(arg_7951: GLuint, arg_7952: GLenum) void {
    return epoxy_glStateCaptureNV.?(arg_7951, arg_7952);
}
pub inline fn glStencilClearTagEXT(arg_7953: GLsizei, arg_7954: GLuint) void {
    return epoxy_glStencilClearTagEXT.?(arg_7953, arg_7954);
}
pub inline fn glStencilFillPathInstancedNV(arg_7955: GLsizei, arg_7956: GLenum, arg_7957: ?*const anyopaque, arg_7958: GLuint, arg_7959: GLenum, arg_7960: GLuint, arg_7961: GLenum, arg_7962: [*c]const GLfloat) void {
    return epoxy_glStencilFillPathInstancedNV.?(arg_7955, arg_7956, arg_7957, arg_7958, arg_7959, arg_7960, arg_7961, arg_7962);
}
pub inline fn glStencilFillPathNV(arg_7963: GLuint, arg_7964: GLenum, arg_7965: GLuint) void {
    return epoxy_glStencilFillPathNV.?(arg_7963, arg_7964, arg_7965);
}
pub inline fn glStencilFunc(arg_7966: GLenum, arg_7967: GLint, arg_7968: GLuint) void {
    return epoxy_glStencilFunc.?(arg_7966, arg_7967, arg_7968);
}
pub inline fn glStencilFuncSeparate(arg_7969: GLenum, arg_7970: GLenum, arg_7971: GLint, arg_7972: GLuint) void {
    return epoxy_glStencilFuncSeparate.?(arg_7969, arg_7970, arg_7971, arg_7972);
}
pub inline fn glStencilFuncSeparateATI(arg_7973: GLenum, arg_7974: GLenum, arg_7975: GLint, arg_7976: GLuint) void {
    return epoxy_glStencilFuncSeparateATI.?(arg_7973, arg_7974, arg_7975, arg_7976);
}
pub inline fn glStencilMask(arg_7977: GLuint) void {
    return epoxy_glStencilMask.?(arg_7977);
}
pub inline fn glStencilMaskSeparate(arg_7978: GLenum, arg_7979: GLuint) void {
    return epoxy_glStencilMaskSeparate.?(arg_7978, arg_7979);
}
pub inline fn glStencilOp(arg_7980: GLenum, arg_7981: GLenum, arg_7982: GLenum) void {
    return epoxy_glStencilOp.?(arg_7980, arg_7981, arg_7982);
}
pub inline fn glStencilOpSeparate(arg_7983: GLenum, arg_7984: GLenum, arg_7985: GLenum, arg_7986: GLenum) void {
    return epoxy_glStencilOpSeparate.?(arg_7983, arg_7984, arg_7985, arg_7986);
}
pub inline fn glStencilOpSeparateATI(arg_7987: GLenum, arg_7988: GLenum, arg_7989: GLenum, arg_7990: GLenum) void {
    return epoxy_glStencilOpSeparateATI.?(arg_7987, arg_7988, arg_7989, arg_7990);
}
pub inline fn glStencilOpValueAMD(arg_7991: GLenum, arg_7992: GLuint) void {
    return epoxy_glStencilOpValueAMD.?(arg_7991, arg_7992);
}
pub inline fn glStencilStrokePathInstancedNV(arg_7993: GLsizei, arg_7994: GLenum, arg_7995: ?*const anyopaque, arg_7996: GLuint, arg_7997: GLint, arg_7998: GLuint, arg_7999: GLenum, arg_8000: [*c]const GLfloat) void {
    return epoxy_glStencilStrokePathInstancedNV.?(arg_7993, arg_7994, arg_7995, arg_7996, arg_7997, arg_7998, arg_7999, arg_8000);
}
pub inline fn glStencilStrokePathNV(arg_8001: GLuint, arg_8002: GLint, arg_8003: GLuint) void {
    return epoxy_glStencilStrokePathNV.?(arg_8001, arg_8002, arg_8003);
}
pub inline fn glStencilThenCoverFillPathInstancedNV(arg_8004: GLsizei, arg_8005: GLenum, arg_8006: ?*const anyopaque, arg_8007: GLuint, arg_8008: GLenum, arg_8009: GLuint, arg_8010: GLenum, arg_8011: GLenum, arg_8012: [*c]const GLfloat) void {
    return epoxy_glStencilThenCoverFillPathInstancedNV.?(arg_8004, arg_8005, arg_8006, arg_8007, arg_8008, arg_8009, arg_8010, arg_8011, arg_8012);
}
pub inline fn glStencilThenCoverFillPathNV(arg_8013: GLuint, arg_8014: GLenum, arg_8015: GLuint, arg_8016: GLenum) void {
    return epoxy_glStencilThenCoverFillPathNV.?(arg_8013, arg_8014, arg_8015, arg_8016);
}
pub inline fn glStencilThenCoverStrokePathInstancedNV(arg_8017: GLsizei, arg_8018: GLenum, arg_8019: ?*const anyopaque, arg_8020: GLuint, arg_8021: GLint, arg_8022: GLuint, arg_8023: GLenum, arg_8024: GLenum, arg_8025: [*c]const GLfloat) void {
    return epoxy_glStencilThenCoverStrokePathInstancedNV.?(arg_8017, arg_8018, arg_8019, arg_8020, arg_8021, arg_8022, arg_8023, arg_8024, arg_8025);
}
pub inline fn glStencilThenCoverStrokePathNV(arg_8026: GLuint, arg_8027: GLint, arg_8028: GLuint, arg_8029: GLenum) void {
    return epoxy_glStencilThenCoverStrokePathNV.?(arg_8026, arg_8027, arg_8028, arg_8029);
}
pub inline fn glStopInstrumentsSGIX(arg_8030: GLint) void {
    return epoxy_glStopInstrumentsSGIX.?(arg_8030);
}
pub inline fn glStringMarkerGREMEDY(arg_8031: GLsizei, arg_8032: ?*const anyopaque) void {
    return epoxy_glStringMarkerGREMEDY.?(arg_8031, arg_8032);
}
pub inline fn glSubpixelPrecisionBiasNV(arg_8033: GLuint, arg_8034: GLuint) void {
    return epoxy_glSubpixelPrecisionBiasNV.?(arg_8033, arg_8034);
}
pub inline fn glSwizzleEXT(arg_8035: GLuint, arg_8036: GLuint, arg_8037: GLenum, arg_8038: GLenum, arg_8039: GLenum, arg_8040: GLenum) void {
    return epoxy_glSwizzleEXT.?(arg_8035, arg_8036, arg_8037, arg_8038, arg_8039, arg_8040);
}
pub inline fn glSyncTextureINTEL(arg_8041: GLuint) void {
    return epoxy_glSyncTextureINTEL.?(arg_8041);
}
pub inline fn glTagSampleBufferSGIX() void {
    return epoxy_glTagSampleBufferSGIX.?();
}
pub inline fn glTangent3bEXT(arg_8042: GLbyte, arg_8043: GLbyte, arg_8044: GLbyte) void {
    return epoxy_glTangent3bEXT.?(arg_8042, arg_8043, arg_8044);
}
pub inline fn glTangent3bvEXT(arg_8045: [*c]const GLbyte) void {
    return epoxy_glTangent3bvEXT.?(arg_8045);
}
pub inline fn glTangent3dEXT(arg_8046: GLdouble, arg_8047: GLdouble, arg_8048: GLdouble) void {
    return epoxy_glTangent3dEXT.?(arg_8046, arg_8047, arg_8048);
}
pub inline fn glTangent3dvEXT(arg_8049: [*c]const GLdouble) void {
    return epoxy_glTangent3dvEXT.?(arg_8049);
}
pub inline fn glTangent3fEXT(arg_8050: GLfloat, arg_8051: GLfloat, arg_8052: GLfloat) void {
    return epoxy_glTangent3fEXT.?(arg_8050, arg_8051, arg_8052);
}
pub inline fn glTangent3fvEXT(arg_8053: [*c]const GLfloat) void {
    return epoxy_glTangent3fvEXT.?(arg_8053);
}
pub inline fn glTangent3iEXT(arg_8054: GLint, arg_8055: GLint, arg_8056: GLint) void {
    return epoxy_glTangent3iEXT.?(arg_8054, arg_8055, arg_8056);
}
pub inline fn glTangent3ivEXT(arg_8057: [*c]const GLint) void {
    return epoxy_glTangent3ivEXT.?(arg_8057);
}
pub inline fn glTangent3sEXT(arg_8058: GLshort, arg_8059: GLshort, arg_8060: GLshort) void {
    return epoxy_glTangent3sEXT.?(arg_8058, arg_8059, arg_8060);
}
pub inline fn glTangent3svEXT(arg_8061: [*c]const GLshort) void {
    return epoxy_glTangent3svEXT.?(arg_8061);
}
pub inline fn glTangentPointerEXT(arg_8062: GLenum, arg_8063: GLsizei, arg_8064: ?*const anyopaque) void {
    return epoxy_glTangentPointerEXT.?(arg_8062, arg_8063, arg_8064);
}
pub inline fn glTbufferMask3DFX(arg_8065: GLuint) void {
    return epoxy_glTbufferMask3DFX.?(arg_8065);
}
pub inline fn glTessellationFactorAMD(arg_8066: GLfloat) void {
    return epoxy_glTessellationFactorAMD.?(arg_8066);
}
pub inline fn glTessellationModeAMD(arg_8067: GLenum) void {
    return epoxy_glTessellationModeAMD.?(arg_8067);
}
pub inline fn glTestFenceAPPLE(arg_8068: GLuint) GLboolean {
    return epoxy_glTestFenceAPPLE.?(arg_8068);
}
pub inline fn glTestFenceNV(arg_8069: GLuint) GLboolean {
    return epoxy_glTestFenceNV.?(arg_8069);
}
pub inline fn glTestObjectAPPLE(arg_8070: GLenum, arg_8071: GLuint) GLboolean {
    return epoxy_glTestObjectAPPLE.?(arg_8070, arg_8071);
}
pub inline fn glTexAttachMemoryNV(arg_8072: GLenum, arg_8073: GLuint, arg_8074: GLuint64) void {
    return epoxy_glTexAttachMemoryNV.?(arg_8072, arg_8073, arg_8074);
}
pub inline fn glTexBuffer(arg_8075: GLenum, arg_8076: GLenum, arg_8077: GLuint) void {
    return epoxy_glTexBuffer.?(arg_8075, arg_8076, arg_8077);
}
pub inline fn glTexBufferARB(arg_8078: GLenum, arg_8079: GLenum, arg_8080: GLuint) void {
    return epoxy_glTexBufferARB.?(arg_8078, arg_8079, arg_8080);
}
pub inline fn glTexBufferEXT(arg_8081: GLenum, arg_8082: GLenum, arg_8083: GLuint) void {
    return epoxy_glTexBufferEXT.?(arg_8081, arg_8082, arg_8083);
}
pub inline fn glTexBufferOES(arg_8084: GLenum, arg_8085: GLenum, arg_8086: GLuint) void {
    return epoxy_glTexBufferOES.?(arg_8084, arg_8085, arg_8086);
}
pub inline fn glTexBufferRange(arg_8087: GLenum, arg_8088: GLenum, arg_8089: GLuint, arg_8090: GLintptr, arg_8091: GLsizeiptr) void {
    return epoxy_glTexBufferRange.?(arg_8087, arg_8088, arg_8089, arg_8090, arg_8091);
}
pub inline fn glTexBufferRangeEXT(arg_8092: GLenum, arg_8093: GLenum, arg_8094: GLuint, arg_8095: GLintptr, arg_8096: GLsizeiptr) void {
    return epoxy_glTexBufferRangeEXT.?(arg_8092, arg_8093, arg_8094, arg_8095, arg_8096);
}
pub inline fn glTexBufferRangeOES(arg_8097: GLenum, arg_8098: GLenum, arg_8099: GLuint, arg_8100: GLintptr, arg_8101: GLsizeiptr) void {
    return epoxy_glTexBufferRangeOES.?(arg_8097, arg_8098, arg_8099, arg_8100, arg_8101);
}
pub inline fn glTexBumpParameterfvATI(arg_8102: GLenum, arg_8103: [*c]const GLfloat) void {
    return epoxy_glTexBumpParameterfvATI.?(arg_8102, arg_8103);
}
pub inline fn glTexBumpParameterivATI(arg_8104: GLenum, arg_8105: [*c]const GLint) void {
    return epoxy_glTexBumpParameterivATI.?(arg_8104, arg_8105);
}
pub inline fn glTexCoord1bOES(arg_8106: GLbyte) void {
    return epoxy_glTexCoord1bOES.?(arg_8106);
}
pub inline fn glTexCoord1bvOES(arg_8107: [*c]const GLbyte) void {
    return epoxy_glTexCoord1bvOES.?(arg_8107);
}
pub inline fn glTexCoord1d(arg_8108: GLdouble) void {
    return epoxy_glTexCoord1d.?(arg_8108);
}
pub inline fn glTexCoord1dv(arg_8109: [*c]const GLdouble) void {
    return epoxy_glTexCoord1dv.?(arg_8109);
}
pub inline fn glTexCoord1f(arg_8110: GLfloat) void {
    return epoxy_glTexCoord1f.?(arg_8110);
}
pub inline fn glTexCoord1fv(arg_8111: [*c]const GLfloat) void {
    return epoxy_glTexCoord1fv.?(arg_8111);
}
pub inline fn glTexCoord1hNV(arg_8112: GLhalfNV) void {
    return epoxy_glTexCoord1hNV.?(arg_8112);
}
pub inline fn glTexCoord1hvNV(arg_8113: [*c]const GLhalfNV) void {
    return epoxy_glTexCoord1hvNV.?(arg_8113);
}
pub inline fn glTexCoord1i(arg_8114: GLint) void {
    return epoxy_glTexCoord1i.?(arg_8114);
}
pub inline fn glTexCoord1iv(arg_8115: [*c]const GLint) void {
    return epoxy_glTexCoord1iv.?(arg_8115);
}
pub inline fn glTexCoord1s(arg_8116: GLshort) void {
    return epoxy_glTexCoord1s.?(arg_8116);
}
pub inline fn glTexCoord1sv(arg_8117: [*c]const GLshort) void {
    return epoxy_glTexCoord1sv.?(arg_8117);
}
pub inline fn glTexCoord1xOES(arg_8118: GLfixed) void {
    return epoxy_glTexCoord1xOES.?(arg_8118);
}
pub inline fn glTexCoord1xvOES(arg_8119: [*c]const GLfixed) void {
    return epoxy_glTexCoord1xvOES.?(arg_8119);
}
pub inline fn glTexCoord2bOES(arg_8120: GLbyte, arg_8121: GLbyte) void {
    return epoxy_glTexCoord2bOES.?(arg_8120, arg_8121);
}
pub inline fn glTexCoord2bvOES(arg_8122: [*c]const GLbyte) void {
    return epoxy_glTexCoord2bvOES.?(arg_8122);
}
pub inline fn glTexCoord2d(arg_8123: GLdouble, arg_8124: GLdouble) void {
    return epoxy_glTexCoord2d.?(arg_8123, arg_8124);
}
pub inline fn glTexCoord2dv(arg_8125: [*c]const GLdouble) void {
    return epoxy_glTexCoord2dv.?(arg_8125);
}
pub inline fn glTexCoord2f(arg_8126: GLfloat, arg_8127: GLfloat) void {
    return epoxy_glTexCoord2f.?(arg_8126, arg_8127);
}
pub inline fn glTexCoord2fColor3fVertex3fSUN(arg_8128: GLfloat, arg_8129: GLfloat, arg_8130: GLfloat, arg_8131: GLfloat, arg_8132: GLfloat, arg_8133: GLfloat, arg_8134: GLfloat, arg_8135: GLfloat) void {
    return epoxy_glTexCoord2fColor3fVertex3fSUN.?(arg_8128, arg_8129, arg_8130, arg_8131, arg_8132, arg_8133, arg_8134, arg_8135);
}
pub inline fn glTexCoord2fColor3fVertex3fvSUN(arg_8136: [*c]const GLfloat, arg_8137: [*c]const GLfloat, arg_8138: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fColor3fVertex3fvSUN.?(arg_8136, arg_8137, arg_8138);
}
pub inline fn glTexCoord2fColor4fNormal3fVertex3fSUN(arg_8139: GLfloat, arg_8140: GLfloat, arg_8141: GLfloat, arg_8142: GLfloat, arg_8143: GLfloat, arg_8144: GLfloat, arg_8145: GLfloat, arg_8146: GLfloat, arg_8147: GLfloat, arg_8148: GLfloat, arg_8149: GLfloat, arg_8150: GLfloat) void {
    return epoxy_glTexCoord2fColor4fNormal3fVertex3fSUN.?(arg_8139, arg_8140, arg_8141, arg_8142, arg_8143, arg_8144, arg_8145, arg_8146, arg_8147, arg_8148, arg_8149, arg_8150);
}
pub inline fn glTexCoord2fColor4fNormal3fVertex3fvSUN(arg_8151: [*c]const GLfloat, arg_8152: [*c]const GLfloat, arg_8153: [*c]const GLfloat, arg_8154: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fColor4fNormal3fVertex3fvSUN.?(arg_8151, arg_8152, arg_8153, arg_8154);
}
pub inline fn glTexCoord2fColor4ubVertex3fSUN(arg_8155: GLfloat, arg_8156: GLfloat, arg_8157: GLubyte, arg_8158: GLubyte, arg_8159: GLubyte, arg_8160: GLubyte, arg_8161: GLfloat, arg_8162: GLfloat, arg_8163: GLfloat) void {
    return epoxy_glTexCoord2fColor4ubVertex3fSUN.?(arg_8155, arg_8156, arg_8157, arg_8158, arg_8159, arg_8160, arg_8161, arg_8162, arg_8163);
}
pub inline fn glTexCoord2fColor4ubVertex3fvSUN(arg_8164: [*c]const GLfloat, arg_8165: [*c]const GLubyte, arg_8166: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fColor4ubVertex3fvSUN.?(arg_8164, arg_8165, arg_8166);
}
pub inline fn glTexCoord2fNormal3fVertex3fSUN(arg_8167: GLfloat, arg_8168: GLfloat, arg_8169: GLfloat, arg_8170: GLfloat, arg_8171: GLfloat, arg_8172: GLfloat, arg_8173: GLfloat, arg_8174: GLfloat) void {
    return epoxy_glTexCoord2fNormal3fVertex3fSUN.?(arg_8167, arg_8168, arg_8169, arg_8170, arg_8171, arg_8172, arg_8173, arg_8174);
}
pub inline fn glTexCoord2fNormal3fVertex3fvSUN(arg_8175: [*c]const GLfloat, arg_8176: [*c]const GLfloat, arg_8177: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fNormal3fVertex3fvSUN.?(arg_8175, arg_8176, arg_8177);
}
pub inline fn glTexCoord2fVertex3fSUN(arg_8178: GLfloat, arg_8179: GLfloat, arg_8180: GLfloat, arg_8181: GLfloat, arg_8182: GLfloat) void {
    return epoxy_glTexCoord2fVertex3fSUN.?(arg_8178, arg_8179, arg_8180, arg_8181, arg_8182);
}
pub inline fn glTexCoord2fVertex3fvSUN(arg_8183: [*c]const GLfloat, arg_8184: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fVertex3fvSUN.?(arg_8183, arg_8184);
}
pub inline fn glTexCoord2fv(arg_8185: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fv.?(arg_8185);
}
pub inline fn glTexCoord2hNV(arg_8186: GLhalfNV, arg_8187: GLhalfNV) void {
    return epoxy_glTexCoord2hNV.?(arg_8186, arg_8187);
}
pub inline fn glTexCoord2hvNV(arg_8188: [*c]const GLhalfNV) void {
    return epoxy_glTexCoord2hvNV.?(arg_8188);
}
pub inline fn glTexCoord2i(arg_8189: GLint, arg_8190: GLint) void {
    return epoxy_glTexCoord2i.?(arg_8189, arg_8190);
}
pub inline fn glTexCoord2iv(arg_8191: [*c]const GLint) void {
    return epoxy_glTexCoord2iv.?(arg_8191);
}
pub inline fn glTexCoord2s(arg_8192: GLshort, arg_8193: GLshort) void {
    return epoxy_glTexCoord2s.?(arg_8192, arg_8193);
}
pub inline fn glTexCoord2sv(arg_8194: [*c]const GLshort) void {
    return epoxy_glTexCoord2sv.?(arg_8194);
}
pub inline fn glTexCoord2xOES(arg_8195: GLfixed, arg_8196: GLfixed) void {
    return epoxy_glTexCoord2xOES.?(arg_8195, arg_8196);
}
pub inline fn glTexCoord2xvOES(arg_8197: [*c]const GLfixed) void {
    return epoxy_glTexCoord2xvOES.?(arg_8197);
}
pub inline fn glTexCoord3bOES(arg_8198: GLbyte, arg_8199: GLbyte, arg_8200: GLbyte) void {
    return epoxy_glTexCoord3bOES.?(arg_8198, arg_8199, arg_8200);
}
pub inline fn glTexCoord3bvOES(arg_8201: [*c]const GLbyte) void {
    return epoxy_glTexCoord3bvOES.?(arg_8201);
}
pub inline fn glTexCoord3d(arg_8202: GLdouble, arg_8203: GLdouble, arg_8204: GLdouble) void {
    return epoxy_glTexCoord3d.?(arg_8202, arg_8203, arg_8204);
}
pub inline fn glTexCoord3dv(arg_8205: [*c]const GLdouble) void {
    return epoxy_glTexCoord3dv.?(arg_8205);
}
pub inline fn glTexCoord3f(arg_8206: GLfloat, arg_8207: GLfloat, arg_8208: GLfloat) void {
    return epoxy_glTexCoord3f.?(arg_8206, arg_8207, arg_8208);
}
pub inline fn glTexCoord3fv(arg_8209: [*c]const GLfloat) void {
    return epoxy_glTexCoord3fv.?(arg_8209);
}
pub inline fn glTexCoord3hNV(arg_8210: GLhalfNV, arg_8211: GLhalfNV, arg_8212: GLhalfNV) void {
    return epoxy_glTexCoord3hNV.?(arg_8210, arg_8211, arg_8212);
}
pub inline fn glTexCoord3hvNV(arg_8213: [*c]const GLhalfNV) void {
    return epoxy_glTexCoord3hvNV.?(arg_8213);
}
pub inline fn glTexCoord3i(arg_8214: GLint, arg_8215: GLint, arg_8216: GLint) void {
    return epoxy_glTexCoord3i.?(arg_8214, arg_8215, arg_8216);
}
pub inline fn glTexCoord3iv(arg_8217: [*c]const GLint) void {
    return epoxy_glTexCoord3iv.?(arg_8217);
}
pub inline fn glTexCoord3s(arg_8218: GLshort, arg_8219: GLshort, arg_8220: GLshort) void {
    return epoxy_glTexCoord3s.?(arg_8218, arg_8219, arg_8220);
}
pub inline fn glTexCoord3sv(arg_8221: [*c]const GLshort) void {
    return epoxy_glTexCoord3sv.?(arg_8221);
}
pub inline fn glTexCoord3xOES(arg_8222: GLfixed, arg_8223: GLfixed, arg_8224: GLfixed) void {
    return epoxy_glTexCoord3xOES.?(arg_8222, arg_8223, arg_8224);
}
pub inline fn glTexCoord3xvOES(arg_8225: [*c]const GLfixed) void {
    return epoxy_glTexCoord3xvOES.?(arg_8225);
}
pub inline fn glTexCoord4bOES(arg_8226: GLbyte, arg_8227: GLbyte, arg_8228: GLbyte, arg_8229: GLbyte) void {
    return epoxy_glTexCoord4bOES.?(arg_8226, arg_8227, arg_8228, arg_8229);
}
pub inline fn glTexCoord4bvOES(arg_8230: [*c]const GLbyte) void {
    return epoxy_glTexCoord4bvOES.?(arg_8230);
}
pub inline fn glTexCoord4d(arg_8231: GLdouble, arg_8232: GLdouble, arg_8233: GLdouble, arg_8234: GLdouble) void {
    return epoxy_glTexCoord4d.?(arg_8231, arg_8232, arg_8233, arg_8234);
}
pub inline fn glTexCoord4dv(arg_8235: [*c]const GLdouble) void {
    return epoxy_glTexCoord4dv.?(arg_8235);
}
pub inline fn glTexCoord4f(arg_8236: GLfloat, arg_8237: GLfloat, arg_8238: GLfloat, arg_8239: GLfloat) void {
    return epoxy_glTexCoord4f.?(arg_8236, arg_8237, arg_8238, arg_8239);
}
pub inline fn glTexCoord4fColor4fNormal3fVertex4fSUN(arg_8240: GLfloat, arg_8241: GLfloat, arg_8242: GLfloat, arg_8243: GLfloat, arg_8244: GLfloat, arg_8245: GLfloat, arg_8246: GLfloat, arg_8247: GLfloat, arg_8248: GLfloat, arg_8249: GLfloat, arg_8250: GLfloat, arg_8251: GLfloat, arg_8252: GLfloat, arg_8253: GLfloat, arg_8254: GLfloat) void {
    return epoxy_glTexCoord4fColor4fNormal3fVertex4fSUN.?(arg_8240, arg_8241, arg_8242, arg_8243, arg_8244, arg_8245, arg_8246, arg_8247, arg_8248, arg_8249, arg_8250, arg_8251, arg_8252, arg_8253, arg_8254);
}
pub inline fn glTexCoord4fColor4fNormal3fVertex4fvSUN(arg_8255: [*c]const GLfloat, arg_8256: [*c]const GLfloat, arg_8257: [*c]const GLfloat, arg_8258: [*c]const GLfloat) void {
    return epoxy_glTexCoord4fColor4fNormal3fVertex4fvSUN.?(arg_8255, arg_8256, arg_8257, arg_8258);
}
pub inline fn glTexCoord4fVertex4fSUN(arg_8259: GLfloat, arg_8260: GLfloat, arg_8261: GLfloat, arg_8262: GLfloat, arg_8263: GLfloat, arg_8264: GLfloat, arg_8265: GLfloat, arg_8266: GLfloat) void {
    return epoxy_glTexCoord4fVertex4fSUN.?(arg_8259, arg_8260, arg_8261, arg_8262, arg_8263, arg_8264, arg_8265, arg_8266);
}
pub inline fn glTexCoord4fVertex4fvSUN(arg_8267: [*c]const GLfloat, arg_8268: [*c]const GLfloat) void {
    return epoxy_glTexCoord4fVertex4fvSUN.?(arg_8267, arg_8268);
}
pub inline fn glTexCoord4fv(arg_8269: [*c]const GLfloat) void {
    return epoxy_glTexCoord4fv.?(arg_8269);
}
pub inline fn glTexCoord4hNV(arg_8270: GLhalfNV, arg_8271: GLhalfNV, arg_8272: GLhalfNV, arg_8273: GLhalfNV) void {
    return epoxy_glTexCoord4hNV.?(arg_8270, arg_8271, arg_8272, arg_8273);
}
pub inline fn glTexCoord4hvNV(arg_8274: [*c]const GLhalfNV) void {
    return epoxy_glTexCoord4hvNV.?(arg_8274);
}
pub inline fn glTexCoord4i(arg_8275: GLint, arg_8276: GLint, arg_8277: GLint, arg_8278: GLint) void {
    return epoxy_glTexCoord4i.?(arg_8275, arg_8276, arg_8277, arg_8278);
}
pub inline fn glTexCoord4iv(arg_8279: [*c]const GLint) void {
    return epoxy_glTexCoord4iv.?(arg_8279);
}
pub inline fn glTexCoord4s(arg_8280: GLshort, arg_8281: GLshort, arg_8282: GLshort, arg_8283: GLshort) void {
    return epoxy_glTexCoord4s.?(arg_8280, arg_8281, arg_8282, arg_8283);
}
pub inline fn glTexCoord4sv(arg_8284: [*c]const GLshort) void {
    return epoxy_glTexCoord4sv.?(arg_8284);
}
pub inline fn glTexCoord4xOES(arg_8285: GLfixed, arg_8286: GLfixed, arg_8287: GLfixed, arg_8288: GLfixed) void {
    return epoxy_glTexCoord4xOES.?(arg_8285, arg_8286, arg_8287, arg_8288);
}
pub inline fn glTexCoord4xvOES(arg_8289: [*c]const GLfixed) void {
    return epoxy_glTexCoord4xvOES.?(arg_8289);
}
pub inline fn glTexCoordFormatNV(arg_8290: GLint, arg_8291: GLenum, arg_8292: GLsizei) void {
    return epoxy_glTexCoordFormatNV.?(arg_8290, arg_8291, arg_8292);
}
pub inline fn glTexCoordP1ui(arg_8293: GLenum, arg_8294: GLuint) void {
    return epoxy_glTexCoordP1ui.?(arg_8293, arg_8294);
}
pub inline fn glTexCoordP1uiv(arg_8295: GLenum, arg_8296: [*c]const GLuint) void {
    return epoxy_glTexCoordP1uiv.?(arg_8295, arg_8296);
}
pub inline fn glTexCoordP2ui(arg_8297: GLenum, arg_8298: GLuint) void {
    return epoxy_glTexCoordP2ui.?(arg_8297, arg_8298);
}
pub inline fn glTexCoordP2uiv(arg_8299: GLenum, arg_8300: [*c]const GLuint) void {
    return epoxy_glTexCoordP2uiv.?(arg_8299, arg_8300);
}
pub inline fn glTexCoordP3ui(arg_8301: GLenum, arg_8302: GLuint) void {
    return epoxy_glTexCoordP3ui.?(arg_8301, arg_8302);
}
pub inline fn glTexCoordP3uiv(arg_8303: GLenum, arg_8304: [*c]const GLuint) void {
    return epoxy_glTexCoordP3uiv.?(arg_8303, arg_8304);
}
pub inline fn glTexCoordP4ui(arg_8305: GLenum, arg_8306: GLuint) void {
    return epoxy_glTexCoordP4ui.?(arg_8305, arg_8306);
}
pub inline fn glTexCoordP4uiv(arg_8307: GLenum, arg_8308: [*c]const GLuint) void {
    return epoxy_glTexCoordP4uiv.?(arg_8307, arg_8308);
}
pub inline fn glTexCoordPointer(arg_8309: GLint, arg_8310: GLenum, arg_8311: GLsizei, arg_8312: ?*const anyopaque) void {
    return epoxy_glTexCoordPointer.?(arg_8309, arg_8310, arg_8311, arg_8312);
}
pub inline fn glTexCoordPointerEXT(arg_8313: GLint, arg_8314: GLenum, arg_8315: GLsizei, arg_8316: GLsizei, arg_8317: ?*const anyopaque) void {
    return epoxy_glTexCoordPointerEXT.?(arg_8313, arg_8314, arg_8315, arg_8316, arg_8317);
}
pub inline fn glTexCoordPointerListIBM(arg_8318: GLint, arg_8319: GLenum, arg_8320: GLint, arg_8321: [*c]?*const anyopaque, arg_8322: GLint) void {
    return epoxy_glTexCoordPointerListIBM.?(arg_8318, arg_8319, arg_8320, arg_8321, arg_8322);
}
pub inline fn glTexCoordPointervINTEL(arg_8323: GLint, arg_8324: GLenum, arg_8325: [*c]?*const anyopaque) void {
    return epoxy_glTexCoordPointervINTEL.?(arg_8323, arg_8324, arg_8325);
}
pub inline fn glTexEnvf(arg_8326: GLenum, arg_8327: GLenum, arg_8328: GLfloat) void {
    return epoxy_glTexEnvf.?(arg_8326, arg_8327, arg_8328);
}
pub inline fn glTexEnvfv(arg_8329: GLenum, arg_8330: GLenum, arg_8331: [*c]const GLfloat) void {
    return epoxy_glTexEnvfv.?(arg_8329, arg_8330, arg_8331);
}
pub inline fn glTexEnvi(arg_8332: GLenum, arg_8333: GLenum, arg_8334: GLint) void {
    return epoxy_glTexEnvi.?(arg_8332, arg_8333, arg_8334);
}
pub inline fn glTexEnviv(arg_8335: GLenum, arg_8336: GLenum, arg_8337: [*c]const GLint) void {
    return epoxy_glTexEnviv.?(arg_8335, arg_8336, arg_8337);
}
pub inline fn glTexEnvx(arg_8338: GLenum, arg_8339: GLenum, arg_8340: GLfixed) void {
    return epoxy_glTexEnvx.?(arg_8338, arg_8339, arg_8340);
}
pub inline fn glTexEnvxOES(arg_8341: GLenum, arg_8342: GLenum, arg_8343: GLfixed) void {
    return epoxy_glTexEnvxOES.?(arg_8341, arg_8342, arg_8343);
}
pub inline fn glTexEnvxv(arg_8344: GLenum, arg_8345: GLenum, arg_8346: [*c]const GLfixed) void {
    return epoxy_glTexEnvxv.?(arg_8344, arg_8345, arg_8346);
}
pub inline fn glTexEnvxvOES(arg_8347: GLenum, arg_8348: GLenum, arg_8349: [*c]const GLfixed) void {
    return epoxy_glTexEnvxvOES.?(arg_8347, arg_8348, arg_8349);
}
pub inline fn glTexFilterFuncSGIS(arg_8350: GLenum, arg_8351: GLenum, arg_8352: GLsizei, arg_8353: [*c]const GLfloat) void {
    return epoxy_glTexFilterFuncSGIS.?(arg_8350, arg_8351, arg_8352, arg_8353);
}
pub inline fn glTexGend(arg_8354: GLenum, arg_8355: GLenum, arg_8356: GLdouble) void {
    return epoxy_glTexGend.?(arg_8354, arg_8355, arg_8356);
}
pub inline fn glTexGendv(arg_8357: GLenum, arg_8358: GLenum, arg_8359: [*c]const GLdouble) void {
    return epoxy_glTexGendv.?(arg_8357, arg_8358, arg_8359);
}
pub inline fn glTexGenf(arg_8360: GLenum, arg_8361: GLenum, arg_8362: GLfloat) void {
    return epoxy_glTexGenf.?(arg_8360, arg_8361, arg_8362);
}
pub inline fn glTexGenfOES(arg_8363: GLenum, arg_8364: GLenum, arg_8365: GLfloat) void {
    return epoxy_glTexGenfOES.?(arg_8363, arg_8364, arg_8365);
}
pub inline fn glTexGenfv(arg_8366: GLenum, arg_8367: GLenum, arg_8368: [*c]const GLfloat) void {
    return epoxy_glTexGenfv.?(arg_8366, arg_8367, arg_8368);
}
pub inline fn glTexGenfvOES(arg_8369: GLenum, arg_8370: GLenum, arg_8371: [*c]const GLfloat) void {
    return epoxy_glTexGenfvOES.?(arg_8369, arg_8370, arg_8371);
}
pub inline fn glTexGeni(arg_8372: GLenum, arg_8373: GLenum, arg_8374: GLint) void {
    return epoxy_glTexGeni.?(arg_8372, arg_8373, arg_8374);
}
pub inline fn glTexGeniOES(arg_8375: GLenum, arg_8376: GLenum, arg_8377: GLint) void {
    return epoxy_glTexGeniOES.?(arg_8375, arg_8376, arg_8377);
}
pub inline fn glTexGeniv(arg_8378: GLenum, arg_8379: GLenum, arg_8380: [*c]const GLint) void {
    return epoxy_glTexGeniv.?(arg_8378, arg_8379, arg_8380);
}
pub inline fn glTexGenivOES(arg_8381: GLenum, arg_8382: GLenum, arg_8383: [*c]const GLint) void {
    return epoxy_glTexGenivOES.?(arg_8381, arg_8382, arg_8383);
}
pub inline fn glTexGenxOES(arg_8384: GLenum, arg_8385: GLenum, arg_8386: GLfixed) void {
    return epoxy_glTexGenxOES.?(arg_8384, arg_8385, arg_8386);
}
pub inline fn glTexGenxvOES(arg_8387: GLenum, arg_8388: GLenum, arg_8389: [*c]const GLfixed) void {
    return epoxy_glTexGenxvOES.?(arg_8387, arg_8388, arg_8389);
}
pub inline fn glTexImage1D(arg_8390: GLenum, arg_8391: GLint, arg_8392: GLint, arg_8393: GLsizei, arg_8394: GLint, arg_8395: GLenum, arg_8396: GLenum, arg_8397: ?*const anyopaque) void {
    return epoxy_glTexImage1D.?(arg_8390, arg_8391, arg_8392, arg_8393, arg_8394, arg_8395, arg_8396, arg_8397);
}
pub inline fn glTexImage2D(arg_8398: GLenum, arg_8399: GLint, arg_8400: GLint, arg_8401: GLsizei, arg_8402: GLsizei, arg_8403: GLint, arg_8404: GLenum, arg_8405: GLenum, arg_8406: ?*const anyopaque) void {
    return epoxy_glTexImage2D.?(arg_8398, arg_8399, arg_8400, arg_8401, arg_8402, arg_8403, arg_8404, arg_8405, arg_8406);
}
pub inline fn glTexImage2DMultisample(arg_8407: GLenum, arg_8408: GLsizei, arg_8409: GLenum, arg_8410: GLsizei, arg_8411: GLsizei, arg_8412: GLboolean) void {
    return epoxy_glTexImage2DMultisample.?(arg_8407, arg_8408, arg_8409, arg_8410, arg_8411, arg_8412);
}
pub inline fn glTexImage2DMultisampleCoverageNV(arg_8413: GLenum, arg_8414: GLsizei, arg_8415: GLsizei, arg_8416: GLint, arg_8417: GLsizei, arg_8418: GLsizei, arg_8419: GLboolean) void {
    return epoxy_glTexImage2DMultisampleCoverageNV.?(arg_8413, arg_8414, arg_8415, arg_8416, arg_8417, arg_8418, arg_8419);
}
pub inline fn glTexImage3D(arg_8420: GLenum, arg_8421: GLint, arg_8422: GLint, arg_8423: GLsizei, arg_8424: GLsizei, arg_8425: GLsizei, arg_8426: GLint, arg_8427: GLenum, arg_8428: GLenum, arg_8429: ?*const anyopaque) void {
    return epoxy_glTexImage3D.?(arg_8420, arg_8421, arg_8422, arg_8423, arg_8424, arg_8425, arg_8426, arg_8427, arg_8428, arg_8429);
}
pub inline fn glTexImage3DEXT(arg_8430: GLenum, arg_8431: GLint, arg_8432: GLenum, arg_8433: GLsizei, arg_8434: GLsizei, arg_8435: GLsizei, arg_8436: GLint, arg_8437: GLenum, arg_8438: GLenum, arg_8439: ?*const anyopaque) void {
    return epoxy_glTexImage3DEXT.?(arg_8430, arg_8431, arg_8432, arg_8433, arg_8434, arg_8435, arg_8436, arg_8437, arg_8438, arg_8439);
}
pub inline fn glTexImage3DMultisample(arg_8440: GLenum, arg_8441: GLsizei, arg_8442: GLenum, arg_8443: GLsizei, arg_8444: GLsizei, arg_8445: GLsizei, arg_8446: GLboolean) void {
    return epoxy_glTexImage3DMultisample.?(arg_8440, arg_8441, arg_8442, arg_8443, arg_8444, arg_8445, arg_8446);
}
pub inline fn glTexImage3DMultisampleCoverageNV(arg_8447: GLenum, arg_8448: GLsizei, arg_8449: GLsizei, arg_8450: GLint, arg_8451: GLsizei, arg_8452: GLsizei, arg_8453: GLsizei, arg_8454: GLboolean) void {
    return epoxy_glTexImage3DMultisampleCoverageNV.?(arg_8447, arg_8448, arg_8449, arg_8450, arg_8451, arg_8452, arg_8453, arg_8454);
}
pub inline fn glTexImage3DOES(arg_8455: GLenum, arg_8456: GLint, arg_8457: GLenum, arg_8458: GLsizei, arg_8459: GLsizei, arg_8460: GLsizei, arg_8461: GLint, arg_8462: GLenum, arg_8463: GLenum, arg_8464: ?*const anyopaque) void {
    return epoxy_glTexImage3DOES.?(arg_8455, arg_8456, arg_8457, arg_8458, arg_8459, arg_8460, arg_8461, arg_8462, arg_8463, arg_8464);
}
pub inline fn glTexImage4DSGIS(arg_8465: GLenum, arg_8466: GLint, arg_8467: GLenum, arg_8468: GLsizei, arg_8469: GLsizei, arg_8470: GLsizei, arg_8471: GLsizei, arg_8472: GLint, arg_8473: GLenum, arg_8474: GLenum, arg_8475: ?*const anyopaque) void {
    return epoxy_glTexImage4DSGIS.?(arg_8465, arg_8466, arg_8467, arg_8468, arg_8469, arg_8470, arg_8471, arg_8472, arg_8473, arg_8474, arg_8475);
}
pub inline fn glTexPageCommitmentARB(arg_8476: GLenum, arg_8477: GLint, arg_8478: GLint, arg_8479: GLint, arg_8480: GLint, arg_8481: GLsizei, arg_8482: GLsizei, arg_8483: GLsizei, arg_8484: GLboolean) void {
    return epoxy_glTexPageCommitmentARB.?(arg_8476, arg_8477, arg_8478, arg_8479, arg_8480, arg_8481, arg_8482, arg_8483, arg_8484);
}
pub inline fn glTexPageCommitmentEXT(arg_8485: GLenum, arg_8486: GLint, arg_8487: GLint, arg_8488: GLint, arg_8489: GLint, arg_8490: GLsizei, arg_8491: GLsizei, arg_8492: GLsizei, arg_8493: GLboolean) void {
    return epoxy_glTexPageCommitmentEXT.?(arg_8485, arg_8486, arg_8487, arg_8488, arg_8489, arg_8490, arg_8491, arg_8492, arg_8493);
}
pub inline fn glTexParameterIiv(arg_8494: GLenum, arg_8495: GLenum, arg_8496: [*c]const GLint) void {
    return epoxy_glTexParameterIiv.?(arg_8494, arg_8495, arg_8496);
}
pub inline fn glTexParameterIivEXT(arg_8497: GLenum, arg_8498: GLenum, arg_8499: [*c]const GLint) void {
    return epoxy_glTexParameterIivEXT.?(arg_8497, arg_8498, arg_8499);
}
pub inline fn glTexParameterIivOES(arg_8500: GLenum, arg_8501: GLenum, arg_8502: [*c]const GLint) void {
    return epoxy_glTexParameterIivOES.?(arg_8500, arg_8501, arg_8502);
}
pub inline fn glTexParameterIuiv(arg_8503: GLenum, arg_8504: GLenum, arg_8505: [*c]const GLuint) void {
    return epoxy_glTexParameterIuiv.?(arg_8503, arg_8504, arg_8505);
}
pub inline fn glTexParameterIuivEXT(arg_8506: GLenum, arg_8507: GLenum, arg_8508: [*c]const GLuint) void {
    return epoxy_glTexParameterIuivEXT.?(arg_8506, arg_8507, arg_8508);
}
pub inline fn glTexParameterIuivOES(arg_8509: GLenum, arg_8510: GLenum, arg_8511: [*c]const GLuint) void {
    return epoxy_glTexParameterIuivOES.?(arg_8509, arg_8510, arg_8511);
}
pub inline fn glTexParameterf(arg_8512: GLenum, arg_8513: GLenum, arg_8514: GLfloat) void {
    return epoxy_glTexParameterf.?(arg_8512, arg_8513, arg_8514);
}
pub inline fn glTexParameterfv(arg_8515: GLenum, arg_8516: GLenum, arg_8517: [*c]const GLfloat) void {
    return epoxy_glTexParameterfv.?(arg_8515, arg_8516, arg_8517);
}
pub inline fn glTexParameteri(arg_8518: GLenum, arg_8519: GLenum, arg_8520: GLint) void {
    return epoxy_glTexParameteri.?(arg_8518, arg_8519, arg_8520);
}
pub inline fn glTexParameteriv(arg_8521: GLenum, arg_8522: GLenum, arg_8523: [*c]const GLint) void {
    return epoxy_glTexParameteriv.?(arg_8521, arg_8522, arg_8523);
}
pub inline fn glTexParameterx(arg_8524: GLenum, arg_8525: GLenum, arg_8526: GLfixed) void {
    return epoxy_glTexParameterx.?(arg_8524, arg_8525, arg_8526);
}
pub inline fn glTexParameterxOES(arg_8527: GLenum, arg_8528: GLenum, arg_8529: GLfixed) void {
    return epoxy_glTexParameterxOES.?(arg_8527, arg_8528, arg_8529);
}
pub inline fn glTexParameterxv(arg_8530: GLenum, arg_8531: GLenum, arg_8532: [*c]const GLfixed) void {
    return epoxy_glTexParameterxv.?(arg_8530, arg_8531, arg_8532);
}
pub inline fn glTexParameterxvOES(arg_8533: GLenum, arg_8534: GLenum, arg_8535: [*c]const GLfixed) void {
    return epoxy_glTexParameterxvOES.?(arg_8533, arg_8534, arg_8535);
}
pub inline fn glTexRenderbufferNV(arg_8536: GLenum, arg_8537: GLuint) void {
    return epoxy_glTexRenderbufferNV.?(arg_8536, arg_8537);
}
pub inline fn glTexStorage1D(arg_8538: GLenum, arg_8539: GLsizei, arg_8540: GLenum, arg_8541: GLsizei) void {
    return epoxy_glTexStorage1D.?(arg_8538, arg_8539, arg_8540, arg_8541);
}
pub inline fn glTexStorage1DEXT(arg_8542: GLenum, arg_8543: GLsizei, arg_8544: GLenum, arg_8545: GLsizei) void {
    return epoxy_glTexStorage1DEXT.?(arg_8542, arg_8543, arg_8544, arg_8545);
}
pub inline fn glTexStorage2D(arg_8546: GLenum, arg_8547: GLsizei, arg_8548: GLenum, arg_8549: GLsizei, arg_8550: GLsizei) void {
    return epoxy_glTexStorage2D.?(arg_8546, arg_8547, arg_8548, arg_8549, arg_8550);
}
pub inline fn glTexStorage2DEXT(arg_8551: GLenum, arg_8552: GLsizei, arg_8553: GLenum, arg_8554: GLsizei, arg_8555: GLsizei) void {
    return epoxy_glTexStorage2DEXT.?(arg_8551, arg_8552, arg_8553, arg_8554, arg_8555);
}
pub inline fn glTexStorage2DMultisample(arg_8556: GLenum, arg_8557: GLsizei, arg_8558: GLenum, arg_8559: GLsizei, arg_8560: GLsizei, arg_8561: GLboolean) void {
    return epoxy_glTexStorage2DMultisample.?(arg_8556, arg_8557, arg_8558, arg_8559, arg_8560, arg_8561);
}
pub inline fn glTexStorage3D(arg_8562: GLenum, arg_8563: GLsizei, arg_8564: GLenum, arg_8565: GLsizei, arg_8566: GLsizei, arg_8567: GLsizei) void {
    return epoxy_glTexStorage3D.?(arg_8562, arg_8563, arg_8564, arg_8565, arg_8566, arg_8567);
}
pub inline fn glTexStorage3DEXT(arg_8568: GLenum, arg_8569: GLsizei, arg_8570: GLenum, arg_8571: GLsizei, arg_8572: GLsizei, arg_8573: GLsizei) void {
    return epoxy_glTexStorage3DEXT.?(arg_8568, arg_8569, arg_8570, arg_8571, arg_8572, arg_8573);
}
pub inline fn glTexStorage3DMultisample(arg_8574: GLenum, arg_8575: GLsizei, arg_8576: GLenum, arg_8577: GLsizei, arg_8578: GLsizei, arg_8579: GLsizei, arg_8580: GLboolean) void {
    return epoxy_glTexStorage3DMultisample.?(arg_8574, arg_8575, arg_8576, arg_8577, arg_8578, arg_8579, arg_8580);
}
pub inline fn glTexStorage3DMultisampleOES(arg_8581: GLenum, arg_8582: GLsizei, arg_8583: GLenum, arg_8584: GLsizei, arg_8585: GLsizei, arg_8586: GLsizei, arg_8587: GLboolean) void {
    return epoxy_glTexStorage3DMultisampleOES.?(arg_8581, arg_8582, arg_8583, arg_8584, arg_8585, arg_8586, arg_8587);
}
pub inline fn glTexStorageMem1DEXT(arg_8588: GLenum, arg_8589: GLsizei, arg_8590: GLenum, arg_8591: GLsizei, arg_8592: GLuint, arg_8593: GLuint64) void {
    return epoxy_glTexStorageMem1DEXT.?(arg_8588, arg_8589, arg_8590, arg_8591, arg_8592, arg_8593);
}
pub inline fn glTexStorageMem2DEXT(arg_8594: GLenum, arg_8595: GLsizei, arg_8596: GLenum, arg_8597: GLsizei, arg_8598: GLsizei, arg_8599: GLuint, arg_8600: GLuint64) void {
    return epoxy_glTexStorageMem2DEXT.?(arg_8594, arg_8595, arg_8596, arg_8597, arg_8598, arg_8599, arg_8600);
}
pub inline fn glTexStorageMem2DMultisampleEXT(arg_8601: GLenum, arg_8602: GLsizei, arg_8603: GLenum, arg_8604: GLsizei, arg_8605: GLsizei, arg_8606: GLboolean, arg_8607: GLuint, arg_8608: GLuint64) void {
    return epoxy_glTexStorageMem2DMultisampleEXT.?(arg_8601, arg_8602, arg_8603, arg_8604, arg_8605, arg_8606, arg_8607, arg_8608);
}
pub inline fn glTexStorageMem3DEXT(arg_8609: GLenum, arg_8610: GLsizei, arg_8611: GLenum, arg_8612: GLsizei, arg_8613: GLsizei, arg_8614: GLsizei, arg_8615: GLuint, arg_8616: GLuint64) void {
    return epoxy_glTexStorageMem3DEXT.?(arg_8609, arg_8610, arg_8611, arg_8612, arg_8613, arg_8614, arg_8615, arg_8616);
}
pub inline fn glTexStorageMem3DMultisampleEXT(arg_8617: GLenum, arg_8618: GLsizei, arg_8619: GLenum, arg_8620: GLsizei, arg_8621: GLsizei, arg_8622: GLsizei, arg_8623: GLboolean, arg_8624: GLuint, arg_8625: GLuint64) void {
    return epoxy_glTexStorageMem3DMultisampleEXT.?(arg_8617, arg_8618, arg_8619, arg_8620, arg_8621, arg_8622, arg_8623, arg_8624, arg_8625);
}
pub inline fn glTexStorageSparseAMD(arg_8626: GLenum, arg_8627: GLenum, arg_8628: GLsizei, arg_8629: GLsizei, arg_8630: GLsizei, arg_8631: GLsizei, arg_8632: GLbitfield) void {
    return epoxy_glTexStorageSparseAMD.?(arg_8626, arg_8627, arg_8628, arg_8629, arg_8630, arg_8631, arg_8632);
}
pub inline fn glTexSubImage1D(arg_8633: GLenum, arg_8634: GLint, arg_8635: GLint, arg_8636: GLsizei, arg_8637: GLenum, arg_8638: GLenum, arg_8639: ?*const anyopaque) void {
    return epoxy_glTexSubImage1D.?(arg_8633, arg_8634, arg_8635, arg_8636, arg_8637, arg_8638, arg_8639);
}
pub inline fn glTexSubImage1DEXT(arg_8640: GLenum, arg_8641: GLint, arg_8642: GLint, arg_8643: GLsizei, arg_8644: GLenum, arg_8645: GLenum, arg_8646: ?*const anyopaque) void {
    return epoxy_glTexSubImage1DEXT.?(arg_8640, arg_8641, arg_8642, arg_8643, arg_8644, arg_8645, arg_8646);
}
pub inline fn glTexSubImage2D(arg_8647: GLenum, arg_8648: GLint, arg_8649: GLint, arg_8650: GLint, arg_8651: GLsizei, arg_8652: GLsizei, arg_8653: GLenum, arg_8654: GLenum, arg_8655: ?*const anyopaque) void {
    return epoxy_glTexSubImage2D.?(arg_8647, arg_8648, arg_8649, arg_8650, arg_8651, arg_8652, arg_8653, arg_8654, arg_8655);
}
pub inline fn glTexSubImage2DEXT(arg_8656: GLenum, arg_8657: GLint, arg_8658: GLint, arg_8659: GLint, arg_8660: GLsizei, arg_8661: GLsizei, arg_8662: GLenum, arg_8663: GLenum, arg_8664: ?*const anyopaque) void {
    return epoxy_glTexSubImage2DEXT.?(arg_8656, arg_8657, arg_8658, arg_8659, arg_8660, arg_8661, arg_8662, arg_8663, arg_8664);
}
pub inline fn glTexSubImage3D(arg_8665: GLenum, arg_8666: GLint, arg_8667: GLint, arg_8668: GLint, arg_8669: GLint, arg_8670: GLsizei, arg_8671: GLsizei, arg_8672: GLsizei, arg_8673: GLenum, arg_8674: GLenum, arg_8675: ?*const anyopaque) void {
    return epoxy_glTexSubImage3D.?(arg_8665, arg_8666, arg_8667, arg_8668, arg_8669, arg_8670, arg_8671, arg_8672, arg_8673, arg_8674, arg_8675);
}
pub inline fn glTexSubImage3DEXT(arg_8676: GLenum, arg_8677: GLint, arg_8678: GLint, arg_8679: GLint, arg_8680: GLint, arg_8681: GLsizei, arg_8682: GLsizei, arg_8683: GLsizei, arg_8684: GLenum, arg_8685: GLenum, arg_8686: ?*const anyopaque) void {
    return epoxy_glTexSubImage3DEXT.?(arg_8676, arg_8677, arg_8678, arg_8679, arg_8680, arg_8681, arg_8682, arg_8683, arg_8684, arg_8685, arg_8686);
}
pub inline fn glTexSubImage3DOES(arg_8687: GLenum, arg_8688: GLint, arg_8689: GLint, arg_8690: GLint, arg_8691: GLint, arg_8692: GLsizei, arg_8693: GLsizei, arg_8694: GLsizei, arg_8695: GLenum, arg_8696: GLenum, arg_8697: ?*const anyopaque) void {
    return epoxy_glTexSubImage3DOES.?(arg_8687, arg_8688, arg_8689, arg_8690, arg_8691, arg_8692, arg_8693, arg_8694, arg_8695, arg_8696, arg_8697);
}
pub inline fn glTexSubImage4DSGIS(arg_8698: GLenum, arg_8699: GLint, arg_8700: GLint, arg_8701: GLint, arg_8702: GLint, arg_8703: GLint, arg_8704: GLsizei, arg_8705: GLsizei, arg_8706: GLsizei, arg_8707: GLsizei, arg_8708: GLenum, arg_8709: GLenum, arg_8710: ?*const anyopaque) void {
    return epoxy_glTexSubImage4DSGIS.?(arg_8698, arg_8699, arg_8700, arg_8701, arg_8702, arg_8703, arg_8704, arg_8705, arg_8706, arg_8707, arg_8708, arg_8709, arg_8710);
}
pub inline fn glTextureAttachMemoryNV(arg_8711: GLuint, arg_8712: GLuint, arg_8713: GLuint64) void {
    return epoxy_glTextureAttachMemoryNV.?(arg_8711, arg_8712, arg_8713);
}
pub inline fn glTextureBarrier() void {
    return epoxy_glTextureBarrier.?();
}
pub inline fn glTextureBarrierNV() void {
    return epoxy_glTextureBarrierNV.?();
}
pub inline fn glTextureBuffer(arg_8714: GLuint, arg_8715: GLenum, arg_8716: GLuint) void {
    return epoxy_glTextureBuffer.?(arg_8714, arg_8715, arg_8716);
}
pub inline fn glTextureBufferEXT(arg_8717: GLuint, arg_8718: GLenum, arg_8719: GLenum, arg_8720: GLuint) void {
    return epoxy_glTextureBufferEXT.?(arg_8717, arg_8718, arg_8719, arg_8720);
}
pub inline fn glTextureBufferRange(arg_8721: GLuint, arg_8722: GLenum, arg_8723: GLuint, arg_8724: GLintptr, arg_8725: GLsizeiptr) void {
    return epoxy_glTextureBufferRange.?(arg_8721, arg_8722, arg_8723, arg_8724, arg_8725);
}
pub inline fn glTextureBufferRangeEXT(arg_8726: GLuint, arg_8727: GLenum, arg_8728: GLenum, arg_8729: GLuint, arg_8730: GLintptr, arg_8731: GLsizeiptr) void {
    return epoxy_glTextureBufferRangeEXT.?(arg_8726, arg_8727, arg_8728, arg_8729, arg_8730, arg_8731);
}
pub inline fn glTextureColorMaskSGIS(arg_8732: GLboolean, arg_8733: GLboolean, arg_8734: GLboolean, arg_8735: GLboolean) void {
    return epoxy_glTextureColorMaskSGIS.?(arg_8732, arg_8733, arg_8734, arg_8735);
}
pub inline fn glTextureFoveationParametersQCOM(arg_8736: GLuint, arg_8737: GLuint, arg_8738: GLuint, arg_8739: GLfloat, arg_8740: GLfloat, arg_8741: GLfloat, arg_8742: GLfloat, arg_8743: GLfloat) void {
    return epoxy_glTextureFoveationParametersQCOM.?(arg_8736, arg_8737, arg_8738, arg_8739, arg_8740, arg_8741, arg_8742, arg_8743);
}
pub inline fn glTextureImage1DEXT(arg_8744: GLuint, arg_8745: GLenum, arg_8746: GLint, arg_8747: GLint, arg_8748: GLsizei, arg_8749: GLint, arg_8750: GLenum, arg_8751: GLenum, arg_8752: ?*const anyopaque) void {
    return epoxy_glTextureImage1DEXT.?(arg_8744, arg_8745, arg_8746, arg_8747, arg_8748, arg_8749, arg_8750, arg_8751, arg_8752);
}
pub inline fn glTextureImage2DEXT(arg_8753: GLuint, arg_8754: GLenum, arg_8755: GLint, arg_8756: GLint, arg_8757: GLsizei, arg_8758: GLsizei, arg_8759: GLint, arg_8760: GLenum, arg_8761: GLenum, arg_8762: ?*const anyopaque) void {
    return epoxy_glTextureImage2DEXT.?(arg_8753, arg_8754, arg_8755, arg_8756, arg_8757, arg_8758, arg_8759, arg_8760, arg_8761, arg_8762);
}
pub inline fn glTextureImage2DMultisampleCoverageNV(arg_8763: GLuint, arg_8764: GLenum, arg_8765: GLsizei, arg_8766: GLsizei, arg_8767: GLint, arg_8768: GLsizei, arg_8769: GLsizei, arg_8770: GLboolean) void {
    return epoxy_glTextureImage2DMultisampleCoverageNV.?(arg_8763, arg_8764, arg_8765, arg_8766, arg_8767, arg_8768, arg_8769, arg_8770);
}
pub inline fn glTextureImage2DMultisampleNV(arg_8771: GLuint, arg_8772: GLenum, arg_8773: GLsizei, arg_8774: GLint, arg_8775: GLsizei, arg_8776: GLsizei, arg_8777: GLboolean) void {
    return epoxy_glTextureImage2DMultisampleNV.?(arg_8771, arg_8772, arg_8773, arg_8774, arg_8775, arg_8776, arg_8777);
}
pub inline fn glTextureImage3DEXT(arg_8778: GLuint, arg_8779: GLenum, arg_8780: GLint, arg_8781: GLint, arg_8782: GLsizei, arg_8783: GLsizei, arg_8784: GLsizei, arg_8785: GLint, arg_8786: GLenum, arg_8787: GLenum, arg_8788: ?*const anyopaque) void {
    return epoxy_glTextureImage3DEXT.?(arg_8778, arg_8779, arg_8780, arg_8781, arg_8782, arg_8783, arg_8784, arg_8785, arg_8786, arg_8787, arg_8788);
}
pub inline fn glTextureImage3DMultisampleCoverageNV(arg_8789: GLuint, arg_8790: GLenum, arg_8791: GLsizei, arg_8792: GLsizei, arg_8793: GLint, arg_8794: GLsizei, arg_8795: GLsizei, arg_8796: GLsizei, arg_8797: GLboolean) void {
    return epoxy_glTextureImage3DMultisampleCoverageNV.?(arg_8789, arg_8790, arg_8791, arg_8792, arg_8793, arg_8794, arg_8795, arg_8796, arg_8797);
}
pub inline fn glTextureImage3DMultisampleNV(arg_8798: GLuint, arg_8799: GLenum, arg_8800: GLsizei, arg_8801: GLint, arg_8802: GLsizei, arg_8803: GLsizei, arg_8804: GLsizei, arg_8805: GLboolean) void {
    return epoxy_glTextureImage3DMultisampleNV.?(arg_8798, arg_8799, arg_8800, arg_8801, arg_8802, arg_8803, arg_8804, arg_8805);
}
pub inline fn glTextureLightEXT(arg_8806: GLenum) void {
    return epoxy_glTextureLightEXT.?(arg_8806);
}
pub inline fn glTextureMaterialEXT(arg_8807: GLenum, arg_8808: GLenum) void {
    return epoxy_glTextureMaterialEXT.?(arg_8807, arg_8808);
}
pub inline fn glTextureNormalEXT(arg_8809: GLenum) void {
    return epoxy_glTextureNormalEXT.?(arg_8809);
}
pub inline fn glTexturePageCommitmentEXT(arg_8810: GLuint, arg_8811: GLint, arg_8812: GLint, arg_8813: GLint, arg_8814: GLint, arg_8815: GLsizei, arg_8816: GLsizei, arg_8817: GLsizei, arg_8818: GLboolean) void {
    return epoxy_glTexturePageCommitmentEXT.?(arg_8810, arg_8811, arg_8812, arg_8813, arg_8814, arg_8815, arg_8816, arg_8817, arg_8818);
}
pub inline fn glTextureParameterIiv(arg_8819: GLuint, arg_8820: GLenum, arg_8821: [*c]const GLint) void {
    return epoxy_glTextureParameterIiv.?(arg_8819, arg_8820, arg_8821);
}
pub inline fn glTextureParameterIivEXT(arg_8822: GLuint, arg_8823: GLenum, arg_8824: GLenum, arg_8825: [*c]const GLint) void {
    return epoxy_glTextureParameterIivEXT.?(arg_8822, arg_8823, arg_8824, arg_8825);
}
pub inline fn glTextureParameterIuiv(arg_8826: GLuint, arg_8827: GLenum, arg_8828: [*c]const GLuint) void {
    return epoxy_glTextureParameterIuiv.?(arg_8826, arg_8827, arg_8828);
}
pub inline fn glTextureParameterIuivEXT(arg_8829: GLuint, arg_8830: GLenum, arg_8831: GLenum, arg_8832: [*c]const GLuint) void {
    return epoxy_glTextureParameterIuivEXT.?(arg_8829, arg_8830, arg_8831, arg_8832);
}
pub inline fn glTextureParameterf(arg_8833: GLuint, arg_8834: GLenum, arg_8835: GLfloat) void {
    return epoxy_glTextureParameterf.?(arg_8833, arg_8834, arg_8835);
}
pub inline fn glTextureParameterfEXT(arg_8836: GLuint, arg_8837: GLenum, arg_8838: GLenum, arg_8839: GLfloat) void {
    return epoxy_glTextureParameterfEXT.?(arg_8836, arg_8837, arg_8838, arg_8839);
}
pub inline fn glTextureParameterfv(arg_8840: GLuint, arg_8841: GLenum, arg_8842: [*c]const GLfloat) void {
    return epoxy_glTextureParameterfv.?(arg_8840, arg_8841, arg_8842);
}
pub inline fn glTextureParameterfvEXT(arg_8843: GLuint, arg_8844: GLenum, arg_8845: GLenum, arg_8846: [*c]const GLfloat) void {
    return epoxy_glTextureParameterfvEXT.?(arg_8843, arg_8844, arg_8845, arg_8846);
}
pub inline fn glTextureParameteri(arg_8847: GLuint, arg_8848: GLenum, arg_8849: GLint) void {
    return epoxy_glTextureParameteri.?(arg_8847, arg_8848, arg_8849);
}
pub inline fn glTextureParameteriEXT(arg_8850: GLuint, arg_8851: GLenum, arg_8852: GLenum, arg_8853: GLint) void {
    return epoxy_glTextureParameteriEXT.?(arg_8850, arg_8851, arg_8852, arg_8853);
}
pub inline fn glTextureParameteriv(arg_8854: GLuint, arg_8855: GLenum, arg_8856: [*c]const GLint) void {
    return epoxy_glTextureParameteriv.?(arg_8854, arg_8855, arg_8856);
}
pub inline fn glTextureParameterivEXT(arg_8857: GLuint, arg_8858: GLenum, arg_8859: GLenum, arg_8860: [*c]const GLint) void {
    return epoxy_glTextureParameterivEXT.?(arg_8857, arg_8858, arg_8859, arg_8860);
}
pub inline fn glTextureRangeAPPLE(arg_8861: GLenum, arg_8862: GLsizei, arg_8863: ?*const anyopaque) void {
    return epoxy_glTextureRangeAPPLE.?(arg_8861, arg_8862, arg_8863);
}
pub inline fn glTextureRenderbufferEXT(arg_8864: GLuint, arg_8865: GLenum, arg_8866: GLuint) void {
    return epoxy_glTextureRenderbufferEXT.?(arg_8864, arg_8865, arg_8866);
}
pub inline fn glTextureStorage1D(arg_8867: GLuint, arg_8868: GLsizei, arg_8869: GLenum, arg_8870: GLsizei) void {
    return epoxy_glTextureStorage1D.?(arg_8867, arg_8868, arg_8869, arg_8870);
}
pub inline fn glTextureStorage1DEXT(arg_8871: GLuint, arg_8872: GLenum, arg_8873: GLsizei, arg_8874: GLenum, arg_8875: GLsizei) void {
    return epoxy_glTextureStorage1DEXT.?(arg_8871, arg_8872, arg_8873, arg_8874, arg_8875);
}
pub inline fn glTextureStorage2D(arg_8876: GLuint, arg_8877: GLsizei, arg_8878: GLenum, arg_8879: GLsizei, arg_8880: GLsizei) void {
    return epoxy_glTextureStorage2D.?(arg_8876, arg_8877, arg_8878, arg_8879, arg_8880);
}
pub inline fn glTextureStorage2DEXT(arg_8881: GLuint, arg_8882: GLenum, arg_8883: GLsizei, arg_8884: GLenum, arg_8885: GLsizei, arg_8886: GLsizei) void {
    return epoxy_glTextureStorage2DEXT.?(arg_8881, arg_8882, arg_8883, arg_8884, arg_8885, arg_8886);
}
pub inline fn glTextureStorage2DMultisample(arg_8887: GLuint, arg_8888: GLsizei, arg_8889: GLenum, arg_8890: GLsizei, arg_8891: GLsizei, arg_8892: GLboolean) void {
    return epoxy_glTextureStorage2DMultisample.?(arg_8887, arg_8888, arg_8889, arg_8890, arg_8891, arg_8892);
}
pub inline fn glTextureStorage2DMultisampleEXT(arg_8893: GLuint, arg_8894: GLenum, arg_8895: GLsizei, arg_8896: GLenum, arg_8897: GLsizei, arg_8898: GLsizei, arg_8899: GLboolean) void {
    return epoxy_glTextureStorage2DMultisampleEXT.?(arg_8893, arg_8894, arg_8895, arg_8896, arg_8897, arg_8898, arg_8899);
}
pub inline fn glTextureStorage3D(arg_8900: GLuint, arg_8901: GLsizei, arg_8902: GLenum, arg_8903: GLsizei, arg_8904: GLsizei, arg_8905: GLsizei) void {
    return epoxy_glTextureStorage3D.?(arg_8900, arg_8901, arg_8902, arg_8903, arg_8904, arg_8905);
}
pub inline fn glTextureStorage3DEXT(arg_8906: GLuint, arg_8907: GLenum, arg_8908: GLsizei, arg_8909: GLenum, arg_8910: GLsizei, arg_8911: GLsizei, arg_8912: GLsizei) void {
    return epoxy_glTextureStorage3DEXT.?(arg_8906, arg_8907, arg_8908, arg_8909, arg_8910, arg_8911, arg_8912);
}
pub inline fn glTextureStorage3DMultisample(arg_8913: GLuint, arg_8914: GLsizei, arg_8915: GLenum, arg_8916: GLsizei, arg_8917: GLsizei, arg_8918: GLsizei, arg_8919: GLboolean) void {
    return epoxy_glTextureStorage3DMultisample.?(arg_8913, arg_8914, arg_8915, arg_8916, arg_8917, arg_8918, arg_8919);
}
pub inline fn glTextureStorage3DMultisampleEXT(arg_8920: GLuint, arg_8921: GLenum, arg_8922: GLsizei, arg_8923: GLenum, arg_8924: GLsizei, arg_8925: GLsizei, arg_8926: GLsizei, arg_8927: GLboolean) void {
    return epoxy_glTextureStorage3DMultisampleEXT.?(arg_8920, arg_8921, arg_8922, arg_8923, arg_8924, arg_8925, arg_8926, arg_8927);
}
pub inline fn glTextureStorageMem1DEXT(arg_8928: GLuint, arg_8929: GLsizei, arg_8930: GLenum, arg_8931: GLsizei, arg_8932: GLuint, arg_8933: GLuint64) void {
    return epoxy_glTextureStorageMem1DEXT.?(arg_8928, arg_8929, arg_8930, arg_8931, arg_8932, arg_8933);
}
pub inline fn glTextureStorageMem2DEXT(arg_8934: GLuint, arg_8935: GLsizei, arg_8936: GLenum, arg_8937: GLsizei, arg_8938: GLsizei, arg_8939: GLuint, arg_8940: GLuint64) void {
    return epoxy_glTextureStorageMem2DEXT.?(arg_8934, arg_8935, arg_8936, arg_8937, arg_8938, arg_8939, arg_8940);
}
pub inline fn glTextureStorageMem2DMultisampleEXT(arg_8941: GLuint, arg_8942: GLsizei, arg_8943: GLenum, arg_8944: GLsizei, arg_8945: GLsizei, arg_8946: GLboolean, arg_8947: GLuint, arg_8948: GLuint64) void {
    return epoxy_glTextureStorageMem2DMultisampleEXT.?(arg_8941, arg_8942, arg_8943, arg_8944, arg_8945, arg_8946, arg_8947, arg_8948);
}
pub inline fn glTextureStorageMem3DEXT(arg_8949: GLuint, arg_8950: GLsizei, arg_8951: GLenum, arg_8952: GLsizei, arg_8953: GLsizei, arg_8954: GLsizei, arg_8955: GLuint, arg_8956: GLuint64) void {
    return epoxy_glTextureStorageMem3DEXT.?(arg_8949, arg_8950, arg_8951, arg_8952, arg_8953, arg_8954, arg_8955, arg_8956);
}
pub inline fn glTextureStorageMem3DMultisampleEXT(arg_8957: GLuint, arg_8958: GLsizei, arg_8959: GLenum, arg_8960: GLsizei, arg_8961: GLsizei, arg_8962: GLsizei, arg_8963: GLboolean, arg_8964: GLuint, arg_8965: GLuint64) void {
    return epoxy_glTextureStorageMem3DMultisampleEXT.?(arg_8957, arg_8958, arg_8959, arg_8960, arg_8961, arg_8962, arg_8963, arg_8964, arg_8965);
}
pub inline fn glTextureStorageSparseAMD(arg_8966: GLuint, arg_8967: GLenum, arg_8968: GLenum, arg_8969: GLsizei, arg_8970: GLsizei, arg_8971: GLsizei, arg_8972: GLsizei, arg_8973: GLbitfield) void {
    return epoxy_glTextureStorageSparseAMD.?(arg_8966, arg_8967, arg_8968, arg_8969, arg_8970, arg_8971, arg_8972, arg_8973);
}
pub inline fn glTextureSubImage1D(arg_8974: GLuint, arg_8975: GLint, arg_8976: GLint, arg_8977: GLsizei, arg_8978: GLenum, arg_8979: GLenum, arg_8980: ?*const anyopaque) void {
    return epoxy_glTextureSubImage1D.?(arg_8974, arg_8975, arg_8976, arg_8977, arg_8978, arg_8979, arg_8980);
}
pub inline fn glTextureSubImage1DEXT(arg_8981: GLuint, arg_8982: GLenum, arg_8983: GLint, arg_8984: GLint, arg_8985: GLsizei, arg_8986: GLenum, arg_8987: GLenum, arg_8988: ?*const anyopaque) void {
    return epoxy_glTextureSubImage1DEXT.?(arg_8981, arg_8982, arg_8983, arg_8984, arg_8985, arg_8986, arg_8987, arg_8988);
}
pub inline fn glTextureSubImage2D(arg_8989: GLuint, arg_8990: GLint, arg_8991: GLint, arg_8992: GLint, arg_8993: GLsizei, arg_8994: GLsizei, arg_8995: GLenum, arg_8996: GLenum, arg_8997: ?*const anyopaque) void {
    return epoxy_glTextureSubImage2D.?(arg_8989, arg_8990, arg_8991, arg_8992, arg_8993, arg_8994, arg_8995, arg_8996, arg_8997);
}
pub inline fn glTextureSubImage2DEXT(arg_8998: GLuint, arg_8999: GLenum, arg_9000: GLint, arg_9001: GLint, arg_9002: GLint, arg_9003: GLsizei, arg_9004: GLsizei, arg_9005: GLenum, arg_9006: GLenum, arg_9007: ?*const anyopaque) void {
    return epoxy_glTextureSubImage2DEXT.?(arg_8998, arg_8999, arg_9000, arg_9001, arg_9002, arg_9003, arg_9004, arg_9005, arg_9006, arg_9007);
}
pub inline fn glTextureSubImage3D(arg_9008: GLuint, arg_9009: GLint, arg_9010: GLint, arg_9011: GLint, arg_9012: GLint, arg_9013: GLsizei, arg_9014: GLsizei, arg_9015: GLsizei, arg_9016: GLenum, arg_9017: GLenum, arg_9018: ?*const anyopaque) void {
    return epoxy_glTextureSubImage3D.?(arg_9008, arg_9009, arg_9010, arg_9011, arg_9012, arg_9013, arg_9014, arg_9015, arg_9016, arg_9017, arg_9018);
}
pub inline fn glTextureSubImage3DEXT(arg_9019: GLuint, arg_9020: GLenum, arg_9021: GLint, arg_9022: GLint, arg_9023: GLint, arg_9024: GLint, arg_9025: GLsizei, arg_9026: GLsizei, arg_9027: GLsizei, arg_9028: GLenum, arg_9029: GLenum, arg_9030: ?*const anyopaque) void {
    return epoxy_glTextureSubImage3DEXT.?(arg_9019, arg_9020, arg_9021, arg_9022, arg_9023, arg_9024, arg_9025, arg_9026, arg_9027, arg_9028, arg_9029, arg_9030);
}
pub inline fn glTextureView(arg_9031: GLuint, arg_9032: GLenum, arg_9033: GLuint, arg_9034: GLenum, arg_9035: GLuint, arg_9036: GLuint, arg_9037: GLuint, arg_9038: GLuint) void {
    return epoxy_glTextureView.?(arg_9031, arg_9032, arg_9033, arg_9034, arg_9035, arg_9036, arg_9037, arg_9038);
}
pub inline fn glTextureViewEXT(arg_9039: GLuint, arg_9040: GLenum, arg_9041: GLuint, arg_9042: GLenum, arg_9043: GLuint, arg_9044: GLuint, arg_9045: GLuint, arg_9046: GLuint) void {
    return epoxy_glTextureViewEXT.?(arg_9039, arg_9040, arg_9041, arg_9042, arg_9043, arg_9044, arg_9045, arg_9046);
}
pub inline fn glTextureViewOES(arg_9047: GLuint, arg_9048: GLenum, arg_9049: GLuint, arg_9050: GLenum, arg_9051: GLuint, arg_9052: GLuint, arg_9053: GLuint, arg_9054: GLuint) void {
    return epoxy_glTextureViewOES.?(arg_9047, arg_9048, arg_9049, arg_9050, arg_9051, arg_9052, arg_9053, arg_9054);
}
pub inline fn glTrackMatrixNV(arg_9055: GLenum, arg_9056: GLuint, arg_9057: GLenum, arg_9058: GLenum) void {
    return epoxy_glTrackMatrixNV.?(arg_9055, arg_9056, arg_9057, arg_9058);
}
pub inline fn glTransformFeedbackAttribsNV(arg_9059: GLsizei, arg_9060: [*c]const GLint, arg_9061: GLenum) void {
    return epoxy_glTransformFeedbackAttribsNV.?(arg_9059, arg_9060, arg_9061);
}
pub inline fn glTransformFeedbackBufferBase(arg_9062: GLuint, arg_9063: GLuint, arg_9064: GLuint) void {
    return epoxy_glTransformFeedbackBufferBase.?(arg_9062, arg_9063, arg_9064);
}
pub inline fn glTransformFeedbackBufferRange(arg_9065: GLuint, arg_9066: GLuint, arg_9067: GLuint, arg_9068: GLintptr, arg_9069: GLsizeiptr) void {
    return epoxy_glTransformFeedbackBufferRange.?(arg_9065, arg_9066, arg_9067, arg_9068, arg_9069);
}
pub inline fn glTransformFeedbackStreamAttribsNV(arg_9070: GLsizei, arg_9071: [*c]const GLint, arg_9072: GLsizei, arg_9073: [*c]const GLint, arg_9074: GLenum) void {
    return epoxy_glTransformFeedbackStreamAttribsNV.?(arg_9070, arg_9071, arg_9072, arg_9073, arg_9074);
}
pub inline fn glTransformFeedbackVaryings(arg_9075: GLuint, arg_9076: GLsizei, arg_9077: [*c]const [*c]const GLchar, arg_9078: GLenum) void {
    return epoxy_glTransformFeedbackVaryings.?(arg_9075, arg_9076, arg_9077, arg_9078);
}
pub inline fn glTransformFeedbackVaryingsEXT(arg_9079: GLuint, arg_9080: GLsizei, arg_9081: [*c]const [*c]const GLchar, arg_9082: GLenum) void {
    return epoxy_glTransformFeedbackVaryingsEXT.?(arg_9079, arg_9080, arg_9081, arg_9082);
}
pub inline fn glTransformFeedbackVaryingsNV(arg_9083: GLuint, arg_9084: GLsizei, arg_9085: [*c]const GLint, arg_9086: GLenum) void {
    return epoxy_glTransformFeedbackVaryingsNV.?(arg_9083, arg_9084, arg_9085, arg_9086);
}
pub inline fn glTransformPathNV(arg_9087: GLuint, arg_9088: GLuint, arg_9089: GLenum, arg_9090: [*c]const GLfloat) void {
    return epoxy_glTransformPathNV.?(arg_9087, arg_9088, arg_9089, arg_9090);
}
pub inline fn glTranslated(arg_9091: GLdouble, arg_9092: GLdouble, arg_9093: GLdouble) void {
    return epoxy_glTranslated.?(arg_9091, arg_9092, arg_9093);
}
pub inline fn glTranslatef(arg_9094: GLfloat, arg_9095: GLfloat, arg_9096: GLfloat) void {
    return epoxy_glTranslatef.?(arg_9094, arg_9095, arg_9096);
}
pub inline fn glTranslatex(arg_9097: GLfixed, arg_9098: GLfixed, arg_9099: GLfixed) void {
    return epoxy_glTranslatex.?(arg_9097, arg_9098, arg_9099);
}
pub inline fn glTranslatexOES(arg_9100: GLfixed, arg_9101: GLfixed, arg_9102: GLfixed) void {
    return epoxy_glTranslatexOES.?(arg_9100, arg_9101, arg_9102);
}
pub inline fn glUniform1d(arg_9103: GLint, arg_9104: GLdouble) void {
    return epoxy_glUniform1d.?(arg_9103, arg_9104);
}
pub inline fn glUniform1dv(arg_9105: GLint, arg_9106: GLsizei, arg_9107: [*c]const GLdouble) void {
    return epoxy_glUniform1dv.?(arg_9105, arg_9106, arg_9107);
}
pub inline fn glUniform1f(arg_9108: GLint, arg_9109: GLfloat) void {
    return epoxy_glUniform1f.?(arg_9108, arg_9109);
}
pub inline fn glUniform1fARB(arg_9110: GLint, arg_9111: GLfloat) void {
    return epoxy_glUniform1fARB.?(arg_9110, arg_9111);
}
pub inline fn glUniform1fv(arg_9112: GLint, arg_9113: GLsizei, arg_9114: [*c]const GLfloat) void {
    return epoxy_glUniform1fv.?(arg_9112, arg_9113, arg_9114);
}
pub inline fn glUniform1fvARB(arg_9115: GLint, arg_9116: GLsizei, arg_9117: [*c]const GLfloat) void {
    return epoxy_glUniform1fvARB.?(arg_9115, arg_9116, arg_9117);
}
pub inline fn glUniform1i(arg_9118: GLint, arg_9119: GLint) void {
    return epoxy_glUniform1i.?(arg_9118, arg_9119);
}
pub inline fn glUniform1i64ARB(arg_9120: GLint, arg_9121: GLint64) void {
    return epoxy_glUniform1i64ARB.?(arg_9120, arg_9121);
}
pub inline fn glUniform1i64NV(arg_9122: GLint, arg_9123: GLint64EXT) void {
    return epoxy_glUniform1i64NV.?(arg_9122, arg_9123);
}
pub inline fn glUniform1i64vARB(arg_9124: GLint, arg_9125: GLsizei, arg_9126: [*c]const GLint64) void {
    return epoxy_glUniform1i64vARB.?(arg_9124, arg_9125, arg_9126);
}
pub inline fn glUniform1i64vNV(arg_9127: GLint, arg_9128: GLsizei, arg_9129: [*c]const GLint64EXT) void {
    return epoxy_glUniform1i64vNV.?(arg_9127, arg_9128, arg_9129);
}
pub inline fn glUniform1iARB(arg_9130: GLint, arg_9131: GLint) void {
    return epoxy_glUniform1iARB.?(arg_9130, arg_9131);
}
pub inline fn glUniform1iv(arg_9132: GLint, arg_9133: GLsizei, arg_9134: [*c]const GLint) void {
    return epoxy_glUniform1iv.?(arg_9132, arg_9133, arg_9134);
}
pub inline fn glUniform1ivARB(arg_9135: GLint, arg_9136: GLsizei, arg_9137: [*c]const GLint) void {
    return epoxy_glUniform1ivARB.?(arg_9135, arg_9136, arg_9137);
}
pub inline fn glUniform1ui(arg_9138: GLint, arg_9139: GLuint) void {
    return epoxy_glUniform1ui.?(arg_9138, arg_9139);
}
pub inline fn glUniform1ui64ARB(arg_9140: GLint, arg_9141: GLuint64) void {
    return epoxy_glUniform1ui64ARB.?(arg_9140, arg_9141);
}
pub inline fn glUniform1ui64NV(arg_9142: GLint, arg_9143: GLuint64EXT) void {
    return epoxy_glUniform1ui64NV.?(arg_9142, arg_9143);
}
pub inline fn glUniform1ui64vARB(arg_9144: GLint, arg_9145: GLsizei, arg_9146: [*c]const GLuint64) void {
    return epoxy_glUniform1ui64vARB.?(arg_9144, arg_9145, arg_9146);
}
pub inline fn glUniform1ui64vNV(arg_9147: GLint, arg_9148: GLsizei, arg_9149: [*c]const GLuint64EXT) void {
    return epoxy_glUniform1ui64vNV.?(arg_9147, arg_9148, arg_9149);
}
pub inline fn glUniform1uiEXT(arg_9150: GLint, arg_9151: GLuint) void {
    return epoxy_glUniform1uiEXT.?(arg_9150, arg_9151);
}
pub inline fn glUniform1uiv(arg_9152: GLint, arg_9153: GLsizei, arg_9154: [*c]const GLuint) void {
    return epoxy_glUniform1uiv.?(arg_9152, arg_9153, arg_9154);
}
pub inline fn glUniform1uivEXT(arg_9155: GLint, arg_9156: GLsizei, arg_9157: [*c]const GLuint) void {
    return epoxy_glUniform1uivEXT.?(arg_9155, arg_9156, arg_9157);
}
pub inline fn glUniform2d(arg_9158: GLint, arg_9159: GLdouble, arg_9160: GLdouble) void {
    return epoxy_glUniform2d.?(arg_9158, arg_9159, arg_9160);
}
pub inline fn glUniform2dv(arg_9161: GLint, arg_9162: GLsizei, arg_9163: [*c]const GLdouble) void {
    return epoxy_glUniform2dv.?(arg_9161, arg_9162, arg_9163);
}
pub inline fn glUniform2f(arg_9164: GLint, arg_9165: GLfloat, arg_9166: GLfloat) void {
    return epoxy_glUniform2f.?(arg_9164, arg_9165, arg_9166);
}
pub inline fn glUniform2fARB(arg_9167: GLint, arg_9168: GLfloat, arg_9169: GLfloat) void {
    return epoxy_glUniform2fARB.?(arg_9167, arg_9168, arg_9169);
}
pub inline fn glUniform2fv(arg_9170: GLint, arg_9171: GLsizei, arg_9172: [*c]const GLfloat) void {
    return epoxy_glUniform2fv.?(arg_9170, arg_9171, arg_9172);
}
pub inline fn glUniform2fvARB(arg_9173: GLint, arg_9174: GLsizei, arg_9175: [*c]const GLfloat) void {
    return epoxy_glUniform2fvARB.?(arg_9173, arg_9174, arg_9175);
}
pub inline fn glUniform2i(arg_9176: GLint, arg_9177: GLint, arg_9178: GLint) void {
    return epoxy_glUniform2i.?(arg_9176, arg_9177, arg_9178);
}
pub inline fn glUniform2i64ARB(arg_9179: GLint, arg_9180: GLint64, arg_9181: GLint64) void {
    return epoxy_glUniform2i64ARB.?(arg_9179, arg_9180, arg_9181);
}
pub inline fn glUniform2i64NV(arg_9182: GLint, arg_9183: GLint64EXT, arg_9184: GLint64EXT) void {
    return epoxy_glUniform2i64NV.?(arg_9182, arg_9183, arg_9184);
}
pub inline fn glUniform2i64vARB(arg_9185: GLint, arg_9186: GLsizei, arg_9187: [*c]const GLint64) void {
    return epoxy_glUniform2i64vARB.?(arg_9185, arg_9186, arg_9187);
}
pub inline fn glUniform2i64vNV(arg_9188: GLint, arg_9189: GLsizei, arg_9190: [*c]const GLint64EXT) void {
    return epoxy_glUniform2i64vNV.?(arg_9188, arg_9189, arg_9190);
}
pub inline fn glUniform2iARB(arg_9191: GLint, arg_9192: GLint, arg_9193: GLint) void {
    return epoxy_glUniform2iARB.?(arg_9191, arg_9192, arg_9193);
}
pub inline fn glUniform2iv(arg_9194: GLint, arg_9195: GLsizei, arg_9196: [*c]const GLint) void {
    return epoxy_glUniform2iv.?(arg_9194, arg_9195, arg_9196);
}
pub inline fn glUniform2ivARB(arg_9197: GLint, arg_9198: GLsizei, arg_9199: [*c]const GLint) void {
    return epoxy_glUniform2ivARB.?(arg_9197, arg_9198, arg_9199);
}
pub inline fn glUniform2ui(arg_9200: GLint, arg_9201: GLuint, arg_9202: GLuint) void {
    return epoxy_glUniform2ui.?(arg_9200, arg_9201, arg_9202);
}
pub inline fn glUniform2ui64ARB(arg_9203: GLint, arg_9204: GLuint64, arg_9205: GLuint64) void {
    return epoxy_glUniform2ui64ARB.?(arg_9203, arg_9204, arg_9205);
}
pub inline fn glUniform2ui64NV(arg_9206: GLint, arg_9207: GLuint64EXT, arg_9208: GLuint64EXT) void {
    return epoxy_glUniform2ui64NV.?(arg_9206, arg_9207, arg_9208);
}
pub inline fn glUniform2ui64vARB(arg_9209: GLint, arg_9210: GLsizei, arg_9211: [*c]const GLuint64) void {
    return epoxy_glUniform2ui64vARB.?(arg_9209, arg_9210, arg_9211);
}
pub inline fn glUniform2ui64vNV(arg_9212: GLint, arg_9213: GLsizei, arg_9214: [*c]const GLuint64EXT) void {
    return epoxy_glUniform2ui64vNV.?(arg_9212, arg_9213, arg_9214);
}
pub inline fn glUniform2uiEXT(arg_9215: GLint, arg_9216: GLuint, arg_9217: GLuint) void {
    return epoxy_glUniform2uiEXT.?(arg_9215, arg_9216, arg_9217);
}
pub inline fn glUniform2uiv(arg_9218: GLint, arg_9219: GLsizei, arg_9220: [*c]const GLuint) void {
    return epoxy_glUniform2uiv.?(arg_9218, arg_9219, arg_9220);
}
pub inline fn glUniform2uivEXT(arg_9221: GLint, arg_9222: GLsizei, arg_9223: [*c]const GLuint) void {
    return epoxy_glUniform2uivEXT.?(arg_9221, arg_9222, arg_9223);
}
pub inline fn glUniform3d(arg_9224: GLint, arg_9225: GLdouble, arg_9226: GLdouble, arg_9227: GLdouble) void {
    return epoxy_glUniform3d.?(arg_9224, arg_9225, arg_9226, arg_9227);
}
pub inline fn glUniform3dv(arg_9228: GLint, arg_9229: GLsizei, arg_9230: [*c]const GLdouble) void {
    return epoxy_glUniform3dv.?(arg_9228, arg_9229, arg_9230);
}
pub inline fn glUniform3f(arg_9231: GLint, arg_9232: GLfloat, arg_9233: GLfloat, arg_9234: GLfloat) void {
    return epoxy_glUniform3f.?(arg_9231, arg_9232, arg_9233, arg_9234);
}
pub inline fn glUniform3fARB(arg_9235: GLint, arg_9236: GLfloat, arg_9237: GLfloat, arg_9238: GLfloat) void {
    return epoxy_glUniform3fARB.?(arg_9235, arg_9236, arg_9237, arg_9238);
}
pub inline fn glUniform3fv(arg_9239: GLint, arg_9240: GLsizei, arg_9241: [*c]const GLfloat) void {
    return epoxy_glUniform3fv.?(arg_9239, arg_9240, arg_9241);
}
pub inline fn glUniform3fvARB(arg_9242: GLint, arg_9243: GLsizei, arg_9244: [*c]const GLfloat) void {
    return epoxy_glUniform3fvARB.?(arg_9242, arg_9243, arg_9244);
}
pub inline fn glUniform3i(arg_9245: GLint, arg_9246: GLint, arg_9247: GLint, arg_9248: GLint) void {
    return epoxy_glUniform3i.?(arg_9245, arg_9246, arg_9247, arg_9248);
}
pub inline fn glUniform3i64ARB(arg_9249: GLint, arg_9250: GLint64, arg_9251: GLint64, arg_9252: GLint64) void {
    return epoxy_glUniform3i64ARB.?(arg_9249, arg_9250, arg_9251, arg_9252);
}
pub inline fn glUniform3i64NV(arg_9253: GLint, arg_9254: GLint64EXT, arg_9255: GLint64EXT, arg_9256: GLint64EXT) void {
    return epoxy_glUniform3i64NV.?(arg_9253, arg_9254, arg_9255, arg_9256);
}
pub inline fn glUniform3i64vARB(arg_9257: GLint, arg_9258: GLsizei, arg_9259: [*c]const GLint64) void {
    return epoxy_glUniform3i64vARB.?(arg_9257, arg_9258, arg_9259);
}
pub inline fn glUniform3i64vNV(arg_9260: GLint, arg_9261: GLsizei, arg_9262: [*c]const GLint64EXT) void {
    return epoxy_glUniform3i64vNV.?(arg_9260, arg_9261, arg_9262);
}
pub inline fn glUniform3iARB(arg_9263: GLint, arg_9264: GLint, arg_9265: GLint, arg_9266: GLint) void {
    return epoxy_glUniform3iARB.?(arg_9263, arg_9264, arg_9265, arg_9266);
}
pub inline fn glUniform3iv(arg_9267: GLint, arg_9268: GLsizei, arg_9269: [*c]const GLint) void {
    return epoxy_glUniform3iv.?(arg_9267, arg_9268, arg_9269);
}
pub inline fn glUniform3ivARB(arg_9270: GLint, arg_9271: GLsizei, arg_9272: [*c]const GLint) void {
    return epoxy_glUniform3ivARB.?(arg_9270, arg_9271, arg_9272);
}
pub inline fn glUniform3ui(arg_9273: GLint, arg_9274: GLuint, arg_9275: GLuint, arg_9276: GLuint) void {
    return epoxy_glUniform3ui.?(arg_9273, arg_9274, arg_9275, arg_9276);
}
pub inline fn glUniform3ui64ARB(arg_9277: GLint, arg_9278: GLuint64, arg_9279: GLuint64, arg_9280: GLuint64) void {
    return epoxy_glUniform3ui64ARB.?(arg_9277, arg_9278, arg_9279, arg_9280);
}
pub inline fn glUniform3ui64NV(arg_9281: GLint, arg_9282: GLuint64EXT, arg_9283: GLuint64EXT, arg_9284: GLuint64EXT) void {
    return epoxy_glUniform3ui64NV.?(arg_9281, arg_9282, arg_9283, arg_9284);
}
pub inline fn glUniform3ui64vARB(arg_9285: GLint, arg_9286: GLsizei, arg_9287: [*c]const GLuint64) void {
    return epoxy_glUniform3ui64vARB.?(arg_9285, arg_9286, arg_9287);
}
pub inline fn glUniform3ui64vNV(arg_9288: GLint, arg_9289: GLsizei, arg_9290: [*c]const GLuint64EXT) void {
    return epoxy_glUniform3ui64vNV.?(arg_9288, arg_9289, arg_9290);
}
pub inline fn glUniform3uiEXT(arg_9291: GLint, arg_9292: GLuint, arg_9293: GLuint, arg_9294: GLuint) void {
    return epoxy_glUniform3uiEXT.?(arg_9291, arg_9292, arg_9293, arg_9294);
}
pub inline fn glUniform3uiv(arg_9295: GLint, arg_9296: GLsizei, arg_9297: [*c]const GLuint) void {
    return epoxy_glUniform3uiv.?(arg_9295, arg_9296, arg_9297);
}
pub inline fn glUniform3uivEXT(arg_9298: GLint, arg_9299: GLsizei, arg_9300: [*c]const GLuint) void {
    return epoxy_glUniform3uivEXT.?(arg_9298, arg_9299, arg_9300);
}
pub inline fn glUniform4d(arg_9301: GLint, arg_9302: GLdouble, arg_9303: GLdouble, arg_9304: GLdouble, arg_9305: GLdouble) void {
    return epoxy_glUniform4d.?(arg_9301, arg_9302, arg_9303, arg_9304, arg_9305);
}
pub inline fn glUniform4dv(arg_9306: GLint, arg_9307: GLsizei, arg_9308: [*c]const GLdouble) void {
    return epoxy_glUniform4dv.?(arg_9306, arg_9307, arg_9308);
}
pub inline fn glUniform4f(arg_9309: GLint, arg_9310: GLfloat, arg_9311: GLfloat, arg_9312: GLfloat, arg_9313: GLfloat) void {
    return epoxy_glUniform4f.?(arg_9309, arg_9310, arg_9311, arg_9312, arg_9313);
}
pub inline fn glUniform4fARB(arg_9314: GLint, arg_9315: GLfloat, arg_9316: GLfloat, arg_9317: GLfloat, arg_9318: GLfloat) void {
    return epoxy_glUniform4fARB.?(arg_9314, arg_9315, arg_9316, arg_9317, arg_9318);
}
pub inline fn glUniform4fv(arg_9319: GLint, arg_9320: GLsizei, arg_9321: [*c]const GLfloat) void {
    return epoxy_glUniform4fv.?(arg_9319, arg_9320, arg_9321);
}
pub inline fn glUniform4fvARB(arg_9322: GLint, arg_9323: GLsizei, arg_9324: [*c]const GLfloat) void {
    return epoxy_glUniform4fvARB.?(arg_9322, arg_9323, arg_9324);
}
pub inline fn glUniform4i(arg_9325: GLint, arg_9326: GLint, arg_9327: GLint, arg_9328: GLint, arg_9329: GLint) void {
    return epoxy_glUniform4i.?(arg_9325, arg_9326, arg_9327, arg_9328, arg_9329);
}
pub inline fn glUniform4i64ARB(arg_9330: GLint, arg_9331: GLint64, arg_9332: GLint64, arg_9333: GLint64, arg_9334: GLint64) void {
    return epoxy_glUniform4i64ARB.?(arg_9330, arg_9331, arg_9332, arg_9333, arg_9334);
}
pub inline fn glUniform4i64NV(arg_9335: GLint, arg_9336: GLint64EXT, arg_9337: GLint64EXT, arg_9338: GLint64EXT, arg_9339: GLint64EXT) void {
    return epoxy_glUniform4i64NV.?(arg_9335, arg_9336, arg_9337, arg_9338, arg_9339);
}
pub inline fn glUniform4i64vARB(arg_9340: GLint, arg_9341: GLsizei, arg_9342: [*c]const GLint64) void {
    return epoxy_glUniform4i64vARB.?(arg_9340, arg_9341, arg_9342);
}
pub inline fn glUniform4i64vNV(arg_9343: GLint, arg_9344: GLsizei, arg_9345: [*c]const GLint64EXT) void {
    return epoxy_glUniform4i64vNV.?(arg_9343, arg_9344, arg_9345);
}
pub inline fn glUniform4iARB(arg_9346: GLint, arg_9347: GLint, arg_9348: GLint, arg_9349: GLint, arg_9350: GLint) void {
    return epoxy_glUniform4iARB.?(arg_9346, arg_9347, arg_9348, arg_9349, arg_9350);
}
pub inline fn glUniform4iv(arg_9351: GLint, arg_9352: GLsizei, arg_9353: [*c]const GLint) void {
    return epoxy_glUniform4iv.?(arg_9351, arg_9352, arg_9353);
}
pub inline fn glUniform4ivARB(arg_9354: GLint, arg_9355: GLsizei, arg_9356: [*c]const GLint) void {
    return epoxy_glUniform4ivARB.?(arg_9354, arg_9355, arg_9356);
}
pub inline fn glUniform4ui(arg_9357: GLint, arg_9358: GLuint, arg_9359: GLuint, arg_9360: GLuint, arg_9361: GLuint) void {
    return epoxy_glUniform4ui.?(arg_9357, arg_9358, arg_9359, arg_9360, arg_9361);
}
pub inline fn glUniform4ui64ARB(arg_9362: GLint, arg_9363: GLuint64, arg_9364: GLuint64, arg_9365: GLuint64, arg_9366: GLuint64) void {
    return epoxy_glUniform4ui64ARB.?(arg_9362, arg_9363, arg_9364, arg_9365, arg_9366);
}
pub inline fn glUniform4ui64NV(arg_9367: GLint, arg_9368: GLuint64EXT, arg_9369: GLuint64EXT, arg_9370: GLuint64EXT, arg_9371: GLuint64EXT) void {
    return epoxy_glUniform4ui64NV.?(arg_9367, arg_9368, arg_9369, arg_9370, arg_9371);
}
pub inline fn glUniform4ui64vARB(arg_9372: GLint, arg_9373: GLsizei, arg_9374: [*c]const GLuint64) void {
    return epoxy_glUniform4ui64vARB.?(arg_9372, arg_9373, arg_9374);
}
pub inline fn glUniform4ui64vNV(arg_9375: GLint, arg_9376: GLsizei, arg_9377: [*c]const GLuint64EXT) void {
    return epoxy_glUniform4ui64vNV.?(arg_9375, arg_9376, arg_9377);
}
pub inline fn glUniform4uiEXT(arg_9378: GLint, arg_9379: GLuint, arg_9380: GLuint, arg_9381: GLuint, arg_9382: GLuint) void {
    return epoxy_glUniform4uiEXT.?(arg_9378, arg_9379, arg_9380, arg_9381, arg_9382);
}
pub inline fn glUniform4uiv(arg_9383: GLint, arg_9384: GLsizei, arg_9385: [*c]const GLuint) void {
    return epoxy_glUniform4uiv.?(arg_9383, arg_9384, arg_9385);
}
pub inline fn glUniform4uivEXT(arg_9386: GLint, arg_9387: GLsizei, arg_9388: [*c]const GLuint) void {
    return epoxy_glUniform4uivEXT.?(arg_9386, arg_9387, arg_9388);
}
pub inline fn glUniformBlockBinding(arg_9389: GLuint, arg_9390: GLuint, arg_9391: GLuint) void {
    return epoxy_glUniformBlockBinding.?(arg_9389, arg_9390, arg_9391);
}
pub inline fn glUniformBufferEXT(arg_9392: GLuint, arg_9393: GLint, arg_9394: GLuint) void {
    return epoxy_glUniformBufferEXT.?(arg_9392, arg_9393, arg_9394);
}
pub inline fn glUniformHandleui64ARB(arg_9395: GLint, arg_9396: GLuint64) void {
    return epoxy_glUniformHandleui64ARB.?(arg_9395, arg_9396);
}
pub inline fn glUniformHandleui64IMG(arg_9397: GLint, arg_9398: GLuint64) void {
    return epoxy_glUniformHandleui64IMG.?(arg_9397, arg_9398);
}
pub inline fn glUniformHandleui64NV(arg_9399: GLint, arg_9400: GLuint64) void {
    return epoxy_glUniformHandleui64NV.?(arg_9399, arg_9400);
}
pub inline fn glUniformHandleui64vARB(arg_9401: GLint, arg_9402: GLsizei, arg_9403: [*c]const GLuint64) void {
    return epoxy_glUniformHandleui64vARB.?(arg_9401, arg_9402, arg_9403);
}
pub inline fn glUniformHandleui64vIMG(arg_9404: GLint, arg_9405: GLsizei, arg_9406: [*c]const GLuint64) void {
    return epoxy_glUniformHandleui64vIMG.?(arg_9404, arg_9405, arg_9406);
}
pub inline fn glUniformHandleui64vNV(arg_9407: GLint, arg_9408: GLsizei, arg_9409: [*c]const GLuint64) void {
    return epoxy_glUniformHandleui64vNV.?(arg_9407, arg_9408, arg_9409);
}
pub inline fn glUniformMatrix2dv(arg_9410: GLint, arg_9411: GLsizei, arg_9412: GLboolean, arg_9413: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix2dv.?(arg_9410, arg_9411, arg_9412, arg_9413);
}
pub inline fn glUniformMatrix2fv(arg_9414: GLint, arg_9415: GLsizei, arg_9416: GLboolean, arg_9417: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2fv.?(arg_9414, arg_9415, arg_9416, arg_9417);
}
pub inline fn glUniformMatrix2fvARB(arg_9418: GLint, arg_9419: GLsizei, arg_9420: GLboolean, arg_9421: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2fvARB.?(arg_9418, arg_9419, arg_9420, arg_9421);
}
pub inline fn glUniformMatrix2x3dv(arg_9422: GLint, arg_9423: GLsizei, arg_9424: GLboolean, arg_9425: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix2x3dv.?(arg_9422, arg_9423, arg_9424, arg_9425);
}
pub inline fn glUniformMatrix2x3fv(arg_9426: GLint, arg_9427: GLsizei, arg_9428: GLboolean, arg_9429: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2x3fv.?(arg_9426, arg_9427, arg_9428, arg_9429);
}
pub inline fn glUniformMatrix2x3fvNV(arg_9430: GLint, arg_9431: GLsizei, arg_9432: GLboolean, arg_9433: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2x3fvNV.?(arg_9430, arg_9431, arg_9432, arg_9433);
}
pub inline fn glUniformMatrix2x4dv(arg_9434: GLint, arg_9435: GLsizei, arg_9436: GLboolean, arg_9437: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix2x4dv.?(arg_9434, arg_9435, arg_9436, arg_9437);
}
pub inline fn glUniformMatrix2x4fv(arg_9438: GLint, arg_9439: GLsizei, arg_9440: GLboolean, arg_9441: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2x4fv.?(arg_9438, arg_9439, arg_9440, arg_9441);
}
pub inline fn glUniformMatrix2x4fvNV(arg_9442: GLint, arg_9443: GLsizei, arg_9444: GLboolean, arg_9445: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2x4fvNV.?(arg_9442, arg_9443, arg_9444, arg_9445);
}
pub inline fn glUniformMatrix3dv(arg_9446: GLint, arg_9447: GLsizei, arg_9448: GLboolean, arg_9449: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix3dv.?(arg_9446, arg_9447, arg_9448, arg_9449);
}
pub inline fn glUniformMatrix3fv(arg_9450: GLint, arg_9451: GLsizei, arg_9452: GLboolean, arg_9453: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3fv.?(arg_9450, arg_9451, arg_9452, arg_9453);
}
pub inline fn glUniformMatrix3fvARB(arg_9454: GLint, arg_9455: GLsizei, arg_9456: GLboolean, arg_9457: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3fvARB.?(arg_9454, arg_9455, arg_9456, arg_9457);
}
pub inline fn glUniformMatrix3x2dv(arg_9458: GLint, arg_9459: GLsizei, arg_9460: GLboolean, arg_9461: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix3x2dv.?(arg_9458, arg_9459, arg_9460, arg_9461);
}
pub inline fn glUniformMatrix3x2fv(arg_9462: GLint, arg_9463: GLsizei, arg_9464: GLboolean, arg_9465: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3x2fv.?(arg_9462, arg_9463, arg_9464, arg_9465);
}
pub inline fn glUniformMatrix3x2fvNV(arg_9466: GLint, arg_9467: GLsizei, arg_9468: GLboolean, arg_9469: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3x2fvNV.?(arg_9466, arg_9467, arg_9468, arg_9469);
}
pub inline fn glUniformMatrix3x4dv(arg_9470: GLint, arg_9471: GLsizei, arg_9472: GLboolean, arg_9473: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix3x4dv.?(arg_9470, arg_9471, arg_9472, arg_9473);
}
pub inline fn glUniformMatrix3x4fv(arg_9474: GLint, arg_9475: GLsizei, arg_9476: GLboolean, arg_9477: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3x4fv.?(arg_9474, arg_9475, arg_9476, arg_9477);
}
pub inline fn glUniformMatrix3x4fvNV(arg_9478: GLint, arg_9479: GLsizei, arg_9480: GLboolean, arg_9481: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3x4fvNV.?(arg_9478, arg_9479, arg_9480, arg_9481);
}
pub inline fn glUniformMatrix4dv(arg_9482: GLint, arg_9483: GLsizei, arg_9484: GLboolean, arg_9485: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix4dv.?(arg_9482, arg_9483, arg_9484, arg_9485);
}
pub inline fn glUniformMatrix4fv(arg_9486: GLint, arg_9487: GLsizei, arg_9488: GLboolean, arg_9489: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4fv.?(arg_9486, arg_9487, arg_9488, arg_9489);
}
pub inline fn glUniformMatrix4fvARB(arg_9490: GLint, arg_9491: GLsizei, arg_9492: GLboolean, arg_9493: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4fvARB.?(arg_9490, arg_9491, arg_9492, arg_9493);
}
pub inline fn glUniformMatrix4x2dv(arg_9494: GLint, arg_9495: GLsizei, arg_9496: GLboolean, arg_9497: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix4x2dv.?(arg_9494, arg_9495, arg_9496, arg_9497);
}
pub inline fn glUniformMatrix4x2fv(arg_9498: GLint, arg_9499: GLsizei, arg_9500: GLboolean, arg_9501: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4x2fv.?(arg_9498, arg_9499, arg_9500, arg_9501);
}
pub inline fn glUniformMatrix4x2fvNV(arg_9502: GLint, arg_9503: GLsizei, arg_9504: GLboolean, arg_9505: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4x2fvNV.?(arg_9502, arg_9503, arg_9504, arg_9505);
}
pub inline fn glUniformMatrix4x3dv(arg_9506: GLint, arg_9507: GLsizei, arg_9508: GLboolean, arg_9509: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix4x3dv.?(arg_9506, arg_9507, arg_9508, arg_9509);
}
pub inline fn glUniformMatrix4x3fv(arg_9510: GLint, arg_9511: GLsizei, arg_9512: GLboolean, arg_9513: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4x3fv.?(arg_9510, arg_9511, arg_9512, arg_9513);
}
pub inline fn glUniformMatrix4x3fvNV(arg_9514: GLint, arg_9515: GLsizei, arg_9516: GLboolean, arg_9517: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4x3fvNV.?(arg_9514, arg_9515, arg_9516, arg_9517);
}
pub inline fn glUniformSubroutinesuiv(arg_9518: GLenum, arg_9519: GLsizei, arg_9520: [*c]const GLuint) void {
    return epoxy_glUniformSubroutinesuiv.?(arg_9518, arg_9519, arg_9520);
}
pub inline fn glUniformui64NV(arg_9521: GLint, arg_9522: GLuint64EXT) void {
    return epoxy_glUniformui64NV.?(arg_9521, arg_9522);
}
pub inline fn glUniformui64vNV(arg_9523: GLint, arg_9524: GLsizei, arg_9525: [*c]const GLuint64EXT) void {
    return epoxy_glUniformui64vNV.?(arg_9523, arg_9524, arg_9525);
}
pub inline fn glUnlockArraysEXT() void {
    return epoxy_glUnlockArraysEXT.?();
}
pub inline fn glUnmapBuffer(arg_9526: GLenum) GLboolean {
    return epoxy_glUnmapBuffer.?(arg_9526);
}
pub inline fn glUnmapBufferARB(arg_9527: GLenum) GLboolean {
    return epoxy_glUnmapBufferARB.?(arg_9527);
}
pub inline fn glUnmapBufferOES(arg_9528: GLenum) GLboolean {
    return epoxy_glUnmapBufferOES.?(arg_9528);
}
pub inline fn glUnmapNamedBuffer(arg_9529: GLuint) GLboolean {
    return epoxy_glUnmapNamedBuffer.?(arg_9529);
}
pub inline fn glUnmapNamedBufferEXT(arg_9530: GLuint) GLboolean {
    return epoxy_glUnmapNamedBufferEXT.?(arg_9530);
}
pub inline fn glUnmapObjectBufferATI(arg_9531: GLuint) void {
    return epoxy_glUnmapObjectBufferATI.?(arg_9531);
}
pub inline fn glUnmapTexture2DINTEL(arg_9532: GLuint, arg_9533: GLint) void {
    return epoxy_glUnmapTexture2DINTEL.?(arg_9532, arg_9533);
}
pub inline fn glUpdateObjectBufferATI(arg_9534: GLuint, arg_9535: GLuint, arg_9536: GLsizei, arg_9537: ?*const anyopaque, arg_9538: GLenum) void {
    return epoxy_glUpdateObjectBufferATI.?(arg_9534, arg_9535, arg_9536, arg_9537, arg_9538);
}
pub inline fn glUploadGpuMaskNVX(arg_9539: GLbitfield) void {
    return epoxy_glUploadGpuMaskNVX.?(arg_9539);
}
pub inline fn glUseProgram(arg_9540: GLuint) void {
    return epoxy_glUseProgram.?(arg_9540);
}
pub inline fn glUseProgramObjectARB(arg_9541: GLhandleARB) void {
    return epoxy_glUseProgramObjectARB.?(arg_9541);
}
pub inline fn glUseProgramStages(arg_9542: GLuint, arg_9543: GLbitfield, arg_9544: GLuint) void {
    return epoxy_glUseProgramStages.?(arg_9542, arg_9543, arg_9544);
}
pub inline fn glUseProgramStagesEXT(arg_9545: GLuint, arg_9546: GLbitfield, arg_9547: GLuint) void {
    return epoxy_glUseProgramStagesEXT.?(arg_9545, arg_9546, arg_9547);
}
pub inline fn glUseShaderProgramEXT(arg_9548: GLenum, arg_9549: GLuint) void {
    return epoxy_glUseShaderProgramEXT.?(arg_9548, arg_9549);
}
pub inline fn glVDPAUFiniNV() void {
    return epoxy_glVDPAUFiniNV.?();
}
pub inline fn glVDPAUGetSurfaceivNV(arg_9550: GLvdpauSurfaceNV, arg_9551: GLenum, arg_9552: GLsizei, arg_9553: [*c]GLsizei, arg_9554: [*c]GLint) void {
    return epoxy_glVDPAUGetSurfaceivNV.?(arg_9550, arg_9551, arg_9552, arg_9553, arg_9554);
}
pub inline fn glVDPAUInitNV(arg_9555: ?*const anyopaque, arg_9556: ?*const anyopaque) void {
    return epoxy_glVDPAUInitNV.?(arg_9555, arg_9556);
}
pub inline fn glVDPAUIsSurfaceNV(arg_9557: GLvdpauSurfaceNV) GLboolean {
    return epoxy_glVDPAUIsSurfaceNV.?(arg_9557);
}
pub inline fn glVDPAUMapSurfacesNV(arg_9558: GLsizei, arg_9559: [*c]const GLvdpauSurfaceNV) void {
    return epoxy_glVDPAUMapSurfacesNV.?(arg_9558, arg_9559);
}
pub inline fn glVDPAURegisterOutputSurfaceNV(arg_9560: ?*const anyopaque, arg_9561: GLenum, arg_9562: GLsizei, arg_9563: [*c]const GLuint) GLvdpauSurfaceNV {
    return epoxy_glVDPAURegisterOutputSurfaceNV.?(arg_9560, arg_9561, arg_9562, arg_9563);
}
pub inline fn glVDPAURegisterVideoSurfaceNV(arg_9564: ?*const anyopaque, arg_9565: GLenum, arg_9566: GLsizei, arg_9567: [*c]const GLuint) GLvdpauSurfaceNV {
    return epoxy_glVDPAURegisterVideoSurfaceNV.?(arg_9564, arg_9565, arg_9566, arg_9567);
}
pub inline fn glVDPAURegisterVideoSurfaceWithPictureStructureNV(arg_9568: ?*const anyopaque, arg_9569: GLenum, arg_9570: GLsizei, arg_9571: [*c]const GLuint, arg_9572: GLboolean) GLvdpauSurfaceNV {
    return epoxy_glVDPAURegisterVideoSurfaceWithPictureStructureNV.?(arg_9568, arg_9569, arg_9570, arg_9571, arg_9572);
}
pub inline fn glVDPAUSurfaceAccessNV(arg_9573: GLvdpauSurfaceNV, arg_9574: GLenum) void {
    return epoxy_glVDPAUSurfaceAccessNV.?(arg_9573, arg_9574);
}
pub inline fn glVDPAUUnmapSurfacesNV(arg_9575: GLsizei, arg_9576: [*c]const GLvdpauSurfaceNV) void {
    return epoxy_glVDPAUUnmapSurfacesNV.?(arg_9575, arg_9576);
}
pub inline fn glVDPAUUnregisterSurfaceNV(arg_9577: GLvdpauSurfaceNV) void {
    return epoxy_glVDPAUUnregisterSurfaceNV.?(arg_9577);
}
pub inline fn glValidateProgram(arg_9578: GLuint) void {
    return epoxy_glValidateProgram.?(arg_9578);
}
pub inline fn glValidateProgramARB(arg_9579: GLhandleARB) void {
    return epoxy_glValidateProgramARB.?(arg_9579);
}
pub inline fn glValidateProgramPipeline(arg_9580: GLuint) void {
    return epoxy_glValidateProgramPipeline.?(arg_9580);
}
pub inline fn glValidateProgramPipelineEXT(arg_9581: GLuint) void {
    return epoxy_glValidateProgramPipelineEXT.?(arg_9581);
}
pub inline fn glVariantArrayObjectATI(arg_9582: GLuint, arg_9583: GLenum, arg_9584: GLsizei, arg_9585: GLuint, arg_9586: GLuint) void {
    return epoxy_glVariantArrayObjectATI.?(arg_9582, arg_9583, arg_9584, arg_9585, arg_9586);
}
pub inline fn glVariantPointerEXT(arg_9587: GLuint, arg_9588: GLenum, arg_9589: GLuint, arg_9590: ?*const anyopaque) void {
    return epoxy_glVariantPointerEXT.?(arg_9587, arg_9588, arg_9589, arg_9590);
}
pub inline fn glVariantbvEXT(arg_9591: GLuint, arg_9592: [*c]const GLbyte) void {
    return epoxy_glVariantbvEXT.?(arg_9591, arg_9592);
}
pub inline fn glVariantdvEXT(arg_9593: GLuint, arg_9594: [*c]const GLdouble) void {
    return epoxy_glVariantdvEXT.?(arg_9593, arg_9594);
}
pub inline fn glVariantfvEXT(arg_9595: GLuint, arg_9596: [*c]const GLfloat) void {
    return epoxy_glVariantfvEXT.?(arg_9595, arg_9596);
}
pub inline fn glVariantivEXT(arg_9597: GLuint, arg_9598: [*c]const GLint) void {
    return epoxy_glVariantivEXT.?(arg_9597, arg_9598);
}
pub inline fn glVariantsvEXT(arg_9599: GLuint, arg_9600: [*c]const GLshort) void {
    return epoxy_glVariantsvEXT.?(arg_9599, arg_9600);
}
pub inline fn glVariantubvEXT(arg_9601: GLuint, arg_9602: [*c]const GLubyte) void {
    return epoxy_glVariantubvEXT.?(arg_9601, arg_9602);
}
pub inline fn glVariantuivEXT(arg_9603: GLuint, arg_9604: [*c]const GLuint) void {
    return epoxy_glVariantuivEXT.?(arg_9603, arg_9604);
}
pub inline fn glVariantusvEXT(arg_9605: GLuint, arg_9606: [*c]const GLushort) void {
    return epoxy_glVariantusvEXT.?(arg_9605, arg_9606);
}
pub inline fn glVertex2bOES(arg_9607: GLbyte, arg_9608: GLbyte) void {
    return epoxy_glVertex2bOES.?(arg_9607, arg_9608);
}
pub inline fn glVertex2bvOES(arg_9609: [*c]const GLbyte) void {
    return epoxy_glVertex2bvOES.?(arg_9609);
}
pub inline fn glVertex2d(arg_9610: GLdouble, arg_9611: GLdouble) void {
    return epoxy_glVertex2d.?(arg_9610, arg_9611);
}
pub inline fn glVertex2dv(arg_9612: [*c]const GLdouble) void {
    return epoxy_glVertex2dv.?(arg_9612);
}
pub inline fn glVertex2f(arg_9613: GLfloat, arg_9614: GLfloat) void {
    return epoxy_glVertex2f.?(arg_9613, arg_9614);
}
pub inline fn glVertex2fv(arg_9615: [*c]const GLfloat) void {
    return epoxy_glVertex2fv.?(arg_9615);
}
pub inline fn glVertex2hNV(arg_9616: GLhalfNV, arg_9617: GLhalfNV) void {
    return epoxy_glVertex2hNV.?(arg_9616, arg_9617);
}
pub inline fn glVertex2hvNV(arg_9618: [*c]const GLhalfNV) void {
    return epoxy_glVertex2hvNV.?(arg_9618);
}
pub inline fn glVertex2i(arg_9619: GLint, arg_9620: GLint) void {
    return epoxy_glVertex2i.?(arg_9619, arg_9620);
}
pub inline fn glVertex2iv(arg_9621: [*c]const GLint) void {
    return epoxy_glVertex2iv.?(arg_9621);
}
pub inline fn glVertex2s(arg_9622: GLshort, arg_9623: GLshort) void {
    return epoxy_glVertex2s.?(arg_9622, arg_9623);
}
pub inline fn glVertex2sv(arg_9624: [*c]const GLshort) void {
    return epoxy_glVertex2sv.?(arg_9624);
}
pub inline fn glVertex2xOES(arg_9625: GLfixed) void {
    return epoxy_glVertex2xOES.?(arg_9625);
}
pub inline fn glVertex2xvOES(arg_9626: [*c]const GLfixed) void {
    return epoxy_glVertex2xvOES.?(arg_9626);
}
pub inline fn glVertex3bOES(arg_9627: GLbyte, arg_9628: GLbyte, arg_9629: GLbyte) void {
    return epoxy_glVertex3bOES.?(arg_9627, arg_9628, arg_9629);
}
pub inline fn glVertex3bvOES(arg_9630: [*c]const GLbyte) void {
    return epoxy_glVertex3bvOES.?(arg_9630);
}
pub inline fn glVertex3d(arg_9631: GLdouble, arg_9632: GLdouble, arg_9633: GLdouble) void {
    return epoxy_glVertex3d.?(arg_9631, arg_9632, arg_9633);
}
pub inline fn glVertex3dv(arg_9634: [*c]const GLdouble) void {
    return epoxy_glVertex3dv.?(arg_9634);
}
pub inline fn glVertex3f(arg_9635: GLfloat, arg_9636: GLfloat, arg_9637: GLfloat) void {
    return epoxy_glVertex3f.?(arg_9635, arg_9636, arg_9637);
}
pub inline fn glVertex3fv(arg_9638: [*c]const GLfloat) void {
    return epoxy_glVertex3fv.?(arg_9638);
}
pub inline fn glVertex3hNV(arg_9639: GLhalfNV, arg_9640: GLhalfNV, arg_9641: GLhalfNV) void {
    return epoxy_glVertex3hNV.?(arg_9639, arg_9640, arg_9641);
}
pub inline fn glVertex3hvNV(arg_9642: [*c]const GLhalfNV) void {
    return epoxy_glVertex3hvNV.?(arg_9642);
}
pub inline fn glVertex3i(arg_9643: GLint, arg_9644: GLint, arg_9645: GLint) void {
    return epoxy_glVertex3i.?(arg_9643, arg_9644, arg_9645);
}
pub inline fn glVertex3iv(arg_9646: [*c]const GLint) void {
    return epoxy_glVertex3iv.?(arg_9646);
}
pub inline fn glVertex3s(arg_9647: GLshort, arg_9648: GLshort, arg_9649: GLshort) void {
    return epoxy_glVertex3s.?(arg_9647, arg_9648, arg_9649);
}
pub inline fn glVertex3sv(arg_9650: [*c]const GLshort) void {
    return epoxy_glVertex3sv.?(arg_9650);
}
pub inline fn glVertex3xOES(arg_9651: GLfixed, arg_9652: GLfixed) void {
    return epoxy_glVertex3xOES.?(arg_9651, arg_9652);
}
pub inline fn glVertex3xvOES(arg_9653: [*c]const GLfixed) void {
    return epoxy_glVertex3xvOES.?(arg_9653);
}
pub inline fn glVertex4bOES(arg_9654: GLbyte, arg_9655: GLbyte, arg_9656: GLbyte, arg_9657: GLbyte) void {
    return epoxy_glVertex4bOES.?(arg_9654, arg_9655, arg_9656, arg_9657);
}
pub inline fn glVertex4bvOES(arg_9658: [*c]const GLbyte) void {
    return epoxy_glVertex4bvOES.?(arg_9658);
}
pub inline fn glVertex4d(arg_9659: GLdouble, arg_9660: GLdouble, arg_9661: GLdouble, arg_9662: GLdouble) void {
    return epoxy_glVertex4d.?(arg_9659, arg_9660, arg_9661, arg_9662);
}
pub inline fn glVertex4dv(arg_9663: [*c]const GLdouble) void {
    return epoxy_glVertex4dv.?(arg_9663);
}
pub inline fn glVertex4f(arg_9664: GLfloat, arg_9665: GLfloat, arg_9666: GLfloat, arg_9667: GLfloat) void {
    return epoxy_glVertex4f.?(arg_9664, arg_9665, arg_9666, arg_9667);
}
pub inline fn glVertex4fv(arg_9668: [*c]const GLfloat) void {
    return epoxy_glVertex4fv.?(arg_9668);
}
pub inline fn glVertex4hNV(arg_9669: GLhalfNV, arg_9670: GLhalfNV, arg_9671: GLhalfNV, arg_9672: GLhalfNV) void {
    return epoxy_glVertex4hNV.?(arg_9669, arg_9670, arg_9671, arg_9672);
}
pub inline fn glVertex4hvNV(arg_9673: [*c]const GLhalfNV) void {
    return epoxy_glVertex4hvNV.?(arg_9673);
}
pub inline fn glVertex4i(arg_9674: GLint, arg_9675: GLint, arg_9676: GLint, arg_9677: GLint) void {
    return epoxy_glVertex4i.?(arg_9674, arg_9675, arg_9676, arg_9677);
}
pub inline fn glVertex4iv(arg_9678: [*c]const GLint) void {
    return epoxy_glVertex4iv.?(arg_9678);
}
pub inline fn glVertex4s(arg_9679: GLshort, arg_9680: GLshort, arg_9681: GLshort, arg_9682: GLshort) void {
    return epoxy_glVertex4s.?(arg_9679, arg_9680, arg_9681, arg_9682);
}
pub inline fn glVertex4sv(arg_9683: [*c]const GLshort) void {
    return epoxy_glVertex4sv.?(arg_9683);
}
pub inline fn glVertex4xOES(arg_9684: GLfixed, arg_9685: GLfixed, arg_9686: GLfixed) void {
    return epoxy_glVertex4xOES.?(arg_9684, arg_9685, arg_9686);
}
pub inline fn glVertex4xvOES(arg_9687: [*c]const GLfixed) void {
    return epoxy_glVertex4xvOES.?(arg_9687);
}
pub inline fn glVertexArrayAttribBinding(arg_9688: GLuint, arg_9689: GLuint, arg_9690: GLuint) void {
    return epoxy_glVertexArrayAttribBinding.?(arg_9688, arg_9689, arg_9690);
}
pub inline fn glVertexArrayAttribFormat(arg_9691: GLuint, arg_9692: GLuint, arg_9693: GLint, arg_9694: GLenum, arg_9695: GLboolean, arg_9696: GLuint) void {
    return epoxy_glVertexArrayAttribFormat.?(arg_9691, arg_9692, arg_9693, arg_9694, arg_9695, arg_9696);
}
pub inline fn glVertexArrayAttribIFormat(arg_9697: GLuint, arg_9698: GLuint, arg_9699: GLint, arg_9700: GLenum, arg_9701: GLuint) void {
    return epoxy_glVertexArrayAttribIFormat.?(arg_9697, arg_9698, arg_9699, arg_9700, arg_9701);
}
pub inline fn glVertexArrayAttribLFormat(arg_9702: GLuint, arg_9703: GLuint, arg_9704: GLint, arg_9705: GLenum, arg_9706: GLuint) void {
    return epoxy_glVertexArrayAttribLFormat.?(arg_9702, arg_9703, arg_9704, arg_9705, arg_9706);
}
pub inline fn glVertexArrayBindVertexBufferEXT(arg_9707: GLuint, arg_9708: GLuint, arg_9709: GLuint, arg_9710: GLintptr, arg_9711: GLsizei) void {
    return epoxy_glVertexArrayBindVertexBufferEXT.?(arg_9707, arg_9708, arg_9709, arg_9710, arg_9711);
}
pub inline fn glVertexArrayBindingDivisor(arg_9712: GLuint, arg_9713: GLuint, arg_9714: GLuint) void {
    return epoxy_glVertexArrayBindingDivisor.?(arg_9712, arg_9713, arg_9714);
}
pub inline fn glVertexArrayColorOffsetEXT(arg_9715: GLuint, arg_9716: GLuint, arg_9717: GLint, arg_9718: GLenum, arg_9719: GLsizei, arg_9720: GLintptr) void {
    return epoxy_glVertexArrayColorOffsetEXT.?(arg_9715, arg_9716, arg_9717, arg_9718, arg_9719, arg_9720);
}
pub inline fn glVertexArrayEdgeFlagOffsetEXT(arg_9721: GLuint, arg_9722: GLuint, arg_9723: GLsizei, arg_9724: GLintptr) void {
    return epoxy_glVertexArrayEdgeFlagOffsetEXT.?(arg_9721, arg_9722, arg_9723, arg_9724);
}
pub inline fn glVertexArrayElementBuffer(arg_9725: GLuint, arg_9726: GLuint) void {
    return epoxy_glVertexArrayElementBuffer.?(arg_9725, arg_9726);
}
pub inline fn glVertexArrayFogCoordOffsetEXT(arg_9727: GLuint, arg_9728: GLuint, arg_9729: GLenum, arg_9730: GLsizei, arg_9731: GLintptr) void {
    return epoxy_glVertexArrayFogCoordOffsetEXT.?(arg_9727, arg_9728, arg_9729, arg_9730, arg_9731);
}
pub inline fn glVertexArrayIndexOffsetEXT(arg_9732: GLuint, arg_9733: GLuint, arg_9734: GLenum, arg_9735: GLsizei, arg_9736: GLintptr) void {
    return epoxy_glVertexArrayIndexOffsetEXT.?(arg_9732, arg_9733, arg_9734, arg_9735, arg_9736);
}
pub inline fn glVertexArrayMultiTexCoordOffsetEXT(arg_9737: GLuint, arg_9738: GLuint, arg_9739: GLenum, arg_9740: GLint, arg_9741: GLenum, arg_9742: GLsizei, arg_9743: GLintptr) void {
    return epoxy_glVertexArrayMultiTexCoordOffsetEXT.?(arg_9737, arg_9738, arg_9739, arg_9740, arg_9741, arg_9742, arg_9743);
}
pub inline fn glVertexArrayNormalOffsetEXT(arg_9744: GLuint, arg_9745: GLuint, arg_9746: GLenum, arg_9747: GLsizei, arg_9748: GLintptr) void {
    return epoxy_glVertexArrayNormalOffsetEXT.?(arg_9744, arg_9745, arg_9746, arg_9747, arg_9748);
}
pub inline fn glVertexArrayParameteriAPPLE(arg_9749: GLenum, arg_9750: GLint) void {
    return epoxy_glVertexArrayParameteriAPPLE.?(arg_9749, arg_9750);
}
pub inline fn glVertexArrayRangeAPPLE(arg_9751: GLsizei, arg_9752: ?*anyopaque) void {
    return epoxy_glVertexArrayRangeAPPLE.?(arg_9751, arg_9752);
}
pub inline fn glVertexArrayRangeNV(arg_9753: GLsizei, arg_9754: ?*const anyopaque) void {
    return epoxy_glVertexArrayRangeNV.?(arg_9753, arg_9754);
}
pub inline fn glVertexArraySecondaryColorOffsetEXT(arg_9755: GLuint, arg_9756: GLuint, arg_9757: GLint, arg_9758: GLenum, arg_9759: GLsizei, arg_9760: GLintptr) void {
    return epoxy_glVertexArraySecondaryColorOffsetEXT.?(arg_9755, arg_9756, arg_9757, arg_9758, arg_9759, arg_9760);
}
pub inline fn glVertexArrayTexCoordOffsetEXT(arg_9761: GLuint, arg_9762: GLuint, arg_9763: GLint, arg_9764: GLenum, arg_9765: GLsizei, arg_9766: GLintptr) void {
    return epoxy_glVertexArrayTexCoordOffsetEXT.?(arg_9761, arg_9762, arg_9763, arg_9764, arg_9765, arg_9766);
}
pub inline fn glVertexArrayVertexAttribBindingEXT(arg_9767: GLuint, arg_9768: GLuint, arg_9769: GLuint) void {
    return epoxy_glVertexArrayVertexAttribBindingEXT.?(arg_9767, arg_9768, arg_9769);
}
pub inline fn glVertexArrayVertexAttribDivisorEXT(arg_9770: GLuint, arg_9771: GLuint, arg_9772: GLuint) void {
    return epoxy_glVertexArrayVertexAttribDivisorEXT.?(arg_9770, arg_9771, arg_9772);
}
pub inline fn glVertexArrayVertexAttribFormatEXT(arg_9773: GLuint, arg_9774: GLuint, arg_9775: GLint, arg_9776: GLenum, arg_9777: GLboolean, arg_9778: GLuint) void {
    return epoxy_glVertexArrayVertexAttribFormatEXT.?(arg_9773, arg_9774, arg_9775, arg_9776, arg_9777, arg_9778);
}
pub inline fn glVertexArrayVertexAttribIFormatEXT(arg_9779: GLuint, arg_9780: GLuint, arg_9781: GLint, arg_9782: GLenum, arg_9783: GLuint) void {
    return epoxy_glVertexArrayVertexAttribIFormatEXT.?(arg_9779, arg_9780, arg_9781, arg_9782, arg_9783);
}
pub inline fn glVertexArrayVertexAttribIOffsetEXT(arg_9784: GLuint, arg_9785: GLuint, arg_9786: GLuint, arg_9787: GLint, arg_9788: GLenum, arg_9789: GLsizei, arg_9790: GLintptr) void {
    return epoxy_glVertexArrayVertexAttribIOffsetEXT.?(arg_9784, arg_9785, arg_9786, arg_9787, arg_9788, arg_9789, arg_9790);
}
pub inline fn glVertexArrayVertexAttribLFormatEXT(arg_9791: GLuint, arg_9792: GLuint, arg_9793: GLint, arg_9794: GLenum, arg_9795: GLuint) void {
    return epoxy_glVertexArrayVertexAttribLFormatEXT.?(arg_9791, arg_9792, arg_9793, arg_9794, arg_9795);
}
pub inline fn glVertexArrayVertexAttribLOffsetEXT(arg_9796: GLuint, arg_9797: GLuint, arg_9798: GLuint, arg_9799: GLint, arg_9800: GLenum, arg_9801: GLsizei, arg_9802: GLintptr) void {
    return epoxy_glVertexArrayVertexAttribLOffsetEXT.?(arg_9796, arg_9797, arg_9798, arg_9799, arg_9800, arg_9801, arg_9802);
}
pub inline fn glVertexArrayVertexAttribOffsetEXT(arg_9803: GLuint, arg_9804: GLuint, arg_9805: GLuint, arg_9806: GLint, arg_9807: GLenum, arg_9808: GLboolean, arg_9809: GLsizei, arg_9810: GLintptr) void {
    return epoxy_glVertexArrayVertexAttribOffsetEXT.?(arg_9803, arg_9804, arg_9805, arg_9806, arg_9807, arg_9808, arg_9809, arg_9810);
}
pub inline fn glVertexArrayVertexBindingDivisorEXT(arg_9811: GLuint, arg_9812: GLuint, arg_9813: GLuint) void {
    return epoxy_glVertexArrayVertexBindingDivisorEXT.?(arg_9811, arg_9812, arg_9813);
}
pub inline fn glVertexArrayVertexBuffer(arg_9814: GLuint, arg_9815: GLuint, arg_9816: GLuint, arg_9817: GLintptr, arg_9818: GLsizei) void {
    return epoxy_glVertexArrayVertexBuffer.?(arg_9814, arg_9815, arg_9816, arg_9817, arg_9818);
}
pub inline fn glVertexArrayVertexBuffers(arg_9819: GLuint, arg_9820: GLuint, arg_9821: GLsizei, arg_9822: [*c]const GLuint, arg_9823: [*c]const GLintptr, arg_9824: [*c]const GLsizei) void {
    return epoxy_glVertexArrayVertexBuffers.?(arg_9819, arg_9820, arg_9821, arg_9822, arg_9823, arg_9824);
}
pub inline fn glVertexArrayVertexOffsetEXT(arg_9825: GLuint, arg_9826: GLuint, arg_9827: GLint, arg_9828: GLenum, arg_9829: GLsizei, arg_9830: GLintptr) void {
    return epoxy_glVertexArrayVertexOffsetEXT.?(arg_9825, arg_9826, arg_9827, arg_9828, arg_9829, arg_9830);
}
pub inline fn glVertexAttrib1d(arg_9831: GLuint, arg_9832: GLdouble) void {
    return epoxy_glVertexAttrib1d.?(arg_9831, arg_9832);
}
pub inline fn glVertexAttrib1dARB(arg_9833: GLuint, arg_9834: GLdouble) void {
    return epoxy_glVertexAttrib1dARB.?(arg_9833, arg_9834);
}
pub inline fn glVertexAttrib1dNV(arg_9835: GLuint, arg_9836: GLdouble) void {
    return epoxy_glVertexAttrib1dNV.?(arg_9835, arg_9836);
}
pub inline fn glVertexAttrib1dv(arg_9837: GLuint, arg_9838: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib1dv.?(arg_9837, arg_9838);
}
pub inline fn glVertexAttrib1dvARB(arg_9839: GLuint, arg_9840: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib1dvARB.?(arg_9839, arg_9840);
}
pub inline fn glVertexAttrib1dvNV(arg_9841: GLuint, arg_9842: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib1dvNV.?(arg_9841, arg_9842);
}
pub inline fn glVertexAttrib1f(arg_9843: GLuint, arg_9844: GLfloat) void {
    return epoxy_glVertexAttrib1f.?(arg_9843, arg_9844);
}
pub inline fn glVertexAttrib1fARB(arg_9845: GLuint, arg_9846: GLfloat) void {
    return epoxy_glVertexAttrib1fARB.?(arg_9845, arg_9846);
}
pub inline fn glVertexAttrib1fNV(arg_9847: GLuint, arg_9848: GLfloat) void {
    return epoxy_glVertexAttrib1fNV.?(arg_9847, arg_9848);
}
pub inline fn glVertexAttrib1fv(arg_9849: GLuint, arg_9850: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib1fv.?(arg_9849, arg_9850);
}
pub inline fn glVertexAttrib1fvARB(arg_9851: GLuint, arg_9852: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib1fvARB.?(arg_9851, arg_9852);
}
pub inline fn glVertexAttrib1fvNV(arg_9853: GLuint, arg_9854: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib1fvNV.?(arg_9853, arg_9854);
}
pub inline fn glVertexAttrib1hNV(arg_9855: GLuint, arg_9856: GLhalfNV) void {
    return epoxy_glVertexAttrib1hNV.?(arg_9855, arg_9856);
}
pub inline fn glVertexAttrib1hvNV(arg_9857: GLuint, arg_9858: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttrib1hvNV.?(arg_9857, arg_9858);
}
pub inline fn glVertexAttrib1s(arg_9859: GLuint, arg_9860: GLshort) void {
    return epoxy_glVertexAttrib1s.?(arg_9859, arg_9860);
}
pub inline fn glVertexAttrib1sARB(arg_9861: GLuint, arg_9862: GLshort) void {
    return epoxy_glVertexAttrib1sARB.?(arg_9861, arg_9862);
}
pub inline fn glVertexAttrib1sNV(arg_9863: GLuint, arg_9864: GLshort) void {
    return epoxy_glVertexAttrib1sNV.?(arg_9863, arg_9864);
}
pub inline fn glVertexAttrib1sv(arg_9865: GLuint, arg_9866: [*c]const GLshort) void {
    return epoxy_glVertexAttrib1sv.?(arg_9865, arg_9866);
}
pub inline fn glVertexAttrib1svARB(arg_9867: GLuint, arg_9868: [*c]const GLshort) void {
    return epoxy_glVertexAttrib1svARB.?(arg_9867, arg_9868);
}
pub inline fn glVertexAttrib1svNV(arg_9869: GLuint, arg_9870: [*c]const GLshort) void {
    return epoxy_glVertexAttrib1svNV.?(arg_9869, arg_9870);
}
pub inline fn glVertexAttrib2d(arg_9871: GLuint, arg_9872: GLdouble, arg_9873: GLdouble) void {
    return epoxy_glVertexAttrib2d.?(arg_9871, arg_9872, arg_9873);
}
pub inline fn glVertexAttrib2dARB(arg_9874: GLuint, arg_9875: GLdouble, arg_9876: GLdouble) void {
    return epoxy_glVertexAttrib2dARB.?(arg_9874, arg_9875, arg_9876);
}
pub inline fn glVertexAttrib2dNV(arg_9877: GLuint, arg_9878: GLdouble, arg_9879: GLdouble) void {
    return epoxy_glVertexAttrib2dNV.?(arg_9877, arg_9878, arg_9879);
}
pub inline fn glVertexAttrib2dv(arg_9880: GLuint, arg_9881: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib2dv.?(arg_9880, arg_9881);
}
pub inline fn glVertexAttrib2dvARB(arg_9882: GLuint, arg_9883: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib2dvARB.?(arg_9882, arg_9883);
}
pub inline fn glVertexAttrib2dvNV(arg_9884: GLuint, arg_9885: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib2dvNV.?(arg_9884, arg_9885);
}
pub inline fn glVertexAttrib2f(arg_9886: GLuint, arg_9887: GLfloat, arg_9888: GLfloat) void {
    return epoxy_glVertexAttrib2f.?(arg_9886, arg_9887, arg_9888);
}
pub inline fn glVertexAttrib2fARB(arg_9889: GLuint, arg_9890: GLfloat, arg_9891: GLfloat) void {
    return epoxy_glVertexAttrib2fARB.?(arg_9889, arg_9890, arg_9891);
}
pub inline fn glVertexAttrib2fNV(arg_9892: GLuint, arg_9893: GLfloat, arg_9894: GLfloat) void {
    return epoxy_glVertexAttrib2fNV.?(arg_9892, arg_9893, arg_9894);
}
pub inline fn glVertexAttrib2fv(arg_9895: GLuint, arg_9896: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib2fv.?(arg_9895, arg_9896);
}
pub inline fn glVertexAttrib2fvARB(arg_9897: GLuint, arg_9898: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib2fvARB.?(arg_9897, arg_9898);
}
pub inline fn glVertexAttrib2fvNV(arg_9899: GLuint, arg_9900: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib2fvNV.?(arg_9899, arg_9900);
}
pub inline fn glVertexAttrib2hNV(arg_9901: GLuint, arg_9902: GLhalfNV, arg_9903: GLhalfNV) void {
    return epoxy_glVertexAttrib2hNV.?(arg_9901, arg_9902, arg_9903);
}
pub inline fn glVertexAttrib2hvNV(arg_9904: GLuint, arg_9905: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttrib2hvNV.?(arg_9904, arg_9905);
}
pub inline fn glVertexAttrib2s(arg_9906: GLuint, arg_9907: GLshort, arg_9908: GLshort) void {
    return epoxy_glVertexAttrib2s.?(arg_9906, arg_9907, arg_9908);
}
pub inline fn glVertexAttrib2sARB(arg_9909: GLuint, arg_9910: GLshort, arg_9911: GLshort) void {
    return epoxy_glVertexAttrib2sARB.?(arg_9909, arg_9910, arg_9911);
}
pub inline fn glVertexAttrib2sNV(arg_9912: GLuint, arg_9913: GLshort, arg_9914: GLshort) void {
    return epoxy_glVertexAttrib2sNV.?(arg_9912, arg_9913, arg_9914);
}
pub inline fn glVertexAttrib2sv(arg_9915: GLuint, arg_9916: [*c]const GLshort) void {
    return epoxy_glVertexAttrib2sv.?(arg_9915, arg_9916);
}
pub inline fn glVertexAttrib2svARB(arg_9917: GLuint, arg_9918: [*c]const GLshort) void {
    return epoxy_glVertexAttrib2svARB.?(arg_9917, arg_9918);
}
pub inline fn glVertexAttrib2svNV(arg_9919: GLuint, arg_9920: [*c]const GLshort) void {
    return epoxy_glVertexAttrib2svNV.?(arg_9919, arg_9920);
}
pub inline fn glVertexAttrib3d(arg_9921: GLuint, arg_9922: GLdouble, arg_9923: GLdouble, arg_9924: GLdouble) void {
    return epoxy_glVertexAttrib3d.?(arg_9921, arg_9922, arg_9923, arg_9924);
}
pub inline fn glVertexAttrib3dARB(arg_9925: GLuint, arg_9926: GLdouble, arg_9927: GLdouble, arg_9928: GLdouble) void {
    return epoxy_glVertexAttrib3dARB.?(arg_9925, arg_9926, arg_9927, arg_9928);
}
pub inline fn glVertexAttrib3dNV(arg_9929: GLuint, arg_9930: GLdouble, arg_9931: GLdouble, arg_9932: GLdouble) void {
    return epoxy_glVertexAttrib3dNV.?(arg_9929, arg_9930, arg_9931, arg_9932);
}
pub inline fn glVertexAttrib3dv(arg_9933: GLuint, arg_9934: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib3dv.?(arg_9933, arg_9934);
}
pub inline fn glVertexAttrib3dvARB(arg_9935: GLuint, arg_9936: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib3dvARB.?(arg_9935, arg_9936);
}
pub inline fn glVertexAttrib3dvNV(arg_9937: GLuint, arg_9938: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib3dvNV.?(arg_9937, arg_9938);
}
pub inline fn glVertexAttrib3f(arg_9939: GLuint, arg_9940: GLfloat, arg_9941: GLfloat, arg_9942: GLfloat) void {
    return epoxy_glVertexAttrib3f.?(arg_9939, arg_9940, arg_9941, arg_9942);
}
pub inline fn glVertexAttrib3fARB(arg_9943: GLuint, arg_9944: GLfloat, arg_9945: GLfloat, arg_9946: GLfloat) void {
    return epoxy_glVertexAttrib3fARB.?(arg_9943, arg_9944, arg_9945, arg_9946);
}
pub inline fn glVertexAttrib3fNV(arg_9947: GLuint, arg_9948: GLfloat, arg_9949: GLfloat, arg_9950: GLfloat) void {
    return epoxy_glVertexAttrib3fNV.?(arg_9947, arg_9948, arg_9949, arg_9950);
}
pub inline fn glVertexAttrib3fv(arg_9951: GLuint, arg_9952: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib3fv.?(arg_9951, arg_9952);
}
pub inline fn glVertexAttrib3fvARB(arg_9953: GLuint, arg_9954: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib3fvARB.?(arg_9953, arg_9954);
}
pub inline fn glVertexAttrib3fvNV(arg_9955: GLuint, arg_9956: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib3fvNV.?(arg_9955, arg_9956);
}
pub inline fn glVertexAttrib3hNV(arg_9957: GLuint, arg_9958: GLhalfNV, arg_9959: GLhalfNV, arg_9960: GLhalfNV) void {
    return epoxy_glVertexAttrib3hNV.?(arg_9957, arg_9958, arg_9959, arg_9960);
}
pub inline fn glVertexAttrib3hvNV(arg_9961: GLuint, arg_9962: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttrib3hvNV.?(arg_9961, arg_9962);
}
pub inline fn glVertexAttrib3s(arg_9963: GLuint, arg_9964: GLshort, arg_9965: GLshort, arg_9966: GLshort) void {
    return epoxy_glVertexAttrib3s.?(arg_9963, arg_9964, arg_9965, arg_9966);
}
pub inline fn glVertexAttrib3sARB(arg_9967: GLuint, arg_9968: GLshort, arg_9969: GLshort, arg_9970: GLshort) void {
    return epoxy_glVertexAttrib3sARB.?(arg_9967, arg_9968, arg_9969, arg_9970);
}
pub inline fn glVertexAttrib3sNV(arg_9971: GLuint, arg_9972: GLshort, arg_9973: GLshort, arg_9974: GLshort) void {
    return epoxy_glVertexAttrib3sNV.?(arg_9971, arg_9972, arg_9973, arg_9974);
}
pub inline fn glVertexAttrib3sv(arg_9975: GLuint, arg_9976: [*c]const GLshort) void {
    return epoxy_glVertexAttrib3sv.?(arg_9975, arg_9976);
}
pub inline fn glVertexAttrib3svARB(arg_9977: GLuint, arg_9978: [*c]const GLshort) void {
    return epoxy_glVertexAttrib3svARB.?(arg_9977, arg_9978);
}
pub inline fn glVertexAttrib3svNV(arg_9979: GLuint, arg_9980: [*c]const GLshort) void {
    return epoxy_glVertexAttrib3svNV.?(arg_9979, arg_9980);
}
pub inline fn glVertexAttrib4Nbv(arg_9981: GLuint, arg_9982: [*c]const GLbyte) void {
    return epoxy_glVertexAttrib4Nbv.?(arg_9981, arg_9982);
}
pub inline fn glVertexAttrib4NbvARB(arg_9983: GLuint, arg_9984: [*c]const GLbyte) void {
    return epoxy_glVertexAttrib4NbvARB.?(arg_9983, arg_9984);
}
pub inline fn glVertexAttrib4Niv(arg_9985: GLuint, arg_9986: [*c]const GLint) void {
    return epoxy_glVertexAttrib4Niv.?(arg_9985, arg_9986);
}
pub inline fn glVertexAttrib4NivARB(arg_9987: GLuint, arg_9988: [*c]const GLint) void {
    return epoxy_glVertexAttrib4NivARB.?(arg_9987, arg_9988);
}
pub inline fn glVertexAttrib4Nsv(arg_9989: GLuint, arg_9990: [*c]const GLshort) void {
    return epoxy_glVertexAttrib4Nsv.?(arg_9989, arg_9990);
}
pub inline fn glVertexAttrib4NsvARB(arg_9991: GLuint, arg_9992: [*c]const GLshort) void {
    return epoxy_glVertexAttrib4NsvARB.?(arg_9991, arg_9992);
}
pub inline fn glVertexAttrib4Nub(arg_9993: GLuint, arg_9994: GLubyte, arg_9995: GLubyte, arg_9996: GLubyte, arg_9997: GLubyte) void {
    return epoxy_glVertexAttrib4Nub.?(arg_9993, arg_9994, arg_9995, arg_9996, arg_9997);
}
pub inline fn glVertexAttrib4NubARB(arg_9998: GLuint, arg_9999: GLubyte, arg_10000: GLubyte, arg_10001: GLubyte, arg_10002: GLubyte) void {
    return epoxy_glVertexAttrib4NubARB.?(arg_9998, arg_9999, arg_10000, arg_10001, arg_10002);
}
pub inline fn glVertexAttrib4Nubv(arg_10003: GLuint, arg_10004: [*c]const GLubyte) void {
    return epoxy_glVertexAttrib4Nubv.?(arg_10003, arg_10004);
}
pub inline fn glVertexAttrib4NubvARB(arg_10005: GLuint, arg_10006: [*c]const GLubyte) void {
    return epoxy_glVertexAttrib4NubvARB.?(arg_10005, arg_10006);
}
pub inline fn glVertexAttrib4Nuiv(arg_10007: GLuint, arg_10008: [*c]const GLuint) void {
    return epoxy_glVertexAttrib4Nuiv.?(arg_10007, arg_10008);
}
pub inline fn glVertexAttrib4NuivARB(arg_10009: GLuint, arg_10010: [*c]const GLuint) void {
    return epoxy_glVertexAttrib4NuivARB.?(arg_10009, arg_10010);
}
pub inline fn glVertexAttrib4Nusv(arg_10011: GLuint, arg_10012: [*c]const GLushort) void {
    return epoxy_glVertexAttrib4Nusv.?(arg_10011, arg_10012);
}
pub inline fn glVertexAttrib4NusvARB(arg_10013: GLuint, arg_10014: [*c]const GLushort) void {
    return epoxy_glVertexAttrib4NusvARB.?(arg_10013, arg_10014);
}
pub inline fn glVertexAttrib4bv(arg_10015: GLuint, arg_10016: [*c]const GLbyte) void {
    return epoxy_glVertexAttrib4bv.?(arg_10015, arg_10016);
}
pub inline fn glVertexAttrib4bvARB(arg_10017: GLuint, arg_10018: [*c]const GLbyte) void {
    return epoxy_glVertexAttrib4bvARB.?(arg_10017, arg_10018);
}
pub inline fn glVertexAttrib4d(arg_10019: GLuint, arg_10020: GLdouble, arg_10021: GLdouble, arg_10022: GLdouble, arg_10023: GLdouble) void {
    return epoxy_glVertexAttrib4d.?(arg_10019, arg_10020, arg_10021, arg_10022, arg_10023);
}
pub inline fn glVertexAttrib4dARB(arg_10024: GLuint, arg_10025: GLdouble, arg_10026: GLdouble, arg_10027: GLdouble, arg_10028: GLdouble) void {
    return epoxy_glVertexAttrib4dARB.?(arg_10024, arg_10025, arg_10026, arg_10027, arg_10028);
}
pub inline fn glVertexAttrib4dNV(arg_10029: GLuint, arg_10030: GLdouble, arg_10031: GLdouble, arg_10032: GLdouble, arg_10033: GLdouble) void {
    return epoxy_glVertexAttrib4dNV.?(arg_10029, arg_10030, arg_10031, arg_10032, arg_10033);
}
pub inline fn glVertexAttrib4dv(arg_10034: GLuint, arg_10035: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib4dv.?(arg_10034, arg_10035);
}
pub inline fn glVertexAttrib4dvARB(arg_10036: GLuint, arg_10037: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib4dvARB.?(arg_10036, arg_10037);
}
pub inline fn glVertexAttrib4dvNV(arg_10038: GLuint, arg_10039: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib4dvNV.?(arg_10038, arg_10039);
}
pub inline fn glVertexAttrib4f(arg_10040: GLuint, arg_10041: GLfloat, arg_10042: GLfloat, arg_10043: GLfloat, arg_10044: GLfloat) void {
    return epoxy_glVertexAttrib4f.?(arg_10040, arg_10041, arg_10042, arg_10043, arg_10044);
}
pub inline fn glVertexAttrib4fARB(arg_10045: GLuint, arg_10046: GLfloat, arg_10047: GLfloat, arg_10048: GLfloat, arg_10049: GLfloat) void {
    return epoxy_glVertexAttrib4fARB.?(arg_10045, arg_10046, arg_10047, arg_10048, arg_10049);
}
pub inline fn glVertexAttrib4fNV(arg_10050: GLuint, arg_10051: GLfloat, arg_10052: GLfloat, arg_10053: GLfloat, arg_10054: GLfloat) void {
    return epoxy_glVertexAttrib4fNV.?(arg_10050, arg_10051, arg_10052, arg_10053, arg_10054);
}
pub inline fn glVertexAttrib4fv(arg_10055: GLuint, arg_10056: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib4fv.?(arg_10055, arg_10056);
}
pub inline fn glVertexAttrib4fvARB(arg_10057: GLuint, arg_10058: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib4fvARB.?(arg_10057, arg_10058);
}
pub inline fn glVertexAttrib4fvNV(arg_10059: GLuint, arg_10060: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib4fvNV.?(arg_10059, arg_10060);
}
pub inline fn glVertexAttrib4hNV(arg_10061: GLuint, arg_10062: GLhalfNV, arg_10063: GLhalfNV, arg_10064: GLhalfNV, arg_10065: GLhalfNV) void {
    return epoxy_glVertexAttrib4hNV.?(arg_10061, arg_10062, arg_10063, arg_10064, arg_10065);
}
pub inline fn glVertexAttrib4hvNV(arg_10066: GLuint, arg_10067: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttrib4hvNV.?(arg_10066, arg_10067);
}
pub inline fn glVertexAttrib4iv(arg_10068: GLuint, arg_10069: [*c]const GLint) void {
    return epoxy_glVertexAttrib4iv.?(arg_10068, arg_10069);
}
pub inline fn glVertexAttrib4ivARB(arg_10070: GLuint, arg_10071: [*c]const GLint) void {
    return epoxy_glVertexAttrib4ivARB.?(arg_10070, arg_10071);
}
pub inline fn glVertexAttrib4s(arg_10072: GLuint, arg_10073: GLshort, arg_10074: GLshort, arg_10075: GLshort, arg_10076: GLshort) void {
    return epoxy_glVertexAttrib4s.?(arg_10072, arg_10073, arg_10074, arg_10075, arg_10076);
}
pub inline fn glVertexAttrib4sARB(arg_10077: GLuint, arg_10078: GLshort, arg_10079: GLshort, arg_10080: GLshort, arg_10081: GLshort) void {
    return epoxy_glVertexAttrib4sARB.?(arg_10077, arg_10078, arg_10079, arg_10080, arg_10081);
}
pub inline fn glVertexAttrib4sNV(arg_10082: GLuint, arg_10083: GLshort, arg_10084: GLshort, arg_10085: GLshort, arg_10086: GLshort) void {
    return epoxy_glVertexAttrib4sNV.?(arg_10082, arg_10083, arg_10084, arg_10085, arg_10086);
}
pub inline fn glVertexAttrib4sv(arg_10087: GLuint, arg_10088: [*c]const GLshort) void {
    return epoxy_glVertexAttrib4sv.?(arg_10087, arg_10088);
}
pub inline fn glVertexAttrib4svARB(arg_10089: GLuint, arg_10090: [*c]const GLshort) void {
    return epoxy_glVertexAttrib4svARB.?(arg_10089, arg_10090);
}
pub inline fn glVertexAttrib4svNV(arg_10091: GLuint, arg_10092: [*c]const GLshort) void {
    return epoxy_glVertexAttrib4svNV.?(arg_10091, arg_10092);
}
pub inline fn glVertexAttrib4ubNV(arg_10093: GLuint, arg_10094: GLubyte, arg_10095: GLubyte, arg_10096: GLubyte, arg_10097: GLubyte) void {
    return epoxy_glVertexAttrib4ubNV.?(arg_10093, arg_10094, arg_10095, arg_10096, arg_10097);
}
pub inline fn glVertexAttrib4ubv(arg_10098: GLuint, arg_10099: [*c]const GLubyte) void {
    return epoxy_glVertexAttrib4ubv.?(arg_10098, arg_10099);
}
pub inline fn glVertexAttrib4ubvARB(arg_10100: GLuint, arg_10101: [*c]const GLubyte) void {
    return epoxy_glVertexAttrib4ubvARB.?(arg_10100, arg_10101);
}
pub inline fn glVertexAttrib4ubvNV(arg_10102: GLuint, arg_10103: [*c]const GLubyte) void {
    return epoxy_glVertexAttrib4ubvNV.?(arg_10102, arg_10103);
}
pub inline fn glVertexAttrib4uiv(arg_10104: GLuint, arg_10105: [*c]const GLuint) void {
    return epoxy_glVertexAttrib4uiv.?(arg_10104, arg_10105);
}
pub inline fn glVertexAttrib4uivARB(arg_10106: GLuint, arg_10107: [*c]const GLuint) void {
    return epoxy_glVertexAttrib4uivARB.?(arg_10106, arg_10107);
}
pub inline fn glVertexAttrib4usv(arg_10108: GLuint, arg_10109: [*c]const GLushort) void {
    return epoxy_glVertexAttrib4usv.?(arg_10108, arg_10109);
}
pub inline fn glVertexAttrib4usvARB(arg_10110: GLuint, arg_10111: [*c]const GLushort) void {
    return epoxy_glVertexAttrib4usvARB.?(arg_10110, arg_10111);
}
pub inline fn glVertexAttribArrayObjectATI(arg_10112: GLuint, arg_10113: GLint, arg_10114: GLenum, arg_10115: GLboolean, arg_10116: GLsizei, arg_10117: GLuint, arg_10118: GLuint) void {
    return epoxy_glVertexAttribArrayObjectATI.?(arg_10112, arg_10113, arg_10114, arg_10115, arg_10116, arg_10117, arg_10118);
}
pub inline fn glVertexAttribBinding(arg_10119: GLuint, arg_10120: GLuint) void {
    return epoxy_glVertexAttribBinding.?(arg_10119, arg_10120);
}
pub inline fn glVertexAttribDivisor(arg_10121: GLuint, arg_10122: GLuint) void {
    return epoxy_glVertexAttribDivisor.?(arg_10121, arg_10122);
}
pub inline fn glVertexAttribDivisorANGLE(arg_10123: GLuint, arg_10124: GLuint) void {
    return epoxy_glVertexAttribDivisorANGLE.?(arg_10123, arg_10124);
}
pub inline fn glVertexAttribDivisorARB(arg_10125: GLuint, arg_10126: GLuint) void {
    return epoxy_glVertexAttribDivisorARB.?(arg_10125, arg_10126);
}
pub inline fn glVertexAttribDivisorEXT(arg_10127: GLuint, arg_10128: GLuint) void {
    return epoxy_glVertexAttribDivisorEXT.?(arg_10127, arg_10128);
}
pub inline fn glVertexAttribDivisorNV(arg_10129: GLuint, arg_10130: GLuint) void {
    return epoxy_glVertexAttribDivisorNV.?(arg_10129, arg_10130);
}
pub inline fn glVertexAttribFormat(arg_10131: GLuint, arg_10132: GLint, arg_10133: GLenum, arg_10134: GLboolean, arg_10135: GLuint) void {
    return epoxy_glVertexAttribFormat.?(arg_10131, arg_10132, arg_10133, arg_10134, arg_10135);
}
pub inline fn glVertexAttribFormatNV(arg_10136: GLuint, arg_10137: GLint, arg_10138: GLenum, arg_10139: GLboolean, arg_10140: GLsizei) void {
    return epoxy_glVertexAttribFormatNV.?(arg_10136, arg_10137, arg_10138, arg_10139, arg_10140);
}
pub inline fn glVertexAttribI1i(arg_10141: GLuint, arg_10142: GLint) void {
    return epoxy_glVertexAttribI1i.?(arg_10141, arg_10142);
}
pub inline fn glVertexAttribI1iEXT(arg_10143: GLuint, arg_10144: GLint) void {
    return epoxy_glVertexAttribI1iEXT.?(arg_10143, arg_10144);
}
pub inline fn glVertexAttribI1iv(arg_10145: GLuint, arg_10146: [*c]const GLint) void {
    return epoxy_glVertexAttribI1iv.?(arg_10145, arg_10146);
}
pub inline fn glVertexAttribI1ivEXT(arg_10147: GLuint, arg_10148: [*c]const GLint) void {
    return epoxy_glVertexAttribI1ivEXT.?(arg_10147, arg_10148);
}
pub inline fn glVertexAttribI1ui(arg_10149: GLuint, arg_10150: GLuint) void {
    return epoxy_glVertexAttribI1ui.?(arg_10149, arg_10150);
}
pub inline fn glVertexAttribI1uiEXT(arg_10151: GLuint, arg_10152: GLuint) void {
    return epoxy_glVertexAttribI1uiEXT.?(arg_10151, arg_10152);
}
pub inline fn glVertexAttribI1uiv(arg_10153: GLuint, arg_10154: [*c]const GLuint) void {
    return epoxy_glVertexAttribI1uiv.?(arg_10153, arg_10154);
}
pub inline fn glVertexAttribI1uivEXT(arg_10155: GLuint, arg_10156: [*c]const GLuint) void {
    return epoxy_glVertexAttribI1uivEXT.?(arg_10155, arg_10156);
}
pub inline fn glVertexAttribI2i(arg_10157: GLuint, arg_10158: GLint, arg_10159: GLint) void {
    return epoxy_glVertexAttribI2i.?(arg_10157, arg_10158, arg_10159);
}
pub inline fn glVertexAttribI2iEXT(arg_10160: GLuint, arg_10161: GLint, arg_10162: GLint) void {
    return epoxy_glVertexAttribI2iEXT.?(arg_10160, arg_10161, arg_10162);
}
pub inline fn glVertexAttribI2iv(arg_10163: GLuint, arg_10164: [*c]const GLint) void {
    return epoxy_glVertexAttribI2iv.?(arg_10163, arg_10164);
}
pub inline fn glVertexAttribI2ivEXT(arg_10165: GLuint, arg_10166: [*c]const GLint) void {
    return epoxy_glVertexAttribI2ivEXT.?(arg_10165, arg_10166);
}
pub inline fn glVertexAttribI2ui(arg_10167: GLuint, arg_10168: GLuint, arg_10169: GLuint) void {
    return epoxy_glVertexAttribI2ui.?(arg_10167, arg_10168, arg_10169);
}
pub inline fn glVertexAttribI2uiEXT(arg_10170: GLuint, arg_10171: GLuint, arg_10172: GLuint) void {
    return epoxy_glVertexAttribI2uiEXT.?(arg_10170, arg_10171, arg_10172);
}
pub inline fn glVertexAttribI2uiv(arg_10173: GLuint, arg_10174: [*c]const GLuint) void {
    return epoxy_glVertexAttribI2uiv.?(arg_10173, arg_10174);
}
pub inline fn glVertexAttribI2uivEXT(arg_10175: GLuint, arg_10176: [*c]const GLuint) void {
    return epoxy_glVertexAttribI2uivEXT.?(arg_10175, arg_10176);
}
pub inline fn glVertexAttribI3i(arg_10177: GLuint, arg_10178: GLint, arg_10179: GLint, arg_10180: GLint) void {
    return epoxy_glVertexAttribI3i.?(arg_10177, arg_10178, arg_10179, arg_10180);
}
pub inline fn glVertexAttribI3iEXT(arg_10181: GLuint, arg_10182: GLint, arg_10183: GLint, arg_10184: GLint) void {
    return epoxy_glVertexAttribI3iEXT.?(arg_10181, arg_10182, arg_10183, arg_10184);
}
pub inline fn glVertexAttribI3iv(arg_10185: GLuint, arg_10186: [*c]const GLint) void {
    return epoxy_glVertexAttribI3iv.?(arg_10185, arg_10186);
}
pub inline fn glVertexAttribI3ivEXT(arg_10187: GLuint, arg_10188: [*c]const GLint) void {
    return epoxy_glVertexAttribI3ivEXT.?(arg_10187, arg_10188);
}
pub inline fn glVertexAttribI3ui(arg_10189: GLuint, arg_10190: GLuint, arg_10191: GLuint, arg_10192: GLuint) void {
    return epoxy_glVertexAttribI3ui.?(arg_10189, arg_10190, arg_10191, arg_10192);
}
pub inline fn glVertexAttribI3uiEXT(arg_10193: GLuint, arg_10194: GLuint, arg_10195: GLuint, arg_10196: GLuint) void {
    return epoxy_glVertexAttribI3uiEXT.?(arg_10193, arg_10194, arg_10195, arg_10196);
}
pub inline fn glVertexAttribI3uiv(arg_10197: GLuint, arg_10198: [*c]const GLuint) void {
    return epoxy_glVertexAttribI3uiv.?(arg_10197, arg_10198);
}
pub inline fn glVertexAttribI3uivEXT(arg_10199: GLuint, arg_10200: [*c]const GLuint) void {
    return epoxy_glVertexAttribI3uivEXT.?(arg_10199, arg_10200);
}
pub inline fn glVertexAttribI4bv(arg_10201: GLuint, arg_10202: [*c]const GLbyte) void {
    return epoxy_glVertexAttribI4bv.?(arg_10201, arg_10202);
}
pub inline fn glVertexAttribI4bvEXT(arg_10203: GLuint, arg_10204: [*c]const GLbyte) void {
    return epoxy_glVertexAttribI4bvEXT.?(arg_10203, arg_10204);
}
pub inline fn glVertexAttribI4i(arg_10205: GLuint, arg_10206: GLint, arg_10207: GLint, arg_10208: GLint, arg_10209: GLint) void {
    return epoxy_glVertexAttribI4i.?(arg_10205, arg_10206, arg_10207, arg_10208, arg_10209);
}
pub inline fn glVertexAttribI4iEXT(arg_10210: GLuint, arg_10211: GLint, arg_10212: GLint, arg_10213: GLint, arg_10214: GLint) void {
    return epoxy_glVertexAttribI4iEXT.?(arg_10210, arg_10211, arg_10212, arg_10213, arg_10214);
}
pub inline fn glVertexAttribI4iv(arg_10215: GLuint, arg_10216: [*c]const GLint) void {
    return epoxy_glVertexAttribI4iv.?(arg_10215, arg_10216);
}
pub inline fn glVertexAttribI4ivEXT(arg_10217: GLuint, arg_10218: [*c]const GLint) void {
    return epoxy_glVertexAttribI4ivEXT.?(arg_10217, arg_10218);
}
pub inline fn glVertexAttribI4sv(arg_10219: GLuint, arg_10220: [*c]const GLshort) void {
    return epoxy_glVertexAttribI4sv.?(arg_10219, arg_10220);
}
pub inline fn glVertexAttribI4svEXT(arg_10221: GLuint, arg_10222: [*c]const GLshort) void {
    return epoxy_glVertexAttribI4svEXT.?(arg_10221, arg_10222);
}
pub inline fn glVertexAttribI4ubv(arg_10223: GLuint, arg_10224: [*c]const GLubyte) void {
    return epoxy_glVertexAttribI4ubv.?(arg_10223, arg_10224);
}
pub inline fn glVertexAttribI4ubvEXT(arg_10225: GLuint, arg_10226: [*c]const GLubyte) void {
    return epoxy_glVertexAttribI4ubvEXT.?(arg_10225, arg_10226);
}
pub inline fn glVertexAttribI4ui(arg_10227: GLuint, arg_10228: GLuint, arg_10229: GLuint, arg_10230: GLuint, arg_10231: GLuint) void {
    return epoxy_glVertexAttribI4ui.?(arg_10227, arg_10228, arg_10229, arg_10230, arg_10231);
}
pub inline fn glVertexAttribI4uiEXT(arg_10232: GLuint, arg_10233: GLuint, arg_10234: GLuint, arg_10235: GLuint, arg_10236: GLuint) void {
    return epoxy_glVertexAttribI4uiEXT.?(arg_10232, arg_10233, arg_10234, arg_10235, arg_10236);
}
pub inline fn glVertexAttribI4uiv(arg_10237: GLuint, arg_10238: [*c]const GLuint) void {
    return epoxy_glVertexAttribI4uiv.?(arg_10237, arg_10238);
}
pub inline fn glVertexAttribI4uivEXT(arg_10239: GLuint, arg_10240: [*c]const GLuint) void {
    return epoxy_glVertexAttribI4uivEXT.?(arg_10239, arg_10240);
}
pub inline fn glVertexAttribI4usv(arg_10241: GLuint, arg_10242: [*c]const GLushort) void {
    return epoxy_glVertexAttribI4usv.?(arg_10241, arg_10242);
}
pub inline fn glVertexAttribI4usvEXT(arg_10243: GLuint, arg_10244: [*c]const GLushort) void {
    return epoxy_glVertexAttribI4usvEXT.?(arg_10243, arg_10244);
}
pub inline fn glVertexAttribIFormat(arg_10245: GLuint, arg_10246: GLint, arg_10247: GLenum, arg_10248: GLuint) void {
    return epoxy_glVertexAttribIFormat.?(arg_10245, arg_10246, arg_10247, arg_10248);
}
pub inline fn glVertexAttribIFormatNV(arg_10249: GLuint, arg_10250: GLint, arg_10251: GLenum, arg_10252: GLsizei) void {
    return epoxy_glVertexAttribIFormatNV.?(arg_10249, arg_10250, arg_10251, arg_10252);
}
pub inline fn glVertexAttribIPointer(arg_10253: GLuint, arg_10254: GLint, arg_10255: GLenum, arg_10256: GLsizei, arg_10257: ?*const anyopaque) void {
    return epoxy_glVertexAttribIPointer.?(arg_10253, arg_10254, arg_10255, arg_10256, arg_10257);
}
pub inline fn glVertexAttribIPointerEXT(arg_10258: GLuint, arg_10259: GLint, arg_10260: GLenum, arg_10261: GLsizei, arg_10262: ?*const anyopaque) void {
    return epoxy_glVertexAttribIPointerEXT.?(arg_10258, arg_10259, arg_10260, arg_10261, arg_10262);
}
pub inline fn glVertexAttribL1d(arg_10263: GLuint, arg_10264: GLdouble) void {
    return epoxy_glVertexAttribL1d.?(arg_10263, arg_10264);
}
pub inline fn glVertexAttribL1dEXT(arg_10265: GLuint, arg_10266: GLdouble) void {
    return epoxy_glVertexAttribL1dEXT.?(arg_10265, arg_10266);
}
pub inline fn glVertexAttribL1dv(arg_10267: GLuint, arg_10268: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL1dv.?(arg_10267, arg_10268);
}
pub inline fn glVertexAttribL1dvEXT(arg_10269: GLuint, arg_10270: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL1dvEXT.?(arg_10269, arg_10270);
}
pub inline fn glVertexAttribL1i64NV(arg_10271: GLuint, arg_10272: GLint64EXT) void {
    return epoxy_glVertexAttribL1i64NV.?(arg_10271, arg_10272);
}
pub inline fn glVertexAttribL1i64vNV(arg_10273: GLuint, arg_10274: [*c]const GLint64EXT) void {
    return epoxy_glVertexAttribL1i64vNV.?(arg_10273, arg_10274);
}
pub inline fn glVertexAttribL1ui64ARB(arg_10275: GLuint, arg_10276: GLuint64EXT) void {
    return epoxy_glVertexAttribL1ui64ARB.?(arg_10275, arg_10276);
}
pub inline fn glVertexAttribL1ui64NV(arg_10277: GLuint, arg_10278: GLuint64EXT) void {
    return epoxy_glVertexAttribL1ui64NV.?(arg_10277, arg_10278);
}
pub inline fn glVertexAttribL1ui64vARB(arg_10279: GLuint, arg_10280: [*c]const GLuint64EXT) void {
    return epoxy_glVertexAttribL1ui64vARB.?(arg_10279, arg_10280);
}
pub inline fn glVertexAttribL1ui64vNV(arg_10281: GLuint, arg_10282: [*c]const GLuint64EXT) void {
    return epoxy_glVertexAttribL1ui64vNV.?(arg_10281, arg_10282);
}
pub inline fn glVertexAttribL2d(arg_10283: GLuint, arg_10284: GLdouble, arg_10285: GLdouble) void {
    return epoxy_glVertexAttribL2d.?(arg_10283, arg_10284, arg_10285);
}
pub inline fn glVertexAttribL2dEXT(arg_10286: GLuint, arg_10287: GLdouble, arg_10288: GLdouble) void {
    return epoxy_glVertexAttribL2dEXT.?(arg_10286, arg_10287, arg_10288);
}
pub inline fn glVertexAttribL2dv(arg_10289: GLuint, arg_10290: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL2dv.?(arg_10289, arg_10290);
}
pub inline fn glVertexAttribL2dvEXT(arg_10291: GLuint, arg_10292: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL2dvEXT.?(arg_10291, arg_10292);
}
pub inline fn glVertexAttribL2i64NV(arg_10293: GLuint, arg_10294: GLint64EXT, arg_10295: GLint64EXT) void {
    return epoxy_glVertexAttribL2i64NV.?(arg_10293, arg_10294, arg_10295);
}
pub inline fn glVertexAttribL2i64vNV(arg_10296: GLuint, arg_10297: [*c]const GLint64EXT) void {
    return epoxy_glVertexAttribL2i64vNV.?(arg_10296, arg_10297);
}
pub inline fn glVertexAttribL2ui64NV(arg_10298: GLuint, arg_10299: GLuint64EXT, arg_10300: GLuint64EXT) void {
    return epoxy_glVertexAttribL2ui64NV.?(arg_10298, arg_10299, arg_10300);
}
pub inline fn glVertexAttribL2ui64vNV(arg_10301: GLuint, arg_10302: [*c]const GLuint64EXT) void {
    return epoxy_glVertexAttribL2ui64vNV.?(arg_10301, arg_10302);
}
pub inline fn glVertexAttribL3d(arg_10303: GLuint, arg_10304: GLdouble, arg_10305: GLdouble, arg_10306: GLdouble) void {
    return epoxy_glVertexAttribL3d.?(arg_10303, arg_10304, arg_10305, arg_10306);
}
pub inline fn glVertexAttribL3dEXT(arg_10307: GLuint, arg_10308: GLdouble, arg_10309: GLdouble, arg_10310: GLdouble) void {
    return epoxy_glVertexAttribL3dEXT.?(arg_10307, arg_10308, arg_10309, arg_10310);
}
pub inline fn glVertexAttribL3dv(arg_10311: GLuint, arg_10312: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL3dv.?(arg_10311, arg_10312);
}
pub inline fn glVertexAttribL3dvEXT(arg_10313: GLuint, arg_10314: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL3dvEXT.?(arg_10313, arg_10314);
}
pub inline fn glVertexAttribL3i64NV(arg_10315: GLuint, arg_10316: GLint64EXT, arg_10317: GLint64EXT, arg_10318: GLint64EXT) void {
    return epoxy_glVertexAttribL3i64NV.?(arg_10315, arg_10316, arg_10317, arg_10318);
}
pub inline fn glVertexAttribL3i64vNV(arg_10319: GLuint, arg_10320: [*c]const GLint64EXT) void {
    return epoxy_glVertexAttribL3i64vNV.?(arg_10319, arg_10320);
}
pub inline fn glVertexAttribL3ui64NV(arg_10321: GLuint, arg_10322: GLuint64EXT, arg_10323: GLuint64EXT, arg_10324: GLuint64EXT) void {
    return epoxy_glVertexAttribL3ui64NV.?(arg_10321, arg_10322, arg_10323, arg_10324);
}
pub inline fn glVertexAttribL3ui64vNV(arg_10325: GLuint, arg_10326: [*c]const GLuint64EXT) void {
    return epoxy_glVertexAttribL3ui64vNV.?(arg_10325, arg_10326);
}
pub inline fn glVertexAttribL4d(arg_10327: GLuint, arg_10328: GLdouble, arg_10329: GLdouble, arg_10330: GLdouble, arg_10331: GLdouble) void {
    return epoxy_glVertexAttribL4d.?(arg_10327, arg_10328, arg_10329, arg_10330, arg_10331);
}
pub inline fn glVertexAttribL4dEXT(arg_10332: GLuint, arg_10333: GLdouble, arg_10334: GLdouble, arg_10335: GLdouble, arg_10336: GLdouble) void {
    return epoxy_glVertexAttribL4dEXT.?(arg_10332, arg_10333, arg_10334, arg_10335, arg_10336);
}
pub inline fn glVertexAttribL4dv(arg_10337: GLuint, arg_10338: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL4dv.?(arg_10337, arg_10338);
}
pub inline fn glVertexAttribL4dvEXT(arg_10339: GLuint, arg_10340: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL4dvEXT.?(arg_10339, arg_10340);
}
pub inline fn glVertexAttribL4i64NV(arg_10341: GLuint, arg_10342: GLint64EXT, arg_10343: GLint64EXT, arg_10344: GLint64EXT, arg_10345: GLint64EXT) void {
    return epoxy_glVertexAttribL4i64NV.?(arg_10341, arg_10342, arg_10343, arg_10344, arg_10345);
}
pub inline fn glVertexAttribL4i64vNV(arg_10346: GLuint, arg_10347: [*c]const GLint64EXT) void {
    return epoxy_glVertexAttribL4i64vNV.?(arg_10346, arg_10347);
}
pub inline fn glVertexAttribL4ui64NV(arg_10348: GLuint, arg_10349: GLuint64EXT, arg_10350: GLuint64EXT, arg_10351: GLuint64EXT, arg_10352: GLuint64EXT) void {
    return epoxy_glVertexAttribL4ui64NV.?(arg_10348, arg_10349, arg_10350, arg_10351, arg_10352);
}
pub inline fn glVertexAttribL4ui64vNV(arg_10353: GLuint, arg_10354: [*c]const GLuint64EXT) void {
    return epoxy_glVertexAttribL4ui64vNV.?(arg_10353, arg_10354);
}
pub inline fn glVertexAttribLFormat(arg_10355: GLuint, arg_10356: GLint, arg_10357: GLenum, arg_10358: GLuint) void {
    return epoxy_glVertexAttribLFormat.?(arg_10355, arg_10356, arg_10357, arg_10358);
}
pub inline fn glVertexAttribLFormatNV(arg_10359: GLuint, arg_10360: GLint, arg_10361: GLenum, arg_10362: GLsizei) void {
    return epoxy_glVertexAttribLFormatNV.?(arg_10359, arg_10360, arg_10361, arg_10362);
}
pub inline fn glVertexAttribLPointer(arg_10363: GLuint, arg_10364: GLint, arg_10365: GLenum, arg_10366: GLsizei, arg_10367: ?*const anyopaque) void {
    return epoxy_glVertexAttribLPointer.?(arg_10363, arg_10364, arg_10365, arg_10366, arg_10367);
}
pub inline fn glVertexAttribLPointerEXT(arg_10368: GLuint, arg_10369: GLint, arg_10370: GLenum, arg_10371: GLsizei, arg_10372: ?*const anyopaque) void {
    return epoxy_glVertexAttribLPointerEXT.?(arg_10368, arg_10369, arg_10370, arg_10371, arg_10372);
}
pub inline fn glVertexAttribP1ui(arg_10373: GLuint, arg_10374: GLenum, arg_10375: GLboolean, arg_10376: GLuint) void {
    return epoxy_glVertexAttribP1ui.?(arg_10373, arg_10374, arg_10375, arg_10376);
}
pub inline fn glVertexAttribP1uiv(arg_10377: GLuint, arg_10378: GLenum, arg_10379: GLboolean, arg_10380: [*c]const GLuint) void {
    return epoxy_glVertexAttribP1uiv.?(arg_10377, arg_10378, arg_10379, arg_10380);
}
pub inline fn glVertexAttribP2ui(arg_10381: GLuint, arg_10382: GLenum, arg_10383: GLboolean, arg_10384: GLuint) void {
    return epoxy_glVertexAttribP2ui.?(arg_10381, arg_10382, arg_10383, arg_10384);
}
pub inline fn glVertexAttribP2uiv(arg_10385: GLuint, arg_10386: GLenum, arg_10387: GLboolean, arg_10388: [*c]const GLuint) void {
    return epoxy_glVertexAttribP2uiv.?(arg_10385, arg_10386, arg_10387, arg_10388);
}
pub inline fn glVertexAttribP3ui(arg_10389: GLuint, arg_10390: GLenum, arg_10391: GLboolean, arg_10392: GLuint) void {
    return epoxy_glVertexAttribP3ui.?(arg_10389, arg_10390, arg_10391, arg_10392);
}
pub inline fn glVertexAttribP3uiv(arg_10393: GLuint, arg_10394: GLenum, arg_10395: GLboolean, arg_10396: [*c]const GLuint) void {
    return epoxy_glVertexAttribP3uiv.?(arg_10393, arg_10394, arg_10395, arg_10396);
}
pub inline fn glVertexAttribP4ui(arg_10397: GLuint, arg_10398: GLenum, arg_10399: GLboolean, arg_10400: GLuint) void {
    return epoxy_glVertexAttribP4ui.?(arg_10397, arg_10398, arg_10399, arg_10400);
}
pub inline fn glVertexAttribP4uiv(arg_10401: GLuint, arg_10402: GLenum, arg_10403: GLboolean, arg_10404: [*c]const GLuint) void {
    return epoxy_glVertexAttribP4uiv.?(arg_10401, arg_10402, arg_10403, arg_10404);
}
pub inline fn glVertexAttribParameteriAMD(arg_10405: GLuint, arg_10406: GLenum, arg_10407: GLint) void {
    return epoxy_glVertexAttribParameteriAMD.?(arg_10405, arg_10406, arg_10407);
}
pub inline fn glVertexAttribPointer(arg_10408: GLuint, arg_10409: GLint, arg_10410: GLenum, arg_10411: GLboolean, arg_10412: GLsizei, arg_10413: ?*const anyopaque) void {
    return epoxy_glVertexAttribPointer.?(arg_10408, arg_10409, arg_10410, arg_10411, arg_10412, arg_10413);
}
pub inline fn glVertexAttribPointerARB(arg_10414: GLuint, arg_10415: GLint, arg_10416: GLenum, arg_10417: GLboolean, arg_10418: GLsizei, arg_10419: ?*const anyopaque) void {
    return epoxy_glVertexAttribPointerARB.?(arg_10414, arg_10415, arg_10416, arg_10417, arg_10418, arg_10419);
}
pub inline fn glVertexAttribPointerNV(arg_10420: GLuint, arg_10421: GLint, arg_10422: GLenum, arg_10423: GLsizei, arg_10424: ?*const anyopaque) void {
    return epoxy_glVertexAttribPointerNV.?(arg_10420, arg_10421, arg_10422, arg_10423, arg_10424);
}
pub inline fn glVertexAttribs1dvNV(arg_10425: GLuint, arg_10426: GLsizei, arg_10427: [*c]const GLdouble) void {
    return epoxy_glVertexAttribs1dvNV.?(arg_10425, arg_10426, arg_10427);
}
pub inline fn glVertexAttribs1fvNV(arg_10428: GLuint, arg_10429: GLsizei, arg_10430: [*c]const GLfloat) void {
    return epoxy_glVertexAttribs1fvNV.?(arg_10428, arg_10429, arg_10430);
}
pub inline fn glVertexAttribs1hvNV(arg_10431: GLuint, arg_10432: GLsizei, arg_10433: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttribs1hvNV.?(arg_10431, arg_10432, arg_10433);
}
pub inline fn glVertexAttribs1svNV(arg_10434: GLuint, arg_10435: GLsizei, arg_10436: [*c]const GLshort) void {
    return epoxy_glVertexAttribs1svNV.?(arg_10434, arg_10435, arg_10436);
}
pub inline fn glVertexAttribs2dvNV(arg_10437: GLuint, arg_10438: GLsizei, arg_10439: [*c]const GLdouble) void {
    return epoxy_glVertexAttribs2dvNV.?(arg_10437, arg_10438, arg_10439);
}
pub inline fn glVertexAttribs2fvNV(arg_10440: GLuint, arg_10441: GLsizei, arg_10442: [*c]const GLfloat) void {
    return epoxy_glVertexAttribs2fvNV.?(arg_10440, arg_10441, arg_10442);
}
pub inline fn glVertexAttribs2hvNV(arg_10443: GLuint, arg_10444: GLsizei, arg_10445: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttribs2hvNV.?(arg_10443, arg_10444, arg_10445);
}
pub inline fn glVertexAttribs2svNV(arg_10446: GLuint, arg_10447: GLsizei, arg_10448: [*c]const GLshort) void {
    return epoxy_glVertexAttribs2svNV.?(arg_10446, arg_10447, arg_10448);
}
pub inline fn glVertexAttribs3dvNV(arg_10449: GLuint, arg_10450: GLsizei, arg_10451: [*c]const GLdouble) void {
    return epoxy_glVertexAttribs3dvNV.?(arg_10449, arg_10450, arg_10451);
}
pub inline fn glVertexAttribs3fvNV(arg_10452: GLuint, arg_10453: GLsizei, arg_10454: [*c]const GLfloat) void {
    return epoxy_glVertexAttribs3fvNV.?(arg_10452, arg_10453, arg_10454);
}
pub inline fn glVertexAttribs3hvNV(arg_10455: GLuint, arg_10456: GLsizei, arg_10457: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttribs3hvNV.?(arg_10455, arg_10456, arg_10457);
}
pub inline fn glVertexAttribs3svNV(arg_10458: GLuint, arg_10459: GLsizei, arg_10460: [*c]const GLshort) void {
    return epoxy_glVertexAttribs3svNV.?(arg_10458, arg_10459, arg_10460);
}
pub inline fn glVertexAttribs4dvNV(arg_10461: GLuint, arg_10462: GLsizei, arg_10463: [*c]const GLdouble) void {
    return epoxy_glVertexAttribs4dvNV.?(arg_10461, arg_10462, arg_10463);
}
pub inline fn glVertexAttribs4fvNV(arg_10464: GLuint, arg_10465: GLsizei, arg_10466: [*c]const GLfloat) void {
    return epoxy_glVertexAttribs4fvNV.?(arg_10464, arg_10465, arg_10466);
}
pub inline fn glVertexAttribs4hvNV(arg_10467: GLuint, arg_10468: GLsizei, arg_10469: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttribs4hvNV.?(arg_10467, arg_10468, arg_10469);
}
pub inline fn glVertexAttribs4svNV(arg_10470: GLuint, arg_10471: GLsizei, arg_10472: [*c]const GLshort) void {
    return epoxy_glVertexAttribs4svNV.?(arg_10470, arg_10471, arg_10472);
}
pub inline fn glVertexAttribs4ubvNV(arg_10473: GLuint, arg_10474: GLsizei, arg_10475: [*c]const GLubyte) void {
    return epoxy_glVertexAttribs4ubvNV.?(arg_10473, arg_10474, arg_10475);
}
pub inline fn glVertexBindingDivisor(arg_10476: GLuint, arg_10477: GLuint) void {
    return epoxy_glVertexBindingDivisor.?(arg_10476, arg_10477);
}
pub inline fn glVertexBlendARB(arg_10478: GLint) void {
    return epoxy_glVertexBlendARB.?(arg_10478);
}
pub inline fn glVertexBlendEnvfATI(arg_10479: GLenum, arg_10480: GLfloat) void {
    return epoxy_glVertexBlendEnvfATI.?(arg_10479, arg_10480);
}
pub inline fn glVertexBlendEnviATI(arg_10481: GLenum, arg_10482: GLint) void {
    return epoxy_glVertexBlendEnviATI.?(arg_10481, arg_10482);
}
pub inline fn glVertexFormatNV(arg_10483: GLint, arg_10484: GLenum, arg_10485: GLsizei) void {
    return epoxy_glVertexFormatNV.?(arg_10483, arg_10484, arg_10485);
}
pub inline fn glVertexP2ui(arg_10486: GLenum, arg_10487: GLuint) void {
    return epoxy_glVertexP2ui.?(arg_10486, arg_10487);
}
pub inline fn glVertexP2uiv(arg_10488: GLenum, arg_10489: [*c]const GLuint) void {
    return epoxy_glVertexP2uiv.?(arg_10488, arg_10489);
}
pub inline fn glVertexP3ui(arg_10490: GLenum, arg_10491: GLuint) void {
    return epoxy_glVertexP3ui.?(arg_10490, arg_10491);
}
pub inline fn glVertexP3uiv(arg_10492: GLenum, arg_10493: [*c]const GLuint) void {
    return epoxy_glVertexP3uiv.?(arg_10492, arg_10493);
}
pub inline fn glVertexP4ui(arg_10494: GLenum, arg_10495: GLuint) void {
    return epoxy_glVertexP4ui.?(arg_10494, arg_10495);
}
pub inline fn glVertexP4uiv(arg_10496: GLenum, arg_10497: [*c]const GLuint) void {
    return epoxy_glVertexP4uiv.?(arg_10496, arg_10497);
}
pub inline fn glVertexPointer(arg_10498: GLint, arg_10499: GLenum, arg_10500: GLsizei, arg_10501: ?*const anyopaque) void {
    return epoxy_glVertexPointer.?(arg_10498, arg_10499, arg_10500, arg_10501);
}
pub inline fn glVertexPointerEXT(arg_10502: GLint, arg_10503: GLenum, arg_10504: GLsizei, arg_10505: GLsizei, arg_10506: ?*const anyopaque) void {
    return epoxy_glVertexPointerEXT.?(arg_10502, arg_10503, arg_10504, arg_10505, arg_10506);
}
pub inline fn glVertexPointerListIBM(arg_10507: GLint, arg_10508: GLenum, arg_10509: GLint, arg_10510: [*c]?*const anyopaque, arg_10511: GLint) void {
    return epoxy_glVertexPointerListIBM.?(arg_10507, arg_10508, arg_10509, arg_10510, arg_10511);
}
pub inline fn glVertexPointervINTEL(arg_10512: GLint, arg_10513: GLenum, arg_10514: [*c]?*const anyopaque) void {
    return epoxy_glVertexPointervINTEL.?(arg_10512, arg_10513, arg_10514);
}
pub inline fn glVertexStream1dATI(arg_10515: GLenum, arg_10516: GLdouble) void {
    return epoxy_glVertexStream1dATI.?(arg_10515, arg_10516);
}
pub inline fn glVertexStream1dvATI(arg_10517: GLenum, arg_10518: [*c]const GLdouble) void {
    return epoxy_glVertexStream1dvATI.?(arg_10517, arg_10518);
}
pub inline fn glVertexStream1fATI(arg_10519: GLenum, arg_10520: GLfloat) void {
    return epoxy_glVertexStream1fATI.?(arg_10519, arg_10520);
}
pub inline fn glVertexStream1fvATI(arg_10521: GLenum, arg_10522: [*c]const GLfloat) void {
    return epoxy_glVertexStream1fvATI.?(arg_10521, arg_10522);
}
pub inline fn glVertexStream1iATI(arg_10523: GLenum, arg_10524: GLint) void {
    return epoxy_glVertexStream1iATI.?(arg_10523, arg_10524);
}
pub inline fn glVertexStream1ivATI(arg_10525: GLenum, arg_10526: [*c]const GLint) void {
    return epoxy_glVertexStream1ivATI.?(arg_10525, arg_10526);
}
pub inline fn glVertexStream1sATI(arg_10527: GLenum, arg_10528: GLshort) void {
    return epoxy_glVertexStream1sATI.?(arg_10527, arg_10528);
}
pub inline fn glVertexStream1svATI(arg_10529: GLenum, arg_10530: [*c]const GLshort) void {
    return epoxy_glVertexStream1svATI.?(arg_10529, arg_10530);
}
pub inline fn glVertexStream2dATI(arg_10531: GLenum, arg_10532: GLdouble, arg_10533: GLdouble) void {
    return epoxy_glVertexStream2dATI.?(arg_10531, arg_10532, arg_10533);
}
pub inline fn glVertexStream2dvATI(arg_10534: GLenum, arg_10535: [*c]const GLdouble) void {
    return epoxy_glVertexStream2dvATI.?(arg_10534, arg_10535);
}
pub inline fn glVertexStream2fATI(arg_10536: GLenum, arg_10537: GLfloat, arg_10538: GLfloat) void {
    return epoxy_glVertexStream2fATI.?(arg_10536, arg_10537, arg_10538);
}
pub inline fn glVertexStream2fvATI(arg_10539: GLenum, arg_10540: [*c]const GLfloat) void {
    return epoxy_glVertexStream2fvATI.?(arg_10539, arg_10540);
}
pub inline fn glVertexStream2iATI(arg_10541: GLenum, arg_10542: GLint, arg_10543: GLint) void {
    return epoxy_glVertexStream2iATI.?(arg_10541, arg_10542, arg_10543);
}
pub inline fn glVertexStream2ivATI(arg_10544: GLenum, arg_10545: [*c]const GLint) void {
    return epoxy_glVertexStream2ivATI.?(arg_10544, arg_10545);
}
pub inline fn glVertexStream2sATI(arg_10546: GLenum, arg_10547: GLshort, arg_10548: GLshort) void {
    return epoxy_glVertexStream2sATI.?(arg_10546, arg_10547, arg_10548);
}
pub inline fn glVertexStream2svATI(arg_10549: GLenum, arg_10550: [*c]const GLshort) void {
    return epoxy_glVertexStream2svATI.?(arg_10549, arg_10550);
}
pub inline fn glVertexStream3dATI(arg_10551: GLenum, arg_10552: GLdouble, arg_10553: GLdouble, arg_10554: GLdouble) void {
    return epoxy_glVertexStream3dATI.?(arg_10551, arg_10552, arg_10553, arg_10554);
}
pub inline fn glVertexStream3dvATI(arg_10555: GLenum, arg_10556: [*c]const GLdouble) void {
    return epoxy_glVertexStream3dvATI.?(arg_10555, arg_10556);
}
pub inline fn glVertexStream3fATI(arg_10557: GLenum, arg_10558: GLfloat, arg_10559: GLfloat, arg_10560: GLfloat) void {
    return epoxy_glVertexStream3fATI.?(arg_10557, arg_10558, arg_10559, arg_10560);
}
pub inline fn glVertexStream3fvATI(arg_10561: GLenum, arg_10562: [*c]const GLfloat) void {
    return epoxy_glVertexStream3fvATI.?(arg_10561, arg_10562);
}
pub inline fn glVertexStream3iATI(arg_10563: GLenum, arg_10564: GLint, arg_10565: GLint, arg_10566: GLint) void {
    return epoxy_glVertexStream3iATI.?(arg_10563, arg_10564, arg_10565, arg_10566);
}
pub inline fn glVertexStream3ivATI(arg_10567: GLenum, arg_10568: [*c]const GLint) void {
    return epoxy_glVertexStream3ivATI.?(arg_10567, arg_10568);
}
pub inline fn glVertexStream3sATI(arg_10569: GLenum, arg_10570: GLshort, arg_10571: GLshort, arg_10572: GLshort) void {
    return epoxy_glVertexStream3sATI.?(arg_10569, arg_10570, arg_10571, arg_10572);
}
pub inline fn glVertexStream3svATI(arg_10573: GLenum, arg_10574: [*c]const GLshort) void {
    return epoxy_glVertexStream3svATI.?(arg_10573, arg_10574);
}
pub inline fn glVertexStream4dATI(arg_10575: GLenum, arg_10576: GLdouble, arg_10577: GLdouble, arg_10578: GLdouble, arg_10579: GLdouble) void {
    return epoxy_glVertexStream4dATI.?(arg_10575, arg_10576, arg_10577, arg_10578, arg_10579);
}
pub inline fn glVertexStream4dvATI(arg_10580: GLenum, arg_10581: [*c]const GLdouble) void {
    return epoxy_glVertexStream4dvATI.?(arg_10580, arg_10581);
}
pub inline fn glVertexStream4fATI(arg_10582: GLenum, arg_10583: GLfloat, arg_10584: GLfloat, arg_10585: GLfloat, arg_10586: GLfloat) void {
    return epoxy_glVertexStream4fATI.?(arg_10582, arg_10583, arg_10584, arg_10585, arg_10586);
}
pub inline fn glVertexStream4fvATI(arg_10587: GLenum, arg_10588: [*c]const GLfloat) void {
    return epoxy_glVertexStream4fvATI.?(arg_10587, arg_10588);
}
pub inline fn glVertexStream4iATI(arg_10589: GLenum, arg_10590: GLint, arg_10591: GLint, arg_10592: GLint, arg_10593: GLint) void {
    return epoxy_glVertexStream4iATI.?(arg_10589, arg_10590, arg_10591, arg_10592, arg_10593);
}
pub inline fn glVertexStream4ivATI(arg_10594: GLenum, arg_10595: [*c]const GLint) void {
    return epoxy_glVertexStream4ivATI.?(arg_10594, arg_10595);
}
pub inline fn glVertexStream4sATI(arg_10596: GLenum, arg_10597: GLshort, arg_10598: GLshort, arg_10599: GLshort, arg_10600: GLshort) void {
    return epoxy_glVertexStream4sATI.?(arg_10596, arg_10597, arg_10598, arg_10599, arg_10600);
}
pub inline fn glVertexStream4svATI(arg_10601: GLenum, arg_10602: [*c]const GLshort) void {
    return epoxy_glVertexStream4svATI.?(arg_10601, arg_10602);
}
pub inline fn glVertexWeightPointerEXT(arg_10603: GLint, arg_10604: GLenum, arg_10605: GLsizei, arg_10606: ?*const anyopaque) void {
    return epoxy_glVertexWeightPointerEXT.?(arg_10603, arg_10604, arg_10605, arg_10606);
}
pub inline fn glVertexWeightfEXT(arg_10607: GLfloat) void {
    return epoxy_glVertexWeightfEXT.?(arg_10607);
}
pub inline fn glVertexWeightfvEXT(arg_10608: [*c]const GLfloat) void {
    return epoxy_glVertexWeightfvEXT.?(arg_10608);
}
pub inline fn glVertexWeighthNV(arg_10609: GLhalfNV) void {
    return epoxy_glVertexWeighthNV.?(arg_10609);
}
pub inline fn glVertexWeighthvNV(arg_10610: [*c]const GLhalfNV) void {
    return epoxy_glVertexWeighthvNV.?(arg_10610);
}
pub inline fn glVideoCaptureNV(arg_10611: GLuint, arg_10612: [*c]GLuint, arg_10613: [*c]GLuint64EXT) GLenum {
    return epoxy_glVideoCaptureNV.?(arg_10611, arg_10612, arg_10613);
}
pub inline fn glVideoCaptureStreamParameterdvNV(arg_10614: GLuint, arg_10615: GLuint, arg_10616: GLenum, arg_10617: [*c]const GLdouble) void {
    return epoxy_glVideoCaptureStreamParameterdvNV.?(arg_10614, arg_10615, arg_10616, arg_10617);
}
pub inline fn glVideoCaptureStreamParameterfvNV(arg_10618: GLuint, arg_10619: GLuint, arg_10620: GLenum, arg_10621: [*c]const GLfloat) void {
    return epoxy_glVideoCaptureStreamParameterfvNV.?(arg_10618, arg_10619, arg_10620, arg_10621);
}
pub inline fn glVideoCaptureStreamParameterivNV(arg_10622: GLuint, arg_10623: GLuint, arg_10624: GLenum, arg_10625: [*c]const GLint) void {
    return epoxy_glVideoCaptureStreamParameterivNV.?(arg_10622, arg_10623, arg_10624, arg_10625);
}
pub inline fn glViewport(arg_10626: GLint, arg_10627: GLint, arg_10628: GLsizei, arg_10629: GLsizei) void {
    return epoxy_glViewport.?(arg_10626, arg_10627, arg_10628, arg_10629);
}
pub inline fn glViewportArrayv(arg_10630: GLuint, arg_10631: GLsizei, arg_10632: [*c]const GLfloat) void {
    return epoxy_glViewportArrayv.?(arg_10630, arg_10631, arg_10632);
}
pub inline fn glViewportArrayvNV(arg_10633: GLuint, arg_10634: GLsizei, arg_10635: [*c]const GLfloat) void {
    return epoxy_glViewportArrayvNV.?(arg_10633, arg_10634, arg_10635);
}
pub inline fn glViewportArrayvOES(arg_10636: GLuint, arg_10637: GLsizei, arg_10638: [*c]const GLfloat) void {
    return epoxy_glViewportArrayvOES.?(arg_10636, arg_10637, arg_10638);
}
pub inline fn glViewportIndexedf(arg_10639: GLuint, arg_10640: GLfloat, arg_10641: GLfloat, arg_10642: GLfloat, arg_10643: GLfloat) void {
    return epoxy_glViewportIndexedf.?(arg_10639, arg_10640, arg_10641, arg_10642, arg_10643);
}
pub inline fn glViewportIndexedfNV(arg_10644: GLuint, arg_10645: GLfloat, arg_10646: GLfloat, arg_10647: GLfloat, arg_10648: GLfloat) void {
    return epoxy_glViewportIndexedfNV.?(arg_10644, arg_10645, arg_10646, arg_10647, arg_10648);
}
pub inline fn glViewportIndexedfOES(arg_10649: GLuint, arg_10650: GLfloat, arg_10651: GLfloat, arg_10652: GLfloat, arg_10653: GLfloat) void {
    return epoxy_glViewportIndexedfOES.?(arg_10649, arg_10650, arg_10651, arg_10652, arg_10653);
}
pub inline fn glViewportIndexedfv(arg_10654: GLuint, arg_10655: [*c]const GLfloat) void {
    return epoxy_glViewportIndexedfv.?(arg_10654, arg_10655);
}
pub inline fn glViewportIndexedfvNV(arg_10656: GLuint, arg_10657: [*c]const GLfloat) void {
    return epoxy_glViewportIndexedfvNV.?(arg_10656, arg_10657);
}
pub inline fn glViewportIndexedfvOES(arg_10658: GLuint, arg_10659: [*c]const GLfloat) void {
    return epoxy_glViewportIndexedfvOES.?(arg_10658, arg_10659);
}
pub inline fn glViewportPositionWScaleNV(arg_10660: GLuint, arg_10661: GLfloat, arg_10662: GLfloat) void {
    return epoxy_glViewportPositionWScaleNV.?(arg_10660, arg_10661, arg_10662);
}
pub inline fn glViewportSwizzleNV(arg_10663: GLuint, arg_10664: GLenum, arg_10665: GLenum, arg_10666: GLenum, arg_10667: GLenum) void {
    return epoxy_glViewportSwizzleNV.?(arg_10663, arg_10664, arg_10665, arg_10666, arg_10667);
}
pub inline fn glWaitSemaphoreEXT(arg_10668: GLuint, arg_10669: GLuint, arg_10670: [*c]const GLuint, arg_10671: GLuint, arg_10672: [*c]const GLuint, arg_10673: [*c]const GLenum) void {
    return epoxy_glWaitSemaphoreEXT.?(arg_10668, arg_10669, arg_10670, arg_10671, arg_10672, arg_10673);
}
pub inline fn glWaitSemaphoreui64NVX(arg_10674: GLuint, arg_10675: GLsizei, arg_10676: [*c]const GLuint, arg_10677: [*c]const GLuint64) void {
    return epoxy_glWaitSemaphoreui64NVX.?(arg_10674, arg_10675, arg_10676, arg_10677);
}
pub inline fn glWaitSync(arg_10678: GLsync, arg_10679: GLbitfield, arg_10680: GLuint64) void {
    return epoxy_glWaitSync.?(arg_10678, arg_10679, arg_10680);
}
pub inline fn glWaitSyncAPPLE(arg_10681: GLsync, arg_10682: GLbitfield, arg_10683: GLuint64) void {
    return epoxy_glWaitSyncAPPLE.?(arg_10681, arg_10682, arg_10683);
}
pub inline fn glWaitVkSemaphoreNV(arg_10684: GLuint64) void {
    return epoxy_glWaitVkSemaphoreNV.?(arg_10684);
}
pub inline fn glWeightPathsNV(arg_10685: GLuint, arg_10686: GLsizei, arg_10687: [*c]const GLuint, arg_10688: [*c]const GLfloat) void {
    return epoxy_glWeightPathsNV.?(arg_10685, arg_10686, arg_10687, arg_10688);
}
pub inline fn glWeightPointerARB(arg_10689: GLint, arg_10690: GLenum, arg_10691: GLsizei, arg_10692: ?*const anyopaque) void {
    return epoxy_glWeightPointerARB.?(arg_10689, arg_10690, arg_10691, arg_10692);
}
pub inline fn glWeightPointerOES(arg_10693: GLint, arg_10694: GLenum, arg_10695: GLsizei, arg_10696: ?*const anyopaque) void {
    return epoxy_glWeightPointerOES.?(arg_10693, arg_10694, arg_10695, arg_10696);
}
pub inline fn glWeightbvARB(arg_10697: GLint, arg_10698: [*c]const GLbyte) void {
    return epoxy_glWeightbvARB.?(arg_10697, arg_10698);
}
pub inline fn glWeightdvARB(arg_10699: GLint, arg_10700: [*c]const GLdouble) void {
    return epoxy_glWeightdvARB.?(arg_10699, arg_10700);
}
pub inline fn glWeightfvARB(arg_10701: GLint, arg_10702: [*c]const GLfloat) void {
    return epoxy_glWeightfvARB.?(arg_10701, arg_10702);
}
pub inline fn glWeightivARB(arg_10703: GLint, arg_10704: [*c]const GLint) void {
    return epoxy_glWeightivARB.?(arg_10703, arg_10704);
}
pub inline fn glWeightsvARB(arg_10705: GLint, arg_10706: [*c]const GLshort) void {
    return epoxy_glWeightsvARB.?(arg_10705, arg_10706);
}
pub inline fn glWeightubvARB(arg_10707: GLint, arg_10708: [*c]const GLubyte) void {
    return epoxy_glWeightubvARB.?(arg_10707, arg_10708);
}
pub inline fn glWeightuivARB(arg_10709: GLint, arg_10710: [*c]const GLuint) void {
    return epoxy_glWeightuivARB.?(arg_10709, arg_10710);
}
pub inline fn glWeightusvARB(arg_10711: GLint, arg_10712: [*c]const GLushort) void {
    return epoxy_glWeightusvARB.?(arg_10711, arg_10712);
}
pub inline fn glWindowPos2d(arg_10713: GLdouble, arg_10714: GLdouble) void {
    return epoxy_glWindowPos2d.?(arg_10713, arg_10714);
}
pub inline fn glWindowPos2dARB(arg_10715: GLdouble, arg_10716: GLdouble) void {
    return epoxy_glWindowPos2dARB.?(arg_10715, arg_10716);
}
pub inline fn glWindowPos2dMESA(arg_10717: GLdouble, arg_10718: GLdouble) void {
    return epoxy_glWindowPos2dMESA.?(arg_10717, arg_10718);
}
pub inline fn glWindowPos2dv(arg_10719: [*c]const GLdouble) void {
    return epoxy_glWindowPos2dv.?(arg_10719);
}
pub inline fn glWindowPos2dvARB(arg_10720: [*c]const GLdouble) void {
    return epoxy_glWindowPos2dvARB.?(arg_10720);
}
pub inline fn glWindowPos2dvMESA(arg_10721: [*c]const GLdouble) void {
    return epoxy_glWindowPos2dvMESA.?(arg_10721);
}
pub inline fn glWindowPos2f(arg_10722: GLfloat, arg_10723: GLfloat) void {
    return epoxy_glWindowPos2f.?(arg_10722, arg_10723);
}
pub inline fn glWindowPos2fARB(arg_10724: GLfloat, arg_10725: GLfloat) void {
    return epoxy_glWindowPos2fARB.?(arg_10724, arg_10725);
}
pub inline fn glWindowPos2fMESA(arg_10726: GLfloat, arg_10727: GLfloat) void {
    return epoxy_glWindowPos2fMESA.?(arg_10726, arg_10727);
}
pub inline fn glWindowPos2fv(arg_10728: [*c]const GLfloat) void {
    return epoxy_glWindowPos2fv.?(arg_10728);
}
pub inline fn glWindowPos2fvARB(arg_10729: [*c]const GLfloat) void {
    return epoxy_glWindowPos2fvARB.?(arg_10729);
}
pub inline fn glWindowPos2fvMESA(arg_10730: [*c]const GLfloat) void {
    return epoxy_glWindowPos2fvMESA.?(arg_10730);
}
pub inline fn glWindowPos2i(arg_10731: GLint, arg_10732: GLint) void {
    return epoxy_glWindowPos2i.?(arg_10731, arg_10732);
}
pub inline fn glWindowPos2iARB(arg_10733: GLint, arg_10734: GLint) void {
    return epoxy_glWindowPos2iARB.?(arg_10733, arg_10734);
}
pub inline fn glWindowPos2iMESA(arg_10735: GLint, arg_10736: GLint) void {
    return epoxy_glWindowPos2iMESA.?(arg_10735, arg_10736);
}
pub inline fn glWindowPos2iv(arg_10737: [*c]const GLint) void {
    return epoxy_glWindowPos2iv.?(arg_10737);
}
pub inline fn glWindowPos2ivARB(arg_10738: [*c]const GLint) void {
    return epoxy_glWindowPos2ivARB.?(arg_10738);
}
pub inline fn glWindowPos2ivMESA(arg_10739: [*c]const GLint) void {
    return epoxy_glWindowPos2ivMESA.?(arg_10739);
}
pub inline fn glWindowPos2s(arg_10740: GLshort, arg_10741: GLshort) void {
    return epoxy_glWindowPos2s.?(arg_10740, arg_10741);
}
pub inline fn glWindowPos2sARB(arg_10742: GLshort, arg_10743: GLshort) void {
    return epoxy_glWindowPos2sARB.?(arg_10742, arg_10743);
}
pub inline fn glWindowPos2sMESA(arg_10744: GLshort, arg_10745: GLshort) void {
    return epoxy_glWindowPos2sMESA.?(arg_10744, arg_10745);
}
pub inline fn glWindowPos2sv(arg_10746: [*c]const GLshort) void {
    return epoxy_glWindowPos2sv.?(arg_10746);
}
pub inline fn glWindowPos2svARB(arg_10747: [*c]const GLshort) void {
    return epoxy_glWindowPos2svARB.?(arg_10747);
}
pub inline fn glWindowPos2svMESA(arg_10748: [*c]const GLshort) void {
    return epoxy_glWindowPos2svMESA.?(arg_10748);
}
pub inline fn glWindowPos3d(arg_10749: GLdouble, arg_10750: GLdouble, arg_10751: GLdouble) void {
    return epoxy_glWindowPos3d.?(arg_10749, arg_10750, arg_10751);
}
pub inline fn glWindowPos3dARB(arg_10752: GLdouble, arg_10753: GLdouble, arg_10754: GLdouble) void {
    return epoxy_glWindowPos3dARB.?(arg_10752, arg_10753, arg_10754);
}
pub inline fn glWindowPos3dMESA(arg_10755: GLdouble, arg_10756: GLdouble, arg_10757: GLdouble) void {
    return epoxy_glWindowPos3dMESA.?(arg_10755, arg_10756, arg_10757);
}
pub inline fn glWindowPos3dv(arg_10758: [*c]const GLdouble) void {
    return epoxy_glWindowPos3dv.?(arg_10758);
}
pub inline fn glWindowPos3dvARB(arg_10759: [*c]const GLdouble) void {
    return epoxy_glWindowPos3dvARB.?(arg_10759);
}
pub inline fn glWindowPos3dvMESA(arg_10760: [*c]const GLdouble) void {
    return epoxy_glWindowPos3dvMESA.?(arg_10760);
}
pub inline fn glWindowPos3f(arg_10761: GLfloat, arg_10762: GLfloat, arg_10763: GLfloat) void {
    return epoxy_glWindowPos3f.?(arg_10761, arg_10762, arg_10763);
}
pub inline fn glWindowPos3fARB(arg_10764: GLfloat, arg_10765: GLfloat, arg_10766: GLfloat) void {
    return epoxy_glWindowPos3fARB.?(arg_10764, arg_10765, arg_10766);
}
pub inline fn glWindowPos3fMESA(arg_10767: GLfloat, arg_10768: GLfloat, arg_10769: GLfloat) void {
    return epoxy_glWindowPos3fMESA.?(arg_10767, arg_10768, arg_10769);
}
pub inline fn glWindowPos3fv(arg_10770: [*c]const GLfloat) void {
    return epoxy_glWindowPos3fv.?(arg_10770);
}
pub inline fn glWindowPos3fvARB(arg_10771: [*c]const GLfloat) void {
    return epoxy_glWindowPos3fvARB.?(arg_10771);
}
pub inline fn glWindowPos3fvMESA(arg_10772: [*c]const GLfloat) void {
    return epoxy_glWindowPos3fvMESA.?(arg_10772);
}
pub inline fn glWindowPos3i(arg_10773: GLint, arg_10774: GLint, arg_10775: GLint) void {
    return epoxy_glWindowPos3i.?(arg_10773, arg_10774, arg_10775);
}
pub inline fn glWindowPos3iARB(arg_10776: GLint, arg_10777: GLint, arg_10778: GLint) void {
    return epoxy_glWindowPos3iARB.?(arg_10776, arg_10777, arg_10778);
}
pub inline fn glWindowPos3iMESA(arg_10779: GLint, arg_10780: GLint, arg_10781: GLint) void {
    return epoxy_glWindowPos3iMESA.?(arg_10779, arg_10780, arg_10781);
}
pub inline fn glWindowPos3iv(arg_10782: [*c]const GLint) void {
    return epoxy_glWindowPos3iv.?(arg_10782);
}
pub inline fn glWindowPos3ivARB(arg_10783: [*c]const GLint) void {
    return epoxy_glWindowPos3ivARB.?(arg_10783);
}
pub inline fn glWindowPos3ivMESA(arg_10784: [*c]const GLint) void {
    return epoxy_glWindowPos3ivMESA.?(arg_10784);
}
pub inline fn glWindowPos3s(arg_10785: GLshort, arg_10786: GLshort, arg_10787: GLshort) void {
    return epoxy_glWindowPos3s.?(arg_10785, arg_10786, arg_10787);
}
pub inline fn glWindowPos3sARB(arg_10788: GLshort, arg_10789: GLshort, arg_10790: GLshort) void {
    return epoxy_glWindowPos3sARB.?(arg_10788, arg_10789, arg_10790);
}
pub inline fn glWindowPos3sMESA(arg_10791: GLshort, arg_10792: GLshort, arg_10793: GLshort) void {
    return epoxy_glWindowPos3sMESA.?(arg_10791, arg_10792, arg_10793);
}
pub inline fn glWindowPos3sv(arg_10794: [*c]const GLshort) void {
    return epoxy_glWindowPos3sv.?(arg_10794);
}
pub inline fn glWindowPos3svARB(arg_10795: [*c]const GLshort) void {
    return epoxy_glWindowPos3svARB.?(arg_10795);
}
pub inline fn glWindowPos3svMESA(arg_10796: [*c]const GLshort) void {
    return epoxy_glWindowPos3svMESA.?(arg_10796);
}
pub inline fn glWindowPos4dMESA(arg_10797: GLdouble, arg_10798: GLdouble, arg_10799: GLdouble, arg_10800: GLdouble) void {
    return epoxy_glWindowPos4dMESA.?(arg_10797, arg_10798, arg_10799, arg_10800);
}
pub inline fn glWindowPos4dvMESA(arg_10801: [*c]const GLdouble) void {
    return epoxy_glWindowPos4dvMESA.?(arg_10801);
}
pub inline fn glWindowPos4fMESA(arg_10802: GLfloat, arg_10803: GLfloat, arg_10804: GLfloat, arg_10805: GLfloat) void {
    return epoxy_glWindowPos4fMESA.?(arg_10802, arg_10803, arg_10804, arg_10805);
}
pub inline fn glWindowPos4fvMESA(arg_10806: [*c]const GLfloat) void {
    return epoxy_glWindowPos4fvMESA.?(arg_10806);
}
pub inline fn glWindowPos4iMESA(arg_10807: GLint, arg_10808: GLint, arg_10809: GLint, arg_10810: GLint) void {
    return epoxy_glWindowPos4iMESA.?(arg_10807, arg_10808, arg_10809, arg_10810);
}
pub inline fn glWindowPos4ivMESA(arg_10811: [*c]const GLint) void {
    return epoxy_glWindowPos4ivMESA.?(arg_10811);
}
pub inline fn glWindowPos4sMESA(arg_10812: GLshort, arg_10813: GLshort, arg_10814: GLshort, arg_10815: GLshort) void {
    return epoxy_glWindowPos4sMESA.?(arg_10812, arg_10813, arg_10814, arg_10815);
}
pub inline fn glWindowPos4svMESA(arg_10816: [*c]const GLshort) void {
    return epoxy_glWindowPos4svMESA.?(arg_10816);
}
pub inline fn glWindowRectanglesEXT(arg_10817: GLenum, arg_10818: GLsizei, arg_10819: [*c]const GLint) void {
    return epoxy_glWindowRectanglesEXT.?(arg_10817, arg_10818, arg_10819);
}
pub inline fn glWriteMaskEXT(arg_10820: GLuint, arg_10821: GLuint, arg_10822: GLenum, arg_10823: GLenum, arg_10824: GLenum, arg_10825: GLenum) void {
    return epoxy_glWriteMaskEXT.?(arg_10820, arg_10821, arg_10822, arg_10823, arg_10824, arg_10825);
}
pub const _glfw3_h_ = "";
pub const GLFWAPI = "";
pub const GLFW_VERSION_MAJOR = @as(c_int, 3);
pub const GLFW_VERSION_MINOR = @as(c_int, 3);
pub const GLFW_VERSION_REVISION = @as(c_int, 6);
pub const GLFW_TRUE = @as(c_int, 1);
pub const GLFW_FALSE = @as(c_int, 0);
pub const GLFW_RELEASE = @as(c_int, 0);
pub const GLFW_PRESS = @as(c_int, 1);
pub const GLFW_REPEAT = @as(c_int, 2);
pub const GLFW_HAT_CENTERED = @as(c_int, 0);
pub const GLFW_HAT_UP = @as(c_int, 1);
pub const GLFW_HAT_RIGHT = @as(c_int, 2);
pub const GLFW_HAT_DOWN = @as(c_int, 4);
pub const GLFW_HAT_LEFT = @as(c_int, 8);
pub const GLFW_HAT_RIGHT_UP = GLFW_HAT_RIGHT | GLFW_HAT_UP;
pub const GLFW_HAT_RIGHT_DOWN = GLFW_HAT_RIGHT | GLFW_HAT_DOWN;
pub const GLFW_HAT_LEFT_UP = GLFW_HAT_LEFT | GLFW_HAT_UP;
pub const GLFW_HAT_LEFT_DOWN = GLFW_HAT_LEFT | GLFW_HAT_DOWN;
pub const GLFW_KEY_UNKNOWN = -@as(c_int, 1);
pub const GLFW_KEY_SPACE = @as(c_int, 32);
pub const GLFW_KEY_APOSTROPHE = @as(c_int, 39);
pub const GLFW_KEY_COMMA = @as(c_int, 44);
pub const GLFW_KEY_MINUS = @as(c_int, 45);
pub const GLFW_KEY_PERIOD = @as(c_int, 46);
pub const GLFW_KEY_SLASH = @as(c_int, 47);
pub const GLFW_KEY_0 = @as(c_int, 48);
pub const GLFW_KEY_1 = @as(c_int, 49);
pub const GLFW_KEY_2 = @as(c_int, 50);
pub const GLFW_KEY_3 = @as(c_int, 51);
pub const GLFW_KEY_4 = @as(c_int, 52);
pub const GLFW_KEY_5 = @as(c_int, 53);
pub const GLFW_KEY_6 = @as(c_int, 54);
pub const GLFW_KEY_7 = @as(c_int, 55);
pub const GLFW_KEY_8 = @as(c_int, 56);
pub const GLFW_KEY_9 = @as(c_int, 57);
pub const GLFW_KEY_SEMICOLON = @as(c_int, 59);
pub const GLFW_KEY_EQUAL = @as(c_int, 61);
pub const GLFW_KEY_A = @as(c_int, 65);
pub const GLFW_KEY_B = @as(c_int, 66);
pub const GLFW_KEY_C = @as(c_int, 67);
pub const GLFW_KEY_D = @as(c_int, 68);
pub const GLFW_KEY_E = @as(c_int, 69);
pub const GLFW_KEY_F = @as(c_int, 70);
pub const GLFW_KEY_G = @as(c_int, 71);
pub const GLFW_KEY_H = @as(c_int, 72);
pub const GLFW_KEY_I = @as(c_int, 73);
pub const GLFW_KEY_J = @as(c_int, 74);
pub const GLFW_KEY_K = @as(c_int, 75);
pub const GLFW_KEY_L = @as(c_int, 76);
pub const GLFW_KEY_M = @as(c_int, 77);
pub const GLFW_KEY_N = @as(c_int, 78);
pub const GLFW_KEY_O = @as(c_int, 79);
pub const GLFW_KEY_P = @as(c_int, 80);
pub const GLFW_KEY_Q = @as(c_int, 81);
pub const GLFW_KEY_R = @as(c_int, 82);
pub const GLFW_KEY_S = @as(c_int, 83);
pub const GLFW_KEY_T = @as(c_int, 84);
pub const GLFW_KEY_U = @as(c_int, 85);
pub const GLFW_KEY_V = @as(c_int, 86);
pub const GLFW_KEY_W = @as(c_int, 87);
pub const GLFW_KEY_X = @as(c_int, 88);
pub const GLFW_KEY_Y = @as(c_int, 89);
pub const GLFW_KEY_Z = @as(c_int, 90);
pub const GLFW_KEY_LEFT_BRACKET = @as(c_int, 91);
pub const GLFW_KEY_BACKSLASH = @as(c_int, 92);
pub const GLFW_KEY_RIGHT_BRACKET = @as(c_int, 93);
pub const GLFW_KEY_GRAVE_ACCENT = @as(c_int, 96);
pub const GLFW_KEY_WORLD_1 = @as(c_int, 161);
pub const GLFW_KEY_WORLD_2 = @as(c_int, 162);
pub const GLFW_KEY_ESCAPE = @as(c_int, 256);
pub const GLFW_KEY_ENTER = @as(c_int, 257);
pub const GLFW_KEY_TAB = @as(c_int, 258);
pub const GLFW_KEY_BACKSPACE = @as(c_int, 259);
pub const GLFW_KEY_INSERT = @as(c_int, 260);
pub const GLFW_KEY_DELETE = @as(c_int, 261);
pub const GLFW_KEY_RIGHT = @as(c_int, 262);
pub const GLFW_KEY_LEFT = @as(c_int, 263);
pub const GLFW_KEY_DOWN = @as(c_int, 264);
pub const GLFW_KEY_UP = @as(c_int, 265);
pub const GLFW_KEY_PAGE_UP = @as(c_int, 266);
pub const GLFW_KEY_PAGE_DOWN = @as(c_int, 267);
pub const GLFW_KEY_HOME = @as(c_int, 268);
pub const GLFW_KEY_END = @as(c_int, 269);
pub const GLFW_KEY_CAPS_LOCK = @as(c_int, 280);
pub const GLFW_KEY_SCROLL_LOCK = @as(c_int, 281);
pub const GLFW_KEY_NUM_LOCK = @as(c_int, 282);
pub const GLFW_KEY_PRINT_SCREEN = @as(c_int, 283);
pub const GLFW_KEY_PAUSE = @as(c_int, 284);
pub const GLFW_KEY_F1 = @as(c_int, 290);
pub const GLFW_KEY_F2 = @as(c_int, 291);
pub const GLFW_KEY_F3 = @as(c_int, 292);
pub const GLFW_KEY_F4 = @as(c_int, 293);
pub const GLFW_KEY_F5 = @as(c_int, 294);
pub const GLFW_KEY_F6 = @as(c_int, 295);
pub const GLFW_KEY_F7 = @as(c_int, 296);
pub const GLFW_KEY_F8 = @as(c_int, 297);
pub const GLFW_KEY_F9 = @as(c_int, 298);
pub const GLFW_KEY_F10 = @as(c_int, 299);
pub const GLFW_KEY_F11 = @as(c_int, 300);
pub const GLFW_KEY_F12 = @as(c_int, 301);
pub const GLFW_KEY_F13 = @as(c_int, 302);
pub const GLFW_KEY_F14 = @as(c_int, 303);
pub const GLFW_KEY_F15 = @as(c_int, 304);
pub const GLFW_KEY_F16 = @as(c_int, 305);
pub const GLFW_KEY_F17 = @as(c_int, 306);
pub const GLFW_KEY_F18 = @as(c_int, 307);
pub const GLFW_KEY_F19 = @as(c_int, 308);
pub const GLFW_KEY_F20 = @as(c_int, 309);
pub const GLFW_KEY_F21 = @as(c_int, 310);
pub const GLFW_KEY_F22 = @as(c_int, 311);
pub const GLFW_KEY_F23 = @as(c_int, 312);
pub const GLFW_KEY_F24 = @as(c_int, 313);
pub const GLFW_KEY_F25 = @as(c_int, 314);
pub const GLFW_KEY_KP_0 = @as(c_int, 320);
pub const GLFW_KEY_KP_1 = @as(c_int, 321);
pub const GLFW_KEY_KP_2 = @as(c_int, 322);
pub const GLFW_KEY_KP_3 = @as(c_int, 323);
pub const GLFW_KEY_KP_4 = @as(c_int, 324);
pub const GLFW_KEY_KP_5 = @as(c_int, 325);
pub const GLFW_KEY_KP_6 = @as(c_int, 326);
pub const GLFW_KEY_KP_7 = @as(c_int, 327);
pub const GLFW_KEY_KP_8 = @as(c_int, 328);
pub const GLFW_KEY_KP_9 = @as(c_int, 329);
pub const GLFW_KEY_KP_DECIMAL = @as(c_int, 330);
pub const GLFW_KEY_KP_DIVIDE = @as(c_int, 331);
pub const GLFW_KEY_KP_MULTIPLY = @as(c_int, 332);
pub const GLFW_KEY_KP_SUBTRACT = @as(c_int, 333);
pub const GLFW_KEY_KP_ADD = @as(c_int, 334);
pub const GLFW_KEY_KP_ENTER = @as(c_int, 335);
pub const GLFW_KEY_KP_EQUAL = @as(c_int, 336);
pub const GLFW_KEY_LEFT_SHIFT = @as(c_int, 340);
pub const GLFW_KEY_LEFT_CONTROL = @as(c_int, 341);
pub const GLFW_KEY_LEFT_ALT = @as(c_int, 342);
pub const GLFW_KEY_LEFT_SUPER = @as(c_int, 343);
pub const GLFW_KEY_RIGHT_SHIFT = @as(c_int, 344);
pub const GLFW_KEY_RIGHT_CONTROL = @as(c_int, 345);
pub const GLFW_KEY_RIGHT_ALT = @as(c_int, 346);
pub const GLFW_KEY_RIGHT_SUPER = @as(c_int, 347);
pub const GLFW_KEY_MENU = @as(c_int, 348);
pub const GLFW_KEY_LAST = GLFW_KEY_MENU;
pub const GLFW_MOD_SHIFT = @as(c_int, 0x0001);
pub const GLFW_MOD_CONTROL = @as(c_int, 0x0002);
pub const GLFW_MOD_ALT = @as(c_int, 0x0004);
pub const GLFW_MOD_SUPER = @as(c_int, 0x0008);
pub const GLFW_MOD_CAPS_LOCK = @as(c_int, 0x0010);
pub const GLFW_MOD_NUM_LOCK = @as(c_int, 0x0020);
pub const GLFW_MOUSE_BUTTON_1 = @as(c_int, 0);
pub const GLFW_MOUSE_BUTTON_2 = @as(c_int, 1);
pub const GLFW_MOUSE_BUTTON_3 = @as(c_int, 2);
pub const GLFW_MOUSE_BUTTON_4 = @as(c_int, 3);
pub const GLFW_MOUSE_BUTTON_5 = @as(c_int, 4);
pub const GLFW_MOUSE_BUTTON_6 = @as(c_int, 5);
pub const GLFW_MOUSE_BUTTON_7 = @as(c_int, 6);
pub const GLFW_MOUSE_BUTTON_8 = @as(c_int, 7);
pub const GLFW_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_8;
pub const GLFW_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_1;
pub const GLFW_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_2;
pub const GLFW_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_3;
pub const GLFW_JOYSTICK_1 = @as(c_int, 0);
pub const GLFW_JOYSTICK_2 = @as(c_int, 1);
pub const GLFW_JOYSTICK_3 = @as(c_int, 2);
pub const GLFW_JOYSTICK_4 = @as(c_int, 3);
pub const GLFW_JOYSTICK_5 = @as(c_int, 4);
pub const GLFW_JOYSTICK_6 = @as(c_int, 5);
pub const GLFW_JOYSTICK_7 = @as(c_int, 6);
pub const GLFW_JOYSTICK_8 = @as(c_int, 7);
pub const GLFW_JOYSTICK_9 = @as(c_int, 8);
pub const GLFW_JOYSTICK_10 = @as(c_int, 9);
pub const GLFW_JOYSTICK_11 = @as(c_int, 10);
pub const GLFW_JOYSTICK_12 = @as(c_int, 11);
pub const GLFW_JOYSTICK_13 = @as(c_int, 12);
pub const GLFW_JOYSTICK_14 = @as(c_int, 13);
pub const GLFW_JOYSTICK_15 = @as(c_int, 14);
pub const GLFW_JOYSTICK_16 = @as(c_int, 15);
pub const GLFW_JOYSTICK_LAST = GLFW_JOYSTICK_16;
pub const GLFW_GAMEPAD_BUTTON_A = @as(c_int, 0);
pub const GLFW_GAMEPAD_BUTTON_B = @as(c_int, 1);
pub const GLFW_GAMEPAD_BUTTON_X = @as(c_int, 2);
pub const GLFW_GAMEPAD_BUTTON_Y = @as(c_int, 3);
pub const GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = @as(c_int, 4);
pub const GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = @as(c_int, 5);
pub const GLFW_GAMEPAD_BUTTON_BACK = @as(c_int, 6);
pub const GLFW_GAMEPAD_BUTTON_START = @as(c_int, 7);
pub const GLFW_GAMEPAD_BUTTON_GUIDE = @as(c_int, 8);
pub const GLFW_GAMEPAD_BUTTON_LEFT_THUMB = @as(c_int, 9);
pub const GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = @as(c_int, 10);
pub const GLFW_GAMEPAD_BUTTON_DPAD_UP = @as(c_int, 11);
pub const GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = @as(c_int, 12);
pub const GLFW_GAMEPAD_BUTTON_DPAD_DOWN = @as(c_int, 13);
pub const GLFW_GAMEPAD_BUTTON_DPAD_LEFT = @as(c_int, 14);
pub const GLFW_GAMEPAD_BUTTON_LAST = GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
pub const GLFW_GAMEPAD_BUTTON_CROSS = GLFW_GAMEPAD_BUTTON_A;
pub const GLFW_GAMEPAD_BUTTON_CIRCLE = GLFW_GAMEPAD_BUTTON_B;
pub const GLFW_GAMEPAD_BUTTON_SQUARE = GLFW_GAMEPAD_BUTTON_X;
pub const GLFW_GAMEPAD_BUTTON_TRIANGLE = GLFW_GAMEPAD_BUTTON_Y;
pub const GLFW_GAMEPAD_AXIS_LEFT_X = @as(c_int, 0);
pub const GLFW_GAMEPAD_AXIS_LEFT_Y = @as(c_int, 1);
pub const GLFW_GAMEPAD_AXIS_RIGHT_X = @as(c_int, 2);
pub const GLFW_GAMEPAD_AXIS_RIGHT_Y = @as(c_int, 3);
pub const GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = @as(c_int, 4);
pub const GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = @as(c_int, 5);
pub const GLFW_GAMEPAD_AXIS_LAST = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
pub const GLFW_NO_ERROR = @as(c_int, 0);
pub const GLFW_NOT_INITIALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010001, .hexadecimal);
pub const GLFW_NO_CURRENT_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010002, .hexadecimal);
pub const GLFW_INVALID_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010003, .hexadecimal);
pub const GLFW_INVALID_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010004, .hexadecimal);
pub const GLFW_OUT_OF_MEMORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010005, .hexadecimal);
pub const GLFW_API_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010006, .hexadecimal);
pub const GLFW_VERSION_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010007, .hexadecimal);
pub const GLFW_PLATFORM_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010008, .hexadecimal);
pub const GLFW_FORMAT_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010009, .hexadecimal);
pub const GLFW_NO_WINDOW_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000A, .hexadecimal);
pub const GLFW_FOCUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020001, .hexadecimal);
pub const GLFW_ICONIFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020002, .hexadecimal);
pub const GLFW_RESIZABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020003, .hexadecimal);
pub const GLFW_VISIBLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020004, .hexadecimal);
pub const GLFW_DECORATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020005, .hexadecimal);
pub const GLFW_AUTO_ICONIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020006, .hexadecimal);
pub const GLFW_FLOATING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020007, .hexadecimal);
pub const GLFW_MAXIMIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020008, .hexadecimal);
pub const GLFW_CENTER_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020009, .hexadecimal);
pub const GLFW_TRANSPARENT_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000A, .hexadecimal);
pub const GLFW_HOVERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000B, .hexadecimal);
pub const GLFW_FOCUS_ON_SHOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000C, .hexadecimal);
pub const GLFW_RED_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021001, .hexadecimal);
pub const GLFW_GREEN_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021002, .hexadecimal);
pub const GLFW_BLUE_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021003, .hexadecimal);
pub const GLFW_ALPHA_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021004, .hexadecimal);
pub const GLFW_DEPTH_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021005, .hexadecimal);
pub const GLFW_STENCIL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021006, .hexadecimal);
pub const GLFW_ACCUM_RED_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021007, .hexadecimal);
pub const GLFW_ACCUM_GREEN_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021008, .hexadecimal);
pub const GLFW_ACCUM_BLUE_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021009, .hexadecimal);
pub const GLFW_ACCUM_ALPHA_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100A, .hexadecimal);
pub const GLFW_AUX_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100B, .hexadecimal);
pub const GLFW_STEREO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100C, .hexadecimal);
pub const GLFW_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100D, .hexadecimal);
pub const GLFW_SRGB_CAPABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100E, .hexadecimal);
pub const GLFW_REFRESH_RATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100F, .hexadecimal);
pub const GLFW_DOUBLEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021010, .hexadecimal);
pub const GLFW_CLIENT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022001, .hexadecimal);
pub const GLFW_CONTEXT_VERSION_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022002, .hexadecimal);
pub const GLFW_CONTEXT_VERSION_MINOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022003, .hexadecimal);
pub const GLFW_CONTEXT_REVISION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022004, .hexadecimal);
pub const GLFW_CONTEXT_ROBUSTNESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022005, .hexadecimal);
pub const GLFW_OPENGL_FORWARD_COMPAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022006, .hexadecimal);
pub const GLFW_OPENGL_DEBUG_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022007, .hexadecimal);
pub const GLFW_OPENGL_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022008, .hexadecimal);
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022009, .hexadecimal);
pub const GLFW_CONTEXT_NO_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200A, .hexadecimal);
pub const GLFW_CONTEXT_CREATION_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200B, .hexadecimal);
pub const GLFW_SCALE_TO_MONITOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200C, .hexadecimal);
pub const GLFW_COCOA_RETINA_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023001, .hexadecimal);
pub const GLFW_COCOA_FRAME_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023002, .hexadecimal);
pub const GLFW_COCOA_GRAPHICS_SWITCHING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023003, .hexadecimal);
pub const GLFW_X11_CLASS_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00024001, .hexadecimal);
pub const GLFW_X11_INSTANCE_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00024002, .hexadecimal);
pub const GLFW_NO_API = @as(c_int, 0);
pub const GLFW_OPENGL_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030001, .hexadecimal);
pub const GLFW_OPENGL_ES_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030002, .hexadecimal);
pub const GLFW_NO_ROBUSTNESS = @as(c_int, 0);
pub const GLFW_NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00031001, .hexadecimal);
pub const GLFW_LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00031002, .hexadecimal);
pub const GLFW_OPENGL_ANY_PROFILE = @as(c_int, 0);
pub const GLFW_OPENGL_CORE_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00032001, .hexadecimal);
pub const GLFW_OPENGL_COMPAT_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00032002, .hexadecimal);
pub const GLFW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033001, .hexadecimal);
pub const GLFW_STICKY_KEYS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033002, .hexadecimal);
pub const GLFW_STICKY_MOUSE_BUTTONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033003, .hexadecimal);
pub const GLFW_LOCK_KEY_MODS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033004, .hexadecimal);
pub const GLFW_RAW_MOUSE_MOTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033005, .hexadecimal);
pub const GLFW_CURSOR_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034001, .hexadecimal);
pub const GLFW_CURSOR_HIDDEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034002, .hexadecimal);
pub const GLFW_CURSOR_DISABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034003, .hexadecimal);
pub const GLFW_ANY_RELEASE_BEHAVIOR = @as(c_int, 0);
pub const GLFW_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00035001, .hexadecimal);
pub const GLFW_RELEASE_BEHAVIOR_NONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00035002, .hexadecimal);
pub const GLFW_NATIVE_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036001, .hexadecimal);
pub const GLFW_EGL_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036002, .hexadecimal);
pub const GLFW_OSMESA_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036003, .hexadecimal);
pub const GLFW_ARROW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036001, .hexadecimal);
pub const GLFW_IBEAM_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036002, .hexadecimal);
pub const GLFW_CROSSHAIR_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036003, .hexadecimal);
pub const GLFW_HAND_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036004, .hexadecimal);
pub const GLFW_HRESIZE_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036005, .hexadecimal);
pub const GLFW_VRESIZE_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036006, .hexadecimal);
pub const GLFW_CONNECTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040001, .hexadecimal);
pub const GLFW_DISCONNECTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040002, .hexadecimal);
pub const GLFW_JOYSTICK_HAT_BUTTONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00050001, .hexadecimal);
pub const GLFW_COCOA_CHDIR_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00051001, .hexadecimal);
pub const GLFW_COCOA_MENUBAR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00051002, .hexadecimal);
pub const GLFW_DONT_CARE = -@as(c_int, 1);
pub const STBI_INCLUDE_STB_IMAGE_H = "";
pub const _STDIO_H = @as(c_int, 1);
pub const __need___va_list = "";
pub const __STDARG_H = "";
pub const _VA_LIST = "";
pub const __GNUC_VA_LIST = @as(c_int, 1);
pub const _____fpos_t_defined = @as(c_int, 1);
pub const ____mbstate_t_defined = @as(c_int, 1);
pub const _____fpos64_t_defined = @as(c_int, 1);
pub const ____FILE_defined = @as(c_int, 1);
pub const __FILE_defined = @as(c_int, 1);
pub const __struct_FILE_defined = @as(c_int, 1);
pub const _IO_EOF_SEEN = @as(c_int, 0x0010);
pub inline fn __feof_unlocked_body(_fp: anytype) @TypeOf((_fp.*._flags & _IO_EOF_SEEN) != @as(c_int, 0)) {
    return (_fp.*._flags & _IO_EOF_SEEN) != @as(c_int, 0);
}
pub const _IO_ERR_SEEN = @as(c_int, 0x0020);
pub inline fn __ferror_unlocked_body(_fp: anytype) @TypeOf((_fp.*._flags & _IO_ERR_SEEN) != @as(c_int, 0)) {
    return (_fp.*._flags & _IO_ERR_SEEN) != @as(c_int, 0);
}
pub const _IO_USER_LOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal);
pub const _VA_LIST_DEFINED = "";
pub const __off_t_defined = "";
pub const __ssize_t_defined = "";
pub const _IOFBF = @as(c_int, 0);
pub const _IOLBF = @as(c_int, 1);
pub const _IONBF = @as(c_int, 2);
pub const BUFSIZ = @as(c_int, 8192);
pub const EOF = -@as(c_int, 1);
pub const SEEK_SET = @as(c_int, 0);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const P_tmpdir = "/tmp";
pub const _BITS_STDIO_LIM_H = @as(c_int, 1);
pub const L_tmpnam = @as(c_int, 20);
pub const TMP_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 238328, .decimal);
pub const FILENAME_MAX = @as(c_int, 4096);
pub const L_ctermid = @as(c_int, 9);
pub const FOPEN_MAX = @as(c_int, 16);
pub const __attr_dealloc_fclose = __attr_dealloc(fclose, @as(c_int, 1));
pub const _BITS_FLOATN_H = "";
pub const __HAVE_FLOAT128 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT128 = @as(c_int, 0);
pub const __HAVE_FLOAT64X = @as(c_int, 1);
pub const __HAVE_FLOAT64X_LONG_DOUBLE = @as(c_int, 1);
pub const _BITS_FLOATN_COMMON_H = "";
pub const __HAVE_FLOAT16 = @as(c_int, 0);
pub const __HAVE_FLOAT32 = @as(c_int, 1);
pub const __HAVE_FLOAT64 = @as(c_int, 1);
pub const __HAVE_FLOAT32X = @as(c_int, 1);
pub const __HAVE_FLOAT128X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT16 = __HAVE_FLOAT16;
pub const __HAVE_DISTINCT_FLOAT32 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT64 = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT32X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT64X = @as(c_int, 0);
pub const __HAVE_DISTINCT_FLOAT128X = __HAVE_FLOAT128X;
pub const __HAVE_FLOAT128_UNLIKE_LDBL = (__HAVE_DISTINCT_FLOAT128 != 0) and (__LDBL_MANT_DIG__ != @as(c_int, 113));
pub const __HAVE_FLOATN_NOT_TYPEDEF = @as(c_int, 0);
pub inline fn __f64(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __f32x(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __builtin_huge_valf32() @TypeOf(__builtin_huge_valf()) {
    return __builtin_huge_valf();
}
pub inline fn __builtin_inff32() @TypeOf(__builtin_inff()) {
    return __builtin_inff();
}
pub inline fn __builtin_nanf32(x: anytype) @TypeOf(__builtin_nanf(x)) {
    return __builtin_nanf(x);
}
pub const _BITS_STDIO_H = @as(c_int, 1);
pub const __STDIO_INLINE = __extern_inline;
pub const STBI_VERSION = @as(c_int, 1);
pub const _STDLIB_H = @as(c_int, 1);
pub const WNOHANG = @as(c_int, 1);
pub const WUNTRACED = @as(c_int, 2);
pub const WSTOPPED = @as(c_int, 2);
pub const WEXITED = @as(c_int, 4);
pub const WCONTINUED = @as(c_int, 8);
pub const WNOWAIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const __WNOTHREAD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const __WALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const __WCLONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub inline fn __WEXITSTATUS(status: anytype) @TypeOf((status & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal)) >> @as(c_int, 8)) {
    return (status & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff00, .hexadecimal)) >> @as(c_int, 8);
}
pub inline fn __WTERMSIG(status: anytype) @TypeOf(status & @as(c_int, 0x7f)) {
    return status & @as(c_int, 0x7f);
}
pub inline fn __WSTOPSIG(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    return __WEXITSTATUS(status);
}
pub inline fn __WIFEXITED(status: anytype) @TypeOf(__WTERMSIG(status) == @as(c_int, 0)) {
    return __WTERMSIG(status) == @as(c_int, 0);
}
pub inline fn __WIFSIGNALED(status: anytype) @TypeOf((@import("std").zig.c_translation.cast(i8, (status & @as(c_int, 0x7f)) + @as(c_int, 1)) >> @as(c_int, 1)) > @as(c_int, 0)) {
    return (@import("std").zig.c_translation.cast(i8, (status & @as(c_int, 0x7f)) + @as(c_int, 1)) >> @as(c_int, 1)) > @as(c_int, 0);
}
pub inline fn __WIFSTOPPED(status: anytype) @TypeOf((status & @as(c_int, 0xff)) == @as(c_int, 0x7f)) {
    return (status & @as(c_int, 0xff)) == @as(c_int, 0x7f);
}
pub inline fn __WIFCONTINUED(status: anytype) @TypeOf(status == __W_CONTINUED) {
    return status == __W_CONTINUED;
}
pub inline fn __WCOREDUMP(status: anytype) @TypeOf(status & __WCOREFLAG) {
    return status & __WCOREFLAG;
}
pub inline fn __W_EXITCODE(ret: anytype, sig: anytype) @TypeOf((ret << @as(c_int, 8)) | sig) {
    return (ret << @as(c_int, 8)) | sig;
}
pub inline fn __W_STOPCODE(sig: anytype) @TypeOf((sig << @as(c_int, 8)) | @as(c_int, 0x7f)) {
    return (sig << @as(c_int, 8)) | @as(c_int, 0x7f);
}
pub const __W_CONTINUED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hexadecimal);
pub const __WCOREFLAG = @as(c_int, 0x80);
pub inline fn WEXITSTATUS(status: anytype) @TypeOf(__WEXITSTATUS(status)) {
    return __WEXITSTATUS(status);
}
pub inline fn WTERMSIG(status: anytype) @TypeOf(__WTERMSIG(status)) {
    return __WTERMSIG(status);
}
pub inline fn WSTOPSIG(status: anytype) @TypeOf(__WSTOPSIG(status)) {
    return __WSTOPSIG(status);
}
pub inline fn WIFEXITED(status: anytype) @TypeOf(__WIFEXITED(status)) {
    return __WIFEXITED(status);
}
pub inline fn WIFSIGNALED(status: anytype) @TypeOf(__WIFSIGNALED(status)) {
    return __WIFSIGNALED(status);
}
pub inline fn WIFSTOPPED(status: anytype) @TypeOf(__WIFSTOPPED(status)) {
    return __WIFSTOPPED(status);
}
pub inline fn WIFCONTINUED(status: anytype) @TypeOf(__WIFCONTINUED(status)) {
    return __WIFCONTINUED(status);
}
pub const __ldiv_t_defined = @as(c_int, 1);
pub const __lldiv_t_defined = @as(c_int, 1);
pub const RAND_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const EXIT_FAILURE = @as(c_int, 1);
pub const EXIT_SUCCESS = @as(c_int, 0);
pub const MB_CUR_MAX = __ctype_get_mb_cur_max();
pub const _SYS_TYPES_H = @as(c_int, 1);
pub const __u_char_defined = "";
pub const __ino_t_defined = "";
pub const __dev_t_defined = "";
pub const __gid_t_defined = "";
pub const __mode_t_defined = "";
pub const __nlink_t_defined = "";
pub const __uid_t_defined = "";
pub const __pid_t_defined = "";
pub const __id_t_defined = "";
pub const __daddr_t_defined = "";
pub const __key_t_defined = "";
pub const __clock_t_defined = @as(c_int, 1);
pub const __clockid_t_defined = @as(c_int, 1);
pub const __time_t_defined = @as(c_int, 1);
pub const __timer_t_defined = @as(c_int, 1);
pub const __BIT_TYPES_DEFINED__ = @as(c_int, 1);
pub const _ENDIAN_H = @as(c_int, 1);
pub const _BITS_ENDIAN_H = @as(c_int, 1);
pub const __LITTLE_ENDIAN = @as(c_int, 1234);
pub const __BIG_ENDIAN = @as(c_int, 4321);
pub const __PDP_ENDIAN = @as(c_int, 3412);
pub const _BITS_ENDIANNESS_H = @as(c_int, 1);
pub const __BYTE_ORDER = __LITTLE_ENDIAN;
pub const __FLOAT_WORD_ORDER = __BYTE_ORDER;
pub inline fn __LONG_LONG_PAIR(HI: anytype, LO: anytype) @TypeOf(HI) {
    return blk: {
        _ = LO;
        break :blk HI;
    };
}
pub const LITTLE_ENDIAN = __LITTLE_ENDIAN;
pub const BIG_ENDIAN = __BIG_ENDIAN;
pub const PDP_ENDIAN = __PDP_ENDIAN;
pub const BYTE_ORDER = __BYTE_ORDER;
pub const _BITS_BYTESWAP_H = @as(c_int, 1);
pub inline fn __bswap_constant_16(x: anytype) __uint16_t {
    return @import("std").zig.c_translation.cast(__uint16_t, ((x >> @as(c_int, 8)) & @as(c_int, 0xff)) | ((x & @as(c_int, 0xff)) << @as(c_int, 8)));
}
pub inline fn __bswap_constant_32(x: anytype) @TypeOf(((((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hexadecimal)) >> @as(c_int, 24)) | ((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hexadecimal)) >> @as(c_int, 8))) | ((x & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((x & @as(c_uint, 0x000000ff)) << @as(c_int, 24))) {
    return ((((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hexadecimal)) >> @as(c_int, 24)) | ((x & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hexadecimal)) >> @as(c_int, 8))) | ((x & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((x & @as(c_uint, 0x000000ff)) << @as(c_int, 24));
}
pub inline fn __bswap_constant_64(x: anytype) @TypeOf(((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56))) {
    return ((((((((x & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((x & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((x & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((x & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((x & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56));
}
pub const _BITS_UINTN_IDENTITY_H = @as(c_int, 1);
pub inline fn htobe16(x: anytype) @TypeOf(__bswap_16(x)) {
    return __bswap_16(x);
}
pub inline fn htole16(x: anytype) @TypeOf(__uint16_identity(x)) {
    return __uint16_identity(x);
}
pub inline fn be16toh(x: anytype) @TypeOf(__bswap_16(x)) {
    return __bswap_16(x);
}
pub inline fn le16toh(x: anytype) @TypeOf(__uint16_identity(x)) {
    return __uint16_identity(x);
}
pub inline fn htobe32(x: anytype) @TypeOf(__bswap_32(x)) {
    return __bswap_32(x);
}
pub inline fn htole32(x: anytype) @TypeOf(__uint32_identity(x)) {
    return __uint32_identity(x);
}
pub inline fn be32toh(x: anytype) @TypeOf(__bswap_32(x)) {
    return __bswap_32(x);
}
pub inline fn le32toh(x: anytype) @TypeOf(__uint32_identity(x)) {
    return __uint32_identity(x);
}
pub inline fn htobe64(x: anytype) @TypeOf(__bswap_64(x)) {
    return __bswap_64(x);
}
pub inline fn htole64(x: anytype) @TypeOf(__uint64_identity(x)) {
    return __uint64_identity(x);
}
pub inline fn be64toh(x: anytype) @TypeOf(__bswap_64(x)) {
    return __bswap_64(x);
}
pub inline fn le64toh(x: anytype) @TypeOf(__uint64_identity(x)) {
    return __uint64_identity(x);
}
pub const _SYS_SELECT_H = @as(c_int, 1);
pub inline fn __FD_ISSET(d: anytype, s: anytype) @TypeOf((__FDS_BITS(s)[__FD_ELT(d)] & __FD_MASK(d)) != @as(c_int, 0)) {
    return (__FDS_BITS(s)[__FD_ELT(d)] & __FD_MASK(d)) != @as(c_int, 0);
}
pub const __sigset_t_defined = @as(c_int, 1);
pub const ____sigset_t_defined = "";
pub const _SIGSET_NWORDS = @as(c_int, 1024) / (@as(c_int, 8) * @import("std").zig.c_translation.sizeof(c_ulong));
pub const __timeval_defined = @as(c_int, 1);
pub const _STRUCT_TIMESPEC = @as(c_int, 1);
pub const __suseconds_t_defined = "";
pub const __NFDBITS = @as(c_int, 8) * @import("std").zig.c_translation.cast(c_int, @import("std").zig.c_translation.sizeof(__fd_mask));
pub inline fn __FD_ELT(d: anytype) @TypeOf(d / __NFDBITS) {
    return d / __NFDBITS;
}
pub inline fn __FD_MASK(d: anytype) __fd_mask {
    return @import("std").zig.c_translation.cast(__fd_mask, @as(c_ulong, 1) << (d % __NFDBITS));
}
pub inline fn __FDS_BITS(set: anytype) @TypeOf(set.*.__fds_bits) {
    return set.*.__fds_bits;
}
pub const FD_SETSIZE = __FD_SETSIZE;
pub const NFDBITS = __NFDBITS;
pub inline fn FD_SET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_SET(fd, fdsetp)) {
    return __FD_SET(fd, fdsetp);
}
pub inline fn FD_CLR(fd: anytype, fdsetp: anytype) @TypeOf(__FD_CLR(fd, fdsetp)) {
    return __FD_CLR(fd, fdsetp);
}
pub inline fn FD_ISSET(fd: anytype, fdsetp: anytype) @TypeOf(__FD_ISSET(fd, fdsetp)) {
    return __FD_ISSET(fd, fdsetp);
}
pub inline fn FD_ZERO(fdsetp: anytype) @TypeOf(__FD_ZERO(fdsetp)) {
    return __FD_ZERO(fdsetp);
}
pub const __blksize_t_defined = "";
pub const __blkcnt_t_defined = "";
pub const __fsblkcnt_t_defined = "";
pub const __fsfilcnt_t_defined = "";
pub const _BITS_PTHREADTYPES_COMMON_H = @as(c_int, 1);
pub const _THREAD_SHARED_TYPES_H = @as(c_int, 1);
pub const _BITS_PTHREADTYPES_ARCH_H = @as(c_int, 1);
pub const __SIZEOF_PTHREAD_MUTEX_T = @as(c_int, 40);
pub const __SIZEOF_PTHREAD_ATTR_T = @as(c_int, 56);
pub const __SIZEOF_PTHREAD_RWLOCK_T = @as(c_int, 56);
pub const __SIZEOF_PTHREAD_BARRIER_T = @as(c_int, 32);
pub const __SIZEOF_PTHREAD_MUTEXATTR_T = @as(c_int, 4);
pub const __SIZEOF_PTHREAD_COND_T = @as(c_int, 48);
pub const __SIZEOF_PTHREAD_CONDATTR_T = @as(c_int, 4);
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T = @as(c_int, 8);
pub const __SIZEOF_PTHREAD_BARRIERATTR_T = @as(c_int, 4);
pub const __LOCK_ALIGNMENT = "";
pub const __ONCE_ALIGNMENT = "";
pub const _BITS_ATOMIC_WIDE_COUNTER_H = "";
pub const _THREAD_MUTEX_INTERNAL_H = @as(c_int, 1);
pub const __PTHREAD_MUTEX_HAVE_PREV = @as(c_int, 1);
pub const _RWLOCK_INTERNAL_H = "";
pub inline fn __PTHREAD_RWLOCK_INITIALIZER(__flags: anytype) @TypeOf(__flags) {
    return blk: {
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = @as(c_int, 0);
        _ = __PTHREAD_RWLOCK_ELISION_EXTRA;
        _ = @as(c_int, 0);
        break :blk __flags;
    };
}
pub const __have_pthread_attr_t = @as(c_int, 1);
pub const _ALLOCA_H = @as(c_int, 1);
pub const __COMPAR_FN_T = "";
pub const _UNISTD_H = @as(c_int, 1);
pub const _POSIX_VERSION = @as(c_long, 200809);
pub const __POSIX2_THIS_VERSION = @as(c_long, 200809);
pub const _POSIX2_VERSION = __POSIX2_THIS_VERSION;
pub const _POSIX2_C_VERSION = __POSIX2_THIS_VERSION;
pub const _POSIX2_C_BIND = __POSIX2_THIS_VERSION;
pub const _POSIX2_C_DEV = __POSIX2_THIS_VERSION;
pub const _POSIX2_SW_DEV = __POSIX2_THIS_VERSION;
pub const _POSIX2_LOCALEDEF = __POSIX2_THIS_VERSION;
pub const _XOPEN_VERSION = @as(c_int, 700);
pub const _XOPEN_XCU_VERSION = @as(c_int, 4);
pub const _XOPEN_XPG2 = @as(c_int, 1);
pub const _XOPEN_XPG3 = @as(c_int, 1);
pub const _XOPEN_XPG4 = @as(c_int, 1);
pub const _XOPEN_UNIX = @as(c_int, 1);
pub const _XOPEN_ENH_I18N = @as(c_int, 1);
pub const _XOPEN_LEGACY = @as(c_int, 1);
pub const _BITS_POSIX_OPT_H = @as(c_int, 1);
pub const _POSIX_JOB_CONTROL = @as(c_int, 1);
pub const _POSIX_SAVED_IDS = @as(c_int, 1);
pub const _POSIX_PRIORITY_SCHEDULING = @as(c_long, 200809);
pub const _POSIX_SYNCHRONIZED_IO = @as(c_long, 200809);
pub const _POSIX_FSYNC = @as(c_long, 200809);
pub const _POSIX_MAPPED_FILES = @as(c_long, 200809);
pub const _POSIX_MEMLOCK = @as(c_long, 200809);
pub const _POSIX_MEMLOCK_RANGE = @as(c_long, 200809);
pub const _POSIX_MEMORY_PROTECTION = @as(c_long, 200809);
pub const _POSIX_CHOWN_RESTRICTED = @as(c_int, 0);
pub const _POSIX_VDISABLE = '\x00';
pub const _POSIX_NO_TRUNC = @as(c_int, 1);
pub const _XOPEN_REALTIME = @as(c_int, 1);
pub const _XOPEN_REALTIME_THREADS = @as(c_int, 1);
pub const _XOPEN_SHM = @as(c_int, 1);
pub const _POSIX_THREADS = @as(c_long, 200809);
pub const _POSIX_REENTRANT_FUNCTIONS = @as(c_int, 1);
pub const _POSIX_THREAD_SAFE_FUNCTIONS = @as(c_long, 200809);
pub const _POSIX_THREAD_PRIORITY_SCHEDULING = @as(c_long, 200809);
pub const _POSIX_THREAD_ATTR_STACKSIZE = @as(c_long, 200809);
pub const _POSIX_THREAD_ATTR_STACKADDR = @as(c_long, 200809);
pub const _POSIX_THREAD_PRIO_INHERIT = @as(c_long, 200809);
pub const _POSIX_THREAD_PRIO_PROTECT = @as(c_long, 200809);
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT = @as(c_long, 200809);
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT = -@as(c_int, 1);
pub const _POSIX_SEMAPHORES = @as(c_long, 200809);
pub const _POSIX_REALTIME_SIGNALS = @as(c_long, 200809);
pub const _POSIX_ASYNCHRONOUS_IO = @as(c_long, 200809);
pub const _POSIX_ASYNC_IO = @as(c_int, 1);
pub const _LFS_ASYNCHRONOUS_IO = @as(c_int, 1);
pub const _POSIX_PRIORITIZED_IO = @as(c_long, 200809);
pub const _LFS64_ASYNCHRONOUS_IO = @as(c_int, 1);
pub const _LFS_LARGEFILE = @as(c_int, 1);
pub const _LFS64_LARGEFILE = @as(c_int, 1);
pub const _LFS64_STDIO = @as(c_int, 1);
pub const _POSIX_SHARED_MEMORY_OBJECTS = @as(c_long, 200809);
pub const _POSIX_CPUTIME = @as(c_int, 0);
pub const _POSIX_THREAD_CPUTIME = @as(c_int, 0);
pub const _POSIX_REGEXP = @as(c_int, 1);
pub const _POSIX_READER_WRITER_LOCKS = @as(c_long, 200809);
pub const _POSIX_SHELL = @as(c_int, 1);
pub const _POSIX_TIMEOUTS = @as(c_long, 200809);
pub const _POSIX_SPIN_LOCKS = @as(c_long, 200809);
pub const _POSIX_SPAWN = @as(c_long, 200809);
pub const _POSIX_TIMERS = @as(c_long, 200809);
pub const _POSIX_BARRIERS = @as(c_long, 200809);
pub const _POSIX_MESSAGE_PASSING = @as(c_long, 200809);
pub const _POSIX_THREAD_PROCESS_SHARED = @as(c_long, 200809);
pub const _POSIX_MONOTONIC_CLOCK = @as(c_int, 0);
pub const _POSIX_CLOCK_SELECTION = @as(c_long, 200809);
pub const _POSIX_ADVISORY_INFO = @as(c_long, 200809);
pub const _POSIX_IPV6 = @as(c_long, 200809);
pub const _POSIX_RAW_SOCKETS = @as(c_long, 200809);
pub const _POSIX2_CHAR_TERM = @as(c_long, 200809);
pub const _POSIX_SPORADIC_SERVER = -@as(c_int, 1);
pub const _POSIX_THREAD_SPORADIC_SERVER = -@as(c_int, 1);
pub const _POSIX_TRACE = -@as(c_int, 1);
pub const _POSIX_TRACE_EVENT_FILTER = -@as(c_int, 1);
pub const _POSIX_TRACE_INHERIT = -@as(c_int, 1);
pub const _POSIX_TRACE_LOG = -@as(c_int, 1);
pub const _POSIX_TYPED_MEMORY_OBJECTS = -@as(c_int, 1);
pub const _POSIX_V7_LPBIG_OFFBIG = -@as(c_int, 1);
pub const _POSIX_V6_LPBIG_OFFBIG = -@as(c_int, 1);
pub const _XBS5_LPBIG_OFFBIG = -@as(c_int, 1);
pub const _POSIX_V7_LP64_OFF64 = @as(c_int, 1);
pub const _POSIX_V6_LP64_OFF64 = @as(c_int, 1);
pub const _XBS5_LP64_OFF64 = @as(c_int, 1);
pub const __ILP32_OFF32_CFLAGS = "-m32";
pub const __ILP32_OFF32_LDFLAGS = "-m32";
pub const __ILP32_OFFBIG_CFLAGS = "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64";
pub const __ILP32_OFFBIG_LDFLAGS = "-m32";
pub const __LP64_OFF64_CFLAGS = "-m64";
pub const __LP64_OFF64_LDFLAGS = "-m64";
pub const STDIN_FILENO = @as(c_int, 0);
pub const STDOUT_FILENO = @as(c_int, 1);
pub const STDERR_FILENO = @as(c_int, 2);
pub const __useconds_t_defined = "";
pub const __socklen_t_defined = "";
pub const R_OK = @as(c_int, 4);
pub const W_OK = @as(c_int, 2);
pub const X_OK = @as(c_int, 1);
pub const F_OK = @as(c_int, 0);
pub const L_SET = SEEK_SET;
pub const L_INCR = SEEK_CUR;
pub const L_XTND = SEEK_END;
pub const _SC_PAGE_SIZE = _SC_PAGESIZE;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = _CS_V6_WIDTH_RESTRICTED_ENVS;
pub const _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = _CS_V5_WIDTH_RESTRICTED_ENVS;
pub const _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = _CS_V7_WIDTH_RESTRICTED_ENVS;
pub const _GETOPT_POSIX_H = @as(c_int, 1);
pub const _GETOPT_CORE_H = @as(c_int, 1);
pub const F_ULOCK = @as(c_int, 0);
pub const F_LOCK = @as(c_int, 1);
pub const F_TLOCK = @as(c_int, 2);
pub const F_TEST = @as(c_int, 3);
pub const __GLsync = struct___GLsync;
pub const _cl_context = struct__cl_context;
pub const _cl_event = struct__cl_event;
pub const __va_list_tag = struct___va_list_tag;
pub const _G_fpos_t = struct__G_fpos_t;
pub const _G_fpos64_t = struct__G_fpos64_t;
pub const _IO_marker = struct__IO_marker;
pub const _IO_codecvt = struct__IO_codecvt;
pub const _IO_wide_data = struct__IO_wide_data;
pub const _IO_FILE = struct__IO_FILE;
pub const timeval = struct_timeval;
pub const timespec = struct_timespec;
pub const __pthread_internal_list = struct___pthread_internal_list;
pub const __pthread_internal_slist = struct___pthread_internal_slist;
pub const __pthread_mutex_s = struct___pthread_mutex_s;
pub const __pthread_rwlock_arch_t = struct___pthread_rwlock_arch_t;
pub const __pthread_cond_s = struct___pthread_cond_s;
pub const random_data = struct_random_data;
pub const drand48_data = struct_drand48_data;
